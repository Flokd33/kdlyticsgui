shadow$provide.module$node_modules$$tanstack$table_core$build$lib$utils$getFacetedMinMaxValues=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});var utils=require("module$node_modules$$tanstack$table_core$build$lib$utils");exports.getFacetedMinMaxValues=function(){return(table,columnId)=>utils.memo(()=>{var _table$getColumn;return[null==(_table$getColumn=table.getColumn(columnId))?void 0:_table$getColumn.getFacetedRowModel()]},facetedRowModel=>{var _facetedRowModel$flat;
if(facetedRowModel){var firstValue=null==(_facetedRowModel$flat=facetedRowModel.flatRows[0])?void 0:_facetedRowModel$flat.getUniqueValues(columnId);if("undefined"!==typeof firstValue){_facetedRowModel$flat=[firstValue,firstValue];for(firstValue=0;firstValue<facetedRowModel.flatRows.length;firstValue++){const values=facetedRowModel.flatRows[firstValue].getUniqueValues(columnId);for(let j=0;j<values.length;j++){const value=values[j];value<_facetedRowModel$flat[0]?_facetedRowModel$flat[0]=value:value>
_facetedRowModel$flat[1]&&(_facetedRowModel$flat[1]=value)}}return _facetedRowModel$flat}}},{key:"getFacetedMinMaxValues_"+columnId,debug:()=>{var _table$options$debugA;return null!=(_table$options$debugA=table.options.debugAll)?_table$options$debugA:table.options.debugTable},onChange:()=>{}})}}
//# sourceMappingURL=module$node_modules$$tanstack$table_core$build$lib$utils$getFacetedMinMaxValues.js.map
