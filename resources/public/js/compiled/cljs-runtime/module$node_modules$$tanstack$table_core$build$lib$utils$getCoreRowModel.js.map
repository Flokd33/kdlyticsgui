{
"version":3,
"file":"module$node_modules$$tanstack$table_core$build$lib$utils$getCoreRowModel.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,CAAA,wEAAA,CAA6F,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAarIC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAAEG,MAAO,CAAA,CAAT,CAA7C,CAEA,KAAIC,IAAMN,OAAA,CAAQ,6DAAR,CAAV,CACIO,MAAQP,OAAA,CAAQ,0DAAR,CA2DZE,QAAQM,CAAAA,eAAR,CAzDAA,QAAwB,EAAG,CACzB,MAAOC,MAAA,EAASF,KAAMG,CAAAA,IAAN,CAAW,EAAA,EAAM,CAACD,KAAME,CAAAA,OAAQC,CAAAA,IAAf,CAAjB,CAAuCA,IAAA,EAAQ,CAC7D,MAAMC,SAAW,CACfC,KAAM,EADS,CAEfC,SAAU,EAFK,CAGfC,SAAU,EAHK,CAAjB,CAKMC,WAAaA,QAAS,CAACC,YAAD;AAAeC,KAAf,CAAsBC,SAAtB,CAAiC,CAC7C,IAAK,EAAnB,GAAID,KAAJ,GACEA,KADF,CACU,CADV,CAGA,OAAML,KAAO,EACb,KAAK,IAAIO,EAAI,CAAb,CAAgBA,CAAhB,CAAoBH,YAAaI,CAAAA,MAAjC,CAAyCD,CAAA,EAAzC,CAA8C,CAS5C,MAAME,MAAQjB,GAAIkB,CAAAA,SAAJ,CAAcf,KAAd,CAAqBA,KAAMgB,CAAAA,SAAN,CAAgBP,YAAA,CAAaG,CAAb,CAAhB,CAAiCA,CAAjC,CAAoCD,SAApC,CAArB,CAAqEF,YAAA,CAAaG,CAAb,CAArE,CAAsFA,CAAtF,CAAyFF,KAAzF,CAAgGO,IAAAA,EAAhG,CAAwH,IAAb,EAAAN,SAAA,CAAoB,IAAK,EAAzB,CAA6BA,SAAUO,CAAAA,EAAlJ,CAGdd,SAASE,CAAAA,QAASa,CAAAA,IAAlB,CAAuBL,KAAvB,CAEAV,SAASG,CAAAA,QAAT,CAAkBO,KAAMI,CAAAA,EAAxB,CAAA,CAA8BJ,KAE9BT,KAAKc,CAAAA,IAAL,CAAUL,KAAV,CAGA,IAAId,KAAME,CAAAA,OAAQkB,CAAAA,UAAlB,CAA8B,CAC5B,IAAIC,oBACJP,MAAMQ,CAAAA,eAAN,CAAwBtB,KAAME,CAAAA,OAAQkB,CAAAA,UAAd,CAAyBX,YAAA,CAAaG,CAAb,CAAzB,CAA0CA,CAA1C,CAG8B,KAAtD,GAAKS,oBAAL,CAA4BP,KAAMQ,CAAAA,eAAlC,GAA8DD,oBAAqBR,CAAAA,MAAnF;CACEC,KAAMS,CAAAA,OADR,CACkBf,UAAA,CAAWM,KAAMQ,CAAAA,eAAjB,CAAkCZ,KAAlC,CAA0C,CAA1C,CAA6CI,KAA7C,CADlB,CAL4B,CAnBc,CA6B9C,MAAOT,KAlCoD,CAoC7DD,SAASC,CAAAA,IAAT,CAAgBG,UAAA,CAAWL,IAAX,CAChB,OAAOC,SA3CsD,CAA/C,CA4Cb,CACDoB,IAA+C,aAD9C,CAEDC,MAAO,EAAAA,EAAM,CACX,IAAIC,qBACJ,OAA2D,KAApD,GAACA,qBAAD,CAAyB1B,KAAME,CAAAA,OAAQyB,CAAAA,QAAvC,EAA2DD,qBAA3D,CAAmF1B,KAAME,CAAAA,OAAQ0B,CAAAA,UAF7F,CAFZ,CAMDC,SAAU,EAAAA,EAAM,CACd7B,KAAM8B,CAAAA,mBAAN,EADc,CANf,CA5Ca,CADS,CAlB0G;",
"sources":["node_modules/@tanstack/table-core/build/lib/utils/getCoreRowModel.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$tanstack$table_core$build$lib$utils$getCoreRowModel\"] = function(global,require,module,exports) {\n/**\n * table-core\n *\n * Copyright (c) TanStack\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar row = require('../core/row.js');\nvar utils = require('../utils.js');\n\nfunction getCoreRowModel() {\n  return table => utils.memo(() => [table.options.data], data => {\n    const rowModel = {\n      rows: [],\n      flatRows: [],\n      rowsById: {}\n    };\n    const accessRows = function (originalRows, depth, parentRow) {\n      if (depth === void 0) {\n        depth = 0;\n      }\n      const rows = [];\n      for (let i = 0; i < originalRows.length; i++) {\n        // This could be an expensive check at scale, so we should move it somewhere else, but where?\n        // if (!id) {\n        //   if (process.env.NODE_ENV !== 'production') {\n        //     throw new Error(`getRowId expected an ID, but got ${id}`)\n        //   }\n        // }\n\n        // Make the row\n        const row$1 = row.createRow(table, table._getRowId(originalRows[i], i, parentRow), originalRows[i], i, depth, undefined, parentRow == null ? void 0 : parentRow.id);\n\n        // Keep track of every row in a flat array\n        rowModel.flatRows.push(row$1);\n        // Also keep track of every row by its ID\n        rowModel.rowsById[row$1.id] = row$1;\n        // Push table row into parent\n        rows.push(row$1);\n\n        // Get the original subrows\n        if (table.options.getSubRows) {\n          var _row$originalSubRows;\n          row$1.originalSubRows = table.options.getSubRows(originalRows[i], i);\n\n          // Then recursively access them\n          if ((_row$originalSubRows = row$1.originalSubRows) != null && _row$originalSubRows.length) {\n            row$1.subRows = accessRows(row$1.originalSubRows, depth + 1, row$1);\n          }\n        }\n      }\n      return rows;\n    };\n    rowModel.rows = accessRows(data);\n    return rowModel;\n  }, {\n    key: process.env.NODE_ENV === 'development' && 'getRowModel',\n    debug: () => {\n      var _table$options$debugA;\n      return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugTable;\n    },\n    onChange: () => {\n      table._autoResetPageIndex();\n    }\n  });\n}\n\nexports.getCoreRowModel = getCoreRowModel;\n//# sourceMappingURL=getCoreRowModel.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","row","utils","getCoreRowModel","table","memo","options","data","rowModel","rows","flatRows","rowsById","accessRows","originalRows","depth","parentRow","i","length","row$1","createRow","_getRowId","undefined","id","push","getSubRows","_row$originalSubRows","originalSubRows","subRows","key","debug","_table$options$debugA","debugAll","debugTable","onChange","_autoResetPageIndex"]
}
