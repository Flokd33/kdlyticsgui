{
"version":3,
"file":"module$node_modules$$tanstack$table_core$build$lib$features$Sorting.js",
"lineCount":11,
"mappings":"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",
"sources":["node_modules/@tanstack/table-core/build/lib/features/Sorting.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$tanstack$table_core$build$lib$features$Sorting\"] = function(global,require,module,exports) {\n/**\n * table-core\n *\n * Copyright (c) TanStack\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar sortingFns = require('../sortingFns.js');\nvar utils = require('../utils.js');\n\n//\n\nconst Sorting = {\n  getInitialState: state => {\n    return {\n      sorting: [],\n      ...state\n    };\n  },\n  getDefaultColumnDef: () => {\n    return {\n      sortingFn: 'auto'\n    };\n  },\n  getDefaultOptions: table => {\n    return {\n      onSortingChange: utils.makeStateUpdater('sorting', table),\n      isMultiSortEvent: e => {\n        return e.shiftKey;\n      }\n    };\n  },\n  createColumn: (column, table) => {\n    return {\n      getAutoSortingFn: () => {\n        const firstRows = table.getFilteredRowModel().flatRows.slice(10);\n        let isString = false;\n        for (const row of firstRows) {\n          const value = row == null ? void 0 : row.getValue(column.id);\n          if (Object.prototype.toString.call(value) === '[object Date]') {\n            return sortingFns.sortingFns.datetime;\n          }\n          if (typeof value === 'string') {\n            isString = true;\n            if (value.split(sortingFns.reSplitAlphaNumeric).length > 1) {\n              return sortingFns.sortingFns.alphanumeric;\n            }\n          }\n        }\n        if (isString) {\n          return sortingFns.sortingFns.text;\n        }\n        return sortingFns.sortingFns.basic;\n      },\n      getAutoSortDir: () => {\n        const firstRow = table.getFilteredRowModel().flatRows[0];\n        const value = firstRow == null ? void 0 : firstRow.getValue(column.id);\n        if (typeof value === 'string') {\n          return 'asc';\n        }\n        return 'desc';\n      },\n      getSortingFn: () => {\n        var _table$options$sortin, _table$options$sortin2;\n        if (!column) {\n          throw new Error();\n        }\n        return utils.isFunction(column.columnDef.sortingFn) ? column.columnDef.sortingFn : column.columnDef.sortingFn === 'auto' ? column.getAutoSortingFn() : (_table$options$sortin = (_table$options$sortin2 = table.options.sortingFns) == null ? void 0 : _table$options$sortin2[column.columnDef.sortingFn]) != null ? _table$options$sortin : sortingFns.sortingFns[column.columnDef.sortingFn];\n      },\n      toggleSorting: (desc, multi) => {\n        // if (column.columns.length) {\n        //   column.columns.forEach((c, i) => {\n        //     if (c.id) {\n        //       table.toggleColumnSorting(c.id, undefined, multi || !!i)\n        //     }\n        //   })\n        //   return\n        // }\n\n        // this needs to be outside of table.setSorting to be in sync with rerender\n        const nextSortingOrder = column.getNextSortingOrder();\n        const hasManualValue = typeof desc !== 'undefined' && desc !== null;\n        table.setSorting(old => {\n          // Find any existing sorting for this column\n          const existingSorting = old == null ? void 0 : old.find(d => d.id === column.id);\n          const existingIndex = old == null ? void 0 : old.findIndex(d => d.id === column.id);\n          let newSorting = [];\n\n          // What should we do with this sort action?\n          let sortAction;\n          let nextDesc = hasManualValue ? desc : nextSortingOrder === 'desc';\n\n          // Multi-mode\n          if (old != null && old.length && column.getCanMultiSort() && multi) {\n            if (existingSorting) {\n              sortAction = 'toggle';\n            } else {\n              sortAction = 'add';\n            }\n          } else {\n            // Normal mode\n            if (old != null && old.length && existingIndex !== old.length - 1) {\n              sortAction = 'replace';\n            } else if (existingSorting) {\n              sortAction = 'toggle';\n            } else {\n              sortAction = 'replace';\n            }\n          }\n\n          // Handle toggle states that will remove the sorting\n          if (sortAction === 'toggle') {\n            // If we are \"actually\" toggling (not a manual set value), should we remove the sorting?\n            if (!hasManualValue) {\n              // Is our intention to remove?\n              if (!nextSortingOrder) {\n                sortAction = 'remove';\n              }\n            }\n          }\n          if (sortAction === 'add') {\n            var _table$options$maxMul;\n            newSorting = [...old, {\n              id: column.id,\n              desc: nextDesc\n            }];\n            // Take latest n columns\n            newSorting.splice(0, newSorting.length - ((_table$options$maxMul = table.options.maxMultiSortColCount) != null ? _table$options$maxMul : Number.MAX_SAFE_INTEGER));\n          } else if (sortAction === 'toggle') {\n            // This flips (or sets) the\n            newSorting = old.map(d => {\n              if (d.id === column.id) {\n                return {\n                  ...d,\n                  desc: nextDesc\n                };\n              }\n              return d;\n            });\n          } else if (sortAction === 'remove') {\n            newSorting = old.filter(d => d.id !== column.id);\n          } else {\n            newSorting = [{\n              id: column.id,\n              desc: nextDesc\n            }];\n          }\n          return newSorting;\n        });\n      },\n      getFirstSortDir: () => {\n        var _ref, _column$columnDef$sor;\n        const sortDescFirst = (_ref = (_column$columnDef$sor = column.columnDef.sortDescFirst) != null ? _column$columnDef$sor : table.options.sortDescFirst) != null ? _ref : column.getAutoSortDir() === 'desc';\n        return sortDescFirst ? 'desc' : 'asc';\n      },\n      getNextSortingOrder: multi => {\n        var _table$options$enable, _table$options$enable2;\n        const firstSortDirection = column.getFirstSortDir();\n        const isSorted = column.getIsSorted();\n        if (!isSorted) {\n          return firstSortDirection;\n        }\n        if (isSorted !== firstSortDirection && ((_table$options$enable = table.options.enableSortingRemoval) != null ? _table$options$enable : true) && (\n        // If enableSortRemove, enable in general\n        multi ? (_table$options$enable2 = table.options.enableMultiRemove) != null ? _table$options$enable2 : true : true) // If multi, don't allow if enableMultiRemove))\n        ) {\n          return false;\n        }\n        return isSorted === 'desc' ? 'asc' : 'desc';\n      },\n      getCanSort: () => {\n        var _column$columnDef$ena, _table$options$enable3;\n        return ((_column$columnDef$ena = column.columnDef.enableSorting) != null ? _column$columnDef$ena : true) && ((_table$options$enable3 = table.options.enableSorting) != null ? _table$options$enable3 : true) && !!column.accessorFn;\n      },\n      getCanMultiSort: () => {\n        var _ref2, _column$columnDef$ena2;\n        return (_ref2 = (_column$columnDef$ena2 = column.columnDef.enableMultiSort) != null ? _column$columnDef$ena2 : table.options.enableMultiSort) != null ? _ref2 : !!column.accessorFn;\n      },\n      getIsSorted: () => {\n        var _table$getState$sorti;\n        const columnSort = (_table$getState$sorti = table.getState().sorting) == null ? void 0 : _table$getState$sorti.find(d => d.id === column.id);\n        return !columnSort ? false : columnSort.desc ? 'desc' : 'asc';\n      },\n      getSortIndex: () => {\n        var _table$getState$sorti2, _table$getState$sorti3;\n        return (_table$getState$sorti2 = (_table$getState$sorti3 = table.getState().sorting) == null ? void 0 : _table$getState$sorti3.findIndex(d => d.id === column.id)) != null ? _table$getState$sorti2 : -1;\n      },\n      clearSorting: () => {\n        //clear sorting for just 1 column\n        table.setSorting(old => old != null && old.length ? old.filter(d => d.id !== column.id) : []);\n      },\n      getToggleSortingHandler: () => {\n        const canSort = column.getCanSort();\n        return e => {\n          if (!canSort) return;\n          e.persist == null ? void 0 : e.persist();\n          column.toggleSorting == null ? void 0 : column.toggleSorting(undefined, column.getCanMultiSort() ? table.options.isMultiSortEvent == null ? void 0 : table.options.isMultiSortEvent(e) : false);\n        };\n      }\n    };\n  },\n  createTable: table => {\n    return {\n      setSorting: updater => table.options.onSortingChange == null ? void 0 : table.options.onSortingChange(updater),\n      resetSorting: defaultState => {\n        var _table$initialState$s, _table$initialState;\n        table.setSorting(defaultState ? [] : (_table$initialState$s = (_table$initialState = table.initialState) == null ? void 0 : _table$initialState.sorting) != null ? _table$initialState$s : []);\n      },\n      getPreSortedRowModel: () => table.getGroupedRowModel(),\n      getSortedRowModel: () => {\n        if (!table._getSortedRowModel && table.options.getSortedRowModel) {\n          table._getSortedRowModel = table.options.getSortedRowModel(table);\n        }\n        if (table.options.manualSorting || !table._getSortedRowModel) {\n          return table.getPreSortedRowModel();\n        }\n        return table._getSortedRowModel();\n      }\n    };\n  }\n};\n\nexports.Sorting = Sorting;\n//# sourceMappingURL=Sorting.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","sortingFns","utils","Sorting","getInitialState","state","sorting","getDefaultColumnDef","sortingFn","getDefaultOptions","table","onSortingChange","makeStateUpdater","isMultiSortEvent","e","shiftKey","createColumn","column","getAutoSortingFn","firstRows","getFilteredRowModel","flatRows","slice","isString","row","getValue","id","prototype","toString","call","datetime","split","reSplitAlphaNumeric","length","alphanumeric","text","basic","getAutoSortDir","firstRow","getSortingFn","_table$options$sortin","_table$options$sortin2","Error","isFunction","columnDef","options","toggleSorting","desc","multi","nextSortingOrder","getNextSortingOrder","hasManualValue","setSorting","old","existingSorting","find","d","existingIndex","findIndex","newSorting","nextDesc","sortAction","getCanMultiSort","_table$options$maxMul","splice","maxMultiSortColCount","Number","MAX_SAFE_INTEGER","map","filter","getFirstSortDir","_ref","_column$columnDef$sor","sortDescFirst","_table$options$enable","_table$options$enable2","firstSortDirection","isSorted","getIsSorted","enableSortingRemoval","enableMultiRemove","getCanSort","_column$columnDef$ena","_table$options$enable3","enableSorting","accessorFn","_ref2","_column$columnDef$ena2","enableMultiSort","_table$getState$sorti","columnSort","getState","getSortIndex","_table$getState$sorti2","_table$getState$sorti3","clearSorting","getToggleSortingHandler","canSort","persist","undefined","createTable","updater","resetSorting","defaultState","_table$initialState$s","_table$initialState","initialState","getPreSortedRowModel","getGroupedRowModel","getSortedRowModel","_getSortedRowModel","manualSorting"]
}
