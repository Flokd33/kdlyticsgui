{
"version":3,
"file":"module$node_modules$$mui$base$node$unstable_useNumberInput$utils.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAA,gEAAA,CAAqF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAQ7HC,QAASA,YAAW,CAACC,GAAD,CAAMC,GAAA,CAAMC,MAAOC,CAAAA,gBAAnB,CAAqCC,GAAA,CAAMF,MAAOG,CAAAA,gBAAlD,CAAoE,CACtF,MAAOC,KAAKF,CAAAA,GAAL,CAASH,GAAT,CAAcK,IAAKL,CAAAA,GAAL,CAASD,GAAT,CAAcI,GAAd,CAAd,CAD+E,CALxFG,MAAOC,CAAAA,cAAP,CAAsBV,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CW,MAAO,CAAA,CADoC,CAA7C,CAGAX,QAAQY,CAAAA,KAAR,CAKAA,QAAc,CAACV,GAAD,CAAMC,GAAA,CAAMC,MAAOC,CAAAA,gBAAnB,CAAqCC,GAAA,CAAMF,MAAOG,CAAAA,gBAAlD,CAAoEM,QAAA,CAAWC,GAA/E,CAAoF,CAChG,GAAIV,MAAOW,CAAAA,KAAP,CAAaF,QAAb,CAAJ,CACE,MAAOZ,YAAA,CAAYC,GAAZ,CAAiBC,GAAjB,CAAsBG,GAAtB,CAEHU,SAAAA,CAAOH,QAAPG,EAAmB,CACzB,OAAMC,UAAYf,GAAZe,CAAkBD,QAAxB;AACME,WAAaV,IAAKW,CAAAA,IAAL,CAAUF,SAAV,CACnB,OAAIT,KAAKY,CAAAA,GAAL,CAASH,SAAT,CAAJ,CAA0BD,QAA1B,CAAiC,CAAjC,CACSf,WAAA,CAAYC,GAAZ,CAAkBgB,UAAlB,EAAgCF,QAAhC,CAAuCR,IAAKY,CAAAA,GAAL,CAASH,SAAT,CAAvC,EAA6Dd,GAA7D,CAAkEG,GAAlE,CADT,CAGOL,WAAA,CAAYC,GAAZ,CAAkBgB,UAAlB,CAA+BV,IAAKY,CAAAA,GAAL,CAASH,SAAT,CAA/B,CAAoDd,GAApD,CAAyDG,GAAzD,CAVyF,CAJlGN,QAAQqB,CAAAA,QAAR,CAgBAA,QAAiB,CAACnB,GAAD,CAAM,CACrB,MAAsB,QAAtB,GAAO,MAAOA,IAAd,EAAkC,CAACE,MAAOW,CAAAA,KAAP,CAAab,GAAb,CAAnC,EAAwDE,MAAOkB,CAAAA,QAAP,CAAgBpB,GAAhB,CADnC,CAvBsG;",
"sources":["node_modules/@mui/base/node/unstable_useNumberInput/utils.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$mui$base$node$unstable_useNumberInput$utils\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.clamp = clamp;\nexports.isNumber = isNumber;\nfunction simpleClamp(val, min = Number.MIN_SAFE_INTEGER, max = Number.MAX_SAFE_INTEGER) {\n  return Math.max(min, Math.min(val, max));\n}\nfunction clamp(val, min = Number.MIN_SAFE_INTEGER, max = Number.MAX_SAFE_INTEGER, stepProp = NaN) {\n  if (Number.isNaN(stepProp)) {\n    return simpleClamp(val, min, max);\n  }\n  const step = stepProp || 1;\n  const remainder = val % step;\n  const positivity = Math.sign(remainder);\n  if (Math.abs(remainder) > step / 2) {\n    return simpleClamp(val + positivity * (step - Math.abs(remainder)), min, max);\n  }\n  return simpleClamp(val - positivity * Math.abs(remainder), min, max);\n}\nfunction isNumber(val) {\n  return typeof val === 'number' && !Number.isNaN(val) && Number.isFinite(val);\n}\n};"],
"names":["shadow$provide","global","require","module","exports","simpleClamp","val","min","Number","MIN_SAFE_INTEGER","max","MAX_SAFE_INTEGER","Math","Object","defineProperty","value","clamp","stepProp","NaN","isNaN","step","remainder","positivity","sign","abs","isNumber","isFinite"]
}
