{
"version":3,
"file":"module$node_modules$vega_hierarchy$build$vega_hierarchy.js",
"lineCount":60,
"mappings":"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",
"sources":["node_modules/vega-hierarchy/build/vega-hierarchy.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$vega_hierarchy$build$vega_hierarchy\"] = function(global,require,module,exports) {\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('vega-dataflow'), require('vega-util')) :\n  typeof define === 'function' && define.amd ? define(['exports', 'vega-dataflow', 'vega-util'], factory) :\n  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.vega = {}, global.vega, global.vega));\n})(this, (function (exports, vegaDataflow, vegaUtil) { 'use strict';\n\n  // Build lookup table mapping tuple keys to tree node instances\n  function lookup (tree, key, filter) {\n    const map = {};\n    tree.each(node => {\n      const t = node.data;\n      if (filter(t)) map[key(t)] = node;\n    });\n    tree.lookup = map;\n    return tree;\n  }\n\n  function defaultSeparation$2(a, b) {\n    return a.parent === b.parent ? 1 : 2;\n  }\n  function meanX(children) {\n    return children.reduce(meanXReduce, 0) / children.length;\n  }\n  function meanXReduce(x, c) {\n    return x + c.x;\n  }\n  function maxY(children) {\n    return 1 + children.reduce(maxYReduce, 0);\n  }\n  function maxYReduce(y, c) {\n    return Math.max(y, c.y);\n  }\n  function leafLeft(node) {\n    var children;\n    while (children = node.children) node = children[0];\n    return node;\n  }\n  function leafRight(node) {\n    var children;\n    while (children = node.children) node = children[children.length - 1];\n    return node;\n  }\n  function cluster () {\n    var separation = defaultSeparation$2,\n      dx = 1,\n      dy = 1,\n      nodeSize = false;\n    function cluster(root) {\n      var previousNode,\n        x = 0;\n\n      // First walk, computing the initial x & y values.\n      root.eachAfter(function (node) {\n        var children = node.children;\n        if (children) {\n          node.x = meanX(children);\n          node.y = maxY(children);\n        } else {\n          node.x = previousNode ? x += separation(node, previousNode) : 0;\n          node.y = 0;\n          previousNode = node;\n        }\n      });\n      var left = leafLeft(root),\n        right = leafRight(root),\n        x0 = left.x - separation(left, right) / 2,\n        x1 = right.x + separation(right, left) / 2;\n\n      // Second walk, normalizing x & y to the desired size.\n      return root.eachAfter(nodeSize ? function (node) {\n        node.x = (node.x - root.x) * dx;\n        node.y = (root.y - node.y) * dy;\n      } : function (node) {\n        node.x = (node.x - x0) / (x1 - x0) * dx;\n        node.y = (1 - (root.y ? node.y / root.y : 1)) * dy;\n      });\n    }\n    cluster.separation = function (x) {\n      return arguments.length ? (separation = x, cluster) : separation;\n    };\n    cluster.size = function (x) {\n      return arguments.length ? (nodeSize = false, dx = +x[0], dy = +x[1], cluster) : nodeSize ? null : [dx, dy];\n    };\n    cluster.nodeSize = function (x) {\n      return arguments.length ? (nodeSize = true, dx = +x[0], dy = +x[1], cluster) : nodeSize ? [dx, dy] : null;\n    };\n    return cluster;\n  }\n\n  function count(node) {\n    var sum = 0,\n      children = node.children,\n      i = children && children.length;\n    if (!i) sum = 1;else while (--i >= 0) sum += children[i].value;\n    node.value = sum;\n  }\n  function node_count () {\n    return this.eachAfter(count);\n  }\n\n  function node_each (callback, that) {\n    let index = -1;\n    for (const node of this) {\n      callback.call(that, node, ++index, this);\n    }\n    return this;\n  }\n\n  function node_eachBefore (callback, that) {\n    var node = this,\n      nodes = [node],\n      children,\n      i,\n      index = -1;\n    while (node = nodes.pop()) {\n      callback.call(that, node, ++index, this);\n      if (children = node.children) {\n        for (i = children.length - 1; i >= 0; --i) {\n          nodes.push(children[i]);\n        }\n      }\n    }\n    return this;\n  }\n\n  function node_eachAfter (callback, that) {\n    var node = this,\n      nodes = [node],\n      next = [],\n      children,\n      i,\n      n,\n      index = -1;\n    while (node = nodes.pop()) {\n      next.push(node);\n      if (children = node.children) {\n        for (i = 0, n = children.length; i < n; ++i) {\n          nodes.push(children[i]);\n        }\n      }\n    }\n    while (node = next.pop()) {\n      callback.call(that, node, ++index, this);\n    }\n    return this;\n  }\n\n  function node_find (callback, that) {\n    let index = -1;\n    for (const node of this) {\n      if (callback.call(that, node, ++index, this)) {\n        return node;\n      }\n    }\n  }\n\n  function node_sum (value) {\n    return this.eachAfter(function (node) {\n      var sum = +value(node.data) || 0,\n        children = node.children,\n        i = children && children.length;\n      while (--i >= 0) sum += children[i].value;\n      node.value = sum;\n    });\n  }\n\n  function node_sort (compare) {\n    return this.eachBefore(function (node) {\n      if (node.children) {\n        node.children.sort(compare);\n      }\n    });\n  }\n\n  function node_path (end) {\n    var start = this,\n      ancestor = leastCommonAncestor(start, end),\n      nodes = [start];\n    while (start !== ancestor) {\n      start = start.parent;\n      nodes.push(start);\n    }\n    var k = nodes.length;\n    while (end !== ancestor) {\n      nodes.splice(k, 0, end);\n      end = end.parent;\n    }\n    return nodes;\n  }\n  function leastCommonAncestor(a, b) {\n    if (a === b) return a;\n    var aNodes = a.ancestors(),\n      bNodes = b.ancestors(),\n      c = null;\n    a = aNodes.pop();\n    b = bNodes.pop();\n    while (a === b) {\n      c = a;\n      a = aNodes.pop();\n      b = bNodes.pop();\n    }\n    return c;\n  }\n\n  function node_ancestors () {\n    var node = this,\n      nodes = [node];\n    while (node = node.parent) {\n      nodes.push(node);\n    }\n    return nodes;\n  }\n\n  function node_descendants () {\n    return Array.from(this);\n  }\n\n  function node_leaves () {\n    var leaves = [];\n    this.eachBefore(function (node) {\n      if (!node.children) {\n        leaves.push(node);\n      }\n    });\n    return leaves;\n  }\n\n  function node_links () {\n    var root = this,\n      links = [];\n    root.each(function (node) {\n      if (node !== root) {\n        // Don\u2019t include the root\u2019s parent, if any.\n        links.push({\n          source: node.parent,\n          target: node\n        });\n      }\n    });\n    return links;\n  }\n\n  function* node_iterator () {\n    var node = this,\n      current,\n      next = [node],\n      children,\n      i,\n      n;\n    do {\n      current = next.reverse(), next = [];\n      while (node = current.pop()) {\n        yield node;\n        if (children = node.children) {\n          for (i = 0, n = children.length; i < n; ++i) {\n            next.push(children[i]);\n          }\n        }\n      }\n    } while (next.length);\n  }\n\n  function hierarchy(data, children) {\n    if (data instanceof Map) {\n      data = [undefined, data];\n      if (children === undefined) children = mapChildren;\n    } else if (children === undefined) {\n      children = objectChildren;\n    }\n    var root = new Node$1(data),\n      node,\n      nodes = [root],\n      child,\n      childs,\n      i,\n      n;\n    while (node = nodes.pop()) {\n      if ((childs = children(node.data)) && (n = (childs = Array.from(childs)).length)) {\n        node.children = childs;\n        for (i = n - 1; i >= 0; --i) {\n          nodes.push(child = childs[i] = new Node$1(childs[i]));\n          child.parent = node;\n          child.depth = node.depth + 1;\n        }\n      }\n    }\n    return root.eachBefore(computeHeight);\n  }\n  function node_copy() {\n    return hierarchy(this).eachBefore(copyData);\n  }\n  function objectChildren(d) {\n    return d.children;\n  }\n  function mapChildren(d) {\n    return Array.isArray(d) ? d[1] : null;\n  }\n  function copyData(node) {\n    if (node.data.value !== undefined) node.value = node.data.value;\n    node.data = node.data.data;\n  }\n  function computeHeight(node) {\n    var height = 0;\n    do node.height = height; while ((node = node.parent) && node.height < ++height);\n  }\n  function Node$1(data) {\n    this.data = data;\n    this.depth = this.height = 0;\n    this.parent = null;\n  }\n  Node$1.prototype = hierarchy.prototype = {\n    constructor: Node$1,\n    count: node_count,\n    each: node_each,\n    eachAfter: node_eachAfter,\n    eachBefore: node_eachBefore,\n    find: node_find,\n    sum: node_sum,\n    sort: node_sort,\n    path: node_path,\n    ancestors: node_ancestors,\n    descendants: node_descendants,\n    leaves: node_leaves,\n    links: node_links,\n    copy: node_copy,\n    [Symbol.iterator]: node_iterator\n  };\n\n  function optional(f) {\n    return f == null ? null : required(f);\n  }\n  function required(f) {\n    if (typeof f !== \"function\") throw new Error();\n    return f;\n  }\n\n  function constantZero() {\n    return 0;\n  }\n  function constant (x) {\n    return function () {\n      return x;\n    };\n  }\n\n  // https://en.wikipedia.org/wiki/Linear_congruential_generator#Parameters_in_common_use\n  const a = 1664525;\n  const c = 1013904223;\n  const m = 4294967296; // 2^32\n\n  function lcg () {\n    let s = 1;\n    return () => (s = (a * s + c) % m) / m;\n  }\n\n  function array (x) {\n    return typeof x === \"object\" && \"length\" in x ? x // Array, TypedArray, NodeList, array-like\n    : Array.from(x); // Map, Set, iterable, string, or anything else\n  }\n\n  function shuffle(array, random) {\n    let m = array.length,\n      t,\n      i;\n    while (m) {\n      i = random() * m-- | 0;\n      t = array[m];\n      array[m] = array[i];\n      array[i] = t;\n    }\n    return array;\n  }\n\n  function packEncloseRandom(circles, random) {\n    var i = 0,\n      n = (circles = shuffle(Array.from(circles), random)).length,\n      B = [],\n      p,\n      e;\n    while (i < n) {\n      p = circles[i];\n      if (e && enclosesWeak(e, p)) ++i;else e = encloseBasis(B = extendBasis(B, p)), i = 0;\n    }\n    return e;\n  }\n  function extendBasis(B, p) {\n    var i, j;\n    if (enclosesWeakAll(p, B)) return [p];\n\n    // If we get here then B must have at least one element.\n    for (i = 0; i < B.length; ++i) {\n      if (enclosesNot(p, B[i]) && enclosesWeakAll(encloseBasis2(B[i], p), B)) {\n        return [B[i], p];\n      }\n    }\n\n    // If we get here then B must have at least two elements.\n    for (i = 0; i < B.length - 1; ++i) {\n      for (j = i + 1; j < B.length; ++j) {\n        if (enclosesNot(encloseBasis2(B[i], B[j]), p) && enclosesNot(encloseBasis2(B[i], p), B[j]) && enclosesNot(encloseBasis2(B[j], p), B[i]) && enclosesWeakAll(encloseBasis3(B[i], B[j], p), B)) {\n          return [B[i], B[j], p];\n        }\n      }\n    }\n\n    // If we get here then something is very wrong.\n    throw new Error();\n  }\n  function enclosesNot(a, b) {\n    var dr = a.r - b.r,\n      dx = b.x - a.x,\n      dy = b.y - a.y;\n    return dr < 0 || dr * dr < dx * dx + dy * dy;\n  }\n  function enclosesWeak(a, b) {\n    var dr = a.r - b.r + Math.max(a.r, b.r, 1) * 1e-9,\n      dx = b.x - a.x,\n      dy = b.y - a.y;\n    return dr > 0 && dr * dr > dx * dx + dy * dy;\n  }\n  function enclosesWeakAll(a, B) {\n    for (var i = 0; i < B.length; ++i) {\n      if (!enclosesWeak(a, B[i])) {\n        return false;\n      }\n    }\n    return true;\n  }\n  function encloseBasis(B) {\n    switch (B.length) {\n      case 1:\n        return encloseBasis1(B[0]);\n      case 2:\n        return encloseBasis2(B[0], B[1]);\n      case 3:\n        return encloseBasis3(B[0], B[1], B[2]);\n    }\n  }\n  function encloseBasis1(a) {\n    return {\n      x: a.x,\n      y: a.y,\n      r: a.r\n    };\n  }\n  function encloseBasis2(a, b) {\n    var x1 = a.x,\n      y1 = a.y,\n      r1 = a.r,\n      x2 = b.x,\n      y2 = b.y,\n      r2 = b.r,\n      x21 = x2 - x1,\n      y21 = y2 - y1,\n      r21 = r2 - r1,\n      l = Math.sqrt(x21 * x21 + y21 * y21);\n    return {\n      x: (x1 + x2 + x21 / l * r21) / 2,\n      y: (y1 + y2 + y21 / l * r21) / 2,\n      r: (l + r1 + r2) / 2\n    };\n  }\n  function encloseBasis3(a, b, c) {\n    var x1 = a.x,\n      y1 = a.y,\n      r1 = a.r,\n      x2 = b.x,\n      y2 = b.y,\n      r2 = b.r,\n      x3 = c.x,\n      y3 = c.y,\n      r3 = c.r,\n      a2 = x1 - x2,\n      a3 = x1 - x3,\n      b2 = y1 - y2,\n      b3 = y1 - y3,\n      c2 = r2 - r1,\n      c3 = r3 - r1,\n      d1 = x1 * x1 + y1 * y1 - r1 * r1,\n      d2 = d1 - x2 * x2 - y2 * y2 + r2 * r2,\n      d3 = d1 - x3 * x3 - y3 * y3 + r3 * r3,\n      ab = a3 * b2 - a2 * b3,\n      xa = (b2 * d3 - b3 * d2) / (ab * 2) - x1,\n      xb = (b3 * c2 - b2 * c3) / ab,\n      ya = (a3 * d2 - a2 * d3) / (ab * 2) - y1,\n      yb = (a2 * c3 - a3 * c2) / ab,\n      A = xb * xb + yb * yb - 1,\n      B = 2 * (r1 + xa * xb + ya * yb),\n      C = xa * xa + ya * ya - r1 * r1,\n      r = -(Math.abs(A) > 1e-6 ? (B + Math.sqrt(B * B - 4 * A * C)) / (2 * A) : C / B);\n    return {\n      x: x1 + xa + xb * r,\n      y: y1 + ya + yb * r,\n      r: r\n    };\n  }\n\n  function place(b, a, c) {\n    var dx = b.x - a.x,\n      x,\n      a2,\n      dy = b.y - a.y,\n      y,\n      b2,\n      d2 = dx * dx + dy * dy;\n    if (d2) {\n      a2 = a.r + c.r, a2 *= a2;\n      b2 = b.r + c.r, b2 *= b2;\n      if (a2 > b2) {\n        x = (d2 + b2 - a2) / (2 * d2);\n        y = Math.sqrt(Math.max(0, b2 / d2 - x * x));\n        c.x = b.x - x * dx - y * dy;\n        c.y = b.y - x * dy + y * dx;\n      } else {\n        x = (d2 + a2 - b2) / (2 * d2);\n        y = Math.sqrt(Math.max(0, a2 / d2 - x * x));\n        c.x = a.x + x * dx - y * dy;\n        c.y = a.y + x * dy + y * dx;\n      }\n    } else {\n      c.x = a.x + c.r;\n      c.y = a.y;\n    }\n  }\n  function intersects(a, b) {\n    var dr = a.r + b.r - 1e-6,\n      dx = b.x - a.x,\n      dy = b.y - a.y;\n    return dr > 0 && dr * dr > dx * dx + dy * dy;\n  }\n  function score(node) {\n    var a = node._,\n      b = node.next._,\n      ab = a.r + b.r,\n      dx = (a.x * b.r + b.x * a.r) / ab,\n      dy = (a.y * b.r + b.y * a.r) / ab;\n    return dx * dx + dy * dy;\n  }\n  function Node(circle) {\n    this._ = circle;\n    this.next = null;\n    this.previous = null;\n  }\n  function packSiblingsRandom(circles, random) {\n    if (!(n = (circles = array(circles)).length)) return 0;\n    var a, b, c, n, aa, ca, i, j, k, sj, sk;\n\n    // Place the first circle.\n    a = circles[0], a.x = 0, a.y = 0;\n    if (!(n > 1)) return a.r;\n\n    // Place the second circle.\n    b = circles[1], a.x = -b.r, b.x = a.r, b.y = 0;\n    if (!(n > 2)) return a.r + b.r;\n\n    // Place the third circle.\n    place(b, a, c = circles[2]);\n\n    // Initialize the front-chain using the first three circles a, b and c.\n    a = new Node(a), b = new Node(b), c = new Node(c);\n    a.next = c.previous = b;\n    b.next = a.previous = c;\n    c.next = b.previous = a;\n\n    // Attempt to place each remaining circle\u2026\n    pack: for (i = 3; i < n; ++i) {\n      place(a._, b._, c = circles[i]), c = new Node(c);\n\n      // Find the closest intersecting circle on the front-chain, if any.\n      // \u201cCloseness\u201d is determined by linear distance along the front-chain.\n      // \u201cAhead\u201d or \u201cbehind\u201d is likewise determined by linear distance.\n      j = b.next, k = a.previous, sj = b._.r, sk = a._.r;\n      do {\n        if (sj <= sk) {\n          if (intersects(j._, c._)) {\n            b = j, a.next = b, b.previous = a, --i;\n            continue pack;\n          }\n          sj += j._.r, j = j.next;\n        } else {\n          if (intersects(k._, c._)) {\n            a = k, a.next = b, b.previous = a, --i;\n            continue pack;\n          }\n          sk += k._.r, k = k.previous;\n        }\n      } while (j !== k.next);\n\n      // Success! Insert the new circle c between a and b.\n      c.previous = a, c.next = b, a.next = b.previous = b = c;\n\n      // Compute the new closest circle pair to the centroid.\n      aa = score(a);\n      while ((c = c.next) !== b) {\n        if ((ca = score(c)) < aa) {\n          a = c, aa = ca;\n        }\n      }\n      b = a.next;\n    }\n\n    // Compute the enclosing circle of the front chain.\n    a = [b._], c = b;\n    while ((c = c.next) !== b) a.push(c._);\n    c = packEncloseRandom(a, random);\n\n    // Translate the circles to put the enclosing circle around the origin.\n    for (i = 0; i < n; ++i) a = circles[i], a.x -= c.x, a.y -= c.y;\n    return c.r;\n  }\n\n  function defaultRadius(d) {\n    return Math.sqrt(d.value);\n  }\n  function pack () {\n    var radius = null,\n      dx = 1,\n      dy = 1,\n      padding = constantZero;\n    function pack(root) {\n      const random = lcg();\n      root.x = dx / 2, root.y = dy / 2;\n      if (radius) {\n        root.eachBefore(radiusLeaf(radius)).eachAfter(packChildrenRandom(padding, 0.5, random)).eachBefore(translateChild(1));\n      } else {\n        root.eachBefore(radiusLeaf(defaultRadius)).eachAfter(packChildrenRandom(constantZero, 1, random)).eachAfter(packChildrenRandom(padding, root.r / Math.min(dx, dy), random)).eachBefore(translateChild(Math.min(dx, dy) / (2 * root.r)));\n      }\n      return root;\n    }\n    pack.radius = function (x) {\n      return arguments.length ? (radius = optional(x), pack) : radius;\n    };\n    pack.size = function (x) {\n      return arguments.length ? (dx = +x[0], dy = +x[1], pack) : [dx, dy];\n    };\n    pack.padding = function (x) {\n      return arguments.length ? (padding = typeof x === \"function\" ? x : constant(+x), pack) : padding;\n    };\n    return pack;\n  }\n  function radiusLeaf(radius) {\n    return function (node) {\n      if (!node.children) {\n        node.r = Math.max(0, +radius(node) || 0);\n      }\n    };\n  }\n  function packChildrenRandom(padding, k, random) {\n    return function (node) {\n      if (children = node.children) {\n        var children,\n          i,\n          n = children.length,\n          r = padding(node) * k || 0,\n          e;\n        if (r) for (i = 0; i < n; ++i) children[i].r += r;\n        e = packSiblingsRandom(children, random);\n        if (r) for (i = 0; i < n; ++i) children[i].r -= r;\n        node.r = e + r;\n      }\n    };\n  }\n  function translateChild(k) {\n    return function (node) {\n      var parent = node.parent;\n      node.r *= k;\n      if (parent) {\n        node.x = parent.x + k * node.x;\n        node.y = parent.y + k * node.y;\n      }\n    };\n  }\n\n  function roundNode (node) {\n    node.x0 = Math.round(node.x0);\n    node.y0 = Math.round(node.y0);\n    node.x1 = Math.round(node.x1);\n    node.y1 = Math.round(node.y1);\n  }\n\n  function treemapDice (parent, x0, y0, x1, y1) {\n    var nodes = parent.children,\n      node,\n      i = -1,\n      n = nodes.length,\n      k = parent.value && (x1 - x0) / parent.value;\n    while (++i < n) {\n      node = nodes[i], node.y0 = y0, node.y1 = y1;\n      node.x0 = x0, node.x1 = x0 += node.value * k;\n    }\n  }\n\n  function partition () {\n    var dx = 1,\n      dy = 1,\n      padding = 0,\n      round = false;\n    function partition(root) {\n      var n = root.height + 1;\n      root.x0 = root.y0 = padding;\n      root.x1 = dx;\n      root.y1 = dy / n;\n      root.eachBefore(positionNode(dy, n));\n      if (round) root.eachBefore(roundNode);\n      return root;\n    }\n    function positionNode(dy, n) {\n      return function (node) {\n        if (node.children) {\n          treemapDice(node, node.x0, dy * (node.depth + 1) / n, node.x1, dy * (node.depth + 2) / n);\n        }\n        var x0 = node.x0,\n          y0 = node.y0,\n          x1 = node.x1 - padding,\n          y1 = node.y1 - padding;\n        if (x1 < x0) x0 = x1 = (x0 + x1) / 2;\n        if (y1 < y0) y0 = y1 = (y0 + y1) / 2;\n        node.x0 = x0;\n        node.y0 = y0;\n        node.x1 = x1;\n        node.y1 = y1;\n      };\n    }\n    partition.round = function (x) {\n      return arguments.length ? (round = !!x, partition) : round;\n    };\n    partition.size = function (x) {\n      return arguments.length ? (dx = +x[0], dy = +x[1], partition) : [dx, dy];\n    };\n    partition.padding = function (x) {\n      return arguments.length ? (padding = +x, partition) : padding;\n    };\n    return partition;\n  }\n\n  var preroot = {\n      depth: -1\n    },\n    ambiguous = {},\n    imputed = {};\n  function defaultId(d) {\n    return d.id;\n  }\n  function defaultParentId(d) {\n    return d.parentId;\n  }\n  function stratify () {\n    var id = defaultId,\n      parentId = defaultParentId,\n      path;\n    function stratify(data) {\n      var nodes = Array.from(data),\n        currentId = id,\n        currentParentId = parentId,\n        n,\n        d,\n        i,\n        root,\n        parent,\n        node,\n        nodeId,\n        nodeKey,\n        nodeByKey = new Map();\n      if (path != null) {\n        const I = nodes.map((d, i) => normalize(path(d, i, data)));\n        const P = I.map(parentof);\n        const S = new Set(I).add(\"\");\n        for (const i of P) {\n          if (!S.has(i)) {\n            S.add(i);\n            I.push(i);\n            P.push(parentof(i));\n            nodes.push(imputed);\n          }\n        }\n        currentId = (_, i) => I[i];\n        currentParentId = (_, i) => P[i];\n      }\n      for (i = 0, n = nodes.length; i < n; ++i) {\n        d = nodes[i], node = nodes[i] = new Node$1(d);\n        if ((nodeId = currentId(d, i, data)) != null && (nodeId += \"\")) {\n          nodeKey = node.id = nodeId;\n          nodeByKey.set(nodeKey, nodeByKey.has(nodeKey) ? ambiguous : node);\n        }\n        if ((nodeId = currentParentId(d, i, data)) != null && (nodeId += \"\")) {\n          node.parent = nodeId;\n        }\n      }\n      for (i = 0; i < n; ++i) {\n        node = nodes[i];\n        if (nodeId = node.parent) {\n          parent = nodeByKey.get(nodeId);\n          if (!parent) throw new Error(\"missing: \" + nodeId);\n          if (parent === ambiguous) throw new Error(\"ambiguous: \" + nodeId);\n          if (parent.children) parent.children.push(node);else parent.children = [node];\n          node.parent = parent;\n        } else {\n          if (root) throw new Error(\"multiple roots\");\n          root = node;\n        }\n      }\n      if (!root) throw new Error(\"no root\");\n\n      // When imputing internal nodes, only introduce roots if needed.\n      // Then replace the imputed marker data with null.\n      if (path != null) {\n        while (root.data === imputed && root.children.length === 1) {\n          root = root.children[0], --n;\n        }\n        for (let i = nodes.length - 1; i >= 0; --i) {\n          node = nodes[i];\n          if (node.data !== imputed) break;\n          node.data = null;\n        }\n      }\n      root.parent = preroot;\n      root.eachBefore(function (node) {\n        node.depth = node.parent.depth + 1;\n        --n;\n      }).eachBefore(computeHeight);\n      root.parent = null;\n      if (n > 0) throw new Error(\"cycle\");\n      return root;\n    }\n    stratify.id = function (x) {\n      return arguments.length ? (id = optional(x), stratify) : id;\n    };\n    stratify.parentId = function (x) {\n      return arguments.length ? (parentId = optional(x), stratify) : parentId;\n    };\n    stratify.path = function (x) {\n      return arguments.length ? (path = optional(x), stratify) : path;\n    };\n    return stratify;\n  }\n\n  // To normalize a path, we coerce to a string, strip the trailing slash if any\n  // (as long as the trailing slash is not immediately preceded by another slash),\n  // and add leading slash if missing.\n  function normalize(path) {\n    path = `${path}`;\n    let i = path.length;\n    if (slash(path, i - 1) && !slash(path, i - 2)) path = path.slice(0, -1);\n    return path[0] === \"/\" ? path : `/${path}`;\n  }\n\n  // Walk backwards to find the first slash that is not the leading slash, e.g.:\n  // \"/foo/bar\" \u21e5 \"/foo\", \"/foo\" \u21e5 \"/\", \"/\" \u21a6 \"\". (The root is special-cased\n  // because the id of the root must be a truthy value.)\n  function parentof(path) {\n    let i = path.length;\n    if (i < 2) return \"\";\n    while (--i > 1) if (slash(path, i)) break;\n    return path.slice(0, i);\n  }\n\n  // Slashes can be escaped; to determine whether a slash is a path delimiter, we\n  // count the number of preceding backslashes escaping the forward slash: an odd\n  // number indicates an escaped forward slash.\n  function slash(path, i) {\n    if (path[i] === \"/\") {\n      let k = 0;\n      while (i > 0 && path[--i] === \"\\\\\") ++k;\n      if ((k & 1) === 0) return true;\n    }\n    return false;\n  }\n\n  function defaultSeparation$1(a, b) {\n    return a.parent === b.parent ? 1 : 2;\n  }\n\n  // function radialSeparation(a, b) {\n  //   return (a.parent === b.parent ? 1 : 2) / a.depth;\n  // }\n\n  // This function is used to traverse the left contour of a subtree (or\n  // subforest). It returns the successor of v on this contour. This successor is\n  // either given by the leftmost child of v or by the thread of v. The function\n  // returns null if and only if v is on the highest level of its subtree.\n  function nextLeft(v) {\n    var children = v.children;\n    return children ? children[0] : v.t;\n  }\n\n  // This function works analogously to nextLeft.\n  function nextRight(v) {\n    var children = v.children;\n    return children ? children[children.length - 1] : v.t;\n  }\n\n  // Shifts the current subtree rooted at w+. This is done by increasing\n  // prelim(w+) and mod(w+) by shift.\n  function moveSubtree(wm, wp, shift) {\n    var change = shift / (wp.i - wm.i);\n    wp.c -= change;\n    wp.s += shift;\n    wm.c += change;\n    wp.z += shift;\n    wp.m += shift;\n  }\n\n  // All other shifts, applied to the smaller subtrees between w- and w+, are\n  // performed by this function. To prepare the shifts, we have to adjust\n  // change(w+), shift(w+), and change(w-).\n  function executeShifts(v) {\n    var shift = 0,\n      change = 0,\n      children = v.children,\n      i = children.length,\n      w;\n    while (--i >= 0) {\n      w = children[i];\n      w.z += shift;\n      w.m += shift;\n      shift += w.s + (change += w.c);\n    }\n  }\n\n  // If vi-\u2019s ancestor is a sibling of v, returns vi-\u2019s ancestor. Otherwise,\n  // returns the specified (default) ancestor.\n  function nextAncestor(vim, v, ancestor) {\n    return vim.a.parent === v.parent ? vim.a : ancestor;\n  }\n  function TreeNode(node, i) {\n    this._ = node;\n    this.parent = null;\n    this.children = null;\n    this.A = null; // default ancestor\n    this.a = this; // ancestor\n    this.z = 0; // prelim\n    this.m = 0; // mod\n    this.c = 0; // change\n    this.s = 0; // shift\n    this.t = null; // thread\n    this.i = i; // number\n  }\n\n  TreeNode.prototype = Object.create(Node$1.prototype);\n  function treeRoot(root) {\n    var tree = new TreeNode(root, 0),\n      node,\n      nodes = [tree],\n      child,\n      children,\n      i,\n      n;\n    while (node = nodes.pop()) {\n      if (children = node._.children) {\n        node.children = new Array(n = children.length);\n        for (i = n - 1; i >= 0; --i) {\n          nodes.push(child = node.children[i] = new TreeNode(children[i], i));\n          child.parent = node;\n        }\n      }\n    }\n    (tree.parent = new TreeNode(null, 0)).children = [tree];\n    return tree;\n  }\n\n  // Node-link tree diagram using the Reingold-Tilford \"tidy\" algorithm\n  function tree () {\n    var separation = defaultSeparation$1,\n      dx = 1,\n      dy = 1,\n      nodeSize = null;\n    function tree(root) {\n      var t = treeRoot(root);\n\n      // Compute the layout using Buchheim et al.\u2019s algorithm.\n      t.eachAfter(firstWalk), t.parent.m = -t.z;\n      t.eachBefore(secondWalk);\n\n      // If a fixed node size is specified, scale x and y.\n      if (nodeSize) root.eachBefore(sizeNode);\n\n      // If a fixed tree size is specified, scale x and y based on the extent.\n      // Compute the left-most, right-most, and depth-most nodes for extents.\n      else {\n        var left = root,\n          right = root,\n          bottom = root;\n        root.eachBefore(function (node) {\n          if (node.x < left.x) left = node;\n          if (node.x > right.x) right = node;\n          if (node.depth > bottom.depth) bottom = node;\n        });\n        var s = left === right ? 1 : separation(left, right) / 2,\n          tx = s - left.x,\n          kx = dx / (right.x + s + tx),\n          ky = dy / (bottom.depth || 1);\n        root.eachBefore(function (node) {\n          node.x = (node.x + tx) * kx;\n          node.y = node.depth * ky;\n        });\n      }\n      return root;\n    }\n\n    // Computes a preliminary x-coordinate for v. Before that, FIRST WALK is\n    // applied recursively to the children of v, as well as the function\n    // APPORTION. After spacing out the children by calling EXECUTE SHIFTS, the\n    // node v is placed to the midpoint of its outermost children.\n    function firstWalk(v) {\n      var children = v.children,\n        siblings = v.parent.children,\n        w = v.i ? siblings[v.i - 1] : null;\n      if (children) {\n        executeShifts(v);\n        var midpoint = (children[0].z + children[children.length - 1].z) / 2;\n        if (w) {\n          v.z = w.z + separation(v._, w._);\n          v.m = v.z - midpoint;\n        } else {\n          v.z = midpoint;\n        }\n      } else if (w) {\n        v.z = w.z + separation(v._, w._);\n      }\n      v.parent.A = apportion(v, w, v.parent.A || siblings[0]);\n    }\n\n    // Computes all real x-coordinates by summing up the modifiers recursively.\n    function secondWalk(v) {\n      v._.x = v.z + v.parent.m;\n      v.m += v.parent.m;\n    }\n\n    // The core of the algorithm. Here, a new subtree is combined with the\n    // previous subtrees. Threads are used to traverse the inside and outside\n    // contours of the left and right subtree up to the highest common level. The\n    // vertices used for the traversals are vi+, vi-, vo-, and vo+, where the\n    // superscript o means outside and i means inside, the subscript - means left\n    // subtree and + means right subtree. For summing up the modifiers along the\n    // contour, we use respective variables si+, si-, so-, and so+. Whenever two\n    // nodes of the inside contours conflict, we compute the left one of the\n    // greatest uncommon ancestors using the function ANCESTOR and call MOVE\n    // SUBTREE to shift the subtree and prepare the shifts of smaller subtrees.\n    // Finally, we add a new thread (if necessary).\n    function apportion(v, w, ancestor) {\n      if (w) {\n        var vip = v,\n          vop = v,\n          vim = w,\n          vom = vip.parent.children[0],\n          sip = vip.m,\n          sop = vop.m,\n          sim = vim.m,\n          som = vom.m,\n          shift;\n        while (vim = nextRight(vim), vip = nextLeft(vip), vim && vip) {\n          vom = nextLeft(vom);\n          vop = nextRight(vop);\n          vop.a = v;\n          shift = vim.z + sim - vip.z - sip + separation(vim._, vip._);\n          if (shift > 0) {\n            moveSubtree(nextAncestor(vim, v, ancestor), v, shift);\n            sip += shift;\n            sop += shift;\n          }\n          sim += vim.m;\n          sip += vip.m;\n          som += vom.m;\n          sop += vop.m;\n        }\n        if (vim && !nextRight(vop)) {\n          vop.t = vim;\n          vop.m += sim - sop;\n        }\n        if (vip && !nextLeft(vom)) {\n          vom.t = vip;\n          vom.m += sip - som;\n          ancestor = v;\n        }\n      }\n      return ancestor;\n    }\n    function sizeNode(node) {\n      node.x *= dx;\n      node.y = node.depth * dy;\n    }\n    tree.separation = function (x) {\n      return arguments.length ? (separation = x, tree) : separation;\n    };\n    tree.size = function (x) {\n      return arguments.length ? (nodeSize = false, dx = +x[0], dy = +x[1], tree) : nodeSize ? null : [dx, dy];\n    };\n    tree.nodeSize = function (x) {\n      return arguments.length ? (nodeSize = true, dx = +x[0], dy = +x[1], tree) : nodeSize ? [dx, dy] : null;\n    };\n    return tree;\n  }\n\n  function treemapSlice (parent, x0, y0, x1, y1) {\n    var nodes = parent.children,\n      node,\n      i = -1,\n      n = nodes.length,\n      k = parent.value && (y1 - y0) / parent.value;\n    while (++i < n) {\n      node = nodes[i], node.x0 = x0, node.x1 = x1;\n      node.y0 = y0, node.y1 = y0 += node.value * k;\n    }\n  }\n\n  var phi = (1 + Math.sqrt(5)) / 2;\n  function squarifyRatio(ratio, parent, x0, y0, x1, y1) {\n    var rows = [],\n      nodes = parent.children,\n      row,\n      nodeValue,\n      i0 = 0,\n      i1 = 0,\n      n = nodes.length,\n      dx,\n      dy,\n      value = parent.value,\n      sumValue,\n      minValue,\n      maxValue,\n      newRatio,\n      minRatio,\n      alpha,\n      beta;\n    while (i0 < n) {\n      dx = x1 - x0, dy = y1 - y0;\n\n      // Find the next non-empty node.\n      do sumValue = nodes[i1++].value; while (!sumValue && i1 < n);\n      minValue = maxValue = sumValue;\n      alpha = Math.max(dy / dx, dx / dy) / (value * ratio);\n      beta = sumValue * sumValue * alpha;\n      minRatio = Math.max(maxValue / beta, beta / minValue);\n\n      // Keep adding nodes while the aspect ratio maintains or improves.\n      for (; i1 < n; ++i1) {\n        sumValue += nodeValue = nodes[i1].value;\n        if (nodeValue < minValue) minValue = nodeValue;\n        if (nodeValue > maxValue) maxValue = nodeValue;\n        beta = sumValue * sumValue * alpha;\n        newRatio = Math.max(maxValue / beta, beta / minValue);\n        if (newRatio > minRatio) {\n          sumValue -= nodeValue;\n          break;\n        }\n        minRatio = newRatio;\n      }\n\n      // Position and record the row orientation.\n      rows.push(row = {\n        value: sumValue,\n        dice: dx < dy,\n        children: nodes.slice(i0, i1)\n      });\n      if (row.dice) treemapDice(row, x0, y0, x1, value ? y0 += dy * sumValue / value : y1);else treemapSlice(row, x0, y0, value ? x0 += dx * sumValue / value : x1, y1);\n      value -= sumValue, i0 = i1;\n    }\n    return rows;\n  }\n  var treemapSquarify = (function custom(ratio) {\n    function squarify(parent, x0, y0, x1, y1) {\n      squarifyRatio(ratio, parent, x0, y0, x1, y1);\n    }\n    squarify.ratio = function (x) {\n      return custom((x = +x) > 1 ? x : 1);\n    };\n    return squarify;\n  })(phi);\n\n  function treemap () {\n    var tile = treemapSquarify,\n      round = false,\n      dx = 1,\n      dy = 1,\n      paddingStack = [0],\n      paddingInner = constantZero,\n      paddingTop = constantZero,\n      paddingRight = constantZero,\n      paddingBottom = constantZero,\n      paddingLeft = constantZero;\n    function treemap(root) {\n      root.x0 = root.y0 = 0;\n      root.x1 = dx;\n      root.y1 = dy;\n      root.eachBefore(positionNode);\n      paddingStack = [0];\n      if (round) root.eachBefore(roundNode);\n      return root;\n    }\n    function positionNode(node) {\n      var p = paddingStack[node.depth],\n        x0 = node.x0 + p,\n        y0 = node.y0 + p,\n        x1 = node.x1 - p,\n        y1 = node.y1 - p;\n      if (x1 < x0) x0 = x1 = (x0 + x1) / 2;\n      if (y1 < y0) y0 = y1 = (y0 + y1) / 2;\n      node.x0 = x0;\n      node.y0 = y0;\n      node.x1 = x1;\n      node.y1 = y1;\n      if (node.children) {\n        p = paddingStack[node.depth + 1] = paddingInner(node) / 2;\n        x0 += paddingLeft(node) - p;\n        y0 += paddingTop(node) - p;\n        x1 -= paddingRight(node) - p;\n        y1 -= paddingBottom(node) - p;\n        if (x1 < x0) x0 = x1 = (x0 + x1) / 2;\n        if (y1 < y0) y0 = y1 = (y0 + y1) / 2;\n        tile(node, x0, y0, x1, y1);\n      }\n    }\n    treemap.round = function (x) {\n      return arguments.length ? (round = !!x, treemap) : round;\n    };\n    treemap.size = function (x) {\n      return arguments.length ? (dx = +x[0], dy = +x[1], treemap) : [dx, dy];\n    };\n    treemap.tile = function (x) {\n      return arguments.length ? (tile = required(x), treemap) : tile;\n    };\n    treemap.padding = function (x) {\n      return arguments.length ? treemap.paddingInner(x).paddingOuter(x) : treemap.paddingInner();\n    };\n    treemap.paddingInner = function (x) {\n      return arguments.length ? (paddingInner = typeof x === \"function\" ? x : constant(+x), treemap) : paddingInner;\n    };\n    treemap.paddingOuter = function (x) {\n      return arguments.length ? treemap.paddingTop(x).paddingRight(x).paddingBottom(x).paddingLeft(x) : treemap.paddingTop();\n    };\n    treemap.paddingTop = function (x) {\n      return arguments.length ? (paddingTop = typeof x === \"function\" ? x : constant(+x), treemap) : paddingTop;\n    };\n    treemap.paddingRight = function (x) {\n      return arguments.length ? (paddingRight = typeof x === \"function\" ? x : constant(+x), treemap) : paddingRight;\n    };\n    treemap.paddingBottom = function (x) {\n      return arguments.length ? (paddingBottom = typeof x === \"function\" ? x : constant(+x), treemap) : paddingBottom;\n    };\n    treemap.paddingLeft = function (x) {\n      return arguments.length ? (paddingLeft = typeof x === \"function\" ? x : constant(+x), treemap) : paddingLeft;\n    };\n    return treemap;\n  }\n\n  function treemapBinary (parent, x0, y0, x1, y1) {\n    var nodes = parent.children,\n      i,\n      n = nodes.length,\n      sum,\n      sums = new Array(n + 1);\n    for (sums[0] = sum = i = 0; i < n; ++i) {\n      sums[i + 1] = sum += nodes[i].value;\n    }\n    partition(0, n, parent.value, x0, y0, x1, y1);\n    function partition(i, j, value, x0, y0, x1, y1) {\n      if (i >= j - 1) {\n        var node = nodes[i];\n        node.x0 = x0, node.y0 = y0;\n        node.x1 = x1, node.y1 = y1;\n        return;\n      }\n      var valueOffset = sums[i],\n        valueTarget = value / 2 + valueOffset,\n        k = i + 1,\n        hi = j - 1;\n      while (k < hi) {\n        var mid = k + hi >>> 1;\n        if (sums[mid] < valueTarget) k = mid + 1;else hi = mid;\n      }\n      if (valueTarget - sums[k - 1] < sums[k] - valueTarget && i + 1 < k) --k;\n      var valueLeft = sums[k] - valueOffset,\n        valueRight = value - valueLeft;\n      if (x1 - x0 > y1 - y0) {\n        var xk = value ? (x0 * valueRight + x1 * valueLeft) / value : x1;\n        partition(i, k, valueLeft, x0, y0, xk, y1);\n        partition(k, j, valueRight, xk, y0, x1, y1);\n      } else {\n        var yk = value ? (y0 * valueRight + y1 * valueLeft) / value : y1;\n        partition(i, k, valueLeft, x0, y0, x1, yk);\n        partition(k, j, valueRight, x0, yk, x1, y1);\n      }\n    }\n  }\n\n  function treemapSliceDice (parent, x0, y0, x1, y1) {\n    (parent.depth & 1 ? treemapSlice : treemapDice)(parent, x0, y0, x1, y1);\n  }\n\n  var treemapResquarify = (function custom(ratio) {\n    function resquarify(parent, x0, y0, x1, y1) {\n      if ((rows = parent._squarify) && rows.ratio === ratio) {\n        var rows,\n          row,\n          nodes,\n          i,\n          j = -1,\n          n,\n          m = rows.length,\n          value = parent.value;\n        while (++j < m) {\n          row = rows[j], nodes = row.children;\n          for (i = row.value = 0, n = nodes.length; i < n; ++i) row.value += nodes[i].value;\n          if (row.dice) treemapDice(row, x0, y0, x1, value ? y0 += (y1 - y0) * row.value / value : y1);else treemapSlice(row, x0, y0, value ? x0 += (x1 - x0) * row.value / value : x1, y1);\n          value -= row.value;\n        }\n      } else {\n        parent._squarify = rows = squarifyRatio(ratio, parent, x0, y0, x1, y1);\n        rows.ratio = ratio;\n      }\n    }\n    resquarify.ratio = function (x) {\n      return custom((x = +x) > 1 ? x : 1);\n    };\n    return resquarify;\n  })(phi);\n\n  /**\n   * Nest tuples into a tree structure, grouped by key values.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {Array<function(object): *>} params.keys - The key fields to nest by, in order.\n   * @param {boolean} [params.generate=false] - A boolean flag indicating if\n   *   non-leaf nodes generated by this transform should be included in the\n   *   output. The default (false) includes only the input data (leaf nodes)\n   *   in the data stream.\n   */\n  function Nest(params) {\n    vegaDataflow.Transform.call(this, null, params);\n  }\n  Nest.Definition = {\n    'type': 'Nest',\n    'metadata': {\n      'treesource': true,\n      'changes': true\n    },\n    'params': [{\n      'name': 'keys',\n      'type': 'field',\n      'array': true\n    }, {\n      'name': 'generate',\n      'type': 'boolean'\n    }]\n  };\n  const children = n => n.values;\n  vegaUtil.inherits(Nest, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      if (!pulse.source) {\n        vegaUtil.error('Nest transform requires an upstream data source.');\n      }\n      var gen = _.generate,\n        mod = _.modified(),\n        out = pulse.clone(),\n        tree = this.value;\n      if (!tree || mod || pulse.changed()) {\n        // collect nodes to remove\n        if (tree) {\n          tree.each(node => {\n            if (node.children && vegaDataflow.isTuple(node.data)) {\n              out.rem.push(node.data);\n            }\n          });\n        }\n\n        // generate new tree structure\n        this.value = tree = hierarchy({\n          values: vegaUtil.array(_.keys).reduce((n, k) => {\n            n.key(k);\n            return n;\n          }, nest()).entries(out.source)\n        }, children);\n\n        // collect nodes to add\n        if (gen) {\n          tree.each(node => {\n            if (node.children) {\n              node = vegaDataflow.ingest(node.data);\n              out.add.push(node);\n              out.source.push(node);\n            }\n          });\n        }\n\n        // build lookup table\n        lookup(tree, vegaDataflow.tupleid, vegaDataflow.tupleid);\n      }\n      out.source.root = tree;\n      return out;\n    }\n  });\n  function nest() {\n    const keys = [],\n      nest = {\n        entries: array => entries(apply(array, 0), 0),\n        key: d => (keys.push(d), nest)\n      };\n    function apply(array, depth) {\n      if (depth >= keys.length) {\n        return array;\n      }\n      const n = array.length,\n        key = keys[depth++],\n        valuesByKey = {},\n        result = {};\n      let i = -1,\n        keyValue,\n        value,\n        values;\n      while (++i < n) {\n        keyValue = key(value = array[i]) + '';\n        if (values = valuesByKey[keyValue]) {\n          values.push(value);\n        } else {\n          valuesByKey[keyValue] = [value];\n        }\n      }\n      for (keyValue in valuesByKey) {\n        result[keyValue] = apply(valuesByKey[keyValue], depth);\n      }\n      return result;\n    }\n    function entries(map, depth) {\n      if (++depth > keys.length) return map;\n      const array = [];\n      for (const key in map) {\n        array.push({\n          key,\n          values: entries(map[key], depth)\n        });\n      }\n      return array;\n    }\n    return nest;\n  }\n\n  /**\n   * Abstract class for tree layout.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   */\n  function HierarchyLayout(params) {\n    vegaDataflow.Transform.call(this, null, params);\n  }\n  const defaultSeparation = (a, b) => a.parent === b.parent ? 1 : 2;\n  vegaUtil.inherits(HierarchyLayout, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      if (!pulse.source || !pulse.source.root) {\n        vegaUtil.error(this.constructor.name + ' transform requires a backing tree data source.');\n      }\n      const layout = this.layout(_.method),\n        fields = this.fields,\n        root = pulse.source.root,\n        as = _.as || fields;\n      if (_.field) root.sum(_.field);else root.count();\n      if (_.sort) root.sort(vegaDataflow.stableCompare(_.sort, d => d.data));\n      setParams(layout, this.params, _);\n      if (layout.separation) {\n        layout.separation(_.separation !== false ? defaultSeparation : vegaUtil.one);\n      }\n      try {\n        this.value = layout(root);\n      } catch (err) {\n        vegaUtil.error(err);\n      }\n      root.each(node => setFields(node, fields, as));\n      return pulse.reflow(_.modified()).modifies(as).modifies('leaf');\n    }\n  });\n  function setParams(layout, params, _) {\n    for (let p, i = 0, n = params.length; i < n; ++i) {\n      p = params[i];\n      if (p in _) layout[p](_[p]);\n    }\n  }\n  function setFields(node, fields, as) {\n    const t = node.data,\n      n = fields.length - 1;\n    for (let i = 0; i < n; ++i) {\n      t[as[i]] = node[fields[i]];\n    }\n    t[as[n]] = node.children ? node.children.length : 0;\n  }\n\n  const Output$3 = ['x', 'y', 'r', 'depth', 'children'];\n\n  /**\n   * Packed circle tree layout.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(object): *} params.field - The value field to size nodes.\n   */\n  function Pack(params) {\n    HierarchyLayout.call(this, params);\n  }\n  Pack.Definition = {\n    'type': 'Pack',\n    'metadata': {\n      'tree': true,\n      'modifies': true\n    },\n    'params': [{\n      'name': 'field',\n      'type': 'field'\n    }, {\n      'name': 'sort',\n      'type': 'compare'\n    }, {\n      'name': 'padding',\n      'type': 'number',\n      'default': 0\n    }, {\n      'name': 'radius',\n      'type': 'field',\n      'default': null\n    }, {\n      'name': 'size',\n      'type': 'number',\n      'array': true,\n      'length': 2\n    }, {\n      'name': 'as',\n      'type': 'string',\n      'array': true,\n      'length': Output$3.length,\n      'default': Output$3\n    }]\n  };\n  vegaUtil.inherits(Pack, HierarchyLayout, {\n    layout: pack,\n    params: ['radius', 'size', 'padding'],\n    fields: Output$3\n  });\n\n  const Output$2 = ['x0', 'y0', 'x1', 'y1', 'depth', 'children'];\n\n  /**\n   * Partition tree layout.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(object): *} params.field - The value field to size nodes.\n   */\n  function Partition(params) {\n    HierarchyLayout.call(this, params);\n  }\n  Partition.Definition = {\n    'type': 'Partition',\n    'metadata': {\n      'tree': true,\n      'modifies': true\n    },\n    'params': [{\n      'name': 'field',\n      'type': 'field'\n    }, {\n      'name': 'sort',\n      'type': 'compare'\n    }, {\n      'name': 'padding',\n      'type': 'number',\n      'default': 0\n    }, {\n      'name': 'round',\n      'type': 'boolean',\n      'default': false\n    }, {\n      'name': 'size',\n      'type': 'number',\n      'array': true,\n      'length': 2\n    }, {\n      'name': 'as',\n      'type': 'string',\n      'array': true,\n      'length': Output$2.length,\n      'default': Output$2\n    }]\n  };\n  vegaUtil.inherits(Partition, HierarchyLayout, {\n    layout: partition,\n    params: ['size', 'round', 'padding'],\n    fields: Output$2\n  });\n\n  /**\n   * Stratify a collection of tuples into a tree structure based on\n   * id and parent id fields.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(object): *} params.key - Unique key field for each tuple.\n   * @param {function(object): *} params.parentKey - Field with key for parent tuple.\n   */\n  function Stratify(params) {\n    vegaDataflow.Transform.call(this, null, params);\n  }\n  Stratify.Definition = {\n    'type': 'Stratify',\n    'metadata': {\n      'treesource': true\n    },\n    'params': [{\n      'name': 'key',\n      'type': 'field',\n      'required': true\n    }, {\n      'name': 'parentKey',\n      'type': 'field',\n      'required': true\n    }]\n  };\n  vegaUtil.inherits(Stratify, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      if (!pulse.source) {\n        vegaUtil.error('Stratify transform requires an upstream data source.');\n      }\n      let tree = this.value;\n      const mod = _.modified(),\n        out = pulse.fork(pulse.ALL).materialize(pulse.SOURCE),\n        run = !tree || mod || pulse.changed(pulse.ADD_REM) || pulse.modified(_.key.fields) || pulse.modified(_.parentKey.fields);\n\n      // prevent upstream source pollution\n      out.source = out.source.slice();\n      if (run) {\n        tree = out.source.length ? lookup(stratify().id(_.key).parentId(_.parentKey)(out.source), _.key, vegaUtil.truthy) : lookup(stratify()([{}]), _.key, _.key);\n      }\n      out.source.root = this.value = tree;\n      return out;\n    }\n  });\n\n  const Layouts = {\n    tidy: tree,\n    cluster: cluster\n  };\n  const Output$1 = ['x', 'y', 'depth', 'children'];\n\n  /**\n   * Tree layout. Depending on the method parameter, performs either\n   * Reingold-Tilford 'tidy' layout or dendrogram 'cluster' layout.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   */\n  function Tree(params) {\n    HierarchyLayout.call(this, params);\n  }\n  Tree.Definition = {\n    'type': 'Tree',\n    'metadata': {\n      'tree': true,\n      'modifies': true\n    },\n    'params': [{\n      'name': 'field',\n      'type': 'field'\n    }, {\n      'name': 'sort',\n      'type': 'compare'\n    }, {\n      'name': 'method',\n      'type': 'enum',\n      'default': 'tidy',\n      'values': ['tidy', 'cluster']\n    }, {\n      'name': 'size',\n      'type': 'number',\n      'array': true,\n      'length': 2\n    }, {\n      'name': 'nodeSize',\n      'type': 'number',\n      'array': true,\n      'length': 2\n    }, {\n      'name': 'separation',\n      'type': 'boolean',\n      'default': true\n    }, {\n      'name': 'as',\n      'type': 'string',\n      'array': true,\n      'length': Output$1.length,\n      'default': Output$1\n    }]\n  };\n  vegaUtil.inherits(Tree, HierarchyLayout, {\n    /**\n     * Tree layout generator. Supports both 'tidy' and 'cluster' layouts.\n     */\n    layout(method) {\n      const m = method || 'tidy';\n      if (vegaUtil.hasOwnProperty(Layouts, m)) return Layouts[m]();else vegaUtil.error('Unrecognized Tree layout method: ' + m);\n    },\n    params: ['size', 'nodeSize'],\n    fields: Output$1\n  });\n\n  /**\n   * Generate tuples representing links between tree nodes.\n   * The resulting tuples will contain 'source' and 'target' fields,\n   * which point to parent and child node tuples, respectively.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   */\n  function TreeLinks(params) {\n    vegaDataflow.Transform.call(this, [], params);\n  }\n  TreeLinks.Definition = {\n    'type': 'TreeLinks',\n    'metadata': {\n      'tree': true,\n      'generates': true,\n      'changes': true\n    },\n    'params': []\n  };\n  vegaUtil.inherits(TreeLinks, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      const links = this.value,\n        tree = pulse.source && pulse.source.root,\n        out = pulse.fork(pulse.NO_SOURCE),\n        lut = {};\n      if (!tree) vegaUtil.error('TreeLinks transform requires a tree data source.');\n      if (pulse.changed(pulse.ADD_REM)) {\n        // remove previous links\n        out.rem = links;\n\n        // build lookup table of valid tuples\n        pulse.visit(pulse.SOURCE, t => lut[vegaDataflow.tupleid(t)] = 1);\n\n        // generate links for all edges incident on valid tuples\n        tree.each(node => {\n          const t = node.data,\n            p = node.parent && node.parent.data;\n          if (p && lut[vegaDataflow.tupleid(t)] && lut[vegaDataflow.tupleid(p)]) {\n            out.add.push(vegaDataflow.ingest({\n              source: p,\n              target: t\n            }));\n          }\n        });\n        this.value = out.add;\n      } else if (pulse.changed(pulse.MOD)) {\n        // build lookup table of modified tuples\n        pulse.visit(pulse.MOD, t => lut[vegaDataflow.tupleid(t)] = 1);\n\n        // gather links incident on modified tuples\n        links.forEach(link => {\n          if (lut[vegaDataflow.tupleid(link.source)] || lut[vegaDataflow.tupleid(link.target)]) {\n            out.mod.push(link);\n          }\n        });\n      }\n      return out;\n    }\n  });\n\n  const Tiles = {\n    binary: treemapBinary,\n    dice: treemapDice,\n    slice: treemapSlice,\n    slicedice: treemapSliceDice,\n    squarify: treemapSquarify,\n    resquarify: treemapResquarify\n  };\n  const Output = ['x0', 'y0', 'x1', 'y1', 'depth', 'children'];\n\n  /**\n   * Treemap layout.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(object): *} params.field - The value field to size nodes.\n   */\n  function Treemap(params) {\n    HierarchyLayout.call(this, params);\n  }\n  Treemap.Definition = {\n    'type': 'Treemap',\n    'metadata': {\n      'tree': true,\n      'modifies': true\n    },\n    'params': [{\n      'name': 'field',\n      'type': 'field'\n    }, {\n      'name': 'sort',\n      'type': 'compare'\n    }, {\n      'name': 'method',\n      'type': 'enum',\n      'default': 'squarify',\n      'values': ['squarify', 'resquarify', 'binary', 'dice', 'slice', 'slicedice']\n    }, {\n      'name': 'padding',\n      'type': 'number',\n      'default': 0\n    }, {\n      'name': 'paddingInner',\n      'type': 'number',\n      'default': 0\n    }, {\n      'name': 'paddingOuter',\n      'type': 'number',\n      'default': 0\n    }, {\n      'name': 'paddingTop',\n      'type': 'number',\n      'default': 0\n    }, {\n      'name': 'paddingRight',\n      'type': 'number',\n      'default': 0\n    }, {\n      'name': 'paddingBottom',\n      'type': 'number',\n      'default': 0\n    }, {\n      'name': 'paddingLeft',\n      'type': 'number',\n      'default': 0\n    }, {\n      'name': 'ratio',\n      'type': 'number',\n      'default': 1.618033988749895\n    }, {\n      'name': 'round',\n      'type': 'boolean',\n      'default': false\n    }, {\n      'name': 'size',\n      'type': 'number',\n      'array': true,\n      'length': 2\n    }, {\n      'name': 'as',\n      'type': 'string',\n      'array': true,\n      'length': Output.length,\n      'default': Output\n    }]\n  };\n  vegaUtil.inherits(Treemap, HierarchyLayout, {\n    /**\n     * Treemap layout generator. Adds 'method' and 'ratio' parameters\n     * to configure the underlying tile method.\n     */\n    layout() {\n      const x = treemap();\n      x.ratio = _ => {\n        const t = x.tile();\n        if (t.ratio) x.tile(t.ratio(_));\n      };\n      x.method = _ => {\n        if (vegaUtil.hasOwnProperty(Tiles, _)) x.tile(Tiles[_]);else vegaUtil.error('Unrecognized Treemap layout method: ' + _);\n      };\n      return x;\n    },\n    params: ['method', 'ratio', 'size', 'round', 'padding', 'paddingInner', 'paddingOuter', 'paddingTop', 'paddingRight', 'paddingBottom', 'paddingLeft'],\n    fields: Output\n  });\n\n  exports.nest = Nest;\n  exports.pack = Pack;\n  exports.partition = Partition;\n  exports.stratify = Stratify;\n  exports.tree = Tree;\n  exports.treelinks = TreeLinks;\n  exports.treemap = Treemap;\n\n}));\n\n};"],
"names":["shadow$provide","global","require","module","exports","factory","define","amd","globalThis","self","vega","vegaDataflow","vegaUtil","lookup","tree","key","filter","map","each","node","t","data","defaultSeparation$2","a","b","parent","meanXReduce","x","c","maxYReduce","y","Math","max","leafLeft","children","leafRight","length","count","sum","i","value","hierarchy","Map","undefined","mapChildren","objectChildren","root","Node$1","nodes","child","childs","n","pop","Array","from","push","depth","eachBefore","computeHeight","d","isArray","copyData","height","required","f","Error","constantZero","constant","lcg","s","m","enclosesNot","dr","r","dx","dy","enclosesWeak","enclosesWeakAll","B","encloseBasis2","x1","y1","r1","x2","y2","r2","x21","y21","r21","l","sqrt","encloseBasis3","x3","y3","r3","a2","a3","b2","b3","c2","c3","d1","d2","d3","ab","xa","xb","ya","yb","A","C","abs","place","intersects","score","_","next","Node","circle","previous","packSiblingsRandom","circles","random","j","k","sj","sk","aa","ca","array","e","p","defaultRadius","radiusLeaf","radius","packChildrenRandom","padding","translateChild","roundNode","x0","round","y0","treemapDice","defaultId","id","defaultParentId","parentId","stratify","currentId","currentParentId","nodeId","nodeByKey","path","I","slash","slice","P","parentof","S","add","Set","has","imputed","nodeKey","set","ambiguous","get","preroot","stratify.id","arguments","stratify.parentId","stratify.path","defaultSeparation$1","nextLeft","v","nextRight","TreeNode","z","treeRoot","treemapSlice","squarifyRatio","ratio","rows","row","nodeValue","i1","i0","sumValue","minValue","maxValue","newRatio","minRatio","alpha","beta","dice","treemap","positionNode","paddingStack","paddingInner","paddingLeft","paddingTop","paddingRight","paddingBottom","tile","treemapSquarify","treemap.round","size","treemap.size","treemap.tile","treemap.padding","paddingOuter","treemap.paddingInner","treemap.paddingOuter","treemap.paddingTop","treemap.paddingRight","treemap.paddingBottom","treemap.paddingLeft","Nest","params","Transform","call","nest","apply","keys","valuesByKey","result","keyValue","values","entries","HierarchyLayout","setParams","layout","Pack","Partition","Stratify","Tree","TreeLinks","Treemap","prototype","constructor","node_count","eachAfter","node_each","callback","that","index","node_eachAfter","node_eachBefore","find","node_find","node_sum","sort","node_sort","compare","node_path","end","start","aNodes","ancestors","bNodes","ancestor","splice","node_ancestors","descendants","node_descendants","leaves","node_leaves","links","node_links","source","target","copy","node_copy","Symbol","iterator","node_iterator","current","reverse","Object","create","phi","custom","squarify","squarify.ratio","treemapResquarify","resquarify","_squarify","resquarify.ratio","Definition","inherits","transform","pulse","error","gen","generate","mod","modified","out","clone","changed","isTuple","rem","reduce","ingest","tupleid","defaultSeparation","name","method","fields","as","field","stableCompare","separation","one","err","reflow","modifies","Output$3","pack","min","pack.radius","pack.size","pack.padding","Output$2","partition","partition.round","partition.size","partition.padding","fork","ALL","materialize","SOURCE","run","ADD_REM","parentKey","truthy","Layouts","tidy","firstWalk","secondWalk","nodeSize","sizeNode","left","right","bottom","tx","kx","ky","siblings","w","shift","change","midpoint","vop","vip","vom","sip","sop","sim","vim","som","wp","wm","tree.separation","tree.size","tree.nodeSize","cluster","previousNode","cluster.separation","cluster.size","cluster.nodeSize","Output$1","hasOwnProperty","NO_SOURCE","lut","visit","MOD","forEach","link","Tiles","binary","treemapBinary","valueOffset","sums","valueTarget","hi","mid","valueLeft","valueRight","xk","yk","slicedice","treemapSliceDice","Output","x.ratio","x.method","treelinks"]
}
