shadow$provide.module$node_modules$$tanstack$table_core$build$lib$aggregationFns=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});var utils=require("module$node_modules$$tanstack$table_core$build$lib$utils");exports.aggregationFns={sum:(columnId,_leafRows,childRows)=>childRows.reduce((sum,next)=>{next=next.getValue(columnId);return sum+("number"===typeof next?next:0)},0),min:(columnId,_leafRows,childRows)=>{let min;childRows.forEach(row=>{row=row.getValue(columnId);
null!=row&&(min>row||void 0===min&&row>=row)&&(min=row)});return min},max:(columnId,_leafRows,childRows)=>{let max;childRows.forEach(row=>{row=row.getValue(columnId);null!=row&&(max<row||void 0===max&&row>=row)&&(max=row)});return max},extent:(columnId,_leafRows,childRows)=>{let min,max;childRows.forEach(row=>{row=row.getValue(columnId);null!=row&&(void 0===min?row>=row&&(min=max=row):(min>row&&(min=row),max<row&&(max=row)))});return[min,max]},mean:(columnId,leafRows)=>{let count=0,sum=0;leafRows.forEach(row=>
{row=row.getValue(columnId);null!=row&&(row=+row)>=row&&(++count,sum+=row)});if(count)return sum/count},median:(columnId,leafRows)=>{if(leafRows.length&&(leafRows=leafRows.map(row=>row.getValue(columnId)),utils.isNumberArray(leafRows))){if(1===leafRows.length)return leafRows[0];var mid=Math.floor(leafRows.length/2),nums=leafRows.sort((a,b)=>a-b);return 0!==leafRows.length%2?nums[mid]:(nums[mid-1]+nums[mid])/2}},unique:(columnId,leafRows)=>Array.from((new Set(leafRows.map(d=>d.getValue(columnId)))).values()),
uniqueCount:(columnId,leafRows)=>(new Set(leafRows.map(d=>d.getValue(columnId)))).size,count:(_columnId,leafRows)=>leafRows.length}}
//# sourceMappingURL=module$node_modules$$tanstack$table_core$build$lib$aggregationFns.js.map
