{"version":3,"sources":["jasminegui/mount.cljs"],"mappings":"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","names":["jasminegui.mount/dev-server-address","jasminegui.mount/prod-server-address","jasminegui.mount/server-address","jasminegui.mount/default-db","cljs.core/set","re_frame.core.reg_event_db.cljs$core$IFn$_invoke$arity$2","_","seq__49169","cljs.core/seq","chunk__49170","count__49171","i__49172","temp__5735__auto__","cljs.core/chunked-seq?","c__4556__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next","k","cljs.core/keys","G__49177","G__49178","G__49183","G__49184","re-frame.core/reg-sub","db","jasminegui.mount/first-level-sort","x","G__49185","jasminegui.mount/add-total-line-to-pivot","pivoted-table","kportfolios","total-line","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","cljs.core.into.cljs$core$IFn$_invoke$arity$2","iter__4529__auto__","s__49191","cljs.core/LazySeq","c__4527__auto__","size__4528__auto__","b__49193","cljs.core/chunk-buffer","i__49192","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__49190","cljs.core/cons","cljs.core/rest","p","cljs.core.reduce.cljs$core$IFn$_invoke$arity$2","cljs.core/+","cljs.core.map.cljs$core$IFn$_invoke$arity$2","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","jasminegui.mount/add-total-line-to-attribution-pivot","template","s__49200","b__49202","i__49201","vec__49203","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","iter__49199","vec__49206","v","s__49210","b__49212","i__49211","iter__49209","G__49217","G__49218","positions","portfolio","portfolio-total-line","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","G__49220","fexpr__49219","cljs.core.keyword.cljs$core$IFn$_invoke$arity$1","is-tree","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","portfolio-positions","p1__49214#","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","viewable-positions","p1__49215#","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","risk-choices","cljs.core/deref","rfil","G__49221","re-frame.core/subscribe","p1__49216#","cljs.core.mapv.cljs$core$IFn$_invoke$arity$2","cljs.core.range.cljs$core$IFn$_invoke$arity$2","grouping-columns","s__49223","b__49225","i__49224","iter__49222","r","cljs.core.remove.cljs$core$IFn$_invoke$arity$2","cljs.core/nil?","jasminegui.tables/risk-table-columns","accessors-k","cljs.core/keyword","cljs.core.sort_by.cljs$core$IFn$_invoke$arity$2","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/juxt","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","cljs.core.comp.cljs$core$IFn$_invoke$arity$2","G__49227","G__49228","data","s__49230","b__49232","i__49231","vec__49233","iter__49229","vec__49236","p1__49226#","s__49240","b__49242","i__49241","iter__49239","jasminegui.tables/attribution-table-columns","G__49245","G__49246","pivoted-positions","kselected-portfolios","hide-zero-risk","display-key-one","G__49247","p1__49243#","s__49249","b__49251","i__49250","iter__49248","pivoted-data","p1__49244#","fexpr__49252","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","thfil","line","cljs.core/every?","cljs.core/zero?","pivoted-data-hide-zero","G__49255","G__49256","attribution-choices","G__49257","p1__49253#","s__49259","b__49261","i__49260","iter__49258","p1__49254#","fexpr__49262","G__49267","G__49268","group","p1__49263#","jasminegui.static/portfolio-alignment-groups","base-kportfolio","G__49269","p1__49264#","s__49271","b__49273","i__49272","iter__49270","p1__49265#","fexpr__49274","differentiate","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","temp-line","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","pivoted-data-diff","threshold","cljs.reader.read_string.cljs$core$IFn$_invoke$arity$1","p1__49266#","jasminegui.static/threshold-choices-alignment","cljs.core/some","pivoted-data-diff-post-th","G__49276","G__49277","s__49279","b__49281","i__49280","iter__49278","s__49283","b__49285","i__49284","iter__49282","s__49287","b__49289","i__49288","iter__49286","p1__49275#","seq__49290","chunk__49291","count__49292","i__49293","p__49302","vec__49303","p__49306","vec__49307","p__49310","vec__49311","portfolios","p__49314","vec__49315","id","f","cljs.core/assoc-in","p__49318","vec__49319","p__49322","vec__49323","p__49326","vec__49327","qt-date","clojure.string/replace","p__49330","vec__49331","p__49334","vec__49335","p__49338","vec__49339","attribution-date","p__49342","vec__49343","snapshot","G__49346","js/Error","p__49347","vec__49348","shortcut-key","cljs.core/name","shortcut-value","p__49351","vec__49352","G__49355","jasminegui.mount/http-get-dispatch","request","c__41764__auto__","cljs.core.async.chan.cljs$core$IFn$_invoke$arity$1","cljs.core.async.impl.dispatch/run","f__41765__auto__","switch__41719__auto__","state_49384","state_val_49385","inst_49356","inst_49357","cljs.core.async.impl.ioc-helpers/take!","inst_49359","inst_49360","inst_49361","statearr-49386","statearr-49387","statearr-49388","inst_49363","inst_49364","inst_49365","statearr-49389","inst_49367","statearr-49390","inst_49369","inst_49370","inst_49371","inst_49372","statearr-49391","statearr-49392","statearr-49393","inst_49374","cljs.core/PersistentVector","inst_49375","inst_49376","inst_49377","inst_49378","inst_49379","statearr-49394","statearr-49395","inst_49382","cljs.core.async.impl.ioc-helpers/return-chan","statearr-49396","state-machine__41720__auto__","ret-value__41721__auto__","result__41722__auto__","cljs.core/keyword-identical?","e49397","js/Object","ex__41723__auto__","statearr-49398","cljs.core.async.impl.ioc-helpers/process-exception","state__41766__auto__","statearr-49399","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","cljs-http.client/get","re-frame.core/dispatch","cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$variadic","js/JSON.parse","G__49400","G__49401","re-frame.core/reg-fx","re_frame.core.reg_event_fx.cljs$core$IFn$_invoke$arity$2","p__49402","p__49403","map__49404","cljs.core/PROTOCOL_SENTINEL","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","vec__49405","p__49409","p__49410","map__49411","vec__49412","p__49416","p__49417","map__49418","vec__49419","p__49423","p__49424","map__49425","vec__49426","p__49430","p__49431","map__49432","vec__49433","p__49437","p__49438","map__49439","vec__49440","p__49444","p__49445","map__49446","vec__49447","p__49451","p__49452","map__49453","vec__49454","p__49458","p__49459","map__49460","vec__49461","p__49465","p__49466","map__49467","vec__49468","p__49472","p__49473","map__49474","vec__49475","p__49479","p__49480","map__49481","vec__49482","period","p__49486","p__49487","map__49488","vec__49489","p__49493","p__49494","map__49495","vec__49496","p__49500","p__49501","map__49502","vec__49503","target","p__49507","p__49508","map__49509","vec__49510","ktarget","p__49514","p__49515","map__49516","vec__49517","p__49521","p__49522","map__49523","vec__49524"],"sourcesContent":["(ns jasminegui.mount\r\n  (:require\r\n    [reagent.core :as r]\r\n    [jasminegui.static :as static]\r\n    [re-frame.core :as rf]\r\n    [cljs-http.client :as http]\r\n    [cljs.core.async :refer [<!]]\r\n    [jasminegui.tables :as tables]\r\n    ;[re-pressed.core :as rp]\r\n    )\r\n  (:require-macros [cljs.core.async.macros :refer [go]])\r\n  )\r\n\r\n\r\n(def dev-server-address \"http://localhost:3501/\")\r\n(def prod-server-address \"http://iamlfilive:3501/\")\r\n(def server-address dev-server-address)              ;\"http://localhost:3501/\r\n\r\n\r\n\r\n(def default-db {\r\n                 ;data\r\n                 :positions                                   []\r\n                 :rating-to-score                             nil\r\n                 :pivoted-positions                           []\r\n                 :portfolios                                  []\r\n                 :total-positions                             {}\r\n                 :qt-date                                     \"undefined\"\r\n                 :attribution-date                            \"undefined\"\r\n\r\n                 ;navigation\r\n                 :active-view                                 :home\r\n                 :active-home                                 :summary\r\n                 :active-var                                  :overview\r\n                 :active-attribution                          :summary\r\n\r\n                 ;single-portfolio view\r\n                 :single-portfolio-risk/display-style         \"Tree\"\r\n                 :single-portfolio-risk/portfolio             \"OGEMCORD\"\r\n                 :single-portfolio-risk/filter                {1 :region 2 :country 3 :issuer}\r\n                 :single-portfolio-risk/hide-zero-holdings    true\r\n                 :single-portfolio-risk/table-filter          []\r\n                 :single-portfolio-risk/shortcut              1\r\n\r\n                 ;multiple-portfolio view\r\n                 :multiple-portfolio-risk/display-style       \"Table\"\r\n                 :multiple-portfolio-risk/field-number        \"One\"\r\n                 :multiple-portfolio-risk/field-one           :nav\r\n                 :multiple-portfolio-risk/field-two           \"None\"\r\n                 :multiple-portfolio-risk/selected-portfolios (set nil) ;[\"OGEMCORD\"]\r\n                 :multiple-portfolio-risk/filter              {1 :region 2 :country 3 :issuer}\r\n                 :multiple-portfolio-risk/hide-zero-holdings    true\r\n                 :multiple-portfolio-risk/shortcut            1\r\n                 :multiple-portfolio-risk/table-filter          []\r\n\r\n                 ;portfolio-alignment-view\r\n                 :portfolio-alignment/display-style           \"Tree\"\r\n                 :portfolio-alignment/field                   :nav\r\n                 :portfolio-alignment/filter                  {1 :region 2 :country 3 :issuer}\r\n                 :portfolio-alignment/group                   :cembi\r\n                 :portfolio-alignment/threshold               :quarter\r\n                 :portfolio-alignment/shortcut                1\r\n                 :portfolio-alignment/table-filter          []\r\n\r\n                 ;var view\r\n                 :var/portfolio                              \"OGEMCORD\"\r\n                 :var/result                                 nil\r\n                 :var/proxies                                nil\r\n                 :var/history                                nil\r\n                 :var/data                                   nil\r\n                 :var/dates                                  nil\r\n                 :var/chart-period                          :daily-3y\r\n\r\n                 ;trade history\r\n                 :trade-history/active-bond                  nil\r\n                 :trade-history/history                      nil\r\n\r\n                 ;single-portfolio attribution\r\n                 :single-portfolio-attribution/display-style         \"Tree\"\r\n                 :single-portfolio-attribution/portfolio             \"OGEMCORD\"\r\n                 :single-portfolio-attribution/filter                {1 :region 2 :country 3 :issuer}\r\n                 :single-portfolio-attribution/period               \"ytd\"\r\n                 :single-portfolio-attribution/table-filter          []\r\n                 :single-portfolio-attribution/shortcut              1\r\n                 :single-portfolio-attribution/table                  []\r\n\r\n                 ;multiple-portfolio attribution\r\n                 :multiple-portfolio-attribution/display-style       \"Tree\"\r\n                 :multiple-portfolio-attribution/field-number        \"One\"\r\n                 :multiple-portfolio-attribution/period               \"ytd\"\r\n                 :multiple-portfolio-attribution/field-one           :total-effect\r\n                 :multiple-portfolio-attribution/field-two           \"None\"\r\n                 :multiple-portfolio-attribution/selected-portfolios (set nil) ;[\"OGEMCORD\"]\r\n                 :multiple-portfolio-attribution/filter              {1 :region 2 :country 3 :issuer}\r\n                 :multiple-portfolio-attribution/shortcut            1\r\n                 :multiple-portfolio-attribution/table-filter          []\r\n                 :multiple-portfolio-attribution/table                []\r\n\r\n                 :attribution/summary                                 []\r\n\r\n\r\n                 })\r\n\r\n(rf/reg-event-db ::initialize-db (fn [_ _] default-db))\r\n(doseq [k (keys default-db)] (rf/reg-sub k (fn [db] (k db))))\r\n\r\n\r\n(defn first-level-sort [x]\r\n  (case x\r\n    \"Cash\"        \"AAA\"\r\n    \"Collateral\"  \"AAA\"\r\n    \"Forwards\"    \"AAA\"\r\n    \"Equities\"    \"AAA\"\r\n    x))\r\n\r\n(defn add-total-line-to-pivot [pivoted-table kportfolios]\r\n  (let [total-line (merge\r\n                     {:jpm-region           \"Total\"\r\n                      :qt-jpm-sector        \"Total\"\r\n                      :qt-risk-country-name \"Total\"\r\n                      :TICKER               \"Total\"\r\n                      :NAME                 \"Total\"\r\n                      :description          \"Total\"\r\n                      :isin                 \"Total\"\r\n                      :qt-iam-int-lt-median-rating-score \"Total\"}\r\n                     (into {} (for [p kportfolios] [p (reduce + (map p pivoted-table))])))]\r\n    (conj pivoted-table total-line)))\r\n\r\n(defn add-total-line-to-attribution-pivot [pivoted-table kportfolios]\r\n  (let [template (into {} (for [[k v] (first pivoted-table)] [k \"Total\"]))\r\n        total-line (merge\r\n                     template\r\n                     (into {} (for [p kportfolios] [p (reduce + (map p pivoted-table))])))]\r\n    (conj pivoted-table total-line)))\r\n\r\n\r\n(rf/reg-sub\r\n  :single-portfolio-risk/table\r\n  (fn [db]\r\n    (let [positions (:positions db)\r\n          portfolio (:single-portfolio-risk/portfolio db)\r\n          portfolio-total-line (assoc ((:total-positions db) (keyword portfolio)) :qt-iam-int-lt-median-rating \"Total\" :qt-iam-int-lt-median-rating-score \"00 Total\")\r\n          is-tree (= (:single-portfolio-risk/display-style db) \"Tree\")\r\n          portfolio-positions (filter #(= (:portfolio %) portfolio) positions)\r\n          viewable-positions (if (and (not is-tree) (:single-portfolio-risk/hide-zero-holdings db)) (filter #(not= (:weight %) 0) portfolio-positions) portfolio-positions)\r\n          risk-choices (let [rfil @(rf/subscribe [:single-portfolio-risk/filter])] (mapv #(if (not= \"None\" (rfil %)) (rfil %)) (range 1 4)))\r\n          grouping-columns (into [] (for [r (remove nil? (conj risk-choices :name))] (tables/risk-table-columns r)))\r\n          accessors-k (mapv keyword (mapv :accessor grouping-columns))]\r\n  (conj (sort-by (apply juxt (concat [(comp first-level-sort (first accessors-k))] (rest accessors-k))) viewable-positions) portfolio-total-line))))\r\n\r\n(rf/reg-sub\r\n  :single-portfolio-attribution/clean-table\r\n  (fn [db]\r\n    (let [data (:single-portfolio-attribution/table db)\r\n          template (into {} (for [[k v] (first data)] [k \"Total\"]))\r\n          portfolio-total-line (assoc template\r\n                                 :Total-Effect (reduce + (map :Total-Effect data))\r\n                                 :Average-Excess-Weight (reduce + (map :Average-Excess-Weight data))\r\n                                 :Average-Fund-Weight (reduce + (map :Average-Fund-Weight data))\r\n                                 :Average-Index-Weight (reduce + (map :Average-Index-Weight data))\r\n                                 :Fund-Contribution (reduce + (map :Fund-Contribution data))\r\n                                 :Index-Contribution (reduce + (map :Index-Contribution data)))\r\n          risk-choices (let [rfil (:single-portfolio-attribution/filter db)] (mapv #(if (not= \"None\" (rfil %)) (rfil %)) (range 1 4)))\r\n          grouping-columns (into [] (for [r (remove nil? (conj risk-choices :security))] (tables/attribution-table-columns r)))\r\n          accessors-k (mapv keyword (mapv :accessor grouping-columns))]\r\n      (conj (sort-by (apply juxt (concat [(comp first-level-sort (first accessors-k))] (rest accessors-k))) data) portfolio-total-line))))\r\n\r\n\r\n(rf/reg-sub\r\n  :multiple-portfolio-risk/table\r\n  (fn [db]\r\n    (let [pivoted-positions (:pivoted-positions db)\r\n          kselected-portfolios (mapv keyword (:multiple-portfolio-risk/selected-portfolios db))\r\n          hide-zero-risk (:multiple-portfolio-risk/hide-zero-holdings db)\r\n          display-key-one (:multiple-portfolio-risk/field-one db)\r\n          is-tree (= (:multiple-portfolio-risk/display-style db) \"Tree\")\r\n          risk-choices (let [rfil @(rf/subscribe [:multiple-portfolio-risk/filter])] (mapv #(if (not= \"None\" (rfil %)) (rfil %)) (range 1 4)))\r\n          grouping-columns (into [] (for [r (remove nil? (conj risk-choices :name))] (tables/risk-table-columns r)))\r\n          accessors-k (mapv keyword (mapv :accessor grouping-columns))\r\n          pivoted-data (map #(merge % ((keyword (get-in tables/risk-table-columns [display-key-one :accessor])) %)) pivoted-positions)\r\n          thfil (fn [line] (not (every? zero? (map line kselected-portfolios))))\r\n          pivoted-data-hide-zero (if (and (not is-tree) hide-zero-risk) (filter thfil pivoted-data) pivoted-data)]\r\n    (add-total-line-to-pivot (sort-by (apply juxt (concat [(comp first-level-sort (first accessors-k))] (rest accessors-k))) pivoted-data-hide-zero) (map keyword (:portfolios db))))))\r\n\r\n(rf/reg-sub\r\n  :multiple-portfolio-attribution/clean-table\r\n  (fn [db]\r\n    (let [pivoted-positions (:multiple-portfolio-attribution/table db)\r\n          kselected-portfolios (mapv keyword (:multiple-portfolio-attribution/selected-portfolios db))\r\n          display-key-one (:multiple-portfolio-attribution/field-one db)\r\n          attribution-choices (let [rfil @(rf/subscribe [:multiple-portfolio-attribution/filter])] (mapv #(if (not= \"None\" (rfil %)) (rfil %)) (range 1 4)))\r\n          grouping-columns (into [] (for [r (remove nil? (conj attribution-choices :security))] (tables/attribution-table-columns r)))\r\n          accessors-k (mapv keyword (mapv :accessor grouping-columns))\r\n          pivoted-data (map #(merge % ((keyword (get-in tables/attribution-table-columns [display-key-one :accessor])) %)) pivoted-positions)]\r\n      ;(println pivoted-data)\r\n      (add-total-line-to-attribution-pivot (sort-by (apply juxt (concat [(comp first-level-sort (first accessors-k))] (rest accessors-k))) pivoted-data) (map keyword (:portfolios db)))\r\n      ;(println (concat [(comp first-level-sort (first accessors-k))] (rest accessors-k)))\r\n      ;pivoted-data\r\n      ;(sort-by (apply juxt (concat [(comp first-level-sort (first accessors-k))] (rest accessors-k))) pivoted-data)\r\n      )\r\n\r\n    )\r\n\r\n  )\r\n\r\n\r\n(rf/reg-sub\r\n  :portfolio-alignment/table\r\n  (fn [db]\r\n    (let [group (map keyword (:portfolios (first (filter #(= (:id %) (:portfolio-alignment/group db)) static/portfolio-alignment-groups))))\r\n          pivoted-positions (:pivoted-positions db)\r\n          base-kportfolio (first group)\r\n          kportfolios (rest group)\r\n          risk-choices (let [rfil @(rf/subscribe [:portfolio-alignment/filter])] (mapv #(if (not= \"None\" (rfil %)) (rfil %)) (range 1 4)))\r\n          grouping-columns (into [] (for [r (remove nil? (conj risk-choices :name))] (tables/risk-table-columns r)))\r\n          accessors-k (mapv keyword (mapv :accessor grouping-columns))\r\n          pivoted-data (map #(merge % ((keyword (get-in tables/risk-table-columns [(:portfolio-alignment/field db) :accessor])) %)) pivoted-positions)\r\n          differentiate (fn [line] (reduce\r\n                                     (fn [temp-line p] (assoc temp-line p (- (p temp-line) (base-kportfolio temp-line))))\r\n                                     line\r\n                                     kportfolios))\r\n          pivoted-data-diff (map differentiate pivoted-data)\r\n          threshold (* 0.01 (cljs.reader/read-string (:label (first (filter #(= (:id %) (:portfolio-alignment/threshold db)) static/threshold-choices-alignment)))))\r\n          thfil (fn [line] (some (fn [x] (or (< x (- threshold)) (> x threshold))) (map line kportfolios)))\r\n          pivoted-data-diff-post-th (filter thfil pivoted-data-diff)]\r\n      (add-total-line-to-pivot (sort-by (apply juxt (concat [(comp first-level-sort (first accessors-k))] (rest accessors-k))) pivoted-data-diff-post-th) kportfolios))))\r\n\r\n(rf/reg-sub\r\n  :summary-display/table\r\n  (fn [db]\r\n    (into [] (for [p (:portfolios db)]\r\n               (merge\r\n                 {:portfolio       p}\r\n                 (into {} (for [k [:cash-pct :base-value :contrib-yield :contrib-zspread :contrib-gspread :contrib-mdur :qt-iam-int-lt-median-rating :qt-iam-int-lt-median-rating-score :contrib-beta-1y-daily]] [k (get-in (:total-positions db) [(keyword p) k])]))\r\n                               {:contrib-bond-yield (- (get-in (:total-positions db) [(keyword p) :contrib-yield]) (reduce + (map :contrib-yield (filter #(and (= (:portfolio %) p) (not= (:asset-class %) \"BONDS\")) (:positions db)))))})))))\r\n\r\n(doseq [k [:active-view\r\n           :active-home\r\n           :active-var\r\n           :active-attribution\r\n           :positions\r\n           :rating-to-score\r\n           :pivoted-positions\r\n           :total-positions\r\n           :var/proxies\r\n           :var/dates\r\n           :var/data\r\n           :var/portfolio\r\n           :var/chart-period\r\n           \r\n           :single-portfolio-risk/portfolio\r\n           :single-portfolio-risk/display-style\r\n           :single-portfolio-risk/hide-zero-holdings\r\n           :single-portfolio-risk/table-filter\r\n           \r\n           :multiple-portfolio-risk/display-style\r\n           :multiple-portfolio-risk/field-number\r\n           :multiple-portfolio-risk/field-one\r\n           :multiple-portfolio-risk/field-two\r\n           :multiple-portfolio-risk/selected-portfolios\r\n           :multiple-portfolio-risk/hide-zero-holdings\r\n           :multiple-portfolio-risk/shortcut\r\n           :multiple-portfolio-risk/table-filter\r\n           \r\n           :portfolio-alignment/display-style\r\n           :portfolio-alignment/field\r\n           :portfolio-alignment/group\r\n           :portfolio-alignment/threshold\r\n           :portfolio-alignment/shortcut\r\n           :portfolio-alignment/table-filter\r\n\r\n           :single-portfolio-attribution/portfolio\r\n           :single-portfolio-attribution/display-style\r\n           :single-portfolio-attribution/period\r\n           :single-portfolio-attribution/table-filter\r\n           :single-portfolio-attribution/table\r\n\r\n           :multiple-portfolio-attribution/display-style\r\n           :multiple-portfolio-attribution/field-number\r\n           :multiple-portfolio-attribution/field-one\r\n           :multiple-portfolio-attribution/field-two\r\n           :multiple-portfolio-attribution/selected-portfolios\r\n           :multiple-portfolio-attribution/hide-zero-holdings\r\n           :multiple-portfolio-attribution/shortcut\r\n           :multiple-portfolio-attribution/table-filter\r\n           :multiple-portfolio-attribution/table\r\n           :multiple-portfolio-attribution/period\r\n\r\n           :attribution/summary\r\n\r\n\r\n\r\n           ]] (rf/reg-event-db k (fn [db [_ data]] (assoc db k data))))\r\n\r\n(rf/reg-event-db\r\n  :portfolios\r\n  (fn [db [_ portfolios]]\r\n      (assoc db :portfolios portfolios\r\n                :multiple-portfolio-risk/selected-portfolios (set portfolios)\r\n                :multiple-portfolio-attribution/selected-portfolios (set portfolios))))\r\n\r\n(rf/reg-event-db\r\n  :single-portfolio-risk/filter\r\n  (fn [db [_ id f]] (assoc-in db [:single-portfolio-risk/filter id] f)))\r\n\r\n(rf/reg-event-db\r\n  :multiple-portfolio-risk/filter\r\n  (fn [db [_ id f]] (assoc-in db [:multiple-portfolio-risk/filter id] f)))\r\n\r\n(rf/reg-event-db\r\n  :portfolio-alignment/filter\r\n  (fn [db [_ id f]] (assoc-in db [:portfolio-alignment/filter id] f)))\r\n\r\n(rf/reg-event-db\r\n  :qt-date\r\n  (fn [db [_ qt-date]] (assoc db :qt-date (clojure.string/replace qt-date \"\\\"\" \"\"))))\r\n\r\n(rf/reg-event-db\r\n  :single-portfolio-attribution/filter\r\n  (fn [db [_ id f]] (assoc-in db [:single-portfolio-attribution/filter id] f)))\r\n\r\n(rf/reg-event-db\r\n  :multiple-portfolio-attribution/filter\r\n  (fn [db [_ id f]] (assoc-in db [:multiple-portfolio-attribution/filter id] f)))\r\n\r\n(rf/reg-event-db\r\n  :attribution-date\r\n  (fn [db [_ attribution-date]] (assoc db :attribution-date (clojure.string/replace attribution-date \"\\\"\" \"\"))))\r\n\r\n;THIS IS A DUMMY - IN PRACTICE WE'D DO MORE THINGS HERE\r\n(rf/reg-event-db\r\n  :single-portfolio-risk/shortcut\r\n  (fn [db [_ snapshot]]\r\n    (case snapshot\r\n      1 (assoc db :single-portfolio-risk/shortcut snapshot)\r\n      2 (assoc db :single-portfolio-risk/shortcut snapshot)\r\n      3 (assoc db :single-portfolio-risk/shortcut snapshot)\r\n      4 (assoc db :single-portfolio-risk/shortcut snapshot))))\r\n\r\n(rf/reg-event-db\r\n  :cycle-shortcut\r\n  (fn [db [_ _ _]]\r\n    (let [shortcut-key (keyword (str (name (:active-home db)) \"-risk/shortcut\"))\r\n          shortcut-value (shortcut-key db)]\r\n      (cond\r\n        (< shortcut-value 4) (assoc db shortcut-key (inc shortcut-value))\r\n        :else (assoc db shortcut-key 1)))))\r\n\r\n(rf/reg-event-db\r\n  :tree-table\r\n  (fn [db [_ _ _]]\r\n    (let [shortcut-key (keyword (str (name (:active-home db)) \"-risk/display-style\"))]\r\n      (case (shortcut-key db)\r\n        \"Tree\"  (assoc db shortcut-key \"Table\")\r\n        \"Table\" (assoc db shortcut-key \"Tree\")))))\r\n\r\n;;;;;;;;;;;;;;;;;;;;;;;\r\n;;HTTP GET DEFINITION;;\r\n;;;;;;;;;;;;;;;;;;;;;;;\r\n\r\n(defn http-get-dispatch [request]\r\n  (go (let [response (<! (http/get (:url request)))]\r\n        (rf/dispatch (conj (:dispatch-key request)\r\n                           (if (:kwk request)\r\n                             (js->clj (js/JSON.parse (:body response)) :keywordize-keys true)\r\n                             (:body response))))\r\n        (if (:flag request) (rf/dispatch [(:flag request) (:flag-value request)])))))\r\n\r\n(rf/reg-fx :http-get-dispatch http-get-dispatch)\r\n\r\n(rf/reg-event-fx\r\n  :get-positions\r\n  (fn [{:keys [db]} [_]]\r\n    {:http-get-dispatch {:url          (str server-address \"positions\") ;(str \"http://iamlfilive:3501/positions\")\r\n                         :dispatch-key [:positions]\r\n                         :kwk          true}}))\r\n\r\n(rf/reg-event-fx\r\n  :get-rating-to-score\r\n  (fn [{:keys [db]} [_]]\r\n    {:http-get-dispatch {:url          (str server-address \"rating-to-score\") ;(str \"http://iamlfilive:3501/positions\")\r\n                         :dispatch-key [:rating-to-score]\r\n                         :kwk          true}}))\r\n\r\n(rf/reg-event-fx\r\n  :get-portfolios\r\n  (fn [{:keys [db]} [_]]\r\n    {:http-get-dispatch {:url          (str server-address \"portfolios\") ;(str \"http://iamlfilive:3501/positions\")\r\n                         :dispatch-key [:portfolios]\r\n                         :kwk          true}}))\r\n\r\n\r\n(rf/reg-event-fx\r\n  :get-pivoted-positions\r\n  (fn [{:keys [db]} [_]]\r\n    {:http-get-dispatch {:url          (str server-address \"pivoted-positions\") ;(str \"http://iamlfilive:3501/positions\")\r\n                         :dispatch-key [:pivoted-positions]\r\n                         :kwk          true}}))\r\n\r\n(rf/reg-event-fx\r\n  :get-total-positions\r\n  (fn [{:keys [db]} [_]]\r\n    {:http-get-dispatch {:url          (str server-address \"total-positions\") ;(str \"http://iamlfilive:3501/positions\")\r\n                         :dispatch-key [:total-positions]\r\n                         :kwk          true}}))\r\n\r\n(rf/reg-event-fx\r\n  :get-qt-date\r\n  (fn [{:keys [db]} [_]]\r\n    {:http-get-dispatch {:url          (str server-address \"qt-date\") ;(str \"http://iamlfilive:3501/positions\")\r\n                         :dispatch-key [:qt-date]\r\n                         :kwk          false}}))\r\n\r\n(rf/reg-event-fx\r\n  :get-var-proxies\r\n  (fn [{:keys [db]} [_]]\r\n    {:http-get-dispatch {:url          (str server-address \"var-proxies\") ;(str \"http://iamlfilive:3501/positions\")\r\n                         :dispatch-key [:var/proxies]\r\n                         :kwk          true}}))\r\n\r\n(rf/reg-event-fx\r\n  :get-var-dates\r\n  (fn [{:keys [db]} [_]]\r\n    {:http-get-dispatch {:url          (str server-address \"var-dates\") ;(str \"http://iamlfilive:3501/positions\")\r\n                         :dispatch-key [:var/dates]\r\n                         :kwk          true}}))\r\n\r\n(rf/reg-event-fx\r\n  :get-var-data\r\n  (fn [{:keys [db]} [_ portfolio]]\r\n    {:http-get-dispatch {:url          (str server-address \"var-data?portfolio=\" portfolio) ;(srotr \"http://iamlfilive:3501/positions\")\r\n                         :dispatch-key [:var/data]\r\n                         :kwk          true}}))\r\n\r\n\r\n(rf/reg-event-fx\r\n  :get-portfolio-var\r\n  (fn [{:keys [db]} [_ portfolio]]\r\n    {:db (assoc db :var/portfolio portfolio)\r\n     :http-get-dispatch {:url          (str server-address \"var-data?portfolio=\" portfolio) ;(srotr \"http://iamlfilive:3501/positions\")\r\n                         :dispatch-key [:var/data]\r\n                         :kwk          true}}))\r\n\r\n\r\n\r\n(rf/reg-event-fx\r\n  :get-attribution-date\r\n  (fn [{:keys [db]} [_]]\r\n    {:http-get-dispatch {:url          (str server-address \"attribution?query-type=attribution-date\") ;(str \"http://iamlfilive:3501/positions\")\r\n                         :dispatch-key [:attribution-date]\r\n                         :kwk          false}}))\r\n\r\n;SINGLE ATTRIBUTION\r\n(rf/reg-event-fx\r\n  :get-single-attribution\r\n  (fn [{:keys [db]} [_ portfolio period]]\r\n    {:http-get-dispatch {:url          (str server-address \"attribution?query-type=single-portfolio&portfolio=\" portfolio \"&period=\" period) ;(srotr \"http://iamlfilive:3501/positions\")\r\n                         :dispatch-key [:single-portfolio-attribution/table]\r\n                         :kwk          true}}))\r\n\r\n(rf/reg-event-fx\r\n  :change-single-attribution-portfolio\r\n  (fn [{:keys [db]} [_ portfolio]]\r\n    {:db (assoc db :single-portfolio-attribution/portfolio portfolio)\r\n     :http-get-dispatch {:url          (str server-address \"attribution?query-type=single-portfolio&portfolio=\" portfolio \"&period=\" (:single-portfolio-attribution/period db)) ;(srotr \"http://iamlfilive:3501/positions\")\r\n                         :dispatch-key [:single-portfolio-attribution/table]\r\n                         :kwk          true}}))\r\n\r\n(rf/reg-event-fx\r\n  :change-single-attribution-period\r\n  (fn [{:keys [db]} [_ period]]\r\n    {:db (assoc db :single-portfolio-attribution/period period)\r\n     :http-get-dispatch {:url          (str server-address \"attribution?query-type=single-portfolio&portfolio=\" (:single-portfolio-attribution/portfolio db) \"&period=\" period) ;(srotr \"http://iamlfilive:3501/positions\")\r\n                         :dispatch-key [:single-portfolio-attribution/table]\r\n                         :kwk          true}}))\r\n\r\n;MULTIPLE ATTRIBUTION\r\n(rf/reg-event-fx\r\n  :get-multiple-attribution\r\n  (fn [{:keys [db]} [_ target period]]\r\n    {:http-get-dispatch {:url          (str server-address \"attribution?query-type=multiple-portfolio&target=\" target \"&period=\" period) ;(srotr \"http://iamlfilive:3501/positions\")\r\n                         :dispatch-key [:multiple-portfolio-attribution/table]\r\n                         :kwk          true}}))\r\n\r\n(rf/reg-event-fx\r\n  :change-multiple-attribution-target\r\n  (fn [{:keys [db]} [_ ktarget]]\r\n    (let [target (clojure.string.replace (get-in tables/attribution-table-columns [ktarget :accessor]) \"-\" \" \")]\r\n      {:db                (assoc db :multiple-portfolio-attribution/field-one ktarget)\r\n       :http-get-dispatch {:url          (str server-address \"attribution?query-type=multiple-portfolio&target=\" target \"&period=\" (:multiple-portfolio-attribution/period db)) ;(srotr \"http://iamlfilive:3501/positions\")\r\n                           :dispatch-key [:multiple-portfolio-attribution/table]\r\n                           :kwk          true}})))\r\n\r\n(rf/reg-event-fx\r\n  :change-multiple-attribution-period\r\n  (fn [{:keys [db]} [_ period]]\r\n    (let [target (clojure.string.replace (get-in tables/attribution-table-columns [(:multiple-portfolio-attribution/field-one db) :accessor]) \"-\" \" \")]\r\n      {:db                (assoc db :multiple-portfolio-attribution/period period)\r\n       :http-get-dispatch {:url          (str server-address \"attribution?query-type=multiple-portfolio&target=\" target \"&period=\" period) ;(srotr \"http://iamlfilive:3501/positions\")\r\n                           :dispatch-key [:multiple-portfolio-attribution/table]\r\n                           :kwk          true}})))\r\n\r\n;SUMMARY ATTRIBUTION\r\n(rf/reg-event-fx\r\n  :get-attribution-summary\r\n  (fn [{:keys [db]} [_]]\r\n    {:http-get-dispatch {:url          (str server-address \"attribution?query-type=summary\") ;(srotr \"http://iamlfilive:3501/positions\")\r\n                         :dispatch-key [:attribution/summary]\r\n                         :kwk          true}}))\r\n"]}