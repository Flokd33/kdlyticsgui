{"version":3,"sources":["jasminegui/mount.cljs"],"mappings":"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","names":["jasminegui.mount/dev-server-address","jasminegui.mount/prod-server-address","jasminegui.mount/server-address","jasminegui.mount/default-db","cljs.core/set","re_frame.core.reg_event_db.cljs$core$IFn$_invoke$arity$2","_","seq__74115","cljs.core/seq","chunk__74116","count__74117","i__74118","temp__5735__auto__","cljs.core/chunked-seq?","c__4556__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next","k","cljs.core/keys","G__74123","G__74124","G__74125","G__74126","re-frame.core/reg-sub","db","jasminegui.mount/first-level-sort","x","G__74127","jasminegui.mount/add-total-line-to-pivot","pivoted-table","kportfolios","total-line","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","cljs.core.into.cljs$core$IFn$_invoke$arity$2","iter__4529__auto__","s__74133","cljs.core/LazySeq","c__4527__auto__","size__4528__auto__","b__74135","cljs.core/chunk-buffer","i__74134","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__74132","cljs.core/cons","cljs.core/rest","p","cljs.core.reduce.cljs$core$IFn$_invoke$arity$2","cljs.core/+","cljs.core.map.cljs$core$IFn$_invoke$arity$2","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","G__74147","G__74148","positions","portfolio","portfolio-total-line","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","G__74151","fexpr__74150","cljs.core.keyword.cljs$core$IFn$_invoke$arity$1","is-tree","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","portfolio-positions","p1__74142#","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","viewable-positions","p1__74143#","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","risk-choices","cljs.core/deref","rfil","G__74152","re-frame.core/subscribe","p1__74144#","cljs.core.mapv.cljs$core$IFn$_invoke$arity$2","cljs.core.range.cljs$core$IFn$_invoke$arity$2","grouping-columns","s__74154","b__74156","i__74155","iter__74153","r","cljs.core.remove.cljs$core$IFn$_invoke$arity$2","cljs.core/nil?","jasminegui.tables/risk-table-columns","accessors-k","cljs.core/keyword","cljs.core.sort_by.cljs$core$IFn$_invoke$arity$2","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/juxt","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","cljs.core.comp.cljs$core$IFn$_invoke$arity$2","G__74158","G__74159","data","template","s__74161","b__74163","i__74162","vec__74165","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","iter__74160","vec__74168","v","G__74171","p1__74157#","s__74173","b__74175","i__74174","iter__74172","jasminegui.tables/attribution-table-columns","G__74178","G__74179","pivoted-positions","kselected-portfolios","hide-zero-risk","display-key-one","G__74180","p1__74176#","s__74182","b__74184","i__74183","iter__74181","pivoted-data","p1__74177#","fexpr__74185","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","thfil","line","cljs.core/every?","cljs.core/zero?","pivoted-data-hide-zero","G__74190","G__74191","group","p1__74186#","jasminegui.static/portfolio-alignment-groups","base-kportfolio","G__74192","p1__74187#","s__74194","b__74196","i__74195","iter__74193","p1__74188#","fexpr__74197","differentiate","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","temp-line","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","pivoted-data-diff","threshold","cljs.reader.read_string.cljs$core$IFn$_invoke$arity$1","p1__74189#","jasminegui.static/threshold-choices-alignment","cljs.core/some","pivoted-data-diff-post-th","G__74199","G__74200","s__74202","b__74204","i__74203","iter__74201","s__74206","b__74208","i__74207","iter__74205","s__74210","b__74212","i__74211","iter__74209","p1__74198#","seq__74213","chunk__74214","count__74215","i__74216","p__74225","vec__74226","p__74229","vec__74230","p__74233","vec__74234","portfolios","p__74237","vec__74238","id","f","cljs.core/assoc-in","p__74241","vec__74242","p__74245","vec__74246","p__74249","vec__74250","qt-date","clojure.string/replace","p__74253","vec__74254","snapshot","G__74257","js/Error","p__74258","vec__74259","shortcut-key","cljs.core/name","shortcut-value","p__74262","vec__74263","G__74266","jasminegui.mount/http-get-dispatch","request","c__41764__auto__","cljs.core.async.chan.cljs$core$IFn$_invoke$arity$1","cljs.core.async.impl.dispatch/run","f__41765__auto__","switch__41719__auto__","state_74295","state_val_74296","inst_74267","inst_74268","cljs.core.async.impl.ioc-helpers/take!","inst_74270","inst_74271","inst_74272","statearr-74297","statearr-74298","statearr-74299","inst_74274","inst_74275","inst_74276","statearr-74300","inst_74278","statearr-74301","inst_74280","inst_74281","inst_74282","inst_74283","statearr-74302","statearr-74303","statearr-74304","inst_74285","cljs.core/PersistentVector","inst_74286","inst_74287","inst_74288","inst_74289","inst_74290","statearr-74305","statearr-74306","inst_74293","cljs.core.async.impl.ioc-helpers/return-chan","statearr-74307","state-machine__41720__auto__","ret-value__41721__auto__","result__41722__auto__","cljs.core/keyword-identical?","e74308","js/Object","ex__41723__auto__","statearr-74309","cljs.core.async.impl.ioc-helpers/process-exception","state__41766__auto__","statearr-74310","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","cljs-http.client/get","re-frame.core/dispatch","cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$variadic","js/JSON.parse","G__74311","G__74312","re-frame.core/reg-fx","re_frame.core.reg_event_fx.cljs$core$IFn$_invoke$arity$2","p__74313","p__74314","map__74315","cljs.core/PROTOCOL_SENTINEL","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","vec__74316","p__74320","p__74321","map__74322","vec__74323","p__74327","p__74328","map__74329","vec__74330","p__74334","p__74335","map__74336","vec__74337","p__74341","p__74342","map__74343","vec__74344","p__74348","p__74349","map__74350","vec__74351","p__74355","p__74356","map__74357","vec__74358","p__74362","p__74363","map__74364","vec__74365","p__74369","p__74370","map__74371","vec__74372","p__74376","p__74377","map__74378","vec__74379","p__74383","p__74384","map__74385","vec__74386","period","p__74390","p__74391","map__74392","vec__74393","target","p__74397","p__74398","map__74399","vec__74400"],"sourcesContent":["(ns jasminegui.mount\r\n  (:require\r\n    [reagent.core :as r]\r\n    [jasminegui.static :as static]\r\n    [re-frame.core :as rf]\r\n    [cljs-http.client :as http]\r\n    [cljs.core.async :refer [<!]]\r\n    [jasminegui.tables :as tables]\r\n    ;[re-pressed.core :as rp]\r\n    )\r\n  (:require-macros [cljs.core.async.macros :refer [go]])\r\n  )\r\n\r\n\r\n(def dev-server-address \"http://localhost:3501/\")\r\n(def prod-server-address \"http://iamlfilive:3501/\")\r\n(def server-address dev-server-address)              ;\"http://localhost:3501/\r\n\r\n\r\n\r\n(def default-db {\r\n                 ;data\r\n                 :positions                                   []\r\n                 :rating-to-score                             nil\r\n                 :pivoted-positions                           []\r\n                 :portfolios                                  []\r\n                 :total-positions                             {}\r\n                 :qt-date                                     \"undefined\"\r\n                 :attribution-date                            \"undefined\"\r\n\r\n                 ;navigation\r\n                 :active-view                                 :home\r\n                 :active-home                                 :summary\r\n                 :active-var                                  :overview\r\n                 :active-attribution                          :summary\r\n\r\n                 ;single-portfolio view\r\n                 :single-portfolio-risk/display-style         \"Tree\"\r\n                 :single-portfolio-risk/portfolio             \"OGEMCORD\"\r\n                 :single-portfolio-risk/filter                {1 :region 2 :country 3 :issuer}\r\n                 :single-portfolio-risk/hide-zero-holdings    true\r\n                 :single-portfolio-risk/table-filter          []\r\n                 :single-portfolio-risk/shortcut              1\r\n\r\n                 ;multiple-portfolio view\r\n                 :multiple-portfolio-risk/display-style       \"Table\"\r\n                 :multiple-portfolio-risk/field-number        \"One\"\r\n                 :multiple-portfolio-risk/field-one           :nav\r\n                 :multiple-portfolio-risk/field-two           \"None\"\r\n                 :multiple-portfolio-risk/selected-portfolios (set nil) ;[\"OGEMCORD\"]\r\n                 :multiple-portfolio-risk/filter              {1 :region 2 :country 3 :issuer}\r\n                 :multiple-portfolio-risk/hide-zero-holdings    true\r\n                 :multiple-portfolio-risk/shortcut            1\r\n                 :multiple-portfolio-risk/table-filter          []\r\n\r\n                 ;portfolio-alignment-view\r\n                 :portfolio-alignment/display-style           \"Tree\"\r\n                 :portfolio-alignment/field                   :nav\r\n                 :portfolio-alignment/filter                  {1 :region 2 :country 3 :issuer}\r\n                 :portfolio-alignment/group                   :cembi\r\n                 :portfolio-alignment/threshold               :quarter\r\n                 :portfolio-alignment/shortcut                1\r\n                 :portfolio-alignment/table-filter          []\r\n\r\n                 ;var view\r\n                 :var/portfolio                              \"OGEMCORD\"\r\n                 :var/result                                 nil\r\n                 :var/proxies                                nil\r\n                 :var/history                                nil\r\n                 :var/data                                   nil\r\n                 :var/dates                                  nil\r\n                 :var/chart-period                          :daily-3y\r\n\r\n                 ;trade history\r\n                 :trade-history/active-bond                  nil\r\n                 :trade-history/history                      nil\r\n\r\n                 ;single-portfolio attribution\r\n                 :single-portfolio-attribution/display-style         \"Tree\"\r\n                 :single-portfolio-attribution/portfolio             \"OGEMCORD\"\r\n                 :single-portfolio-attribution/filter                {1 :region 2 :country 3 :issuer}\r\n                 :single-portfolio-attribution/hide-zero-holdings    true\r\n                 :single-portfolio-attribution/table-filter          []\r\n                 :single-portfolio-attribution/shortcut              1\r\n                 :single-portfolio-attribution/table                  []\r\n\r\n                 ;multiple-portfolio attribution\r\n                 :multiple-portfolio-attribution/display-style       \"Table\"\r\n                 :multiple-portfolio-attribution/field-number        \"One\"\r\n                 :multiple-portfolio-attribution/field-one           :nav\r\n                 :multiple-portfolio-attribution/field-two           \"None\"\r\n                 :multiple-portfolio-attribution/selected-portfolios (set nil) ;[\"OGEMCORD\"]\r\n                 :multiple-portfolio-attribution/filter              {1 :region 2 :country 3 :issuer}\r\n                 :multiple-portfolio-attribution/hide-zero-holdings    true\r\n                 :multiple-portfolio-attribution/shortcut            1\r\n                 :multiple-portfolio-attribution/table-filter          []\r\n                 :multiple-portfolio-attribution/table                []\r\n\r\n\r\n                 })\r\n\r\n(rf/reg-event-db ::initialize-db (fn [_ _] default-db))\r\n(doseq [k (keys default-db)] (rf/reg-sub k (fn [db] (k db))))\r\n\r\n\r\n(defn first-level-sort [x]\r\n  (case x\r\n    \"Cash\"        \"AAA\"\r\n    \"Collateral\"  \"AAA\"\r\n    \"Forwards\"    \"AAA\"\r\n    \"Equities\"    \"AAA\"\r\n    x))\r\n\r\n(defn add-total-line-to-pivot [pivoted-table kportfolios]\r\n  (let [total-line (merge\r\n                     {:jpm-region           \"Total\"\r\n                      :qt-jpm-sector        \"Total\"\r\n                      :qt-risk-country-name \"Total\"\r\n                      :TICKER               \"Total\"\r\n                      :NAME                 \"Total\"\r\n                      :description          \"Total\"\r\n                      :isin                 \"Total\"\r\n                      :qt-iam-int-lt-median-rating-score \"Total\"}\r\n                     (into {} (for [p kportfolios] [p (reduce + (map p pivoted-table))])))]\r\n    (conj pivoted-table total-line)))\r\n\r\n\r\n(rf/reg-sub\r\n  :single-portfolio-risk/table\r\n  (fn [db]\r\n    (let [positions (:positions db)\r\n          portfolio (:single-portfolio-risk/portfolio db)\r\n          portfolio-total-line (assoc ((:total-positions db) (keyword portfolio)) :qt-iam-int-lt-median-rating \"Total\" :qt-iam-int-lt-median-rating-score \"00 Total\")\r\n          is-tree (= (:single-portfolio-risk/display-style db) \"Tree\")\r\n          portfolio-positions (filter #(= (:portfolio %) portfolio) positions)\r\n          viewable-positions (if (and (not is-tree) (:single-portfolio-risk/hide-zero-holdings db)) (filter #(not= (:weight %) 0) portfolio-positions) portfolio-positions)\r\n          risk-choices (let [rfil @(rf/subscribe [:single-portfolio-risk/filter])] (mapv #(if (not= \"None\" (rfil %)) (rfil %)) (range 1 4)))\r\n          grouping-columns (into [] (for [r (remove nil? (conj risk-choices :name))] (tables/risk-table-columns r)))\r\n          accessors-k (mapv keyword (mapv :accessor grouping-columns))]\r\n  (conj (sort-by (apply juxt (concat [(comp first-level-sort (first accessors-k))] (rest accessors-k))) viewable-positions) portfolio-total-line))))\r\n\r\n(rf/reg-sub\r\n  :single-portfolio-attribution/clean-table\r\n  (fn [db]\r\n    (let [data (:single-portfolio-attribution/table db)\r\n          template (into {} (for [[k v] (first data)] [k \"Total\"]))\r\n          portfolio-total-line (assoc template\r\n                                 :Total-Effect (reduce + (map :Total-Effect data))\r\n                                 :Average-Excess-Weight (reduce + (map :Average-Excess-Weight data))\r\n                                 :Average-Fund-Weight (reduce + (map :Average-Fund-Weight data))\r\n                                 :Average-Index-Weight (reduce + (map :Average-Index-Weight data))\r\n                                 :Fund-Contribution (reduce + (map :Fund-Contribution data))\r\n                                 :Index-Contribution (reduce + (map :Index-Contribution data)))\r\n          risk-choices (let [rfil @(rf/subscribe [:single-portfolio-attribution/filter])] (mapv #(if (not= \"None\" (rfil %)) (rfil %)) (range 1 4)))\r\n          grouping-columns (into [] (for [r (remove nil? (conj risk-choices :name))] (tables/attribution-table-columns r)))\r\n          accessors-k (mapv keyword (mapv :accessor grouping-columns))]\r\n      (conj (sort-by (apply juxt (concat [(comp first-level-sort (first accessors-k))] (rest accessors-k))) data) portfolio-total-line))))\r\n\r\n\r\n(rf/reg-sub\r\n  :multiple-portfolio-risk/table\r\n  (fn [db]\r\n    (let [pivoted-positions (:pivoted-positions db)\r\n          kselected-portfolios (mapv keyword (:multiple-portfolio-risk/selected-portfolios db))\r\n          hide-zero-risk (:multiple-portfolio-risk/hide-zero-holdings db)\r\n          display-key-one (:multiple-portfolio-risk/field-one db)\r\n          is-tree (= (:multiple-portfolio-risk/display-style db) \"Tree\")\r\n          risk-choices (let [rfil @(rf/subscribe [:multiple-portfolio-risk/filter])] (mapv #(if (not= \"None\" (rfil %)) (rfil %)) (range 1 4)))\r\n          grouping-columns (into [] (for [r (remove nil? (conj risk-choices :name))] (tables/risk-table-columns r)))\r\n          accessors-k (mapv keyword (mapv :accessor grouping-columns))\r\n          pivoted-data (map #(merge % ((keyword (get-in tables/risk-table-columns [display-key-one :accessor])) %)) pivoted-positions)\r\n          thfil (fn [line] (not (every? zero? (map line kselected-portfolios))))\r\n          pivoted-data-hide-zero (if (and (not is-tree) hide-zero-risk) (filter thfil pivoted-data) pivoted-data)]\r\n    (add-total-line-to-pivot (sort-by (apply juxt (concat [(comp first-level-sort (first accessors-k))] (rest accessors-k))) pivoted-data-hide-zero) (map keyword (:portfolios db))))))\r\n\r\n\r\n(rf/reg-sub\r\n  :portfolio-alignment/table\r\n  (fn [db]\r\n    (let [group (map keyword (:portfolios (first (filter #(= (:id %) (:portfolio-alignment/group db)) static/portfolio-alignment-groups))))\r\n          pivoted-positions (:pivoted-positions db)\r\n          base-kportfolio (first group)\r\n          kportfolios (rest group)\r\n          risk-choices (let [rfil @(rf/subscribe [:portfolio-alignment/filter])] (mapv #(if (not= \"None\" (rfil %)) (rfil %)) (range 1 4)))\r\n          grouping-columns (into [] (for [r (remove nil? (conj risk-choices :name))] (tables/risk-table-columns r)))\r\n          accessors-k (mapv keyword (mapv :accessor grouping-columns))\r\n          pivoted-data (map #(merge % ((keyword (get-in tables/risk-table-columns [(:portfolio-alignment/field db) :accessor])) %)) pivoted-positions)\r\n          differentiate (fn [line] (reduce\r\n                                     (fn [temp-line p] (assoc temp-line p (- (p temp-line) (base-kportfolio temp-line))))\r\n                                     line\r\n                                     kportfolios))\r\n          pivoted-data-diff (map differentiate pivoted-data)\r\n          threshold (* 0.01 (cljs.reader/read-string (:label (first (filter #(= (:id %) (:portfolio-alignment/threshold db)) static/threshold-choices-alignment)))))\r\n          thfil (fn [line] (some (fn [x] (or (< x (- threshold)) (> x threshold))) (map line kportfolios)))\r\n          pivoted-data-diff-post-th (filter thfil pivoted-data-diff)]\r\n      (add-total-line-to-pivot (sort-by (apply juxt (concat [(comp first-level-sort (first accessors-k))] (rest accessors-k))) pivoted-data-diff-post-th) kportfolios))))\r\n\r\n(rf/reg-sub\r\n  :summary-display/table\r\n  (fn [db]\r\n    (into [] (for [p (:portfolios db)]\r\n               (merge\r\n                 {:portfolio       p}\r\n                 (into {} (for [k [:cash-pct :base-value :contrib-yield :contrib-zspread :contrib-gspread :contrib-mdur :qt-iam-int-lt-median-rating :qt-iam-int-lt-median-rating-score :contrib-beta-1y-daily]] [k (get-in (:total-positions db) [(keyword p) k])]))\r\n                               {:contrib-bond-yield (- (get-in (:total-positions db) [(keyword p) :contrib-yield]) (reduce + (map :contrib-yield (filter #(and (= (:portfolio %) p) (not= (:asset-class %) \"BONDS\")) (:positions db)))))})))))\r\n\r\n(doseq [k [:active-view\r\n           :active-home\r\n           :active-var\r\n           :active-attribution\r\n           :positions\r\n           :rating-to-score\r\n           :pivoted-positions\r\n           :total-positions\r\n           :var/proxies\r\n           :var/dates\r\n           :var/data\r\n           :var/portfolio\r\n           :var/chart-period\r\n           \r\n           :single-portfolio-risk/portfolio\r\n           :single-portfolio-risk/display-style\r\n           :single-portfolio-risk/hide-zero-holdings\r\n           :single-portfolio-risk/table-filter\r\n           \r\n           :multiple-portfolio-risk/display-style\r\n           :multiple-portfolio-risk/field-number\r\n           :multiple-portfolio-risk/field-one\r\n           :multiple-portfolio-risk/field-two\r\n           :multiple-portfolio-risk/selected-portfolios\r\n           :multiple-portfolio-risk/hide-zero-holdings\r\n           :multiple-portfolio-risk/shortcut\r\n           :multiple-portfolio-risk/table-filter\r\n           \r\n           :portfolio-alignment/display-style\r\n           :portfolio-alignment/field\r\n           :portfolio-alignment/group\r\n           :portfolio-alignment/threshold\r\n           :portfolio-alignment/shortcut\r\n           :portfolio-alignment/table-filter\r\n\r\n           :single-portfolio-attribution/portfolio\r\n           :single-portfolio-attribution/display-style\r\n           :single-portfolio-attribution/hide-zero-holdings\r\n           :single-portfolio-attribution/table-filter\r\n           :single-portfolio-attribution/table\r\n\r\n           :multiple-portfolio-attribution/display-style\r\n           :multiple-portfolio-attribution/field-number\r\n           :multiple-portfolio-attribution/field-one\r\n           :multiple-portfolio-attribution/field-two\r\n           :multiple-portfolio-attribution/selected-portfolios\r\n           :multiple-portfolio-attribution/hide-zero-holdings\r\n           :multiple-portfolio-attribution/shortcut\r\n           :multiple-portfolio-attribution/table-filter\r\n           :multiple-portfolio-attribution/table\r\n\r\n           :attribution-date\r\n\r\n\r\n           ]] (rf/reg-event-db k (fn [db [_ data]] (assoc db k data))))\r\n\r\n(rf/reg-event-db\r\n  :portfolios\r\n  (fn [db [_ portfolios]]\r\n      (assoc db :portfolios portfolios\r\n                :multiple-portfolio-risk/selected-portfolios (set portfolios))))\r\n\r\n(rf/reg-event-db\r\n  :single-portfolio-risk/filter\r\n  (fn [db [_ id f]] (assoc-in db [:single-portfolio-risk/filter id] f)))\r\n\r\n(rf/reg-event-db\r\n  :multiple-portfolio-risk/filter\r\n  (fn [db [_ id f]] (assoc-in db [:multiple-portfolio-risk/filter id] f)))\r\n\r\n(rf/reg-event-db\r\n  :portfolio-alignment/filter\r\n  (fn [db [_ id f]] (assoc-in db [:portfolio-alignment/filter id] f)))\r\n\r\n(rf/reg-event-db\r\n  :qt-date\r\n  (fn [db [_ qt-date]] (assoc db :qt-date (clojure.string/replace qt-date \"\\\"\" \"\"))))\r\n\r\n;THIS IS A DUMMY - IN PRACTICE WE'D DO MORE THINGS HERE\r\n(rf/reg-event-db\r\n  :single-portfolio-risk/shortcut\r\n  (fn [db [_ snapshot]]\r\n    (case snapshot\r\n      1 (assoc db :single-portfolio-risk/shortcut snapshot)\r\n      2 (assoc db :single-portfolio-risk/shortcut snapshot)\r\n      3 (assoc db :single-portfolio-risk/shortcut snapshot)\r\n      4 (assoc db :single-portfolio-risk/shortcut snapshot))))\r\n\r\n(rf/reg-event-db\r\n  :cycle-shortcut\r\n  (fn [db [_ _ _]]\r\n    (let [shortcut-key (keyword (str (name (:active-home db)) \"-risk/shortcut\"))\r\n          shortcut-value (shortcut-key db)]\r\n      (cond\r\n        (< shortcut-value 4) (assoc db shortcut-key (inc shortcut-value))\r\n        :else (assoc db shortcut-key 1)))))\r\n\r\n(rf/reg-event-db\r\n  :tree-table\r\n  (fn [db [_ _ _]]\r\n    (let [shortcut-key (keyword (str (name (:active-home db)) \"-risk/display-style\"))]\r\n      (case (shortcut-key db)\r\n        \"Tree\"  (assoc db shortcut-key \"Table\")\r\n        \"Table\" (assoc db shortcut-key \"Tree\")))))\r\n\r\n;;;;;;;;;;;;;;;;;;;;;;;\r\n;;HTTP GET DEFINITION;;\r\n;;;;;;;;;;;;;;;;;;;;;;;\r\n\r\n(defn http-get-dispatch [request]\r\n  (go (let [response (<! (http/get (:url request)))]\r\n        (rf/dispatch (conj (:dispatch-key request)\r\n                           (if (:kwk request)\r\n                             (js->clj (js/JSON.parse (:body response)) :keywordize-keys true)\r\n                             (:body response))))\r\n        (if (:flag request) (rf/dispatch [(:flag request) (:flag-value request)])))))\r\n\r\n(rf/reg-fx :http-get-dispatch http-get-dispatch)\r\n\r\n(rf/reg-event-fx\r\n  :get-positions\r\n  (fn [{:keys [db]} [_]]\r\n    {:http-get-dispatch {:url          (str server-address \"positions\") ;(str \"http://iamlfilive:3501/positions\")\r\n                         :dispatch-key [:positions]\r\n                         :kwk          true}}))\r\n\r\n(rf/reg-event-fx\r\n  :get-rating-to-score\r\n  (fn [{:keys [db]} [_]]\r\n    {:http-get-dispatch {:url          (str server-address \"rating-to-score\") ;(str \"http://iamlfilive:3501/positions\")\r\n                         :dispatch-key [:rating-to-score]\r\n                         :kwk          true}}))\r\n\r\n(rf/reg-event-fx\r\n  :get-portfolios\r\n  (fn [{:keys [db]} [_]]\r\n    {:http-get-dispatch {:url          (str server-address \"portfolios\") ;(str \"http://iamlfilive:3501/positions\")\r\n                         :dispatch-key [:portfolios]\r\n                         :kwk          true}}))\r\n\r\n\r\n(rf/reg-event-fx\r\n  :get-pivoted-positions\r\n  (fn [{:keys [db]} [_]]\r\n    {:http-get-dispatch {:url          (str server-address \"pivoted-positions\") ;(str \"http://iamlfilive:3501/positions\")\r\n                         :dispatch-key [:pivoted-positions]\r\n                         :kwk          true}}))\r\n\r\n(rf/reg-event-fx\r\n  :get-total-positions\r\n  (fn [{:keys [db]} [_]]\r\n    {:http-get-dispatch {:url          (str server-address \"total-positions\") ;(str \"http://iamlfilive:3501/positions\")\r\n                         :dispatch-key [:total-positions]\r\n                         :kwk          true}}))\r\n\r\n(rf/reg-event-fx\r\n  :get-qt-date\r\n  (fn [{:keys [db]} [_]]\r\n    {:http-get-dispatch {:url          (str server-address \"qt-date\") ;(str \"http://iamlfilive:3501/positions\")\r\n                         :dispatch-key [:qt-date]\r\n                         :kwk          false}}))\r\n\r\n(rf/reg-event-fx\r\n  :get-var-proxies\r\n  (fn [{:keys [db]} [_]]\r\n    {:http-get-dispatch {:url          (str server-address \"var-proxies\") ;(str \"http://iamlfilive:3501/positions\")\r\n                         :dispatch-key [:var/proxies]\r\n                         :kwk          true}}))\r\n\r\n(rf/reg-event-fx\r\n  :get-var-dates\r\n  (fn [{:keys [db]} [_]]\r\n    {:http-get-dispatch {:url          (str server-address \"var-dates\") ;(str \"http://iamlfilive:3501/positions\")\r\n                         :dispatch-key [:var/dates]\r\n                         :kwk          true}}))\r\n\r\n(rf/reg-event-fx\r\n  :get-var-data\r\n  (fn [{:keys [db]} [_ portfolio]]\r\n    {:http-get-dispatch {:url          (str server-address \"var-data?portfolio=\" portfolio) ;(srotr \"http://iamlfilive:3501/positions\")\r\n                         :dispatch-key [:var/data]\r\n                         :kwk          true}}))\r\n\r\n\r\n(rf/reg-event-fx\r\n  :get-portfolio-var\r\n  (fn [{:keys [db]} [_ portfolio]]\r\n    {:db (assoc db :var/portfolio portfolio)\r\n     :http-get-dispatch {:url          (str server-address \"var-data?portfolio=\" portfolio) ;(srotr \"http://iamlfilive:3501/positions\")\r\n                         :dispatch-key [:var/data]\r\n                         :kwk          true}}))\r\n\r\n(rf/reg-event-fx\r\n  :get-single-attribution\r\n  (fn [{:keys [db]} [_ portfolio period]]\r\n    {:http-get-dispatch {:url          (str server-address \"attribution-single?portfolio=\" portfolio \"&period=\" period) ;(srotr \"http://iamlfilive:3501/positions\")\r\n                         :dispatch-key [:single-portfolio-attribution/table]\r\n                         :kwk          true}}))\r\n\r\n(rf/reg-event-fx\r\n  :get-multiple-attribution\r\n  (fn [{:keys [db]} [_ target period]]\r\n    {:http-get-dispatch {:url          (str server-address \"attribution-multiple?target=\" target \"&period=\" period) ;(srotr \"http://iamlfilive:3501/positions\")\r\n                         :dispatch-key [:multiple-portfolio-attribution/table]\r\n                         :kwk          true}}))\r\n\r\n(rf/reg-event-fx\r\n  :get-attribution-date\r\n  (fn [{:keys [db]} [_]]\r\n    {:http-get-dispatch {:url          (str server-address \"attribution-date\") ;(str \"http://iamlfilive:3501/positions\")\r\n                         :dispatch-key [:attribution-date]\r\n                         :kwk          false}}))\r\n"]}