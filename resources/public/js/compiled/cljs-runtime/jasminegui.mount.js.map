{"version":3,"sources":["jasminegui/mount.cljs"],"mappings":"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","names":["jasminegui.mount/default-db","cljs.core/set","jasminegui.tools/int-to-gdate","cljs-time.core/today","re_frame.core.reg_event_db.cljs$core$IFn$_invoke$arity$2","_","seq__92554","cljs.core/seq","chunk__92555","count__92556","i__92557","temp__5735__auto__","cljs.core/chunked-seq?","c__4556__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next","k","cljs.core/keys","G__92564","G__92565","G__92566","G__92567","re-frame.core/reg-sub","db","seq__92568","chunk__92569","count__92570","i__92571","p__92580","vec__92581","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","p__92584","vec__92585","data","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","p__92588","vec__92589","positions","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","p__92592","vec__92593","portfolio","cljs.core/assoc-in","p__92596","vec__92597","portfolios","seq__92600","chunk__92601","count__92602","i__92603","p__92612","vec__92613","p__92616","vec__92617","id","f","p__92620","vec__92621","qt-date","clojure.string/replace","p__92624","vec__92625","attribution-date","p__92628","vec__92629","snapshot","G__92632","js/Error","p__92633","vec__92634","shortcut-key","cljs.core.keyword.cljs$core$IFn$_invoke$arity$1","cljs.core/name","shortcut-value","p__92637","vec__92638","G__92641","jasminegui.mount/http-get-dispatch","request","c__41764__auto__","cljs.core.async.chan.cljs$core$IFn$_invoke$arity$1","cljs.core.async.impl.dispatch/run","f__41765__auto__","switch__41741__auto__","state_92670","state_val_92671","inst_92642","inst_92643","cljs.core.async.impl.ioc-helpers/take!","inst_92645","inst_92646","inst_92647","statearr-92672","statearr-92673","statearr-92674","inst_92649","inst_92650","inst_92651","statearr-92675","inst_92653","statearr-92676","inst_92655","inst_92656","inst_92657","inst_92658","statearr-92677","statearr-92678","statearr-92679","inst_92660","cljs.core/PersistentVector","inst_92661","inst_92662","inst_92663","inst_92664","inst_92665","statearr-92680","statearr-92681","inst_92668","cljs.core.async.impl.ioc-helpers/return-chan","statearr-92682","state-machine__41742__auto__","ret-value__41743__auto__","result__41744__auto__","cljs.core/keyword-identical?","e92683","js/Object","ex__41745__auto__","statearr-92684","cljs.core.async.impl.ioc-helpers/process-exception","state__41766__auto__","statearr-92685","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","cljs-http.client/get","re-frame.core/dispatch","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$variadic","js/JSON.parse","G__92686","G__92687","re-frame.core/reg-fx","jasminegui.mount/http-post-dispatch","state_92720","state_val_92721","inst_92688","inst_92689","inst_92690","inst_92691","inst_92692","cljs.core/PersistentHashMap","inst_92693","inst_92695","inst_92696","inst_92697","statearr-92722","statearr-92723","statearr-92724","inst_92699","inst_92700","inst_92701","statearr-92725","inst_92703","statearr-92726","inst_92705","inst_92706","inst_92707","inst_92708","statearr-92727","statearr-92728","statearr-92729","inst_92710","inst_92711","inst_92712","inst_92713","inst_92714","inst_92715","statearr-92730","statearr-92731","inst_92718","statearr-92732","e92733","statearr-92734","statearr-92735","cljs_http.client.post.cljs$core$IFn$_invoke$arity$variadic","G__92736","G__92737","jasminegui.mount/simple-http-get-events","seq__92738","chunk__92739","count__92740","i__92741","line","re_frame.core.reg_event_fx.cljs$core$IFn$_invoke$arity$2","p__92756","p__92757","map__92758","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","vec__92759","p__92763","p__92764","map__92765","vec__92766","jasminegui.static/server-address","p__92770","p__92771","map__92772","vec__92773","p__92777","p__92778","map__92779","vec__92780","p__92784","p__92785","map__92786","vec__92787","p__92791","p__92792","map__92793","vec__92794","p__92798","p__92799","map__92800","vec__92801","period","p__92805","p__92806","map__92807","vec__92808","p__92812","p__92813","map__92814","vec__92815","p__92819","p__92820","map__92821","vec__92822","target","p__92826","p__92827","map__92828","vec__92829","ktarget","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","jasminegui.tables/attribution-table-columns","p__92833","p__92834","map__92835","vec__92836","p__92840","p__92841","map__92842","vec__92843"],"sourcesContent":["(ns jasminegui.mount\r\n  (:require\r\n    [reagent.core :as r]\r\n    [jasminegui.static :as static]\r\n    [re-frame.core :as rf]\r\n    [cljs-http.client :as http]\r\n    [cljs.core.async :refer [<!]]\r\n    [jasminegui.tables :as tables]\r\n    [jasminegui.tools :as tools]\r\n    [cljs-time.core :refer [today]]\r\n    ;[re-pressed.core :as rp]\r\n    )\r\n  (:require-macros [cljs.core.async.macros :refer [go]])\r\n  )\r\n\r\n\r\n(def default-db {\r\n                 ;data\r\n                 :positions                                          []\r\n                 :positions-new                                      {} ;map will be portfolio -> sub positions\r\n                 :rating-to-score                                    nil\r\n                 :pivoted-positions                                  []\r\n                 :portfolios                                         []\r\n                 :ex-emcd-portfolios                                 []\r\n                 :total-positions                                    {}\r\n                 :qt-date                                            \"undefined\"\r\n                 :attribution-date                                   \"undefined\"\r\n\r\n                 ;navigation\r\n                 :navigation/active-view                             :home\r\n                 :navigation/active-home                             :summary\r\n                 :navigation/active-var                              :overview\r\n                 :navigation/active-attribution                      :summary\r\n                 :navigation/success-modal                           {:show false :on-close nil :response nil}\r\n                 :navigation/show-mounting-modal                     true\r\n\r\n                 ;single-portfolio view\r\n                 :single-portfolio-risk/display-style                \"Tree\"\r\n                 :single-portfolio-risk/portfolio                    \"OGEMCORD\"\r\n                 :single-portfolio-risk/filter                       {1 :region 2 :country 3 :issuer}\r\n                 :single-portfolio-risk/hide-zero-holdings           true\r\n                 :single-portfolio-risk/table-filter                 []\r\n                 :single-portfolio-risk/shortcut                     1\r\n\r\n                 ;multiple-portfolio view\r\n                 :multiple-portfolio-risk/display-style              \"Table\"\r\n                 :multiple-portfolio-risk/field-number               \"One\"\r\n                 :multiple-portfolio-risk/field-one                  :nav\r\n                 :multiple-portfolio-risk/field-two                  \"None\"\r\n                 :multiple-portfolio-risk/selected-portfolios        (set nil) ;[\"OGEMCORD\"]\r\n                 :multiple-portfolio-risk/filter                     {1 :region 2 :country 3 :issuer}\r\n                 :multiple-portfolio-risk/hide-zero-holdings         true\r\n                 :multiple-portfolio-risk/shortcut                   1\r\n                 :multiple-portfolio-risk/table-filter               []\r\n\r\n                 ;portfolio-alignment-view\r\n                 :portfolio-alignment/display-style                  \"Tree\"\r\n                 :portfolio-alignment/field                          :nav\r\n                 :portfolio-alignment/filter                         {1 :region 2 :country 3 :issuer}\r\n                 :portfolio-alignment/group                          :cembi\r\n                 :portfolio-alignment/threshold                      :quarter\r\n                 :portfolio-alignment/shortcut                       1\r\n                 :portfolio-alignment/table-filter                   []\r\n\r\n                 ;var view\r\n                 :var/portfolio                                      \"OGEMCORD\"\r\n                 :var/result                                         nil\r\n                 :var/proxies                                        nil\r\n                 :var/history                                        nil\r\n                 :var/data                                           nil\r\n                 :var/dates                                          nil\r\n                 :var/chart-period                                   :daily-3y\r\n\r\n                 ;trade history\r\n                 :trade-history/active-bond                          nil\r\n                 :trade-history/history                              nil\r\n\r\n                 ;single-portfolio attribution\r\n                 :single-portfolio-attribution/display-style         \"Tree\"\r\n                 :single-portfolio-attribution/portfolio             \"OGEMCORD\"\r\n                 :single-portfolio-attribution/filter                {1 :region 2 :country 3 :issuer}\r\n                 :single-portfolio-attribution/period                \"ytd\"\r\n                 :single-portfolio-attribution/table-filter          []\r\n                 :single-portfolio-attribution/shortcut              1\r\n                 :single-portfolio-attribution/table                 []\r\n\r\n                 ;multiple-portfolio attribution\r\n                 :multiple-portfolio-attribution/display-style       \"Tree\"\r\n                 :multiple-portfolio-attribution/field-number        \"One\"\r\n                 :multiple-portfolio-attribution/period              \"ytd\"\r\n                 :multiple-portfolio-attribution/field-one           :total-effect\r\n                 :multiple-portfolio-attribution/field-two           \"None\"\r\n                 :multiple-portfolio-attribution/selected-portfolios (set nil) ;[\"OGEMCORD\"]\r\n                 :multiple-portfolio-attribution/filter              {1 :region 2 :country 3 :issuer}\r\n                 :multiple-portfolio-attribution/shortcut            1\r\n                 :multiple-portfolio-attribution/table-filter        []\r\n                 :multiple-portfolio-attribution/table               []\r\n\r\n                 :attribution/summary                                []\r\n\r\n                 :single-bond-trade-history/data                     []\r\n                 :single-bond-trade-history/flat-data                []\r\n                 :single-bond-trade-history/bond                     nil\r\n                 :single-bond-trade-history/show-modal               false\r\n                 :single-bond-trade-history/show-flat-modal          false\r\n                 :single-bond-trade-history/show-throbber            false\r\n                 :portfolio-trade-history/data                       []\r\n                 :portfolio-trade-history/portfolio                  \"OGEMCORD\"\r\n                 :portfolio-trade-history/start-date                 (tools/int-to-gdate 20200101)\r\n                 :portfolio-trade-history/end-date                   (tools/int-to-gdate (today))\r\n                 :portfolio-trade-history/performance                \"No\"\r\n\r\n                 :portfolio-review/portfolio                         \"OGEMCORD\"\r\n                 :portfolio-review/active-tab                        :summary\r\n                 :portfolio-review/summary-data                      nil\r\n                 :portfolio-review/contribution-chart-data           nil\r\n                 :portfolio-review/alpha-chart-data                  nil\r\n                 :portfolio-review/jensen-chart-data                 nil\r\n                 :portfolio-review/marginal-beta-chart-data          nil\r\n                 :portfolio-review/historical-beta-chart-data        nil\r\n                 :portfolio-review/historical-performance-chart-data nil\r\n\r\n                 :betas/table                                        nil\r\n\r\n                 :bond-price-history/price                          []\r\n                 :bond-price-history/name                          []\r\n\r\n                 :esg/refinitiv-ids                       nil\r\n                 :esg/active-home                         :find-issuers\r\n                 :esg/selected-companies                  []\r\n\r\n\r\n\r\n                 })\r\n\r\n(rf/reg-event-db ::initialize-db (fn [_ _] default-db))\r\n(doseq [k (keys default-db)] (rf/reg-sub k (fn [db] (k db))))\r\n\r\n\r\n(doseq [k [:navigation/active-view\r\n           :navigation/active-home\r\n           :navigation/active-var\r\n           :navigation/active-attribution\r\n           :rating-to-score\r\n           :pivoted-positions\r\n           :total-positions\r\n           :var/proxies\r\n           :var/dates\r\n           :var/data\r\n           :var/portfolio\r\n           :var/chart-period\r\n           \r\n           :single-portfolio-risk/portfolio\r\n           :single-portfolio-risk/display-style\r\n           :single-portfolio-risk/hide-zero-holdings\r\n           :single-portfolio-risk/table-filter\r\n           \r\n           :multiple-portfolio-risk/display-style\r\n           :multiple-portfolio-risk/field-number\r\n           :multiple-portfolio-risk/field-one\r\n           :multiple-portfolio-risk/field-two\r\n           :multiple-portfolio-risk/selected-portfolios\r\n           :multiple-portfolio-risk/hide-zero-holdings\r\n           :multiple-portfolio-risk/shortcut\r\n           :multiple-portfolio-risk/table-filter\r\n           \r\n           :portfolio-alignment/display-style\r\n           :portfolio-alignment/field\r\n           :portfolio-alignment/group\r\n           :portfolio-alignment/threshold\r\n           :portfolio-alignment/shortcut\r\n           :portfolio-alignment/table-filter\r\n\r\n           :single-portfolio-attribution/portfolio\r\n           :single-portfolio-attribution/display-style\r\n           :single-portfolio-attribution/period\r\n           :single-portfolio-attribution/table-filter\r\n           :single-portfolio-attribution/table\r\n\r\n           :multiple-portfolio-attribution/display-style\r\n           :multiple-portfolio-attribution/field-number\r\n           :multiple-portfolio-attribution/field-one\r\n           :multiple-portfolio-attribution/field-two\r\n           :multiple-portfolio-attribution/selected-portfolios\r\n           :multiple-portfolio-attribution/hide-zero-holdings\r\n           :multiple-portfolio-attribution/shortcut\r\n           :multiple-portfolio-attribution/table-filter\r\n           :multiple-portfolio-attribution/table\r\n           :multiple-portfolio-attribution/period\r\n\r\n           :attribution/summary\r\n\r\n           :single-bond-trade-history/show-flat-modal\r\n           :single-bond-trade-history/flat-data\r\n           :single-bond-trade-history/show-modal\r\n           :single-bond-trade-history/data\r\n           :single-bond-trade-history/bond\r\n           :single-bond-trade-history/show-throbber\r\n           :portfolio-trade-history/portfolio\r\n           :portfolio-trade-history/start-date\r\n           :portfolio-trade-history/end-date\r\n           :portfolio-trade-history/performance\r\n\r\n           :portfolio-review/portfolio\r\n           :portfolio-review/active-tab\r\n           :portfolio-review/summary-data\r\n           :portfolio-review/contribution-chart-data\r\n           :portfolio-review/alpha-chart-data\r\n           :portfolio-review/jensen-chart-data\r\n           :portfolio-review/marginal-beta-chart-data\r\n           :portfolio-review/historical-beta-chart-data\r\n           :portfolio-review/historical-performance-chart-data\r\n\r\n           :betas/table\r\n\r\n           :bond-price-history/price\r\n           :bond-price-history/name\r\n\r\n           :esg/refinitiv-ids\r\n           :esg/active-home\r\n\r\n\r\n           ]] (rf/reg-event-db k (fn [db [_ data]] (assoc db k data))))\r\n\r\n\r\n(rf/reg-event-db\r\n  :positions\r\n  (fn [db [_ positions]]\r\n    (assoc db :positions positions\r\n              :navigation/show-mounting-modal false)))\r\n\r\n(rf/reg-event-db\r\n  :positions-new\r\n  (fn [db [_ portfolio positions]]\r\n    (-> db\r\n        (assoc-in [:positions-new portfolio] positions)\r\n        (assoc :navigation/show-mounting-modal false)\r\n        )))\r\n\r\n(rf/reg-event-db\r\n  :portfolios\r\n  (fn [db [_ portfolios]]\r\n      (assoc db :portfolios portfolios\r\n                :multiple-portfolio-risk/selected-portfolios (set portfolios)\r\n                :multiple-portfolio-attribution/selected-portfolios (set portfolios))))\r\n\r\n(doseq [k [:single-portfolio-risk/filter\r\n           :multiple-portfolio-risk/filter\r\n           :portfolio-alignment/filter\r\n           :single-portfolio-attribution/filter\r\n           :multiple-portfolio-attribution/filter]]\r\n  (rf/reg-event-db\r\n    k\r\n    (fn [db [_ id f]] (assoc-in db [k id] f))))\r\n\r\n(rf/reg-event-db\r\n  :qt-date\r\n  (fn [db [_ qt-date]] (assoc db :qt-date (clojure.string/replace qt-date \"\\\"\" \"\"))))\r\n\r\n(rf/reg-event-db\r\n  :attribution-date\r\n  (fn [db [_ attribution-date]] (assoc db :attribution-date (clojure.string/replace attribution-date \"\\\"\" \"\"))))\r\n\r\n;THIS IS A DUMMY - IN PRACTICE WE'D DO MORE THINGS HERE\r\n(rf/reg-event-db\r\n  :single-portfolio-risk/shortcut\r\n  (fn [db [_ snapshot]]\r\n    (case snapshot\r\n      1 (assoc db :single-portfolio-risk/shortcut snapshot)\r\n      2 (assoc db :single-portfolio-risk/shortcut snapshot)\r\n      3 (assoc db :single-portfolio-risk/shortcut snapshot)\r\n      4 (assoc db :single-portfolio-risk/shortcut snapshot))))\r\n\r\n(rf/reg-event-db\r\n  :cycle-shortcut\r\n  (fn [db [_ _ _]]\r\n    (let [shortcut-key (keyword (str (name (:navigation/active-home db)) \"-risk/shortcut\"))\r\n          shortcut-value (shortcut-key db)]\r\n      (cond\r\n        (< shortcut-value 4) (assoc db shortcut-key (inc shortcut-value))\r\n        :else (assoc db shortcut-key 1)))))\r\n\r\n(rf/reg-event-db\r\n  :tree-table\r\n  (fn [db [_ _ _]]\r\n    (let [shortcut-key (keyword (str (name (:navigation/active-home db)) \"-risk/display-style\"))]\r\n      (case (shortcut-key db)\r\n        \"Tree\"  (assoc db shortcut-key \"Table\")\r\n        \"Table\" (assoc db shortcut-key \"Tree\")))))\r\n\r\n;;;;;;;;;;;;;;;;;;;;;;;\r\n;;HTTP GET DEFINITION;;\r\n;;;;;;;;;;;;;;;;;;;;;;;\r\n\r\n(defn http-get-dispatch [request]\r\n  (go (let [response (<! (http/get (:url request)))]\r\n        (rf/dispatch (conj (:dispatch-key request)\r\n                           (if (:kwk request)\r\n                             (js->clj (js/JSON.parse (:body response)) :keywordize-keys true)\r\n                             (:body response))))\r\n        (if (:flag request) (rf/dispatch [(:flag request) (:flag-value request)])))))\r\n\r\n(rf/reg-fx :http-get-dispatch http-get-dispatch)\r\n\r\n(defn http-post-dispatch [request]\r\n  (go (let [response (<! (http/post (:url request) {:edn-params (:edn-params request)}))]\r\n        (rf/dispatch (conj (:dispatch-key request)\r\n                           (if (:kwk request)\r\n                             (js->clj (js/JSON.parse (:body response)) :keywordize-keys true)\r\n                             (:body response))))\r\n        (if (:flag request) (rf/dispatch [(:flag request) (:flag-value request)])))))\r\n\r\n(rf/reg-fx :http-post-dispatch http-post-dispatch)\r\n\r\n\r\n(def simple-http-get-events\r\n  [{:get-key :get-positions         :url-tail \"positions\"         :dis-key :positions}\r\n   {:get-key :get-rating-to-score   :url-tail \"rating-to-score\"   :dis-key :rating-to-score}\r\n   {:get-key :get-portfolios        :url-tail \"portfolios\"        :dis-key :portfolios}\r\n   {:get-key :get-pivoted-positions :url-tail \"pivoted-positions\" :dis-key :pivoted-positions}\r\n   {:get-key :get-total-positions   :url-tail \"total-positions\"   :dis-key :total-positions}\r\n   {:get-key :get-qt-date           :url-tail \"qt-date\"           :dis-key :qt-date}\r\n   {:get-key :get-var-proxies       :url-tail \"var-proxies\"       :dis-key :var/proxies}\r\n   {:get-key :get-var-dates         :url-tail \"var-dates\"         :dis-key :var/dates}\r\n   {:get-key :get-betas             :url-tail \"beta-table\"        :dis-key :betas/table}\r\n   {:get-key :get-refinitiv-ids     :url-tail \"refinitiv-ids\"     :dis-key :esg/refinitiv-ids}\r\n   ])\r\n\r\n(doseq [line simple-http-get-events]\r\n  (rf/reg-event-fx\r\n    (:get-key line)\r\n    (fn [{:keys [db]} [_]]\r\n      {:http-get-dispatch {:url          (str static/server-address (:url-tail line))\r\n                           :dispatch-key [(:dis-key line)]\r\n                           :kwk          true}})))\r\n\r\n(rf/reg-event-fx\r\n  :get-positions-new\r\n  (fn [{:keys [db]} [_ portfolio]]\r\n    {:http-get-dispatch {:url          (str static/server-address \"positions-new?portfolio=\" portfolio)\r\n                         :dispatch-key [:positions-new portfolio]\r\n                         :kwk          true}}))\r\n\r\n(rf/reg-event-fx\r\n  :get-var-data\r\n  (fn [{:keys [db]} [_ portfolio]]\r\n    {:http-get-dispatch {:url          (str static/server-address \"var-data?portfolio=\" portfolio)\r\n                         :dispatch-key [:var/data]\r\n                         :kwk          true}}))\r\n\r\n(rf/reg-event-fx\r\n  :get-portfolio-var\r\n  (fn [{:keys [db]} [_ portfolio]]\r\n    {:db (assoc db :var/portfolio portfolio)\r\n     :http-get-dispatch {:url          (str static/server-address \"var-data?portfolio=\" portfolio)\r\n                         :dispatch-key [:var/data]\r\n                         :kwk          true}}))\r\n\r\n(rf/reg-event-fx\r\n  :get-attribution-date\r\n  (fn [{:keys [db]} [_]]\r\n    {:http-get-dispatch {:url          (str static/server-address \"attribution?query-type=attribution-date\")\r\n                         :dispatch-key [:attribution-date]\r\n                         :kwk          false}}))\r\n\r\n;SINGLE ATTRIBUTION\r\n(rf/reg-event-fx\r\n  :get-single-attribution\r\n  (fn [{:keys [db]} [_ portfolio period]]\r\n    {:http-get-dispatch {:url          (str static/server-address \"attribution?query-type=single-portfolio&portfolio=\" portfolio \"&period=\" period)\r\n                         :dispatch-key [:single-portfolio-attribution/table]\r\n                         :kwk          true}}))\r\n\r\n(rf/reg-event-fx\r\n  :change-single-attribution-portfolio\r\n  (fn [{:keys [db]} [_ portfolio]]\r\n    {:db (assoc db :single-portfolio-attribution/portfolio portfolio)\r\n     :http-get-dispatch {:url          (str static/server-address \"attribution?query-type=single-portfolio&portfolio=\" portfolio \"&period=\" (:single-portfolio-attribution/period db))\r\n                         :dispatch-key [:single-portfolio-attribution/table]\r\n                         :kwk          true}}))\r\n\r\n(rf/reg-event-fx\r\n  :change-single-attribution-period\r\n  (fn [{:keys [db]} [_ period]]\r\n    {:db (assoc db :single-portfolio-attribution/period period)\r\n     :http-get-dispatch {:url          (str static/server-address \"attribution?query-type=single-portfolio&portfolio=\" (:single-portfolio-attribution/portfolio db) \"&period=\" period)\r\n                         :dispatch-key [:single-portfolio-attribution/table]\r\n                         :kwk          true}}))\r\n\r\n;MULTIPLE ATTRIBUTION\r\n(rf/reg-event-fx\r\n  :get-multiple-attribution\r\n  (fn [{:keys [db]} [_ target period]]\r\n    {:http-get-dispatch {:url          (str static/server-address \"attribution?query-type=multiple-portfolio&target=\" target \"&period=\" period)\r\n                         :dispatch-key [:multiple-portfolio-attribution/table]\r\n                         :kwk          true}}))\r\n\r\n(rf/reg-event-fx\r\n  :change-multiple-attribution-target\r\n  (fn [{:keys [db]} [_ ktarget]]\r\n    (let [target (clojure.string.replace (get-in tables/attribution-table-columns [ktarget :accessor]) \"-\" \" \")]\r\n      {:db                (assoc db :multiple-portfolio-attribution/field-one ktarget)\r\n       :http-get-dispatch {:url          (str static/server-address \"attribution?query-type=multiple-portfolio&target=\" target \"&period=\" (:multiple-portfolio-attribution/period db))\r\n                           :dispatch-key [:multiple-portfolio-attribution/table]\r\n                           :kwk          true}})))\r\n\r\n(rf/reg-event-fx\r\n  :change-multiple-attribution-period\r\n  (fn [{:keys [db]} [_ period]]\r\n    (let [target (clojure.string.replace (get-in tables/attribution-table-columns [(:multiple-portfolio-attribution/field-one db) :accessor]) \"-\" \" \")]\r\n      {:db                (assoc db :multiple-portfolio-attribution/period period)\r\n       :http-get-dispatch {:url          (str static/server-address \"attribution?query-type=multiple-portfolio&target=\" target \"&period=\" period)\r\n                           :dispatch-key [:multiple-portfolio-attribution/table]\r\n                           :kwk          true}})))\r\n\r\n;SUMMARY ATTRIBUTION\r\n(rf/reg-event-fx\r\n  :get-attribution-summary\r\n  (fn [{:keys [db]} [_]]\r\n    {:http-get-dispatch {:url          (str static/server-address \"attribution?query-type=summary\")\r\n                         :dispatch-key [:attribution/summary]\r\n                         :kwk          true}}))\r\n\r\n"]}