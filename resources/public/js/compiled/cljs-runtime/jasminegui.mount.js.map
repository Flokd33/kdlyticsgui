{"version":3,"sources":["jasminegui/mount.cljs"],"mappings":"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","names":["jasminegui.mount/dev-server-address","jasminegui.mount/prod-server-address","jasminegui.mount/server-address","jasminegui.mount/default-db","cljs.core/set","re_frame.core.reg_event_db.cljs$core$IFn$_invoke$arity$2","_","seq__56856","cljs.core/seq","chunk__56857","count__56858","i__56859","temp__5735__auto__","cljs.core/chunked-seq?","c__4556__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next","k","cljs.core/keys","G__56864","G__56865","G__56866","G__56867","re-frame.core/reg-sub","db","seq__56868","chunk__56869","count__56870","i__56871","p__56880","vec__56881","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","p__56884","vec__56885","data","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","p__56888","vec__56889","portfolios","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","p__56892","vec__56893","id","f","cljs.core/assoc-in","p__56896","vec__56897","p__56900","vec__56901","p__56904","vec__56905","qt-date","clojure.string/replace","jasminegui.mount/http-get-dispatch","request","c__49513__auto__","cljs.core.async.chan.cljs$core$IFn$_invoke$arity$1","cljs.core.async.impl.dispatch/run","f__49514__auto__","switch__49443__auto__","state_56936","state_val_56937","inst_56908","inst_56909","cljs.core.async.impl.ioc-helpers/take!","inst_56911","inst_56912","inst_56913","statearr-56938","statearr-56939","statearr-56940","inst_56915","inst_56916","inst_56917","statearr-56941","inst_56919","statearr-56942","inst_56921","inst_56922","inst_56923","inst_56924","statearr-56943","statearr-56944","statearr-56945","inst_56926","cljs.core/PersistentVector","inst_56927","inst_56928","inst_56929","inst_56930","inst_56931","statearr-56946","statearr-56947","inst_56934","cljs.core.async.impl.ioc-helpers/return-chan","statearr-56948","state-machine__49444__auto__","ret-value__49445__auto__","result__49446__auto__","cljs.core/keyword-identical?","e56949","js/Object","ex__49447__auto__","statearr-56950","cljs.core.async.impl.ioc-helpers/process-exception","state__49515__auto__","statearr-56951","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","cljs-http.client/get","re-frame.core/dispatch","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$variadic","js/JSON.parse","G__56952","G__56953","re-frame.core/reg-fx","re_frame.core.reg_event_fx.cljs$core$IFn$_invoke$arity$2","p__56954","p__56955","map__56956","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","vec__56957","p__56961","p__56962","map__56963","vec__56964","p__56968","p__56969","map__56970","vec__56971","p__56975","p__56976","map__56977","vec__56978","p__56982","p__56983","map__56984","vec__56985","p__56989","p__56990","map__56991","vec__56992"],"sourcesContent":["(ns jasminegui.mount\r\n  (:require\r\n    [reagent.core :as r]\r\n    [jasminegui.static :as static]\r\n    [re-frame.core :as rf]\r\n    [cljs-http.client :as http]\r\n    [cljs.core.async :refer [<!]])\r\n  (:require-macros [cljs.core.async.macros :refer [go]])\r\n  )\r\n\r\n\r\n(def dev-server-address \"http://localhost:3501/\")\r\n(def prod-server-address \"http://iamlfilive:3501/\")\r\n(def server-address dev-server-address)              ;\"http://localhost:3501/\r\n\r\n\r\n\r\n(def default-db {:positions                                   []\r\n                 :rating-to-score                             nil\r\n                 :pivoted-positions                           []\r\n                 :portfolios                                  []\r\n                 :total-positions                             {}\r\n                 :active-view                                 :home\r\n                 :active-home                                 :summary\r\n                 :qt-date                                     \"undefined\"\r\n\r\n                 :single-portfolio-risk/display-style         \"Tree\"\r\n                 :single-portfolio-risk/portfolio             \"OGEMCORD\"\r\n                 :single-portfolio-risk/filter                {1 :region 2 :country 3 :issuer}\r\n                 :single-portfolio-risk/hide-zero-holdings    true\r\n                 :single-portfolio-risk/table-filter          []\r\n\r\n                 :multiple-portfolio-risk/display-style       \"Table\"\r\n                 :multiple-portfolio-risk/field-number        \"One\"\r\n                 :multiple-portfolio-risk/field-one           :nav\r\n                 :multiple-portfolio-risk/field-two           \"None\"\r\n                 :multiple-portfolio-risk/selected-portfolios (set nil) ;[\"OGEMCORD\"]\r\n                 :multiple-portfolio-risk/filter              {1 :region 2 :country 3 :issuer}\r\n                 :multiple-portfolio-risk/hide-zero-holdings    true\r\n\r\n                 :portfolio-alignment/display-style           \"Tree\"\r\n                 :portfolio-alignment/field                   :nav\r\n                 :portfolio-alignment/filter                  {1 :region 2 :country 3 :issuer}\r\n                 :portfolio-alignment/group                   :cembi\r\n                 :portfolio-alignment/threshold               :quarter\r\n\r\n                 })\r\n\r\n(rf/reg-event-db ::initialize-db (fn [_ _] default-db))\r\n(doseq [k (keys default-db)] (rf/reg-sub k (fn [db] (k db))))\r\n(doseq [k [:active-view\r\n           :active-home\r\n           :positions\r\n           :rating-to-score\r\n           :pivoted-positions\r\n           :total-positions\r\n           :single-portfolio-risk/portfolio\r\n           :single-portfolio-risk/display-style\r\n           :single-portfolio-risk/hide-zero-holdings\r\n           :single-portfolio-risk/table-filter\r\n           :multiple-portfolio-risk/display-style\r\n           :multiple-portfolio-risk/field-number\r\n           :multiple-portfolio-risk/field-one\r\n           :multiple-portfolio-risk/field-two\r\n           :multiple-portfolio-risk/selected-portfolios\r\n           :multiple-portfolio-risk/hide-zero-holdings\r\n           :portfolio-alignment/display-style\r\n           :portfolio-alignment/field\r\n           :portfolio-alignment/group\r\n           :portfolio-alignment/threshold\r\n           ]] (rf/reg-event-db k (fn [db [_ data]] (assoc db k data))))\r\n\r\n(rf/reg-event-db\r\n  :portfolios\r\n  (fn [db [_ portfolios]]\r\n      (assoc db :portfolios portfolios\r\n                :multiple-portfolio-risk/selected-portfolios (set portfolios))))\r\n\r\n(rf/reg-event-db\r\n  :single-portfolio-risk/filter\r\n  (fn [db [_ id f]] (assoc-in db [:single-portfolio-risk/filter id] f)))\r\n\r\n(rf/reg-event-db\r\n  :multiple-portfolio-risk/filter\r\n  (fn [db [_ id f]] (assoc-in db [:multiple-portfolio-risk/filter id] f)))\r\n\r\n(rf/reg-event-db\r\n  :portfolio-alignment/filter\r\n  (fn [db [_ id f]] (assoc-in db [:portfolio-alignment/filter id] f)))\r\n\r\n(rf/reg-event-db\r\n  :qt-date\r\n  (fn [db [_ qt-date]] (assoc db :qt-date (clojure.string/replace qt-date \"\\\"\" \"\"))))\r\n\r\n;;;;;;;;;;;;;;;;;;;;;;;\r\n;;HTTP GET DEFINITION;;\r\n;;;;;;;;;;;;;;;;;;;;;;;\r\n\r\n(defn http-get-dispatch [request]\r\n  (go (let [response (<! (http/get (:url request)))]\r\n        (rf/dispatch (conj (:dispatch-key request)\r\n                           (if (:kwk request)\r\n                             (js->clj (js/JSON.parse (:body response)) :keywordize-keys true)\r\n                             (:body response))))\r\n        (if (:flag request) (rf/dispatch [(:flag request) (:flag-value request)])))))\r\n\r\n(rf/reg-fx :http-get-dispatch http-get-dispatch)\r\n\r\n(rf/reg-event-fx\r\n  :get-positions\r\n  (fn [{:keys [db]} [_]]\r\n    {:http-get-dispatch {:url          (str server-address \"positions\") ;(str \"http://iamlfilive:3501/positions\")\r\n                         :dispatch-key [:positions]\r\n                         :kwk          true}}))\r\n\r\n(rf/reg-event-fx\r\n  :get-rating-to-score\r\n  (fn [{:keys [db]} [_]]\r\n    {:http-get-dispatch {:url          (str server-address \"rating-to-score\") ;(str \"http://iamlfilive:3501/positions\")\r\n                         :dispatch-key [:rating-to-score]\r\n                         :kwk          true}}))\r\n\r\n(rf/reg-event-fx\r\n  :get-portfolios\r\n  (fn [{:keys [db]} [_]]\r\n    {:http-get-dispatch {:url          (str server-address \"portfolios\") ;(str \"http://iamlfilive:3501/positions\")\r\n                         :dispatch-key [:portfolios]\r\n                         :kwk          true}}))\r\n\r\n\r\n(rf/reg-event-fx\r\n  :get-pivoted-positions\r\n  (fn [{:keys [db]} [_]]\r\n    {:http-get-dispatch {:url          (str server-address \"pivoted-positions\") ;(str \"http://iamlfilive:3501/positions\")\r\n                         :dispatch-key [:pivoted-positions]\r\n                         :kwk          true}}))\r\n\r\n(rf/reg-event-fx\r\n  :get-total-positions\r\n  (fn [{:keys [db]} [_]]\r\n    {:http-get-dispatch {:url          (str server-address \"total-positions\") ;(str \"http://iamlfilive:3501/positions\")\r\n                         :dispatch-key [:total-positions]\r\n                         :kwk          true}}))\r\n\r\n(rf/reg-event-fx\r\n  :get-qt-date\r\n  (fn [{:keys [db]} [_]]\r\n    {:http-get-dispatch {:url          (str server-address \"qt-date\") ;(str \"http://iamlfilive:3501/positions\")\r\n                         :dispatch-key [:qt-date]\r\n                         :kwk          false}}))\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"]}