{
"version":3,
"file":"module$node_modules$$tanstack$table_core$build$lib$core$column.js",
"lineCount":5,
"mappings":"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",
"sources":["node_modules/@tanstack/table-core/build/lib/core/column.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$tanstack$table_core$build$lib$core$column\"] = function(global,require,module,exports) {\n/**\n * table-core\n *\n * Copyright (c) TanStack\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar utils = require('../utils.js');\n\nfunction createColumn(table, columnDef, depth, parent) {\n  var _ref, _resolvedColumnDef$id;\n  const defaultColumn = table._getDefaultColumnDef();\n  const resolvedColumnDef = {\n    ...defaultColumn,\n    ...columnDef\n  };\n  const accessorKey = resolvedColumnDef.accessorKey;\n  let id = (_ref = (_resolvedColumnDef$id = resolvedColumnDef.id) != null ? _resolvedColumnDef$id : accessorKey ? accessorKey.replace('.', '_') : undefined) != null ? _ref : typeof resolvedColumnDef.header === 'string' ? resolvedColumnDef.header : undefined;\n  let accessorFn;\n  if (resolvedColumnDef.accessorFn) {\n    accessorFn = resolvedColumnDef.accessorFn;\n  } else if (accessorKey) {\n    // Support deep accessor keys\n    if (accessorKey.includes('.')) {\n      accessorFn = originalRow => {\n        let result = originalRow;\n        for (const key of accessorKey.split('.')) {\n          var _result;\n          result = (_result = result) == null ? void 0 : _result[key];\n          if (process.env.NODE_ENV !== 'production' && result === undefined) {\n            console.warn(`\"${key}\" in deeply nested key \"${accessorKey}\" returned undefined.`);\n          }\n        }\n        return result;\n      };\n    } else {\n      accessorFn = originalRow => originalRow[resolvedColumnDef.accessorKey];\n    }\n  }\n  if (!id) {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(resolvedColumnDef.accessorFn ? `Columns require an id when using an accessorFn` : `Columns require an id when using a non-string header`);\n    }\n    throw new Error();\n  }\n  let column = {\n    id: `${String(id)}`,\n    accessorFn,\n    parent: parent,\n    depth,\n    columnDef: resolvedColumnDef,\n    columns: [],\n    getFlatColumns: utils.memo(() => [true], () => {\n      var _column$columns;\n      return [column, ...((_column$columns = column.columns) == null ? void 0 : _column$columns.flatMap(d => d.getFlatColumns()))];\n    }, {\n      key: process.env.NODE_ENV === 'production' && 'column.getFlatColumns',\n      debug: () => {\n        var _table$options$debugA;\n        return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugColumns;\n      }\n    }),\n    getLeafColumns: utils.memo(() => [table._getOrderColumnsFn()], orderColumns => {\n      var _column$columns2;\n      if ((_column$columns2 = column.columns) != null && _column$columns2.length) {\n        let leafColumns = column.columns.flatMap(column => column.getLeafColumns());\n        return orderColumns(leafColumns);\n      }\n      return [column];\n    }, {\n      key: process.env.NODE_ENV === 'production' && 'column.getLeafColumns',\n      debug: () => {\n        var _table$options$debugA2;\n        return (_table$options$debugA2 = table.options.debugAll) != null ? _table$options$debugA2 : table.options.debugColumns;\n      }\n    })\n  };\n  column = table._features.reduce((obj, feature) => {\n    return Object.assign(obj, feature.createColumn == null ? void 0 : feature.createColumn(column, table));\n  }, column);\n\n  // Yes, we have to convert table to uknown, because we know more than the compiler here.\n  return column;\n}\n\nexports.createColumn = createColumn;\n//# sourceMappingURL=column.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","utils","createColumn","table","columnDef","depth","parent","_ref","_resolvedColumnDef$id","defaultColumn","_getDefaultColumnDef","resolvedColumnDef","accessorKey","id","replace","undefined","header","accessorFn","includes","originalRow","key","split","_result","result","console","warn","Error","column","String","columns","getFlatColumns","memo","_column$columns","flatMap","d","debug","_table$options$debugA","options","debugAll","debugColumns","getLeafColumns","_getOrderColumnsFn","orderColumns","_column$columns2","length","leafColumns","_table$options$debugA2","_features","reduce","obj","feature","assign"]
}
