shadow$provide.module$node_modules$$tanstack$table_core$build$lib$utils$getFilteredRowModel=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});var utils=require("module$node_modules$$tanstack$table_core$build$lib$utils"),filterRowsUtils=require("module$node_modules$$tanstack$table_core$build$lib$utils$filterRowsUtils");exports.getFilteredRowModel=function(){return table=>utils.memo(()=>[table.getPreFilteredRowModel(),table.getState().columnFilters,table.getState().globalFilter],
(rowModel,columnFilters,globalFilter)=>{if(!rowModel.rows.length||!(null!=columnFilters&&columnFilters.length||globalFilter)){for(columnFilters=0;columnFilters<rowModel.flatRows.length;columnFilters++)rowModel.flatRows[columnFilters].columnFilters={},rowModel.flatRows[columnFilters].columnFiltersMeta={};return rowModel}const resolvedColumnFilters=[],resolvedGlobalFilters=[];(null!=columnFilters?columnFilters:[]).forEach(d=>{var _filterFn$resolveFilt;const column=table.getColumn(d.id);if(column){var filterFn=
column.getFilterFn();filterFn?resolvedColumnFilters.push({id:d.id,filterFn,resolvedValue:null!=(_filterFn$resolveFilt=null==filterFn.resolveFilterValue?void 0:filterFn.resolveFilterValue(d.value))?_filterFn$resolveFilt:d.value}):console.warn(`Could not find a valid 'column.filterFn' for column with the ID: ${column.id}.`)}});const filterableIds=columnFilters.map(d=>d.id),globalFilterFn=table.getGlobalFilterFn();columnFilters=table.getAllLeafColumns().filter(column=>column.getCanGlobalFilter());globalFilter&&
globalFilterFn&&columnFilters.length&&(filterableIds.push("__global__"),columnFilters.forEach(column=>{var _globalFilterFn$resol;resolvedGlobalFilters.push({id:column.id,filterFn:globalFilterFn,resolvedValue:null!=(_globalFilterFn$resol=null==globalFilterFn.resolveFilterValue?void 0:globalFilterFn.resolveFilterValue(globalFilter))?_globalFilterFn$resol:globalFilter})}));for(columnFilters=0;columnFilters<rowModel.flatRows.length;columnFilters++){const row=rowModel.flatRows[columnFilters];row.columnFilters=
{};if(resolvedColumnFilters.length)for(var i$jscomp$0=0;i$jscomp$0<resolvedColumnFilters.length;i$jscomp$0++){var currentColumnFilter=resolvedColumnFilters[i$jscomp$0];const id=currentColumnFilter.id;row.columnFilters[id]=currentColumnFilter.filterFn(row,id,currentColumnFilter.resolvedValue,filterMeta=>{row.columnFiltersMeta[id]=filterMeta})}if(resolvedGlobalFilters.length){for(i$jscomp$0=0;i$jscomp$0<resolvedGlobalFilters.length;i$jscomp$0++){currentColumnFilter=resolvedGlobalFilters[i$jscomp$0];
const id=currentColumnFilter.id;if(currentColumnFilter.filterFn(row,id,currentColumnFilter.resolvedValue,filterMeta=>{row.columnFiltersMeta[id]=filterMeta})){row.columnFilters.__global__=!0;break}}!0!==row.columnFilters.__global__&&(row.columnFilters.__global__=!1)}}return filterRowsUtils.filterRows(rowModel.rows,row=>{for(let i=0;i<filterableIds.length;i++)if(!1===row.columnFilters[filterableIds[i]])return!1;return!0},table)},{key:"getFilteredRowModel",debug:()=>{var _table$options$debugA;return null!=
(_table$options$debugA=table.options.debugAll)?_table$options$debugA:table.options.debugTable},onChange:()=>{table._autoResetPageIndex()}})}}
//# sourceMappingURL=module$node_modules$$tanstack$table_core$build$lib$utils$getFilteredRowModel.js.map
