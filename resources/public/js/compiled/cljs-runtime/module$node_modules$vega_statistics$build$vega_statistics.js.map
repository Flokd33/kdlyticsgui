{
"version":3,
"file":"module$node_modules$vega_statistics$build$vega_statistics.js",
"lineCount":43,
"mappings":"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",
"sources":["node_modules/vega-statistics/build/vega-statistics.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$vega_statistics$build$vega_statistics\"] = function(global,require,module,exports) {\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n  typeof define === 'function' && define.amd ? define(['exports'], factory) :\n  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.vega = {}));\n})(this, (function (exports) { 'use strict';\n\n  function* numbers$1 (values, valueof) {\n    if (valueof == null) {\n      for (let value of values) {\n        if (value != null && value !== '' && (value = +value) >= value) {\n          yield value;\n        }\n      }\n    } else {\n      let index = -1;\n      for (let value of values) {\n        value = valueof(value, ++index, values);\n        if (value != null && value !== '' && (value = +value) >= value) {\n          yield value;\n        }\n      }\n    }\n  }\n\n  function ascending(a, b) {\n    return a == null || b == null ? NaN : a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;\n  }\n\n  function number(x) {\n    return x === null ? NaN : +x;\n  }\n  function* numbers(values, valueof) {\n    if (valueof === undefined) {\n      for (let value of values) {\n        if (value != null && (value = +value) >= value) {\n          yield value;\n        }\n      }\n    } else {\n      let index = -1;\n      for (let value of values) {\n        if ((value = valueof(value, ++index, values)) != null && (value = +value) >= value) {\n          yield value;\n        }\n      }\n    }\n  }\n\n  function variance(values, valueof) {\n    let count = 0;\n    let delta;\n    let mean = 0;\n    let sum = 0;\n    if (valueof === undefined) {\n      for (let value of values) {\n        if (value != null && (value = +value) >= value) {\n          delta = value - mean;\n          mean += delta / ++count;\n          sum += delta * (value - mean);\n        }\n      }\n    } else {\n      let index = -1;\n      for (let value of values) {\n        if ((value = valueof(value, ++index, values)) != null && (value = +value) >= value) {\n          delta = value - mean;\n          mean += delta / ++count;\n          sum += delta * (value - mean);\n        }\n      }\n    }\n    if (count > 1) return sum / (count - 1);\n  }\n\n  function deviation(values, valueof) {\n    const v = variance(values, valueof);\n    return v ? Math.sqrt(v) : v;\n  }\n\n  function compareDefined(compare = ascending) {\n    if (compare === ascending) return ascendingDefined;\n    if (typeof compare !== \"function\") throw new TypeError(\"compare is not a function\");\n    return (a, b) => {\n      const x = compare(a, b);\n      if (x || x === 0) return x;\n      return (compare(b, b) === 0) - (compare(a, a) === 0);\n    };\n  }\n  function ascendingDefined(a, b) {\n    return (a == null || !(a >= a)) - (b == null || !(b >= b)) || (a < b ? -1 : a > b ? 1 : 0);\n  }\n\n  function max(values, valueof) {\n    let max;\n    if (valueof === undefined) {\n      for (const value of values) {\n        if (value != null && (max < value || max === undefined && value >= value)) {\n          max = value;\n        }\n      }\n    } else {\n      let index = -1;\n      for (let value of values) {\n        if ((value = valueof(value, ++index, values)) != null && (max < value || max === undefined && value >= value)) {\n          max = value;\n        }\n      }\n    }\n    return max;\n  }\n\n  function min(values, valueof) {\n    let min;\n    if (valueof === undefined) {\n      for (const value of values) {\n        if (value != null && (min > value || min === undefined && value >= value)) {\n          min = value;\n        }\n      }\n    } else {\n      let index = -1;\n      for (let value of values) {\n        if ((value = valueof(value, ++index, values)) != null && (min > value || min === undefined && value >= value)) {\n          min = value;\n        }\n      }\n    }\n    return min;\n  }\n\n  // Based on https://github.com/mourner/quickselect\n  // ISC license, Copyright 2018 Vladimir Agafonkin.\n  function quickselect(array, k, left = 0, right = Infinity, compare) {\n    k = Math.floor(k);\n    left = Math.floor(Math.max(0, left));\n    right = Math.floor(Math.min(array.length - 1, right));\n    if (!(left <= k && k <= right)) return array;\n    compare = compare === undefined ? ascendingDefined : compareDefined(compare);\n    while (right > left) {\n      if (right - left > 600) {\n        const n = right - left + 1;\n        const m = k - left + 1;\n        const z = Math.log(n);\n        const s = 0.5 * Math.exp(2 * z / 3);\n        const sd = 0.5 * Math.sqrt(z * s * (n - s) / n) * (m - n / 2 < 0 ? -1 : 1);\n        const newLeft = Math.max(left, Math.floor(k - m * s / n + sd));\n        const newRight = Math.min(right, Math.floor(k + (n - m) * s / n + sd));\n        quickselect(array, k, newLeft, newRight, compare);\n      }\n      const t = array[k];\n      let i = left;\n      let j = right;\n      swap(array, left, k);\n      if (compare(array[right], t) > 0) swap(array, left, right);\n      while (i < j) {\n        swap(array, i, j), ++i, --j;\n        while (compare(array[i], t) < 0) ++i;\n        while (compare(array[j], t) > 0) --j;\n      }\n      if (compare(array[left], t) === 0) swap(array, left, j);else ++j, swap(array, j, right);\n      if (j <= k) left = j + 1;\n      if (k <= j) right = j - 1;\n    }\n    return array;\n  }\n  function swap(array, i, j) {\n    const t = array[i];\n    array[i] = array[j];\n    array[j] = t;\n  }\n\n  function quantile(values, p, valueof) {\n    values = Float64Array.from(numbers(values, valueof));\n    if (!(n = values.length) || isNaN(p = +p)) return;\n    if (p <= 0 || n < 2) return min(values);\n    if (p >= 1) return max(values);\n    var n,\n      i = (n - 1) * p,\n      i0 = Math.floor(i),\n      value0 = max(quickselect(values, i0).subarray(0, i0 + 1)),\n      value1 = min(values.subarray(i0 + 1));\n    return value0 + (value1 - value0) * (i - i0);\n  }\n  function quantileSorted(values, p, valueof = number) {\n    if (!(n = values.length) || isNaN(p = +p)) return;\n    if (p <= 0 || n < 2) return +valueof(values[0], 0, values);\n    if (p >= 1) return +valueof(values[n - 1], n - 1, values);\n    var n,\n      i = (n - 1) * p,\n      i0 = Math.floor(i),\n      value0 = +valueof(values[i0], i0, values),\n      value1 = +valueof(values[i0 + 1], i0 + 1, values);\n    return value0 + (value1 - value0) * (i - i0);\n  }\n\n  function median(values, valueof) {\n    return quantile(values, 0.5, valueof);\n  }\n\n  function quantiles (array, p, f) {\n    const values = Float64Array.from(numbers$1(array, f));\n\n    // don't depend on return value from typed array sort call\n    // protects against undefined sort results in Safari (vega/vega-lite#4964)\n    values.sort(ascending);\n    return p.map(_ => quantileSorted(values, _));\n  }\n\n  function quartiles (array, f) {\n    return quantiles(array, [0.25, 0.50, 0.75], f);\n  }\n\n  // Scott, D. W. (1992) Multivariate Density Estimation:\n  // Theory, Practice, and Visualization. Wiley.\n  function estimateBandwidth (array, f) {\n    const n = array.length,\n      d = deviation(array, f),\n      q = quartiles(array, f),\n      h = (q[2] - q[0]) / 1.34,\n      v = Math.min(d, h) || d || Math.abs(q[0]) || 1;\n    return 1.06 * v * Math.pow(n, -0.2);\n  }\n\n  function bin (_) {\n    // determine range\n    const maxb = _.maxbins || 20,\n      base = _.base || 10,\n      logb = Math.log(base),\n      div = _.divide || [5, 2];\n    let min = _.extent[0],\n      max = _.extent[1],\n      step,\n      level,\n      minstep,\n      v,\n      i,\n      n;\n    const span = _.span || max - min || Math.abs(min) || 1;\n    if (_.step) {\n      // if step size is explicitly given, use that\n      step = _.step;\n    } else if (_.steps) {\n      // if provided, limit choice to acceptable step sizes\n      v = span / maxb;\n      for (i = 0, n = _.steps.length; i < n && _.steps[i] < v; ++i);\n      step = _.steps[Math.max(0, i - 1)];\n    } else {\n      // else use span to determine step size\n      level = Math.ceil(Math.log(maxb) / logb);\n      minstep = _.minstep || 0;\n      step = Math.max(minstep, Math.pow(base, Math.round(Math.log(span) / logb) - level));\n\n      // increase step size if too many bins\n      while (Math.ceil(span / step) > maxb) {\n        step *= base;\n      }\n\n      // decrease step size if allowed\n      for (i = 0, n = div.length; i < n; ++i) {\n        v = step / div[i];\n        if (v >= minstep && span / v <= maxb) step = v;\n      }\n    }\n\n    // update precision, min and max\n    v = Math.log(step);\n    const precision = v >= 0 ? 0 : ~~(-v / logb) + 1,\n      eps = Math.pow(base, -precision - 1);\n    if (_.nice || _.nice === undefined) {\n      v = Math.floor(min / step + eps) * step;\n      min = min < v ? v - step : v;\n      max = Math.ceil(max / step) * step;\n    }\n    return {\n      start: min,\n      stop: max === min ? min + step : max,\n      step: step\n    };\n  }\n\n  exports.random = Math.random;\n  function setRandom(r) {\n    exports.random = r;\n  }\n\n  function bootstrapCI (array, samples, alpha, f) {\n    if (!array.length) return [undefined, undefined];\n    const values = Float64Array.from(numbers$1(array, f)),\n      n = values.length,\n      m = samples;\n    let a, i, j, mu;\n    for (j = 0, mu = Array(m); j < m; ++j) {\n      for (a = 0, i = 0; i < n; ++i) {\n        a += values[~~(exports.random() * n)];\n      }\n      mu[j] = a / n;\n    }\n    mu.sort(ascending);\n    return [quantile(mu, alpha / 2), quantile(mu, 1 - alpha / 2)];\n  }\n\n  // Dot density binning for dot plot construction.\n  // Based on Leland Wilkinson, Dot Plots, The American Statistician, 1999.\n  // https://www.cs.uic.edu/~wilkinson/Publications/dotplots.pdf\n  function dotbin (array, step, smooth, f) {\n    f = f || (_ => _);\n    const n = array.length,\n      v = new Float64Array(n);\n    let i = 0,\n      j = 1,\n      a = f(array[0]),\n      b = a,\n      w = a + step,\n      x;\n    for (; j < n; ++j) {\n      x = f(array[j]);\n      if (x >= w) {\n        b = (a + b) / 2;\n        for (; i < j; ++i) v[i] = b;\n        w = x + step;\n        a = x;\n      }\n      b = x;\n    }\n    b = (a + b) / 2;\n    for (; i < j; ++i) v[i] = b;\n    return smooth ? smoothing(v, step + step / 4) : v;\n  }\n\n  // perform smoothing to reduce variance\n  // swap points between \"adjacent\" stacks\n  // Wilkinson defines adjacent as within step/4 units\n  function smoothing(v, thresh) {\n    const n = v.length;\n    let a = 0,\n      b = 1,\n      c,\n      d;\n\n    // get left stack\n    while (v[a] === v[b]) ++b;\n    while (b < n) {\n      // get right stack\n      c = b + 1;\n      while (v[b] === v[c]) ++c;\n\n      // are stacks adjacent?\n      // if so, compare sizes and swap as needed\n      if (v[b] - v[b - 1] < thresh) {\n        d = b + (a + c - b - b >> 1);\n        while (d < b) v[d++] = v[b];\n        while (d > b) v[d--] = v[a];\n      }\n\n      // update left stack indices\n      a = b;\n      b = c;\n    }\n    return v;\n  }\n\n  function lcg (seed) {\n    // Random numbers using a Linear Congruential Generator with seed value\n    // Uses glibc values from https://en.wikipedia.org/wiki/Linear_congruential_generator\n    return function () {\n      seed = (1103515245 * seed + 12345) % 2147483647;\n      return seed / 2147483647;\n    };\n  }\n\n  function integer (min, max) {\n    if (max == null) {\n      max = min;\n      min = 0;\n    }\n    let a, b, d;\n    const dist = {\n      min(_) {\n        if (arguments.length) {\n          a = _ || 0;\n          d = b - a;\n          return dist;\n        } else {\n          return a;\n        }\n      },\n      max(_) {\n        if (arguments.length) {\n          b = _ || 0;\n          d = b - a;\n          return dist;\n        } else {\n          return b;\n        }\n      },\n      sample() {\n        return a + Math.floor(d * exports.random());\n      },\n      pdf(x) {\n        return x === Math.floor(x) && x >= a && x < b ? 1 / d : 0;\n      },\n      cdf(x) {\n        const v = Math.floor(x);\n        return v < a ? 0 : v >= b ? 1 : (v - a + 1) / d;\n      },\n      icdf(p) {\n        return p >= 0 && p <= 1 ? a - 1 + Math.floor(p * d) : NaN;\n      }\n    };\n    return dist.min(min).max(max);\n  }\n\n  const SQRT2PI = Math.sqrt(2 * Math.PI);\n  const SQRT2 = Math.SQRT2;\n\n  let nextSample = NaN;\n  function sampleNormal(mean, stdev) {\n    mean = mean || 0;\n    stdev = stdev == null ? 1 : stdev;\n    let x = 0,\n      y = 0,\n      rds,\n      c;\n    if (nextSample === nextSample) {\n      x = nextSample;\n      nextSample = NaN;\n    } else {\n      do {\n        x = exports.random() * 2 - 1;\n        y = exports.random() * 2 - 1;\n        rds = x * x + y * y;\n      } while (rds === 0 || rds > 1);\n      c = Math.sqrt(-2 * Math.log(rds) / rds); // Box-Muller transform\n      x *= c;\n      nextSample = y * c;\n    }\n    return mean + x * stdev;\n  }\n  function densityNormal(value, mean, stdev) {\n    stdev = stdev == null ? 1 : stdev;\n    const z = (value - (mean || 0)) / stdev;\n    return Math.exp(-0.5 * z * z) / (stdev * SQRT2PI);\n  }\n\n  // Approximation from West (2009)\n  // Better Approximations to Cumulative Normal Functions\n  function cumulativeNormal(value, mean, stdev) {\n    mean = mean || 0;\n    stdev = stdev == null ? 1 : stdev;\n    const z = (value - mean) / stdev,\n      Z = Math.abs(z);\n    let cd;\n    if (Z > 37) {\n      cd = 0;\n    } else {\n      const exp = Math.exp(-Z * Z / 2);\n      let sum;\n      if (Z < 7.07106781186547) {\n        sum = 3.52624965998911e-02 * Z + 0.700383064443688;\n        sum = sum * Z + 6.37396220353165;\n        sum = sum * Z + 33.912866078383;\n        sum = sum * Z + 112.079291497871;\n        sum = sum * Z + 221.213596169931;\n        sum = sum * Z + 220.206867912376;\n        cd = exp * sum;\n        sum = 8.83883476483184e-02 * Z + 1.75566716318264;\n        sum = sum * Z + 16.064177579207;\n        sum = sum * Z + 86.7807322029461;\n        sum = sum * Z + 296.564248779674;\n        sum = sum * Z + 637.333633378831;\n        sum = sum * Z + 793.826512519948;\n        sum = sum * Z + 440.413735824752;\n        cd = cd / sum;\n      } else {\n        sum = Z + 0.65;\n        sum = Z + 4 / sum;\n        sum = Z + 3 / sum;\n        sum = Z + 2 / sum;\n        sum = Z + 1 / sum;\n        cd = exp / sum / 2.506628274631;\n      }\n    }\n    return z > 0 ? 1 - cd : cd;\n  }\n\n  // Approximation of Probit function using inverse error function.\n  function quantileNormal(p, mean, stdev) {\n    if (p < 0 || p > 1) return NaN;\n    return (mean || 0) + (stdev == null ? 1 : stdev) * SQRT2 * erfinv(2 * p - 1);\n  }\n\n  // Approximate inverse error function. Implementation from \"Approximating\n  // the erfinv function\" by Mike Giles, GPU Computing Gems, volume 2, 2010.\n  // Ported from Apache Commons Math, http://www.apache.org/licenses/LICENSE-2.0\n  function erfinv(x) {\n    // beware that the logarithm argument must be\n    // commputed as (1.0 - x) * (1.0 + x),\n    // it must NOT be simplified as 1.0 - x * x as this\n    // would induce rounding errors near the boundaries +/-1\n    let w = -Math.log((1 - x) * (1 + x)),\n      p;\n    if (w < 6.25) {\n      w -= 3.125;\n      p = -3.6444120640178196996e-21;\n      p = -1.685059138182016589e-19 + p * w;\n      p = 1.2858480715256400167e-18 + p * w;\n      p = 1.115787767802518096e-17 + p * w;\n      p = -1.333171662854620906e-16 + p * w;\n      p = 2.0972767875968561637e-17 + p * w;\n      p = 6.6376381343583238325e-15 + p * w;\n      p = -4.0545662729752068639e-14 + p * w;\n      p = -8.1519341976054721522e-14 + p * w;\n      p = 2.6335093153082322977e-12 + p * w;\n      p = -1.2975133253453532498e-11 + p * w;\n      p = -5.4154120542946279317e-11 + p * w;\n      p = 1.051212273321532285e-09 + p * w;\n      p = -4.1126339803469836976e-09 + p * w;\n      p = -2.9070369957882005086e-08 + p * w;\n      p = 4.2347877827932403518e-07 + p * w;\n      p = -1.3654692000834678645e-06 + p * w;\n      p = -1.3882523362786468719e-05 + p * w;\n      p = 0.0001867342080340571352 + p * w;\n      p = -0.00074070253416626697512 + p * w;\n      p = -0.0060336708714301490533 + p * w;\n      p = 0.24015818242558961693 + p * w;\n      p = 1.6536545626831027356 + p * w;\n    } else if (w < 16.0) {\n      w = Math.sqrt(w) - 3.25;\n      p = 2.2137376921775787049e-09;\n      p = 9.0756561938885390979e-08 + p * w;\n      p = -2.7517406297064545428e-07 + p * w;\n      p = 1.8239629214389227755e-08 + p * w;\n      p = 1.5027403968909827627e-06 + p * w;\n      p = -4.013867526981545969e-06 + p * w;\n      p = 2.9234449089955446044e-06 + p * w;\n      p = 1.2475304481671778723e-05 + p * w;\n      p = -4.7318229009055733981e-05 + p * w;\n      p = 6.8284851459573175448e-05 + p * w;\n      p = 2.4031110387097893999e-05 + p * w;\n      p = -0.0003550375203628474796 + p * w;\n      p = 0.00095328937973738049703 + p * w;\n      p = -0.0016882755560235047313 + p * w;\n      p = 0.0024914420961078508066 + p * w;\n      p = -0.0037512085075692412107 + p * w;\n      p = 0.005370914553590063617 + p * w;\n      p = 1.0052589676941592334 + p * w;\n      p = 3.0838856104922207635 + p * w;\n    } else if (Number.isFinite(w)) {\n      w = Math.sqrt(w) - 5.0;\n      p = -2.7109920616438573243e-11;\n      p = -2.5556418169965252055e-10 + p * w;\n      p = 1.5076572693500548083e-09 + p * w;\n      p = -3.7894654401267369937e-09 + p * w;\n      p = 7.6157012080783393804e-09 + p * w;\n      p = -1.4960026627149240478e-08 + p * w;\n      p = 2.9147953450901080826e-08 + p * w;\n      p = -6.7711997758452339498e-08 + p * w;\n      p = 2.2900482228026654717e-07 + p * w;\n      p = -9.9298272942317002539e-07 + p * w;\n      p = 4.5260625972231537039e-06 + p * w;\n      p = -1.9681778105531670567e-05 + p * w;\n      p = 7.5995277030017761139e-05 + p * w;\n      p = -0.00021503011930044477347 + p * w;\n      p = -0.00013871931833623122026 + p * w;\n      p = 1.0103004648645343977 + p * w;\n      p = 4.8499064014085844221 + p * w;\n    } else {\n      p = Infinity;\n    }\n    return p * x;\n  }\n  function gaussian (mean, stdev) {\n    let mu, sigma;\n    const dist = {\n      mean(_) {\n        if (arguments.length) {\n          mu = _ || 0;\n          return dist;\n        } else {\n          return mu;\n        }\n      },\n      stdev(_) {\n        if (arguments.length) {\n          sigma = _ == null ? 1 : _;\n          return dist;\n        } else {\n          return sigma;\n        }\n      },\n      sample: () => sampleNormal(mu, sigma),\n      pdf: value => densityNormal(value, mu, sigma),\n      cdf: value => cumulativeNormal(value, mu, sigma),\n      icdf: p => quantileNormal(p, mu, sigma)\n    };\n    return dist.mean(mean).stdev(stdev);\n  }\n\n  function kde (support, bandwidth) {\n    const kernel = gaussian();\n    let n = 0;\n    const dist = {\n      data(_) {\n        if (arguments.length) {\n          support = _;\n          n = _ ? _.length : 0;\n          return dist.bandwidth(bandwidth);\n        } else {\n          return support;\n        }\n      },\n      bandwidth(_) {\n        if (!arguments.length) return bandwidth;\n        bandwidth = _;\n        if (!bandwidth && support) bandwidth = estimateBandwidth(support);\n        return dist;\n      },\n      sample() {\n        return support[~~(exports.random() * n)] + bandwidth * kernel.sample();\n      },\n      pdf(x) {\n        let y = 0,\n          i = 0;\n        for (; i < n; ++i) {\n          y += kernel.pdf((x - support[i]) / bandwidth);\n        }\n        return y / bandwidth / n;\n      },\n      cdf(x) {\n        let y = 0,\n          i = 0;\n        for (; i < n; ++i) {\n          y += kernel.cdf((x - support[i]) / bandwidth);\n        }\n        return y / n;\n      },\n      icdf() {\n        throw Error('KDE icdf not supported.');\n      }\n    };\n    return dist.data(support);\n  }\n\n  function sampleLogNormal(mean, stdev) {\n    mean = mean || 0;\n    stdev = stdev == null ? 1 : stdev;\n    return Math.exp(mean + sampleNormal() * stdev);\n  }\n  function densityLogNormal(value, mean, stdev) {\n    if (value <= 0) return 0;\n    mean = mean || 0;\n    stdev = stdev == null ? 1 : stdev;\n    const z = (Math.log(value) - mean) / stdev;\n    return Math.exp(-0.5 * z * z) / (stdev * SQRT2PI * value);\n  }\n  function cumulativeLogNormal(value, mean, stdev) {\n    return cumulativeNormal(Math.log(value), mean, stdev);\n  }\n  function quantileLogNormal(p, mean, stdev) {\n    return Math.exp(quantileNormal(p, mean, stdev));\n  }\n  function lognormal (mean, stdev) {\n    let mu, sigma;\n    const dist = {\n      mean(_) {\n        if (arguments.length) {\n          mu = _ || 0;\n          return dist;\n        } else {\n          return mu;\n        }\n      },\n      stdev(_) {\n        if (arguments.length) {\n          sigma = _ == null ? 1 : _;\n          return dist;\n        } else {\n          return sigma;\n        }\n      },\n      sample: () => sampleLogNormal(mu, sigma),\n      pdf: value => densityLogNormal(value, mu, sigma),\n      cdf: value => cumulativeLogNormal(value, mu, sigma),\n      icdf: p => quantileLogNormal(p, mu, sigma)\n    };\n    return dist.mean(mean).stdev(stdev);\n  }\n\n  function mixture (dists, weights) {\n    let m = 0,\n      w;\n    function normalize(x) {\n      const w = [];\n      let sum = 0,\n        i;\n      for (i = 0; i < m; ++i) {\n        sum += w[i] = x[i] == null ? 1 : +x[i];\n      }\n      for (i = 0; i < m; ++i) {\n        w[i] /= sum;\n      }\n      return w;\n    }\n    const dist = {\n      weights(_) {\n        if (arguments.length) {\n          w = normalize(weights = _ || []);\n          return dist;\n        }\n        return weights;\n      },\n      distributions(_) {\n        if (arguments.length) {\n          if (_) {\n            m = _.length;\n            dists = _;\n          } else {\n            m = 0;\n            dists = [];\n          }\n          return dist.weights(weights);\n        }\n        return dists;\n      },\n      sample() {\n        const r = exports.random();\n        let d = dists[m - 1],\n          v = w[0],\n          i = 0;\n\n        // first select distribution\n        for (; i < m - 1; v += w[++i]) {\n          if (r < v) {\n            d = dists[i];\n            break;\n          }\n        }\n        // then sample from it\n        return d.sample();\n      },\n      pdf(x) {\n        let p = 0,\n          i = 0;\n        for (; i < m; ++i) {\n          p += w[i] * dists[i].pdf(x);\n        }\n        return p;\n      },\n      cdf(x) {\n        let p = 0,\n          i = 0;\n        for (; i < m; ++i) {\n          p += w[i] * dists[i].cdf(x);\n        }\n        return p;\n      },\n      icdf() {\n        throw Error('Mixture icdf not supported.');\n      }\n    };\n    return dist.distributions(dists).weights(weights);\n  }\n\n  function sampleUniform(min, max) {\n    if (max == null) {\n      max = min == null ? 1 : min;\n      min = 0;\n    }\n    return min + (max - min) * exports.random();\n  }\n  function densityUniform(value, min, max) {\n    if (max == null) {\n      max = min == null ? 1 : min;\n      min = 0;\n    }\n    return value >= min && value <= max ? 1 / (max - min) : 0;\n  }\n  function cumulativeUniform(value, min, max) {\n    if (max == null) {\n      max = min == null ? 1 : min;\n      min = 0;\n    }\n    return value < min ? 0 : value > max ? 1 : (value - min) / (max - min);\n  }\n  function quantileUniform(p, min, max) {\n    if (max == null) {\n      max = min == null ? 1 : min;\n      min = 0;\n    }\n    return p >= 0 && p <= 1 ? min + p * (max - min) : NaN;\n  }\n  function uniform (min, max) {\n    let a, b;\n    const dist = {\n      min(_) {\n        if (arguments.length) {\n          a = _ || 0;\n          return dist;\n        } else {\n          return a;\n        }\n      },\n      max(_) {\n        if (arguments.length) {\n          b = _ == null ? 1 : _;\n          return dist;\n        } else {\n          return b;\n        }\n      },\n      sample: () => sampleUniform(a, b),\n      pdf: value => densityUniform(value, a, b),\n      cdf: value => cumulativeUniform(value, a, b),\n      icdf: p => quantileUniform(p, a, b)\n    };\n    if (max == null) {\n      max = min == null ? 1 : min;\n      min = 0;\n    }\n    return dist.min(min).max(max);\n  }\n\n  function constant (data, x, y) {\n    let mean = 0,\n      n = 0;\n    for (const d of data) {\n      const val = y(d);\n      if (x(d) == null || val == null || isNaN(val)) continue;\n      mean += (val - mean) / ++n;\n    }\n    return {\n      coef: [mean],\n      predict: () => mean,\n      rSquared: 0\n    };\n  }\n\n  // Ordinary Least Squares\n  function ols (uX, uY, uXY, uX2) {\n    const delta = uX2 - uX * uX,\n      slope = Math.abs(delta) < 1e-24 ? 0 : (uXY - uX * uY) / delta,\n      intercept = uY - slope * uX;\n    return [intercept, slope];\n  }\n\n  function points(data, x, y, sort) {\n    data = data.filter(d => {\n      let u = x(d),\n        v = y(d);\n      return u != null && (u = +u) >= u && v != null && (v = +v) >= v;\n    });\n    if (sort) {\n      data.sort((a, b) => x(a) - x(b));\n    }\n    const n = data.length,\n      X = new Float64Array(n),\n      Y = new Float64Array(n);\n\n    // extract values, calculate means\n    let i = 0,\n      ux = 0,\n      uy = 0,\n      xv,\n      yv,\n      d;\n    for (d of data) {\n      X[i] = xv = +x(d);\n      Y[i] = yv = +y(d);\n      ++i;\n      ux += (xv - ux) / i;\n      uy += (yv - uy) / i;\n    }\n\n    // mean center the data\n    for (i = 0; i < n; ++i) {\n      X[i] -= ux;\n      Y[i] -= uy;\n    }\n    return [X, Y, ux, uy];\n  }\n  function visitPoints(data, x, y, callback) {\n    let i = -1,\n      u,\n      v;\n    for (const d of data) {\n      u = x(d);\n      v = y(d);\n      if (u != null && (u = +u) >= u && v != null && (v = +v) >= v) {\n        callback(u, v, ++i);\n      }\n    }\n  }\n\n  // Adapted from d3-regression by Harry Stevens\n  // License: https://github.com/HarryStevens/d3-regression/blob/master/LICENSE\n  function rSquared (data, x, y, uY, predict) {\n    let SSE = 0,\n      SST = 0;\n    visitPoints(data, x, y, (dx, dy) => {\n      const sse = dy - predict(dx),\n        sst = dy - uY;\n      SSE += sse * sse;\n      SST += sst * sst;\n    });\n    return 1 - SSE / SST;\n  }\n\n  // Adapted from d3-regression by Harry Stevens\n  // License: https://github.com/HarryStevens/d3-regression/blob/master/LICENSE\n  function linear (data, x, y) {\n    let X = 0,\n      Y = 0,\n      XY = 0,\n      X2 = 0,\n      n = 0;\n    visitPoints(data, x, y, (dx, dy) => {\n      ++n;\n      X += (dx - X) / n;\n      Y += (dy - Y) / n;\n      XY += (dx * dy - XY) / n;\n      X2 += (dx * dx - X2) / n;\n    });\n    const coef = ols(X, Y, XY, X2),\n      predict = x => coef[0] + coef[1] * x;\n    return {\n      coef: coef,\n      predict: predict,\n      rSquared: rSquared(data, x, y, Y, predict)\n    };\n  }\n\n  // Adapted from d3-regression by Harry Stevens\n  // License: https://github.com/HarryStevens/d3-regression/blob/master/LICENSE\n  function log (data, x, y) {\n    let X = 0,\n      Y = 0,\n      XY = 0,\n      X2 = 0,\n      n = 0;\n    visitPoints(data, x, y, (dx, dy) => {\n      ++n;\n      dx = Math.log(dx);\n      X += (dx - X) / n;\n      Y += (dy - Y) / n;\n      XY += (dx * dy - XY) / n;\n      X2 += (dx * dx - X2) / n;\n    });\n    const coef = ols(X, Y, XY, X2),\n      predict = x => coef[0] + coef[1] * Math.log(x);\n    return {\n      coef: coef,\n      predict: predict,\n      rSquared: rSquared(data, x, y, Y, predict)\n    };\n  }\n\n  function exp (data, x, y) {\n    // eslint-disable-next-line no-unused-vars\n    const [xv, yv, ux, uy] = points(data, x, y);\n    let YL = 0,\n      XY = 0,\n      XYL = 0,\n      X2Y = 0,\n      n = 0,\n      dx,\n      ly,\n      xy;\n    visitPoints(data, x, y, (_, dy) => {\n      dx = xv[n++];\n      ly = Math.log(dy);\n      xy = dx * dy;\n      YL += (dy * ly - YL) / n;\n      XY += (xy - XY) / n;\n      XYL += (xy * ly - XYL) / n;\n      X2Y += (dx * xy - X2Y) / n;\n    });\n    const [c0, c1] = ols(XY / uy, YL / uy, XYL / uy, X2Y / uy),\n      predict = x => Math.exp(c0 + c1 * (x - ux));\n    return {\n      coef: [Math.exp(c0 - c1 * ux), c1],\n      predict: predict,\n      rSquared: rSquared(data, x, y, uy, predict)\n    };\n  }\n\n  // Adapted from d3-regression by Harry Stevens\n  // License: https://github.com/HarryStevens/d3-regression/blob/master/LICENSE\n  function pow (data, x, y) {\n    let X = 0,\n      Y = 0,\n      XY = 0,\n      X2 = 0,\n      YS = 0,\n      n = 0;\n    visitPoints(data, x, y, (dx, dy) => {\n      const lx = Math.log(dx),\n        ly = Math.log(dy);\n      ++n;\n      X += (lx - X) / n;\n      Y += (ly - Y) / n;\n      XY += (lx * ly - XY) / n;\n      X2 += (lx * lx - X2) / n;\n      YS += (dy - YS) / n;\n    });\n    const coef = ols(X, Y, XY, X2),\n      predict = x => coef[0] * Math.pow(x, coef[1]);\n    coef[0] = Math.exp(coef[0]);\n    return {\n      coef: coef,\n      predict: predict,\n      rSquared: rSquared(data, x, y, YS, predict)\n    };\n  }\n\n  function quad (data, x, y) {\n    const [xv, yv, ux, uy] = points(data, x, y),\n      n = xv.length;\n    let X2 = 0,\n      X3 = 0,\n      X4 = 0,\n      XY = 0,\n      X2Y = 0,\n      i,\n      dx,\n      dy,\n      x2;\n    for (i = 0; i < n;) {\n      dx = xv[i];\n      dy = yv[i++];\n      x2 = dx * dx;\n      X2 += (x2 - X2) / i;\n      X3 += (x2 * dx - X3) / i;\n      X4 += (x2 * x2 - X4) / i;\n      XY += (dx * dy - XY) / i;\n      X2Y += (x2 * dy - X2Y) / i;\n    }\n    const X2X2 = X4 - X2 * X2,\n      d = X2 * X2X2 - X3 * X3,\n      a = (X2Y * X2 - XY * X3) / d,\n      b = (XY * X2X2 - X2Y * X3) / d,\n      c = -a * X2,\n      predict = x => {\n        x = x - ux;\n        return a * x * x + b * x + c + uy;\n      };\n\n    // transform coefficients back from mean-centered space\n    return {\n      coef: [c - b * ux + a * ux * ux + uy, b - 2 * a * ux, a],\n      predict: predict,\n      rSquared: rSquared(data, x, y, uy, predict)\n    };\n  }\n\n  // Adapted from d3-regression by Harry Stevens\n  // License: https://github.com/HarryStevens/d3-regression/blob/master/LICENSE\n  // ... which was adapted from regression-js by Tom Alexander\n  // Source: https://github.com/Tom-Alexander/regression-js/blob/master/src/regression.js#L246\n  // License: https://github.com/Tom-Alexander/regression-js/blob/master/LICENSE\n  function poly (data, x, y, order) {\n    // use more efficient methods for lower orders\n    if (order === 0) return constant(data, x, y);\n    if (order === 1) return linear(data, x, y);\n    if (order === 2) return quad(data, x, y);\n    const [xv, yv, ux, uy] = points(data, x, y),\n      n = xv.length,\n      lhs = [],\n      rhs = [],\n      k = order + 1;\n    let i, j, l, v, c;\n    for (i = 0; i < k; ++i) {\n      for (l = 0, v = 0; l < n; ++l) {\n        v += Math.pow(xv[l], i) * yv[l];\n      }\n      lhs.push(v);\n      c = new Float64Array(k);\n      for (j = 0; j < k; ++j) {\n        for (l = 0, v = 0; l < n; ++l) {\n          v += Math.pow(xv[l], i + j);\n        }\n        c[j] = v;\n      }\n      rhs.push(c);\n    }\n    rhs.push(lhs);\n    const coef = gaussianElimination(rhs),\n      predict = x => {\n        x -= ux;\n        let y = uy + coef[0] + coef[1] * x + coef[2] * x * x;\n        for (i = 3; i < k; ++i) y += coef[i] * Math.pow(x, i);\n        return y;\n      };\n    return {\n      coef: uncenter(k, coef, -ux, uy),\n      predict: predict,\n      rSquared: rSquared(data, x, y, uy, predict)\n    };\n  }\n  function uncenter(k, a, x, y) {\n    const z = Array(k);\n    let i, j, v, c;\n\n    // initialize to zero\n    for (i = 0; i < k; ++i) z[i] = 0;\n\n    // polynomial expansion\n    for (i = k - 1; i >= 0; --i) {\n      v = a[i];\n      c = 1;\n      z[i] += v;\n      for (j = 1; j <= i; ++j) {\n        c *= (i + 1 - j) / j; // binomial coefficent\n        z[i - j] += v * Math.pow(x, j) * c;\n      }\n    }\n\n    // bias term\n    z[0] += y;\n    return z;\n  }\n\n  // Given an array for a two-dimensional matrix and the polynomial order,\n  // solve A * x = b using Gaussian elimination.\n  function gaussianElimination(matrix) {\n    const n = matrix.length - 1,\n      coef = [];\n    let i, j, k, r, t;\n    for (i = 0; i < n; ++i) {\n      r = i; // max row\n      for (j = i + 1; j < n; ++j) {\n        if (Math.abs(matrix[i][j]) > Math.abs(matrix[i][r])) {\n          r = j;\n        }\n      }\n      for (k = i; k < n + 1; ++k) {\n        t = matrix[k][i];\n        matrix[k][i] = matrix[k][r];\n        matrix[k][r] = t;\n      }\n      for (j = i + 1; j < n; ++j) {\n        for (k = n; k >= i; k--) {\n          matrix[k][j] -= matrix[k][i] * matrix[i][j] / matrix[i][i];\n        }\n      }\n    }\n    for (j = n - 1; j >= 0; --j) {\n      t = 0;\n      for (k = j + 1; k < n; ++k) {\n        t += matrix[k][j] * coef[k];\n      }\n      coef[j] = (matrix[n][j] - t) / matrix[j][j];\n    }\n    return coef;\n  }\n\n  const maxiters = 2,\n    epsilon = 1e-12;\n\n  // Adapted from science.js by Jason Davies\n  // Source: https://github.com/jasondavies/science.js/blob/master/src/stats/loess.js\n  // License: https://github.com/jasondavies/science.js/blob/master/LICENSE\n  function loess (data, x, y, bandwidth) {\n    const [xv, yv, ux, uy] = points(data, x, y, true),\n      n = xv.length,\n      bw = Math.max(2, ~~(bandwidth * n)),\n      // # nearest neighbors\n      yhat = new Float64Array(n),\n      residuals = new Float64Array(n),\n      robustWeights = new Float64Array(n).fill(1);\n    for (let iter = -1; ++iter <= maxiters;) {\n      const interval = [0, bw - 1];\n      for (let i = 0; i < n; ++i) {\n        const dx = xv[i],\n          i0 = interval[0],\n          i1 = interval[1],\n          edge = dx - xv[i0] > xv[i1] - dx ? i0 : i1;\n        let W = 0,\n          X = 0,\n          Y = 0,\n          XY = 0,\n          X2 = 0;\n        const denom = 1 / Math.abs(xv[edge] - dx || 1); // avoid singularity!\n\n        for (let k = i0; k <= i1; ++k) {\n          const xk = xv[k],\n            yk = yv[k],\n            w = tricube(Math.abs(dx - xk) * denom) * robustWeights[k],\n            xkw = xk * w;\n          W += w;\n          X += xkw;\n          Y += yk * w;\n          XY += yk * xkw;\n          X2 += xk * xkw;\n        }\n\n        // linear regression fit\n        const [a, b] = ols(X / W, Y / W, XY / W, X2 / W);\n        yhat[i] = a + b * dx;\n        residuals[i] = Math.abs(yv[i] - yhat[i]);\n        updateInterval(xv, i + 1, interval);\n      }\n      if (iter === maxiters) {\n        break;\n      }\n      const medianResidual = median(residuals);\n      if (Math.abs(medianResidual) < epsilon) break;\n      for (let i = 0, arg, w; i < n; ++i) {\n        arg = residuals[i] / (6 * medianResidual);\n        // default to epsilon (rather than zero) for large deviations\n        // keeping weights tiny but non-zero prevents singularites\n        robustWeights[i] = arg >= 1 ? epsilon : (w = 1 - arg * arg) * w;\n      }\n    }\n    return output(xv, yhat, ux, uy);\n  }\n\n  // weighting kernel for local regression\n  function tricube(x) {\n    return (x = 1 - x * x * x) * x * x;\n  }\n\n  // advance sliding window interval of nearest neighbors\n  function updateInterval(xv, i, interval) {\n    const val = xv[i];\n    let left = interval[0],\n      right = interval[1] + 1;\n    if (right >= xv.length) return;\n\n    // step right if distance to new right edge is <= distance to old left edge\n    // step when distance is equal to ensure movement over duplicate x values\n    while (i > left && xv[right] - val <= val - xv[left]) {\n      interval[0] = ++left;\n      interval[1] = right;\n      ++right;\n    }\n  }\n\n  // generate smoothed output points\n  // average points with repeated x values\n  function output(xv, yhat, ux, uy) {\n    const n = xv.length,\n      out = [];\n    let i = 0,\n      cnt = 0,\n      prev = [],\n      v;\n    for (; i < n; ++i) {\n      v = xv[i] + ux;\n      if (prev[0] === v) {\n        // average output values via online update\n        prev[1] += (yhat[i] - prev[1]) / ++cnt;\n      } else {\n        // add new output point\n        cnt = 0;\n        prev[1] += uy;\n        prev = [v, yhat[i]];\n        out.push(prev);\n      }\n    }\n    prev[1] += uy;\n    return out;\n  }\n\n  // subdivide up to accuracy of 0.5 degrees\n  const MIN_RADIANS = 0.5 * Math.PI / 180;\n\n  // Adaptively sample an interpolated function over a domain extent\n  function sampleCurve (f, extent, minSteps, maxSteps) {\n    minSteps = minSteps || 25;\n    maxSteps = Math.max(minSteps, maxSteps || 200);\n    const point = x => [x, f(x)],\n      minX = extent[0],\n      maxX = extent[1],\n      span = maxX - minX,\n      stop = span / maxSteps,\n      prev = [point(minX)],\n      next = [];\n    if (minSteps === maxSteps) {\n      // no adaptation, sample uniform grid directly and return\n      for (let i = 1; i < maxSteps; ++i) {\n        prev.push(point(minX + i / minSteps * span));\n      }\n      prev.push(point(maxX));\n      return prev;\n    } else {\n      // sample minimum points on uniform grid\n      // then move on to perform adaptive refinement\n      next.push(point(maxX));\n      for (let i = minSteps; --i > 0;) {\n        next.push(point(minX + i / minSteps * span));\n      }\n    }\n    let p0 = prev[0];\n    let p1 = next[next.length - 1];\n    const sx = 1 / span;\n    const sy = scaleY(p0[1], next);\n    while (p1) {\n      // midpoint for potential curve subdivision\n      const pm = point((p0[0] + p1[0]) / 2);\n      const dx = pm[0] - p0[0] >= stop;\n      if (dx && angleDelta(p0, pm, p1, sx, sy) > MIN_RADIANS) {\n        // maximum resolution has not yet been met, and\n        // subdivision midpoint is sufficiently different from endpoint\n        // save subdivision, push midpoint onto the visitation stack\n        next.push(pm);\n      } else {\n        // subdivision midpoint sufficiently similar to endpoint\n        // skip subdivision, store endpoint, move to next point on the stack\n        p0 = p1;\n        prev.push(p1);\n        next.pop();\n      }\n      p1 = next[next.length - 1];\n    }\n    return prev;\n  }\n  function scaleY(init, points) {\n    let ymin = init;\n    let ymax = init;\n    const n = points.length;\n    for (let i = 0; i < n; ++i) {\n      const y = points[i][1];\n      if (y < ymin) ymin = y;\n      if (y > ymax) ymax = y;\n    }\n    return 1 / (ymax - ymin);\n  }\n  function angleDelta(p, q, r, sx, sy) {\n    const a0 = Math.atan2(sy * (r[1] - p[1]), sx * (r[0] - p[0])),\n      a1 = Math.atan2(sy * (q[1] - p[1]), sx * (q[0] - p[0]));\n    return Math.abs(a0 - a1);\n  }\n\n  exports.bandwidthNRD = estimateBandwidth;\n  exports.bin = bin;\n  exports.bootstrapCI = bootstrapCI;\n  exports.cumulativeLogNormal = cumulativeLogNormal;\n  exports.cumulativeNormal = cumulativeNormal;\n  exports.cumulativeUniform = cumulativeUniform;\n  exports.densityLogNormal = densityLogNormal;\n  exports.densityNormal = densityNormal;\n  exports.densityUniform = densityUniform;\n  exports.dotbin = dotbin;\n  exports.quantileLogNormal = quantileLogNormal;\n  exports.quantileNormal = quantileNormal;\n  exports.quantileUniform = quantileUniform;\n  exports.quantiles = quantiles;\n  exports.quartiles = quartiles;\n  exports.randomInteger = integer;\n  exports.randomKDE = kde;\n  exports.randomLCG = lcg;\n  exports.randomLogNormal = lognormal;\n  exports.randomMixture = mixture;\n  exports.randomNormal = gaussian;\n  exports.randomUniform = uniform;\n  exports.regressionConstant = constant;\n  exports.regressionExp = exp;\n  exports.regressionLinear = linear;\n  exports.regressionLoess = loess;\n  exports.regressionLog = log;\n  exports.regressionPoly = poly;\n  exports.regressionPow = pow;\n  exports.regressionQuad = quad;\n  exports.sampleCurve = sampleCurve;\n  exports.sampleLogNormal = sampleLogNormal;\n  exports.sampleNormal = sampleNormal;\n  exports.sampleUniform = sampleUniform;\n  exports.setRandom = setRandom;\n\n}));\n\n};"],
"names":["shadow$provide","global","require","module","exports","factory","define","amd","globalThis","self","vega","numbers$1","values","valueof","value","index","ascending","a","b","NaN","number","x","numbers","undefined","compareDefined","compare","ascendingDefined","TypeError","max","min","quickselect","array","k","left","right","Infinity","Math","floor","length","n","m","z","log","s","exp","sd","sqrt","newLeft","newRight","t","i","j","swap","quantile","p","Float64Array","from","isNaN","i0","value0","subarray","value1","quantileSorted","quantiles","f","sort","map","_","quartiles","estimateBandwidth","count","delta","mean","sum","v","q","d","abs","pow","smoothing","thresh","c","sampleNormal","stdev","y","nextSample","random","rds","densityNormal","SQRT2PI","cumulativeNormal","Z","cd","quantileNormal","w","Number","isFinite","SQRT2","gaussian","mu","sigma","dist","arguments","sample","pdf","cdf","icdf","sampleLogNormal","densityLogNormal","cumulativeLogNormal","quantileLogNormal","sampleUniform","densityUniform","cumulativeUniform","quantileUniform","constant","data","val","coef","predict","rSquared","ols","uX","uY","uXY","uX2","slope","points","filter","u","X","Y","ux","uy","yv","xv","visitPoints","callback","SSE","SST","dx","dy","sse","sst","linear","XY","X2","quad","X3","X4","X2Y","x2","X2X2","uncenter","Array","gaussianElimination","matrix","r","PI","MIN_RADIANS","bandwidthNRD","bin","maxb","maxbins","base","logb","div","divide","extent","minstep","span","step","steps","level","ceil","round","eps","precision","nice","start","stop","bootstrapCI","samples","alpha","dotbin","smooth","randomInteger","integer","randomKDE","kde","support","bandwidth","kernel","Error","randomLCG","lcg","seed","randomLogNormal","lognormal","randomMixture","mixture","dists","weights","distributions","randomNormal","randomUniform","uniform","regressionConstant","regressionExp","YL","XYL","ly","xy","c0","c1","regressionLinear","regressionLoess","loess","bw","yhat","residuals","robustWeights","fill","iter","maxiters","interval","i1","W","denom","edge","xk","yk","xkw","medianResidual","epsilon","arg","out","cnt","prev","push","regressionLog","regressionPoly","poly","order","lhs","rhs","l","regressionPow","YS","lx","regressionQuad","sampleCurve","minSteps","maxSteps","minX","maxX","next","p0","p1","sx","ymin","ymax","pm","atan2","a0","sy","a1","pop","setRandom"]
}
