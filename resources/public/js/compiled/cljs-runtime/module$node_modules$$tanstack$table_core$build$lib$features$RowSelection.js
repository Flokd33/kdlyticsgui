shadow$provide.module$node_modules$$tanstack$table_core$build$lib$features$RowSelection=function(global,require,module,exports){function selectRowsFn(table,rowModel){const rowSelection=table.getState().rowSelection,newSelectedFlatRows=[],newSelectedRowsById={},recurseRows=function(rows,depth){return rows.map(row=>{var _row$subRows2;const isSelected=isRowSelected(row,rowSelection);isSelected&&(newSelectedFlatRows.push(row),newSelectedRowsById[row.id]=row);null!=(_row$subRows2=row.subRows)&&_row$subRows2.length&&
(row=Object.assign({},row,{subRows:recurseRows(row.subRows)}));if(isSelected)return row}).filter(Boolean)};return{rows:recurseRows(rowModel.rows),flatRows:newSelectedFlatRows,rowsById:newSelectedRowsById}}function isRowSelected(row,selection){var _selection$row$id;return null!=(_selection$row$id=selection[row.id])?_selection$row$id:!1}function isSubRowSelected(row,selection,table){if(row.subRows&&row.subRows.length){let allChildrenSelected=!0,someSelected=!1;row.subRows.forEach(subRow=>{if(!someSelected||
allChildrenSelected)isRowSelected(subRow,selection)?someSelected=!0:allChildrenSelected=!1});return allChildrenSelected?"all":someSelected?"some":!1}return!1}Object.defineProperty(exports,"__esModule",{value:!0});var utils=require("module$node_modules$$tanstack$table_core$build$lib$utils");const mutateRowIsSelected=(selectedRowIds,id,value,table)=>{var _row$subRows;const row$jscomp$0=table.getRow(id);value?(row$jscomp$0.getCanMultiSelect()||Object.keys(selectedRowIds).forEach(key=>delete selectedRowIds[key]),
row$jscomp$0.getCanSelect()&&(selectedRowIds[id]=!0)):delete selectedRowIds[id];null!=(_row$subRows=row$jscomp$0.subRows)&&_row$subRows.length&&row$jscomp$0.getCanSelectSubRows()&&row$jscomp$0.subRows.forEach(row=>mutateRowIsSelected(selectedRowIds,row.id,value,table))};exports.RowSelection={getInitialState:state=>Object.assign({},{rowSelection:{}},state),getDefaultOptions:table=>({onRowSelectionChange:utils.makeStateUpdater("rowSelection",table),enableRowSelection:!0,enableMultiRowSelection:!0,enableSubRowSelection:!0}),
createTable:table=>({setRowSelection:updater=>null==table.options.onRowSelectionChange?void 0:table.options.onRowSelectionChange(updater),resetRowSelection:defaultState=>{var _table$initialState$r;return table.setRowSelection(defaultState?{}:null!=(_table$initialState$r=table.initialState.rowSelection)?_table$initialState$r:{})},toggleAllRowsSelected:value=>{table.setRowSelection(old=>{value="undefined"!==typeof value?value:!table.getIsAllRowsSelected();const rowSelection=Object.assign({},old);old=
table.getPreGroupedRowModel().flatRows;value?old.forEach(row=>{row.getCanSelect()&&(rowSelection[row.id]=!0)}):old.forEach(row=>{delete rowSelection[row.id]});return rowSelection})},toggleAllPageRowsSelected:value=>table.setRowSelection(old=>{const resolvedValue="undefined"!==typeof value?value:!table.getIsAllPageRowsSelected(),rowSelection=Object.assign({},old);table.getRowModel().rows.forEach(row=>{mutateRowIsSelected(rowSelection,row.id,resolvedValue,table)});return rowSelection}),getPreSelectedRowModel:()=>
table.getCoreRowModel(),getSelectedRowModel:utils.memo(()=>[table.getState().rowSelection,table.getCoreRowModel()],(rowSelection,rowModel)=>Object.keys(rowSelection).length?selectRowsFn(table,rowModel):{rows:[],flatRows:[],rowsById:{}},{key:"getSelectedRowModel",debug:()=>{var _table$options$debugA;return null!=(_table$options$debugA=table.options.debugAll)?_table$options$debugA:table.options.debugTable}}),getFilteredSelectedRowModel:utils.memo(()=>[table.getState().rowSelection,table.getFilteredRowModel()],
(rowSelection,rowModel)=>Object.keys(rowSelection).length?selectRowsFn(table,rowModel):{rows:[],flatRows:[],rowsById:{}},{key:!1,debug:()=>{var _table$options$debugA2;return null!=(_table$options$debugA2=table.options.debugAll)?_table$options$debugA2:table.options.debugTable}}),getGroupedSelectedRowModel:utils.memo(()=>[table.getState().rowSelection,table.getSortedRowModel()],(rowSelection,rowModel)=>Object.keys(rowSelection).length?selectRowsFn(table,rowModel):{rows:[],flatRows:[],rowsById:{}},{key:!1,
debug:()=>{var _table$options$debugA3;return null!=(_table$options$debugA3=table.options.debugAll)?_table$options$debugA3:table.options.debugTable}}),getIsAllRowsSelected:()=>{const preGroupedFlatRows=table.getFilteredRowModel().flatRows,{rowSelection}=table.getState();let isAllRowsSelected=!(!preGroupedFlatRows.length||!Object.keys(rowSelection).length);isAllRowsSelected&&preGroupedFlatRows.some(row=>row.getCanSelect()&&!rowSelection[row.id])&&(isAllRowsSelected=!1);return isAllRowsSelected},getIsAllPageRowsSelected:()=>
{const paginationFlatRows=table.getPaginationRowModel().flatRows.filter(row=>row.getCanSelect()),{rowSelection}=table.getState();let isAllPageRowsSelected=!!paginationFlatRows.length;isAllPageRowsSelected&&paginationFlatRows.some(row=>!rowSelection[row.id])&&(isAllPageRowsSelected=!1);return isAllPageRowsSelected},getIsSomeRowsSelected:()=>{var _table$getState$rowSe;const totalSelected=Object.keys(null!=(_table$getState$rowSe=table.getState().rowSelection)?_table$getState$rowSe:{}).length;return 0<
totalSelected&&totalSelected<table.getFilteredRowModel().flatRows.length},getIsSomePageRowsSelected:()=>{const paginationFlatRows=table.getPaginationRowModel().flatRows;return table.getIsAllPageRowsSelected()?!1:paginationFlatRows.filter(row=>row.getCanSelect()).some(d=>d.getIsSelected()||d.getIsSomeSelected())},getToggleAllRowsSelectedHandler:()=>e=>{table.toggleAllRowsSelected(e.target.checked)},getToggleAllPageRowsSelectedHandler:()=>e=>{table.toggleAllPageRowsSelected(e.target.checked)}}),createRow:(row,
table)=>({toggleSelected:value=>{const isSelected=row.getIsSelected();table.setRowSelection(old=>{value="undefined"!==typeof value?value:!isSelected;if(isSelected===value)return old;old=Object.assign({},old);mutateRowIsSelected(old,row.id,value,table);return old})},getIsSelected:()=>{const {rowSelection}=table.getState();return isRowSelected(row,rowSelection)},getIsSomeSelected:()=>{const {rowSelection}=table.getState();return"some"===isSubRowSelected(row,rowSelection)},getIsAllSubRowsSelected:()=>
{const {rowSelection}=table.getState();return"all"===isSubRowSelected(row,rowSelection)},getCanSelect:()=>{var _table$options$enable;return"function"===typeof table.options.enableRowSelection?table.options.enableRowSelection(row):null!=(_table$options$enable=table.options.enableRowSelection)?_table$options$enable:!0},getCanSelectSubRows:()=>{var _table$options$enable2;return"function"===typeof table.options.enableSubRowSelection?table.options.enableSubRowSelection(row):null!=(_table$options$enable2=
table.options.enableSubRowSelection)?_table$options$enable2:!0},getCanMultiSelect:()=>{var _table$options$enable3;return"function"===typeof table.options.enableMultiRowSelection?table.options.enableMultiRowSelection(row):null!=(_table$options$enable3=table.options.enableMultiRowSelection)?_table$options$enable3:!0},getToggleSelectedHandler:()=>{const canSelect=row.getCanSelect();return e=>{var _target;canSelect&&row.toggleSelected(null==(_target=e.target)?void 0:_target.checked)}}})};exports.isRowSelected=
isRowSelected;exports.isSubRowSelected=isSubRowSelected;exports.selectRowsFn=selectRowsFn}
//# sourceMappingURL=module$node_modules$$tanstack$table_core$build$lib$features$RowSelection.js.map
