{
"version":3,
"file":"module$node_modules$$tanstack$table_core$build$lib$utils$getSortedRowModel.js",
"lineCount":5,
"mappings":"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",
"sources":["node_modules/@tanstack/table-core/build/lib/utils/getSortedRowModel.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$tanstack$table_core$build$lib$utils$getSortedRowModel\"] = function(global,require,module,exports) {\n/**\n * table-core\n *\n * Copyright (c) TanStack\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar utils = require('../utils.js');\n\nfunction getSortedRowModel() {\n  return table => utils.memo(() => [table.getState().sorting, table.getPreSortedRowModel()], (sorting, rowModel) => {\n    if (!rowModel.rows.length || !(sorting != null && sorting.length)) {\n      return rowModel;\n    }\n    const sortingState = table.getState().sorting;\n    const sortedFlatRows = [];\n\n    // Filter out sortings that correspond to non existing columns\n    const availableSorting = sortingState.filter(sort => {\n      var _table$getColumn;\n      return (_table$getColumn = table.getColumn(sort.id)) == null ? void 0 : _table$getColumn.getCanSort();\n    });\n    const columnInfoById = {};\n    availableSorting.forEach(sortEntry => {\n      const column = table.getColumn(sortEntry.id);\n      if (!column) return;\n      columnInfoById[sortEntry.id] = {\n        sortUndefined: column.columnDef.sortUndefined,\n        invertSorting: column.columnDef.invertSorting,\n        sortingFn: column.getSortingFn()\n      };\n    });\n    const sortData = rows => {\n      // This will also perform a stable sorting using the row index\n      // if needed.\n      const sortedData = [...rows];\n      sortedData.sort((rowA, rowB) => {\n        for (let i = 0; i < availableSorting.length; i += 1) {\n          var _sortEntry$desc;\n          const sortEntry = availableSorting[i];\n          const columnInfo = columnInfoById[sortEntry.id];\n          const isDesc = (_sortEntry$desc = sortEntry == null ? void 0 : sortEntry.desc) != null ? _sortEntry$desc : false;\n          if (columnInfo.sortUndefined) {\n            const aValue = rowA.getValue(sortEntry.id);\n            const bValue = rowB.getValue(sortEntry.id);\n            const aUndefined = typeof aValue === 'undefined';\n            const bUndefined = typeof bValue === 'undefined';\n            if (aUndefined || bUndefined) {\n              let undefinedSort = aUndefined && bUndefined ? 0 : aUndefined ? columnInfo.sortUndefined : -columnInfo.sortUndefined;\n              if (isDesc && undefinedSort !== 0) {\n                undefinedSort *= -1;\n              }\n              return undefinedSort;\n            }\n          }\n\n          // This function should always return in ascending order\n          let sortInt = columnInfo.sortingFn(rowA, rowB, sortEntry.id);\n          if (sortInt !== 0) {\n            if (isDesc) {\n              sortInt *= -1;\n            }\n            if (columnInfo.invertSorting) {\n              sortInt *= -1;\n            }\n            return sortInt;\n          }\n        }\n        return rowA.index - rowB.index;\n      });\n\n      // If there are sub-rows, sort them\n      sortedData.forEach(row => {\n        var _row$subRows;\n        sortedFlatRows.push(row);\n        if ((_row$subRows = row.subRows) != null && _row$subRows.length) {\n          row.subRows = sortData(row.subRows);\n        }\n      });\n      return sortedData;\n    };\n    return {\n      rows: sortData(rowModel.rows),\n      flatRows: sortedFlatRows,\n      rowsById: rowModel.rowsById\n    };\n  }, {\n    key: process.env.NODE_ENV === 'development' && 'getSortedRowModel',\n    debug: () => {\n      var _table$options$debugA;\n      return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugTable;\n    },\n    onChange: () => {\n      table._autoResetPageIndex();\n    }\n  });\n}\n\nexports.getSortedRowModel = getSortedRowModel;\n//# sourceMappingURL=getSortedRowModel.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","utils","getSortedRowModel","table","memo","getState","sorting","getPreSortedRowModel","rowModel","rows","length","sortedFlatRows","availableSorting","filter","sort","_table$getColumn","getColumn","id","getCanSort","columnInfoById","forEach","sortEntry","column","sortUndefined","columnDef","invertSorting","sortingFn","getSortingFn","sortData","sortedData","rowA","rowB","i","_sortEntry$desc","columnInfo","isDesc","desc","aValue","getValue","bValue","aUndefined","bUndefined","undefinedSort","sortInt","index","row","_row$subRows","push","subRows","flatRows","rowsById","key","debug","_table$options$debugA","options","debugAll","debugTable","onChange","_autoResetPageIndex"]
}
