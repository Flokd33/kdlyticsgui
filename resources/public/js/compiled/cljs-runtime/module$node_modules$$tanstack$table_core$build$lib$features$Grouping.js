shadow$provide.module$node_modules$$tanstack$table_core$build$lib$features$Grouping=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});var aggregationFns=require("module$node_modules$$tanstack$table_core$build$lib$aggregationFns"),utils=require("module$node_modules$$tanstack$table_core$build$lib$utils");exports.Grouping={getDefaultColumnDef:()=>({aggregatedCell:props=>{var _toString,_props$getValue;return null!=(_toString=null==(_props$getValue=props.getValue())?
void 0:null==_props$getValue.toString?void 0:_props$getValue.toString())?_toString:null},aggregationFn:"auto"}),getInitialState:state=>Object.assign({},{grouping:[]},state),getDefaultOptions:table=>({onGroupingChange:utils.makeStateUpdater("grouping",table),groupedColumnMode:"reorder"}),createColumn:(column,table)=>({toggleGrouping:()=>{table.setGrouping(old=>null!=old&&old.includes(column.id)?old.filter(d=>d!==column.id):[...(null!=old?old:[]),column.id])},getCanGroup:()=>{var _ref,_ref2,_ref3,_column$columnDef$ena;
return null!=(_ref=null!=(_ref2=null!=(_ref3=null!=(_column$columnDef$ena=column.columnDef.enableGrouping)?_column$columnDef$ena:!0)?_ref3:table.options.enableGrouping)?_ref2:!0)?_ref:!!column.accessorFn},getIsGrouped:()=>{var _table$getState$group;return null==(_table$getState$group=table.getState().grouping)?void 0:_table$getState$group.includes(column.id)},getGroupedIndex:()=>{var _table$getState$group2;return null==(_table$getState$group2=table.getState().grouping)?void 0:_table$getState$group2.indexOf(column.id)},
getToggleGroupingHandler:()=>{const canGroup=column.getCanGroup();return()=>{canGroup&&column.toggleGrouping()}},getAutoAggregationFn:()=>{var firstRow=table.getCoreRowModel().flatRows[0];firstRow=null==firstRow?void 0:firstRow.getValue(column.id);if("number"===typeof firstRow)return aggregationFns.aggregationFns.sum;if("[object Date]"===Object.prototype.toString.call(firstRow))return aggregationFns.aggregationFns.extent},getAggregationFn:()=>{var _table$options$aggreg,_table$options$aggreg2;if(!column)throw Error();
return utils.isFunction(column.columnDef.aggregationFn)?column.columnDef.aggregationFn:"auto"===column.columnDef.aggregationFn?column.getAutoAggregationFn():null!=(_table$options$aggreg=null==(_table$options$aggreg2=table.options.aggregationFns)?void 0:_table$options$aggreg2[column.columnDef.aggregationFn])?_table$options$aggreg:aggregationFns.aggregationFns[column.columnDef.aggregationFn]}}),createTable:table=>({setGrouping:updater=>null==table.options.onGroupingChange?void 0:table.options.onGroupingChange(updater),
resetGrouping:defaultState=>{var _table$initialState$g,_table$initialState;table.setGrouping(defaultState?[]:null!=(_table$initialState$g=null==(_table$initialState=table.initialState)?void 0:_table$initialState.grouping)?_table$initialState$g:[])},getPreGroupedRowModel:()=>table.getFilteredRowModel(),getGroupedRowModel:()=>{!table._getGroupedRowModel&&table.options.getGroupedRowModel&&(table._getGroupedRowModel=table.options.getGroupedRowModel(table));return table.options.manualGrouping||!table._getGroupedRowModel?
table.getPreGroupedRowModel():table._getGroupedRowModel()}}),createRow:(row,table)=>({getIsGrouped:()=>!!row.groupingColumnId,getGroupingValue:columnId=>{if(row._groupingValuesCache.hasOwnProperty(columnId))return row._groupingValuesCache[columnId];const column=table.getColumn(columnId);if(null==column||!column.columnDef.getGroupingValue)return row.getValue(columnId);row._groupingValuesCache[columnId]=column.columnDef.getGroupingValue(row.original);return row._groupingValuesCache[columnId]},_groupingValuesCache:{}}),
createCell:(cell,column,row,table)=>({getIsGrouped:()=>column.getIsGrouped()&&column.id===row.groupingColumnId,getIsPlaceholder:()=>!cell.getIsGrouped()&&column.getIsGrouped(),getIsAggregated:()=>{var _row$subRows;return!cell.getIsGrouped()&&!cell.getIsPlaceholder()&&!(null==(_row$subRows=row.subRows)||!_row$subRows.length)}})};exports.orderColumns=function(leafColumns,grouping,groupedColumnMode){if(null==grouping||!grouping.length||!groupedColumnMode)return leafColumns;const nonGroupingColumns=leafColumns.filter(col=>
!grouping.includes(col.id));return"remove"===groupedColumnMode?nonGroupingColumns:[...grouping.map(g=>leafColumns.find(col=>col.id===g)).filter(Boolean),...nonGroupingColumns]}}
//# sourceMappingURL=module$node_modules$$tanstack$table_core$build$lib$features$Grouping.js.map
