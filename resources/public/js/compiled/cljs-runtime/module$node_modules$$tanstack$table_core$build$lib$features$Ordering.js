shadow$provide.module$node_modules$$tanstack$table_core$build$lib$features$Ordering=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});var utils=require("module$node_modules$$tanstack$table_core$build$lib$utils"),Grouping=require("module$node_modules$$tanstack$table_core$build$lib$features$Grouping");exports.Ordering={getInitialState:state=>Object.assign({},{columnOrder:[]},state),getDefaultOptions:table=>({onColumnOrderChange:utils.makeStateUpdater("columnOrder",
table)}),createTable:table=>({setColumnOrder:updater=>null==table.options.onColumnOrderChange?void 0:table.options.onColumnOrderChange(updater),resetColumnOrder:defaultState=>{var _table$initialState$c;table.setColumnOrder(defaultState?[]:null!=(_table$initialState$c=table.initialState.columnOrder)?_table$initialState$c:[])},_getOrderColumnsFn:utils.memo(()=>[table.getState().columnOrder,table.getState().grouping,table.options.groupedColumnMode],(columnOrder,grouping,groupedColumnMode)=>columns=>
{let orderedColumns=[];if(null!=columnOrder&&columnOrder.length){const columnOrderCopy=[...columnOrder];for(columns=[...columns];columns.length&&columnOrderCopy.length;){const targetColumnId=columnOrderCopy.shift(),foundIndex=columns.findIndex(d=>d.id===targetColumnId);-1<foundIndex&&orderedColumns.push(columns.splice(foundIndex,1)[0])}orderedColumns=[...orderedColumns,...columns]}else orderedColumns=columns;return Grouping.orderColumns(orderedColumns,grouping,groupedColumnMode)},{key:"getOrderColumnsFn"})})}}
//# sourceMappingURL=module$node_modules$$tanstack$table_core$build$lib$features$Ordering.js.map
