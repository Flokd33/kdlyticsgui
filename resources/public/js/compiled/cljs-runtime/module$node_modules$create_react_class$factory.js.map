{
"version":3,
"file":"module$node_modules$create_react_class$factory.js",
"lineCount":20,
"mappings":"AAAAA,cAAA,+CAAA,CAAmE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAW3G,IAAIC,QAAUH,OAAA,CAAQ,yCAAR,CAAd,CAEII,YAAcJ,OAAA,CAAQ,0CAAR,CAFlB,CAGIK,WAAaL,OAAA,CAAQ,wCAAR,CAHjB,CAMMM,QAAUN,OAAA,CAAQ,sCAAR,CAad,KAAAO,2BAA6B,CAC3BC,KAAM,MADqB,CAE3BC,QAAS,SAFkB,CAG3BC,aAAc,eAHa,CAg4B/BT,OAAAC,QAAA,CAv3BAS,QAAgB,CAACC,cAAD,CAAiBC,cAAjB,CAAiCC,oBAAjC,CAAuD,CAiWrEC,QAASA,gBAAe,CAACC,WAAD;AAAcC,OAAd,CAAuBC,QAAvB,CAAiC,CACvD,IAAKC,IAAIA,QAAT,GAAqBF,QAArB,CACMA,OAAAG,eAAA,CAAuBD,QAAvB,CAAJ,EAIIb,OAAA,CAC+B,UAD/B,GACE,MAAOW,QAAA,CAAQE,QAAR,CADT,CAEE,mFAFF,CAIEH,WAAAK,YAJF,EAI6B,YAJ7B,CAKEd,0BAAA,CAA2BW,QAA3B,CALF,CAMEC,QANF,CANiD,CAmDzDG,QAASA,qBAAoB,CAACN,WAAD,CAAcO,IAAd,CAAoB,CAC/C,GAAKA,IAAL,CAAA,CAqBAlB,UAAA,CACkB,UADlB,GACE,MAAOkB,KADT,CAEE,oHAFF,CAMAlB;UAAA,CACE,CAACQ,cAAA,CAAeU,IAAf,CADH,CAEE,kGAFF,CAMA,KAAIC,MAAQR,WAAAS,UAAZ,CACIC,cAAgBF,KAAAG,qBAKhBJ,KAAAH,eAAA,CA/cSQ,QA+cT,CAAJ,EACEC,kBAAAC,OAAA,CAA0Bd,WAA1B,CAAuCO,IAAAO,OAAvC,CAGF,KAAKC,IAAIA,IAAT,GAAiBR,KAAjB,CACE,GAAKA,IAAAH,eAAA,CAAoBW,IAApB,CAAL,EApdWH,QAodX,GAIIG,IAJJ,CAIA,CAKA,IAAIC,SAAWT,IAAA,CAAKQ,IAAL,CAAf,CACIE,iBAAmBT,KAAAJ,eAAA,CAAqBW,IAArB,CADvB,CAEuBE,0BAAAA,gBAFvB,CAEyCF,cAAAA,IAFzC,CArFEG,WAAaC,mBAAAf,eAAA,CAAmCW,aAAnC,CAAA;AACbI,mBAAA,CAAoBJ,aAApB,CADa,CAEb,IAGAK,gBAAAhB,eAAA,CAA+BW,aAA/B,CAAJ,EACE1B,UAAA,CACiB,eADjB,GACE6B,UADF,CAEE,0JAFF,CAKEH,aALF,CAUEE,0BAAJ,EACE5B,UAAA,CACiB,aADjB,GACE6B,UADF,EACiD,oBADjD,GACkCA,UADlC,CAEE,+HAFF;AAKEH,aALF,CAwEA,IAAIF,kBAAAT,eAAA,CAAkCW,IAAlC,CAAJ,CACEF,kBAAA,CAAmBE,IAAnB,CAAA,CAAyBf,WAAzB,CAAsCgB,QAAtC,CADF,KAOMK,0BAQJ,CARyBF,mBAAAf,eAAA,CAAmCW,IAAnC,CAQzB,CAPqC,UAOrC,GAPiB,MAAOC,SAOxB,EAJGK,yBAIH,EAHGJ,gBAGH,EAFoB,CAAA,CAEpB,GAFEV,IAAAe,SAEF,CAIML,gBAAJ,EACMC,gBAeJ,CAfiBC,mBAAA,CAAoBJ,IAApB,CAejB,CAZA1B,UAAA,CACEgC,yBADF,GAEoB,oBAFpB,GAEKH,gBAFL,EAGqB,aAHrB,GAGMA,gBAHN,EAIE,kFAJF;AAMEA,gBANF,CAOEH,IAPF,CAYA,CAAmB,oBAAnB,GAAIG,gBAAJ,CACEV,KAAA,CAAMO,IAAN,CADF,CACgBQ,0BAAA,CAA2Bf,KAAA,CAAMO,IAAN,CAA3B,CAAwCC,QAAxC,CADhB,CAE0B,aAF1B,GAEWE,gBAFX,GAGEV,KAAA,CAAMO,IAAN,CAHF,CAGgBS,qBAAA,CAAsBhB,KAAA,CAAMO,IAAN,CAAtB,CAAmCC,QAAnC,CAHhB,CAhBF,GAsBER,KAAA,CAAMO,IAAN,CAIE,CAJYC,QAIZ,CAAwB,UAAxB,GAAI,MAAOA,SAAX,EAAsCT,IAAAF,YAAtC,GACEG,KAAA,CAAMO,IAAN,CAAAV,YADF,CAC4BE,IAAAF,YAD5B,CAC+C,GAD/C,CACqDU,IADrD,CA1BJ,CAJF,EACEL,aAAAe,KAAA,CAAmBV,IAAnB,CAAyBC,QAAzB,CACA,CAAAR,KAAA,CAAMO,IAAN,CAAA,CAAcC,QAFhB,CAxBF,CAhDF,CAAA,IAEQU,MAIF,CAJe,MAAOnB,KAItB,CAAAjB,OAAA,CAHgC,QAGhC,GAHiBoC,KAGjB,EAHqD,IAGrD,GAH4CnB,IAG5C,CAEE,uMAFF;AAMEP,WAAAK,YANF,EAM6B,YAN7B,CAOW,IAAT,GAAAE,IAAA,CAAgB,IAAhB,CAAuBmB,KAPzB,CAPyC,CAoKjDC,QAASA,6BAA4B,CAACC,GAAD,CAAMC,GAAN,CAAW,CAC9CxC,UAAA,CACEuC,GADF,EACSC,GADT,EAC+B,QAD/B,GACgB,MAAOD,IADvB,EAC0D,QAD1D,GAC2C,MAAOC,IADlD,CAEE,2DAFF,CAKA,KAAKC,IAAIA,GAAT,GAAgBD,IAAhB,CACMA,GAAAzB,eAAA,CAAmB0B,GAAnB,CAAJ,GACEzC,UAAA,CACe0C,IAAAA,EADf,GACEH,GAAA,CAAIE,GAAJ,CADF,CAEE,wPAFF;AAOEA,GAPF,CASA,CAAAF,GAAA,CAAIE,GAAJ,CAAA,CAAWD,GAAA,CAAIC,GAAJ,CAVb,CAaF,OAAOF,IApBuC,CA+BhDL,QAASA,2BAA0B,CAACK,GAAD,CAAMC,GAAN,CAAW,CAC5C,MAAOG,SAAqB,EAAG,CAC7B,IAAIC,EAAIL,GAAAM,MAAA,CAAU,IAAV,CAAgBC,SAAhB,CAAR,CACIC,EAAIP,GAAAK,MAAA,CAAU,IAAV,CAAgBC,SAAhB,CACR,IAAS,IAAT,EAAIF,CAAJ,CACE,MAAOG,EACF,IAAS,IAAT,EAAIA,CAAJ,CACL,MAAOH,EAET,KAAII,EAAI,EACRV,6BAAA,CAA6BU,CAA7B,CAAgCJ,CAAhC,CACAN,6BAAA,CAA6BU,CAA7B,CAAgCD,CAAhC,CACA,OAAOC,EAXsB,CADa,CAwB9Cb,QAASA,sBAAqB,CAACI,GAAD,CAAMC,GAAN,CAAW,CACvC,MAAOS,SAAwB,EAAG,CAChCV,GAAAM,MAAA,CAAU,IAAV,CAAgBC,SAAhB,CACAN,IAAAK,MAAA,CAAU,IAAV,CAAgBC,SAAhB,CAFgC,CADK,CAczCI,QAASA,mBAAkB,CAACC,SAAD,CAAYC,MAAZ,CAAoB,CAC7C,IAAIC,YAAcD,MAAAE,KAAA,CAAYH,SAAZ,CAEhBE,YAAAE,oBAAA;AAAkCJ,SAClCE,YAAAG,mBAAA,CAAiCJ,MACjCC,YAAAI,sBAAA,CAAoC,IACpC,KAAIC,cAAgBP,SAAAQ,YAAA3C,YAApB,CACI4C,MAAQP,WAAAC,KACZD,YAAAC,KAAA,CAAmBO,QAAQ,CAACC,OAAD,CAAU,CACnC,IADmC,IAE7BC,KAAOjB,SAAAkB,OAFsB,CAG/BC,KAAOC,KAAA,CAAa,CAAP,CAAAH,IAAA,CAAWA,IAAX,CAAkB,CAAlB,CAAsB,CAA5B,CAHwB,CAI/BI,KAAO,CAHX,CAIEA,IAJF,CAISJ,IAJT,CAKEI,IAAA,EALF,CAOEF,IAAA,CAAKE,IAAL,CAAY,CAAZ,CAAA,CAAiBrB,SAAA,CAAUqB,IAAV,CAMnB,IAAIL,OAAJ,GAAgBX,SAAhB,EAAyC,IAAzC,GAA6BW,OAA7B,CAEI7D,OAAA,CACE,CAAA,CADF,CAEE,qFAFF,CAIEyD,aAJF,CAFJ,KASO,IAAI,CAACO,IAAAD,OAAL,CAUL,MARE/D,QAAA,CACE,CAAA,CADF,CAEE,0KAFF;AAKEyD,aALF,CAQKL,CAAAA,WAELe,KAAAA,CAAgBR,KAAAf,MAAA,CAAYQ,WAAZ,CAAyBP,SAAzB,CACpBsB,KAAAb,oBAAA,CAAoCJ,SACpCiB,KAAAZ,mBAAA,CAAmCJ,MACnCgB,KAAAX,sBAAA,CAAsCQ,IACtC,OAAOG,KAvC4B,CA0CvC,OAAOf,YAlDsC,CAxnB/C,IAAIgB,eAAiB,EAArB,CAwBIvC,oBAAsB,CAOxBL,OAAQ,aAPgB,CAgBxB6C,QAAS,aAhBe,CAwBxBC,UAAW,aAxBa,CAgCxBC,aAAc,aAhCU,CAwCxBC,kBAAmB,aAxCK,CAsDxBC,gBAAiB,oBAtDO,CAsExBC,gBAAiB,oBAtEO,CA4ExBC,gBAAiB,oBA5EO,CA6FxBC,OAAQ,aA7FgB,CAwGxBC,mBAAoB,aAxGI;AAoHxBC,kBAAmB,aApHK,CAyIxBC,0BAA2B,aAzIH,CA+JxBC,sBAAuB,aA/JC,CAgLxBC,oBAAqB,aAhLG,CA8LxBC,mBAAoB,aA9LI,CA2MxBC,qBAAsB,aA3ME,CAkNxBC,0BAA2B,aAlNH,CAyNxBC,iCAAkC,aAzNV,CAgOxBC,2BAA4B,aAhOJ,CA8OxBC,gBAAiB,eA9OO,CAxB1B,CA4QIC,0BAA4B,CAW9BC,yBAA0B,oBAXI,CA5QhC,CAmSIlE,mBAAqB,CACvBR,YAAaA,QAAQ,CAACL,WAAD,CAAcK,WAAd,CAA2B,CAC9CL,WAAAK,YAAA;AAA0BA,WADoB,CADzB,CAIvBS,OAAQA,QAAQ,CAACd,WAAD,CAAcc,MAAd,CAAsB,CACpC,GAAIA,MAAJ,CACE,IAAK,IAAIkE,EAAI,CAAb,CAAgBA,CAAhB,CAAoBlE,MAAAuC,OAApB,CAAmC2B,CAAA,EAAnC,CACE1E,oBAAA,CAAqBN,WAArB,CAAkCc,MAAA,CAAOkE,CAAP,CAAlC,CAHgC,CAJf,CAWvBlB,kBAAmBA,QAAQ,CAAC9D,WAAD,CAAc8D,iBAAd,CAAiC,CAExD/D,eAAA,CAAgBC,WAAhB,CAA6B8D,iBAA7B,CAAgD,cAAhD,CAEF9D,YAAA8D,kBAAA,CAAgC3E,OAAA,CAC9B,EAD8B,CAE9Ba,WAAA8D,kBAF8B,CAG9BA,iBAH8B,CAJ0B,CAXrC,CAqBvBD,aAAcA,QAAQ,CAAC7D,WAAD,CAAc6D,YAAd,CAA4B,CAE9C9D,eAAA,CAAgBC,WAAhB,CAA6B6D,YAA7B,CAA2C,SAA3C,CAEF7D,YAAA6D,aAAA,CAA2B1E,OAAA,CACzB,EADyB,CAEzBa,WAAA6D,aAFyB;AAGzBA,YAHyB,CAJqB,CArB3B,CAmCvBE,gBAAiBA,QAAQ,CAAC/D,WAAD,CAAc+D,eAAd,CAA+B,CAEpD/D,WAAA+D,gBAAA,CADE/D,WAAA+D,gBAAJ,CACgCxC,0BAAA,CAC5BvB,WAAA+D,gBAD4B,CAE5BA,eAF4B,CADhC,CAMgCA,eAPsB,CAnCjC,CA6CvBH,UAAWA,QAAQ,CAAC5D,WAAD,CAAc4D,SAAd,CAAyB,CAExC7D,eAAA,CAAgBC,WAAhB,CAA6B4D,SAA7B,CAAwC,MAAxC,CAEF5D,YAAA4D,UAAA,CAAwBzE,OAAA,CAAQ,EAAR,CAAYa,WAAA4D,UAAZ,CAAmCA,SAAnC,CAJkB,CA7CrB,CAmDvBD,QAASA,QAAQ,CAAC3D,WAAD,CAAc2D,OAAd,CAAuB,CA0KgB,CAAA,CACxD,GA1K0CA,OA0K1C,CAIA,IAAK5C,IAAIA,IAAT,GA9K0C4C,QA8K1C,CAA0B,CACxB,IAAI3C,SA/KoC2C,OA+KzB,CAAQ5C,IAAR,CACf,IAhLwC4C,OAgLnCvD,eAAA,CAAuBW,IAAvB,CAAL,CAAA,CAKA1B,UAAA,CACE,EAFe0B,IAEf;AAFuBF,kBAEvB,CADF,CAEE,yMAFF,CAMEE,IANF,CAUA,IADuBA,IACvB,GA/L2Bf,YA+L3B,CAAsB,CAChBkB,OAAAA,CAAa4D,yBAAA1E,eAAA,CAAyCW,IAAzC,CAAA,CACb+D,yBAAA,CAA0B/D,IAA1B,CADa,CAEb,IAEJ1B,WAAA,CACiB,oBADjB,GACE6B,OADF,CAEE,sHAFF;AAKEH,IALF,CApMyBf,YA4MzB,CAAYe,IAAZ,CAAA,CAAoBQ,0BAAA,CA5MKvB,WA4MsB,CAAYe,IAAZ,CAA3B,CAA8CC,QAA9C,CAEpB,OAAA,CAfoB,CA/LKhB,WAiN3B,CAAYe,IAAZ,CAAA,CAAoBC,QAjCpB,CAFwB,CA/Kc,CAnDjB,CAsDvBM,SAAUA,QAAQ,EAAG,EAtDE,CAnSzB,CA2rBI2D,kBAAoB,CACtBb,kBAAmBA,QAAQ,EAAG,CAC5B,IAAAc,YAAA,CAAmB,CAAA,CADS,CADR,CA3rBxB,CAisBIC,mBAAqB,CACvBV,qBAAsBA,QAAQ,EAAG,CAC/B,IAAAS,YAAA,CAAmB,CAAA,CADY,CADV,CAjsBzB,CA2sBI9D,gBAAkB,CAKpBgE,aAAcA,QAAQ,CAACC,QAAD,CAAWC,QAAX,CAAqB,CACzC,IAAAC,QAAAC,oBAAA,CAAiC,IAAjC,CAAuCH,QAAvC,CAAiDC,QAAjD,CADyC,CALvB,CAepBG,UAAWA,QAAQ,EAAG,CAElBnG,OAAA,CACE,IAAAoG,mBADF,CAEE,iJAFF;AAKG,IAAA1C,YALH,EAKuB,IAAAA,YAAA3C,YALvB,EAMI,IAAAU,KANJ,EAOI,WAPJ,CASA,KAAA2E,mBAAA,CAA0B,CAAA,CAE5B,OAAO,CAAC,CAAC,IAAAR,YAbW,CAfF,CA3sBtB,CA2uBIS,oBAAsBA,QAAQ,EAAG,EACrCxG,QAAA,CACEwG,mBAAAlF,UADF,CAEEb,cAAAa,UAFF,CAGEW,eAHF,CAmIA,OArHAwE,SAAoB,CAACrF,IAAD,CAAO,CAIzB,IAAIP,YAAuB6F,QAAQ,CAACC,KAAD,CAAQrG,OAAR,CAAiB8F,OAAjB,CAA0B,CAKzDjG,OAAA,CACE,IADF,WACkBU,YADlB,CAEE,uHAFF,CAQF,IAAI,IAAAW,qBAAA0C,OAAJ,CAvFF,IADA,IAAI0C;AAyFoBvD,IAzFZ7B,qBAAZ,CACSqE,EAAI,CAAb,CAAgBA,CAAhB,CAAoBe,KAAA1C,OAApB,CAAkC2B,CAAlC,EAAuC,CAAvC,CAwFwBxC,IArFtB,CAFkBuD,KAAAC,CAAMhB,CAANgB,CAElB,CAAA,CAAyBzD,kBAAA,CAqFHC,IArFG,CADZuD,KAAAtD,CAAMuC,CAANvC,CAAU,CAAVA,CACY,CAwFzB,KAAAqD,MAAA,CAAaA,KACb,KAAArG,QAAA,CAAeA,OACf,KAAAwG,KAAA,CAAY7G,WACZ,KAAAmG,QAAA,CAAeA,OAAf,EAA0BzF,oBAE1B,KAAAoG,MAAA,CAAa,IAKTC,MAAAA,CAAe,IAAAnC,gBAAA,CAAuB,IAAAA,gBAAA,EAAvB,CAAgD,IAI9CjC,KAAAA,EADnB,GACEoE,KADF,EAEE,IAAAnC,gBAAAoC,gBAFF,GAMED,KANF,CAMiB,IANjB,CASF9G,WAAA,CAC0B,QAD1B,GACE,MAAO8G,MADT,EACsC,CAAC5C,KAAA8C,QAAA,CAAcF,KAAd,CADvC,CAEE,qDAFF,CAGEnG,WAAAK,YAHF,EAG6B,yBAH7B,CAMA;IAAA6F,MAAA,CAAaC,KA7C8C,CA+C7DnG,YAAAS,UAAA,CAAwB,IAAIkF,mBAC5B3F,YAAAS,UAAAuC,YAAA,CAAoChD,WACpCA,YAAAS,UAAAE,qBAAA,CAA6C,EAE7C+C,eAAA4C,QAAA,CAAuBhG,oBAAAqC,KAAA,CAA0B,IAA1B,CAAgC3C,WAAhC,CAAvB,CAEAM,qBAAA,CAAqBN,WAArB,CAAkCiF,iBAAlC,CACA3E,qBAAA,CAAqBN,WAArB,CAAkCO,IAAlC,CACAD,qBAAA,CAAqBN,WAArB,CAAkCmF,kBAAlC,CAGInF,YAAA+D,gBAAJ,GACE/D,WAAAuG,aADF,CAC6BvG,WAAA+D,gBAAA,EAD7B,CASM/D,YAAA+D,gBAAJ,GACE/D,WAAA+D,gBAAAyC,qBADF;AACqD,EADrD,CAGIxG,YAAAS,UAAAuD,gBAAJ,GACEhE,WAAAS,UAAAuD,gBAAAwC,qBADF,CAC+D,EAD/D,CAKFnH,WAAA,CACEW,WAAAS,UAAAyD,OADF,CAEE,yEAFF,CAME5E,QAAA,CACE,CAACU,WAAAS,UAAAgG,sBADH,CAEE,6KAFF,CAMElG,IAAAF,YANF,EAMsB,aANtB,CAQAf,QAAA,CACE,CAACU,WAAAS,UAAAiG,0BADH;AAEE,+FAFF,CAIEnG,IAAAF,YAJF,EAIsB,aAJtB,CAMAf,QAAA,CACE,CAACU,WAAAS,UAAAkG,iCADH,CAEE,6GAFF,CAIEpG,IAAAF,YAJF,EAIsB,aAJtB,CASF,KAAKuG,IAAIA,UAAT,GAAuBzF,oBAAvB,CACOnB,WAAAS,UAAA,CAAsBmG,UAAtB,CAAL,GACE5G,WAAAS,UAAA,CAAsBmG,UAAtB,CADF,CACsC,IADtC,CAKF,OAAO5G,YAlHkB,CA/vB0C,CAvCoC;",
"sources":["node_modules/create-react-class/factory.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$create_react_class$factory\"] = function(global,require,module,exports) {\n/**\r\n * Copyright (c) 2013-present, Facebook, Inc.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n */\r\n\r\n'use strict';\r\n\r\nvar _assign = require('object-assign');\r\n\r\nvar emptyObject = require('fbjs/lib/emptyObject');\r\nvar _invariant = require('fbjs/lib/invariant');\r\n\r\nif (process.env.NODE_ENV !== 'production') {\r\n  var warning = require('fbjs/lib/warning');\r\n}\r\n\r\nvar MIXINS_KEY = 'mixins';\r\n\r\n// Helper function to allow the creation of anonymous functions which do not\r\n// have .name set to the name of the variable being assigned to.\r\nfunction identity(fn) {\r\n  return fn;\r\n}\r\n\r\nvar ReactPropTypeLocationNames;\r\nif (process.env.NODE_ENV !== 'production') {\r\n  ReactPropTypeLocationNames = {\r\n    prop: 'prop',\r\n    context: 'context',\r\n    childContext: 'child context'\r\n  };\r\n} else {\r\n  ReactPropTypeLocationNames = {};\r\n}\r\n\r\nfunction factory(ReactComponent, isValidElement, ReactNoopUpdateQueue) {\r\n  /**\r\n   * Policies that describe methods in `ReactClassInterface`.\r\n   */\r\n\r\n  var injectedMixins = [];\r\n\r\n  /**\r\n   * Composite components are higher-level components that compose other composite\r\n   * or host components.\r\n   *\r\n   * To create a new type of `ReactClass`, pass a specification of\r\n   * your new class to `React.createClass`. The only requirement of your class\r\n   * specification is that you implement a `render` method.\r\n   *\r\n   *   var MyComponent = React.createClass({\r\n   *     render: function() {\r\n   *       return <div>Hello World</div>;\r\n   *     }\r\n   *   });\r\n   *\r\n   * The class specification supports a specific protocol of methods that have\r\n   * special meaning (e.g. `render`). See `ReactClassInterface` for\r\n   * more the comprehensive protocol. Any other properties and methods in the\r\n   * class specification will be available on the prototype.\r\n   *\r\n   * @interface ReactClassInterface\r\n   * @internal\r\n   */\r\n  var ReactClassInterface = {\r\n    /**\r\n     * An array of Mixin objects to include when defining your component.\r\n     *\r\n     * @type {array}\r\n     * @optional\r\n     */\r\n    mixins: 'DEFINE_MANY',\r\n\r\n    /**\r\n     * An object containing properties and methods that should be defined on\r\n     * the component's constructor instead of its prototype (static methods).\r\n     *\r\n     * @type {object}\r\n     * @optional\r\n     */\r\n    statics: 'DEFINE_MANY',\r\n\r\n    /**\r\n     * Definition of prop types for this component.\r\n     *\r\n     * @type {object}\r\n     * @optional\r\n     */\r\n    propTypes: 'DEFINE_MANY',\r\n\r\n    /**\r\n     * Definition of context types for this component.\r\n     *\r\n     * @type {object}\r\n     * @optional\r\n     */\r\n    contextTypes: 'DEFINE_MANY',\r\n\r\n    /**\r\n     * Definition of context types this component sets for its children.\r\n     *\r\n     * @type {object}\r\n     * @optional\r\n     */\r\n    childContextTypes: 'DEFINE_MANY',\r\n\r\n    // ==== Definition methods ====\r\n\r\n    /**\r\n     * Invoked when the component is mounted. Values in the mapping will be set on\r\n     * `this.props` if that prop is not specified (i.e. using an `in` check).\r\n     *\r\n     * This method is invoked before `getInitialState` and therefore cannot rely\r\n     * on `this.state` or use `this.setState`.\r\n     *\r\n     * @return {object}\r\n     * @optional\r\n     */\r\n    getDefaultProps: 'DEFINE_MANY_MERGED',\r\n\r\n    /**\r\n     * Invoked once before the component is mounted. The return value will be used\r\n     * as the initial value of `this.state`.\r\n     *\r\n     *   getInitialState: function() {\r\n     *     return {\r\n     *       isOn: false,\r\n     *       fooBaz: new BazFoo()\r\n     *     }\r\n     *   }\r\n     *\r\n     * @return {object}\r\n     * @optional\r\n     */\r\n    getInitialState: 'DEFINE_MANY_MERGED',\r\n\r\n    /**\r\n     * @return {object}\r\n     * @optional\r\n     */\r\n    getChildContext: 'DEFINE_MANY_MERGED',\r\n\r\n    /**\r\n     * Uses props from `this.props` and state from `this.state` to render the\r\n     * structure of the component.\r\n     *\r\n     * No guarantees are made about when or how often this method is invoked, so\r\n     * it must not have side effects.\r\n     *\r\n     *   render: function() {\r\n     *     var name = this.props.name;\r\n     *     return <div>Hello, {name}!</div>;\r\n     *   }\r\n     *\r\n     * @return {ReactComponent}\r\n     * @required\r\n     */\r\n    render: 'DEFINE_ONCE',\r\n\r\n    // ==== Delegate methods ====\r\n\r\n    /**\r\n     * Invoked when the component is initially created and about to be mounted.\r\n     * This may have side effects, but any external subscriptions or data created\r\n     * by this method must be cleaned up in `componentWillUnmount`.\r\n     *\r\n     * @optional\r\n     */\r\n    componentWillMount: 'DEFINE_MANY',\r\n\r\n    /**\r\n     * Invoked when the component has been mounted and has a DOM representation.\r\n     * However, there is no guarantee that the DOM node is in the document.\r\n     *\r\n     * Use this as an opportunity to operate on the DOM when the component has\r\n     * been mounted (initialized and rendered) for the first time.\r\n     *\r\n     * @param {DOMElement} rootNode DOM element representing the component.\r\n     * @optional\r\n     */\r\n    componentDidMount: 'DEFINE_MANY',\r\n\r\n    /**\r\n     * Invoked before the component receives new props.\r\n     *\r\n     * Use this as an opportunity to react to a prop transition by updating the\r\n     * state using `this.setState`. Current props are accessed via `this.props`.\r\n     *\r\n     *   componentWillReceiveProps: function(nextProps, nextContext) {\r\n     *     this.setState({\r\n     *       likesIncreasing: nextProps.likeCount > this.props.likeCount\r\n     *     });\r\n     *   }\r\n     *\r\n     * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop\r\n     * transition may cause a state change, but the opposite is not true. If you\r\n     * need it, you are probably looking for `componentWillUpdate`.\r\n     *\r\n     * @param {object} nextProps\r\n     * @optional\r\n     */\r\n    componentWillReceiveProps: 'DEFINE_MANY',\r\n\r\n    /**\r\n     * Invoked while deciding if the component should be updated as a result of\r\n     * receiving new props, state and/or context.\r\n     *\r\n     * Use this as an opportunity to `return false` when you're certain that the\r\n     * transition to the new props/state/context will not require a component\r\n     * update.\r\n     *\r\n     *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {\r\n     *     return !equal(nextProps, this.props) ||\r\n     *       !equal(nextState, this.state) ||\r\n     *       !equal(nextContext, this.context);\r\n     *   }\r\n     *\r\n     * @param {object} nextProps\r\n     * @param {?object} nextState\r\n     * @param {?object} nextContext\r\n     * @return {boolean} True if the component should update.\r\n     * @optional\r\n     */\r\n    shouldComponentUpdate: 'DEFINE_ONCE',\r\n\r\n    /**\r\n     * Invoked when the component is about to update due to a transition from\r\n     * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`\r\n     * and `nextContext`.\r\n     *\r\n     * Use this as an opportunity to perform preparation before an update occurs.\r\n     *\r\n     * NOTE: You **cannot** use `this.setState()` in this method.\r\n     *\r\n     * @param {object} nextProps\r\n     * @param {?object} nextState\r\n     * @param {?object} nextContext\r\n     * @param {ReactReconcileTransaction} transaction\r\n     * @optional\r\n     */\r\n    componentWillUpdate: 'DEFINE_MANY',\r\n\r\n    /**\r\n     * Invoked when the component's DOM representation has been updated.\r\n     *\r\n     * Use this as an opportunity to operate on the DOM when the component has\r\n     * been updated.\r\n     *\r\n     * @param {object} prevProps\r\n     * @param {?object} prevState\r\n     * @param {?object} prevContext\r\n     * @param {DOMElement} rootNode DOM element representing the component.\r\n     * @optional\r\n     */\r\n    componentDidUpdate: 'DEFINE_MANY',\r\n\r\n    /**\r\n     * Invoked when the component is about to be removed from its parent and have\r\n     * its DOM representation destroyed.\r\n     *\r\n     * Use this as an opportunity to deallocate any external resources.\r\n     *\r\n     * NOTE: There is no `componentDidUnmount` since your component will have been\r\n     * destroyed by that point.\r\n     *\r\n     * @optional\r\n     */\r\n    componentWillUnmount: 'DEFINE_MANY',\r\n\r\n    /**\r\n     * Replacement for (deprecated) `componentWillMount`.\r\n     *\r\n     * @optional\r\n     */\r\n    UNSAFE_componentWillMount: 'DEFINE_MANY',\r\n\r\n    /**\r\n     * Replacement for (deprecated) `componentWillReceiveProps`.\r\n     *\r\n     * @optional\r\n     */\r\n    UNSAFE_componentWillReceiveProps: 'DEFINE_MANY',\r\n\r\n    /**\r\n     * Replacement for (deprecated) `componentWillUpdate`.\r\n     *\r\n     * @optional\r\n     */\r\n    UNSAFE_componentWillUpdate: 'DEFINE_MANY',\r\n\r\n    // ==== Advanced methods ====\r\n\r\n    /**\r\n     * Updates the component's currently mounted DOM representation.\r\n     *\r\n     * By default, this implements React's rendering and reconciliation algorithm.\r\n     * Sophisticated clients may wish to override this.\r\n     *\r\n     * @param {ReactReconcileTransaction} transaction\r\n     * @internal\r\n     * @overridable\r\n     */\r\n    updateComponent: 'OVERRIDE_BASE'\r\n  };\r\n\r\n  /**\r\n   * Similar to ReactClassInterface but for static methods.\r\n   */\r\n  var ReactClassStaticInterface = {\r\n    /**\r\n     * This method is invoked after a component is instantiated and when it\r\n     * receives new props. Return an object to update state in response to\r\n     * prop changes. Return null to indicate no change to state.\r\n     *\r\n     * If an object is returned, its keys will be merged into the existing state.\r\n     *\r\n     * @return {object || null}\r\n     * @optional\r\n     */\r\n    getDerivedStateFromProps: 'DEFINE_MANY_MERGED'\r\n  };\r\n\r\n  /**\r\n   * Mapping from class specification keys to special processing functions.\r\n   *\r\n   * Although these are declared like instance properties in the specification\r\n   * when defining classes using `React.createClass`, they are actually static\r\n   * and are accessible on the constructor instead of the prototype. Despite\r\n   * being static, they must be defined outside of the \"statics\" key under\r\n   * which all other static methods are defined.\r\n   */\r\n  var RESERVED_SPEC_KEYS = {\r\n    displayName: function(Constructor, displayName) {\r\n      Constructor.displayName = displayName;\r\n    },\r\n    mixins: function(Constructor, mixins) {\r\n      if (mixins) {\r\n        for (var i = 0; i < mixins.length; i++) {\r\n          mixSpecIntoComponent(Constructor, mixins[i]);\r\n        }\r\n      }\r\n    },\r\n    childContextTypes: function(Constructor, childContextTypes) {\r\n      if (process.env.NODE_ENV !== 'production') {\r\n        validateTypeDef(Constructor, childContextTypes, 'childContext');\r\n      }\r\n      Constructor.childContextTypes = _assign(\r\n        {},\r\n        Constructor.childContextTypes,\r\n        childContextTypes\r\n      );\r\n    },\r\n    contextTypes: function(Constructor, contextTypes) {\r\n      if (process.env.NODE_ENV !== 'production') {\r\n        validateTypeDef(Constructor, contextTypes, 'context');\r\n      }\r\n      Constructor.contextTypes = _assign(\r\n        {},\r\n        Constructor.contextTypes,\r\n        contextTypes\r\n      );\r\n    },\r\n    /**\r\n     * Special case getDefaultProps which should move into statics but requires\r\n     * automatic merging.\r\n     */\r\n    getDefaultProps: function(Constructor, getDefaultProps) {\r\n      if (Constructor.getDefaultProps) {\r\n        Constructor.getDefaultProps = createMergedResultFunction(\r\n          Constructor.getDefaultProps,\r\n          getDefaultProps\r\n        );\r\n      } else {\r\n        Constructor.getDefaultProps = getDefaultProps;\r\n      }\r\n    },\r\n    propTypes: function(Constructor, propTypes) {\r\n      if (process.env.NODE_ENV !== 'production') {\r\n        validateTypeDef(Constructor, propTypes, 'prop');\r\n      }\r\n      Constructor.propTypes = _assign({}, Constructor.propTypes, propTypes);\r\n    },\r\n    statics: function(Constructor, statics) {\r\n      mixStaticSpecIntoComponent(Constructor, statics);\r\n    },\r\n    autobind: function() {}\r\n  };\r\n\r\n  function validateTypeDef(Constructor, typeDef, location) {\r\n    for (var propName in typeDef) {\r\n      if (typeDef.hasOwnProperty(propName)) {\r\n        // use a warning instead of an _invariant so components\r\n        // don't show up in prod but only in __DEV__\r\n        if (process.env.NODE_ENV !== 'production') {\r\n          warning(\r\n            typeof typeDef[propName] === 'function',\r\n            '%s: %s type `%s` is invalid; it must be a function, usually from ' +\r\n              'React.PropTypes.',\r\n            Constructor.displayName || 'ReactClass',\r\n            ReactPropTypeLocationNames[location],\r\n            propName\r\n          );\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  function validateMethodOverride(isAlreadyDefined, name) {\r\n    var specPolicy = ReactClassInterface.hasOwnProperty(name)\r\n      ? ReactClassInterface[name]\r\n      : null;\r\n\r\n    // Disallow overriding of base class methods unless explicitly allowed.\r\n    if (ReactClassMixin.hasOwnProperty(name)) {\r\n      _invariant(\r\n        specPolicy === 'OVERRIDE_BASE',\r\n        'ReactClassInterface: You are attempting to override ' +\r\n          '`%s` from your class specification. Ensure that your method names ' +\r\n          'do not overlap with React methods.',\r\n        name\r\n      );\r\n    }\r\n\r\n    // Disallow defining methods more than once unless explicitly allowed.\r\n    if (isAlreadyDefined) {\r\n      _invariant(\r\n        specPolicy === 'DEFINE_MANY' || specPolicy === 'DEFINE_MANY_MERGED',\r\n        'ReactClassInterface: You are attempting to define ' +\r\n          '`%s` on your component more than once. This conflict may be due ' +\r\n          'to a mixin.',\r\n        name\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Mixin helper which handles policy validation and reserved\r\n   * specification keys when building React classes.\r\n   */\r\n  function mixSpecIntoComponent(Constructor, spec) {\r\n    if (!spec) {\r\n      if (process.env.NODE_ENV !== 'production') {\r\n        var typeofSpec = typeof spec;\r\n        var isMixinValid = typeofSpec === 'object' && spec !== null;\r\n\r\n        if (process.env.NODE_ENV !== 'production') {\r\n          warning(\r\n            isMixinValid,\r\n            \"%s: You're attempting to include a mixin that is either null \" +\r\n              'or not an object. Check the mixins included by the component, ' +\r\n              'as well as any mixins they include themselves. ' +\r\n              'Expected object but got %s.',\r\n            Constructor.displayName || 'ReactClass',\r\n            spec === null ? null : typeofSpec\r\n          );\r\n        }\r\n      }\r\n\r\n      return;\r\n    }\r\n\r\n    _invariant(\r\n      typeof spec !== 'function',\r\n      \"ReactClass: You're attempting to \" +\r\n        'use a component class or function as a mixin. Instead, just use a ' +\r\n        'regular object.'\r\n    );\r\n    _invariant(\r\n      !isValidElement(spec),\r\n      \"ReactClass: You're attempting to \" +\r\n        'use a component as a mixin. Instead, just use a regular object.'\r\n    );\r\n\r\n    var proto = Constructor.prototype;\r\n    var autoBindPairs = proto.__reactAutoBindPairs;\r\n\r\n    // By handling mixins before any other properties, we ensure the same\r\n    // chaining order is applied to methods with DEFINE_MANY policy, whether\r\n    // mixins are listed before or after these methods in the spec.\r\n    if (spec.hasOwnProperty(MIXINS_KEY)) {\r\n      RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);\r\n    }\r\n\r\n    for (var name in spec) {\r\n      if (!spec.hasOwnProperty(name)) {\r\n        continue;\r\n      }\r\n\r\n      if (name === MIXINS_KEY) {\r\n        // We have already handled mixins in a special case above.\r\n        continue;\r\n      }\r\n\r\n      var property = spec[name];\r\n      var isAlreadyDefined = proto.hasOwnProperty(name);\r\n      validateMethodOverride(isAlreadyDefined, name);\r\n\r\n      if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {\r\n        RESERVED_SPEC_KEYS[name](Constructor, property);\r\n      } else {\r\n        // Setup methods on prototype:\r\n        // The following member methods should not be automatically bound:\r\n        // 1. Expected ReactClass methods (in the \"interface\").\r\n        // 2. Overridden methods (that were mixed in).\r\n        var isReactClassMethod = ReactClassInterface.hasOwnProperty(name);\r\n        var isFunction = typeof property === 'function';\r\n        var shouldAutoBind =\r\n          isFunction &&\r\n          !isReactClassMethod &&\r\n          !isAlreadyDefined &&\r\n          spec.autobind !== false;\r\n\r\n        if (shouldAutoBind) {\r\n          autoBindPairs.push(name, property);\r\n          proto[name] = property;\r\n        } else {\r\n          if (isAlreadyDefined) {\r\n            var specPolicy = ReactClassInterface[name];\r\n\r\n            // These cases should already be caught by validateMethodOverride.\r\n            _invariant(\r\n              isReactClassMethod &&\r\n                (specPolicy === 'DEFINE_MANY_MERGED' ||\r\n                  specPolicy === 'DEFINE_MANY'),\r\n              'ReactClass: Unexpected spec policy %s for key %s ' +\r\n                'when mixing in component specs.',\r\n              specPolicy,\r\n              name\r\n            );\r\n\r\n            // For methods which are defined more than once, call the existing\r\n            // methods before calling the new property, merging if appropriate.\r\n            if (specPolicy === 'DEFINE_MANY_MERGED') {\r\n              proto[name] = createMergedResultFunction(proto[name], property);\r\n            } else if (specPolicy === 'DEFINE_MANY') {\r\n              proto[name] = createChainedFunction(proto[name], property);\r\n            }\r\n          } else {\r\n            proto[name] = property;\r\n            if (process.env.NODE_ENV !== 'production') {\r\n              // Add verbose displayName to the function, which helps when looking\r\n              // at profiling tools.\r\n              if (typeof property === 'function' && spec.displayName) {\r\n                proto[name].displayName = spec.displayName + '_' + name;\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  function mixStaticSpecIntoComponent(Constructor, statics) {\r\n    if (!statics) {\r\n      return;\r\n    }\r\n\r\n    for (var name in statics) {\r\n      var property = statics[name];\r\n      if (!statics.hasOwnProperty(name)) {\r\n        continue;\r\n      }\r\n\r\n      var isReserved = name in RESERVED_SPEC_KEYS;\r\n      _invariant(\r\n        !isReserved,\r\n        'ReactClass: You are attempting to define a reserved ' +\r\n          'property, `%s`, that shouldn\\'t be on the \"statics\" key. Define it ' +\r\n          'as an instance property instead; it will still be accessible on the ' +\r\n          'constructor.',\r\n        name\r\n      );\r\n\r\n      var isAlreadyDefined = name in Constructor;\r\n      if (isAlreadyDefined) {\r\n        var specPolicy = ReactClassStaticInterface.hasOwnProperty(name)\r\n          ? ReactClassStaticInterface[name]\r\n          : null;\r\n\r\n        _invariant(\r\n          specPolicy === 'DEFINE_MANY_MERGED',\r\n          'ReactClass: You are attempting to define ' +\r\n            '`%s` on your component more than once. This conflict may be ' +\r\n            'due to a mixin.',\r\n          name\r\n        );\r\n\r\n        Constructor[name] = createMergedResultFunction(Constructor[name], property);\r\n\r\n        return;\r\n      }\r\n\r\n      Constructor[name] = property;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Merge two objects, but throw if both contain the same key.\r\n   *\r\n   * @param {object} one The first object, which is mutated.\r\n   * @param {object} two The second object\r\n   * @return {object} one after it has been mutated to contain everything in two.\r\n   */\r\n  function mergeIntoWithNoDuplicateKeys(one, two) {\r\n    _invariant(\r\n      one && two && typeof one === 'object' && typeof two === 'object',\r\n      'mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.'\r\n    );\r\n\r\n    for (var key in two) {\r\n      if (two.hasOwnProperty(key)) {\r\n        _invariant(\r\n          one[key] === undefined,\r\n          'mergeIntoWithNoDuplicateKeys(): ' +\r\n            'Tried to merge two objects with the same key: `%s`. This conflict ' +\r\n            'may be due to a mixin; in particular, this may be caused by two ' +\r\n            'getInitialState() or getDefaultProps() methods returning objects ' +\r\n            'with clashing keys.',\r\n          key\r\n        );\r\n        one[key] = two[key];\r\n      }\r\n    }\r\n    return one;\r\n  }\r\n\r\n  /**\r\n   * Creates a function that invokes two functions and merges their return values.\r\n   *\r\n   * @param {function} one Function to invoke first.\r\n   * @param {function} two Function to invoke second.\r\n   * @return {function} Function that invokes the two argument functions.\r\n   * @private\r\n   */\r\n  function createMergedResultFunction(one, two) {\r\n    return function mergedResult() {\r\n      var a = one.apply(this, arguments);\r\n      var b = two.apply(this, arguments);\r\n      if (a == null) {\r\n        return b;\r\n      } else if (b == null) {\r\n        return a;\r\n      }\r\n      var c = {};\r\n      mergeIntoWithNoDuplicateKeys(c, a);\r\n      mergeIntoWithNoDuplicateKeys(c, b);\r\n      return c;\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Creates a function that invokes two functions and ignores their return vales.\r\n   *\r\n   * @param {function} one Function to invoke first.\r\n   * @param {function} two Function to invoke second.\r\n   * @return {function} Function that invokes the two argument functions.\r\n   * @private\r\n   */\r\n  function createChainedFunction(one, two) {\r\n    return function chainedFunction() {\r\n      one.apply(this, arguments);\r\n      two.apply(this, arguments);\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Binds a method to the component.\r\n   *\r\n   * @param {object} component Component whose method is going to be bound.\r\n   * @param {function} method Method to be bound.\r\n   * @return {function} The bound method.\r\n   */\r\n  function bindAutoBindMethod(component, method) {\r\n    var boundMethod = method.bind(component);\r\n    if (process.env.NODE_ENV !== 'production') {\r\n      boundMethod.__reactBoundContext = component;\r\n      boundMethod.__reactBoundMethod = method;\r\n      boundMethod.__reactBoundArguments = null;\r\n      var componentName = component.constructor.displayName;\r\n      var _bind = boundMethod.bind;\r\n      boundMethod.bind = function(newThis) {\r\n        for (\r\n          var _len = arguments.length,\r\n            args = Array(_len > 1 ? _len - 1 : 0),\r\n            _key = 1;\r\n          _key < _len;\r\n          _key++\r\n        ) {\r\n          args[_key - 1] = arguments[_key];\r\n        }\r\n\r\n        // User is trying to bind() an autobound method; we effectively will\r\n        // ignore the value of \"this\" that the user is trying to use, so\r\n        // let's warn.\r\n        if (newThis !== component && newThis !== null) {\r\n          if (process.env.NODE_ENV !== 'production') {\r\n            warning(\r\n              false,\r\n              'bind(): React component methods may only be bound to the ' +\r\n                'component instance. See %s',\r\n              componentName\r\n            );\r\n          }\r\n        } else if (!args.length) {\r\n          if (process.env.NODE_ENV !== 'production') {\r\n            warning(\r\n              false,\r\n              'bind(): You are binding a component method to the component. ' +\r\n                'React does this for you automatically in a high-performance ' +\r\n                'way, so you can safely remove this call. See %s',\r\n              componentName\r\n            );\r\n          }\r\n          return boundMethod;\r\n        }\r\n        var reboundMethod = _bind.apply(boundMethod, arguments);\r\n        reboundMethod.__reactBoundContext = component;\r\n        reboundMethod.__reactBoundMethod = method;\r\n        reboundMethod.__reactBoundArguments = args;\r\n        return reboundMethod;\r\n      };\r\n    }\r\n    return boundMethod;\r\n  }\r\n\r\n  /**\r\n   * Binds all auto-bound methods in a component.\r\n   *\r\n   * @param {object} component Component whose method is going to be bound.\r\n   */\r\n  function bindAutoBindMethods(component) {\r\n    var pairs = component.__reactAutoBindPairs;\r\n    for (var i = 0; i < pairs.length; i += 2) {\r\n      var autoBindKey = pairs[i];\r\n      var method = pairs[i + 1];\r\n      component[autoBindKey] = bindAutoBindMethod(component, method);\r\n    }\r\n  }\r\n\r\n  var IsMountedPreMixin = {\r\n    componentDidMount: function() {\r\n      this.__isMounted = true;\r\n    }\r\n  };\r\n\r\n  var IsMountedPostMixin = {\r\n    componentWillUnmount: function() {\r\n      this.__isMounted = false;\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Add more to the ReactClass base class. These are all legacy features and\r\n   * therefore not already part of the modern ReactComponent.\r\n   */\r\n  var ReactClassMixin = {\r\n    /**\r\n     * TODO: This will be deprecated because state should always keep a consistent\r\n     * type signature and the only use case for this, is to avoid that.\r\n     */\r\n    replaceState: function(newState, callback) {\r\n      this.updater.enqueueReplaceState(this, newState, callback);\r\n    },\r\n\r\n    /**\r\n     * Checks whether or not this composite component is mounted.\r\n     * @return {boolean} True if mounted, false otherwise.\r\n     * @protected\r\n     * @final\r\n     */\r\n    isMounted: function() {\r\n      if (process.env.NODE_ENV !== 'production') {\r\n        warning(\r\n          this.__didWarnIsMounted,\r\n          '%s: isMounted is deprecated. Instead, make sure to clean up ' +\r\n            'subscriptions and pending requests in componentWillUnmount to ' +\r\n            'prevent memory leaks.',\r\n          (this.constructor && this.constructor.displayName) ||\r\n            this.name ||\r\n            'Component'\r\n        );\r\n        this.__didWarnIsMounted = true;\r\n      }\r\n      return !!this.__isMounted;\r\n    }\r\n  };\r\n\r\n  var ReactClassComponent = function() {};\r\n  _assign(\r\n    ReactClassComponent.prototype,\r\n    ReactComponent.prototype,\r\n    ReactClassMixin\r\n  );\r\n\r\n  /**\r\n   * Creates a composite component class given a class specification.\r\n   * See https://facebook.github.io/react/docs/top-level-api.html#react.createclass\r\n   *\r\n   * @param {object} spec Class specification (which must define `render`).\r\n   * @return {function} Component constructor function.\r\n   * @public\r\n   */\r\n  function createClass(spec) {\r\n    // To keep our warnings more understandable, we'll use a little hack here to\r\n    // ensure that Constructor.name !== 'Constructor'. This makes sure we don't\r\n    // unnecessarily identify a class without displayName as 'Constructor'.\r\n    var Constructor = identity(function(props, context, updater) {\r\n      // This constructor gets overridden by mocks. The argument is used\r\n      // by mocks to assert on what gets mounted.\r\n\r\n      if (process.env.NODE_ENV !== 'production') {\r\n        warning(\r\n          this instanceof Constructor,\r\n          'Something is calling a React component directly. Use a factory or ' +\r\n            'JSX instead. See: https://fb.me/react-legacyfactory'\r\n        );\r\n      }\r\n\r\n      // Wire up auto-binding\r\n      if (this.__reactAutoBindPairs.length) {\r\n        bindAutoBindMethods(this);\r\n      }\r\n\r\n      this.props = props;\r\n      this.context = context;\r\n      this.refs = emptyObject;\r\n      this.updater = updater || ReactNoopUpdateQueue;\r\n\r\n      this.state = null;\r\n\r\n      // ReactClasses doesn't have constructors. Instead, they use the\r\n      // getInitialState and componentWillMount methods for initialization.\r\n\r\n      var initialState = this.getInitialState ? this.getInitialState() : null;\r\n      if (process.env.NODE_ENV !== 'production') {\r\n        // We allow auto-mocks to proceed as if they're returning null.\r\n        if (\r\n          initialState === undefined &&\r\n          this.getInitialState._isMockFunction\r\n        ) {\r\n          // This is probably bad practice. Consider warning here and\r\n          // deprecating this convenience.\r\n          initialState = null;\r\n        }\r\n      }\r\n      _invariant(\r\n        typeof initialState === 'object' && !Array.isArray(initialState),\r\n        '%s.getInitialState(): must return an object or null',\r\n        Constructor.displayName || 'ReactCompositeComponent'\r\n      );\r\n\r\n      this.state = initialState;\r\n    });\r\n    Constructor.prototype = new ReactClassComponent();\r\n    Constructor.prototype.constructor = Constructor;\r\n    Constructor.prototype.__reactAutoBindPairs = [];\r\n\r\n    injectedMixins.forEach(mixSpecIntoComponent.bind(null, Constructor));\r\n\r\n    mixSpecIntoComponent(Constructor, IsMountedPreMixin);\r\n    mixSpecIntoComponent(Constructor, spec);\r\n    mixSpecIntoComponent(Constructor, IsMountedPostMixin);\r\n\r\n    // Initialize the defaultProps property after all mixins have been merged.\r\n    if (Constructor.getDefaultProps) {\r\n      Constructor.defaultProps = Constructor.getDefaultProps();\r\n    }\r\n\r\n    if (process.env.NODE_ENV !== 'production') {\r\n      // This is a tag to indicate that the use of these method names is ok,\r\n      // since it's used with createClass. If it's not, then it's likely a\r\n      // mistake so we'll warn you to use the static property, property\r\n      // initializer or constructor respectively.\r\n      if (Constructor.getDefaultProps) {\r\n        Constructor.getDefaultProps.isReactClassApproved = {};\r\n      }\r\n      if (Constructor.prototype.getInitialState) {\r\n        Constructor.prototype.getInitialState.isReactClassApproved = {};\r\n      }\r\n    }\r\n\r\n    _invariant(\r\n      Constructor.prototype.render,\r\n      'createClass(...): Class specification must implement a `render` method.'\r\n    );\r\n\r\n    if (process.env.NODE_ENV !== 'production') {\r\n      warning(\r\n        !Constructor.prototype.componentShouldUpdate,\r\n        '%s has a method called ' +\r\n          'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' +\r\n          'The name is phrased as a question because the function is ' +\r\n          'expected to return a value.',\r\n        spec.displayName || 'A component'\r\n      );\r\n      warning(\r\n        !Constructor.prototype.componentWillRecieveProps,\r\n        '%s has a method called ' +\r\n          'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?',\r\n        spec.displayName || 'A component'\r\n      );\r\n      warning(\r\n        !Constructor.prototype.UNSAFE_componentWillRecieveProps,\r\n        '%s has a method called UNSAFE_componentWillRecieveProps(). ' +\r\n          'Did you mean UNSAFE_componentWillReceiveProps()?',\r\n        spec.displayName || 'A component'\r\n      );\r\n    }\r\n\r\n    // Reduce time spent doing lookups by setting these on the prototype.\r\n    for (var methodName in ReactClassInterface) {\r\n      if (!Constructor.prototype[methodName]) {\r\n        Constructor.prototype[methodName] = null;\r\n      }\r\n    }\r\n\r\n    return Constructor;\r\n  }\r\n\r\n  return createClass;\r\n}\r\n\r\nmodule.exports = factory;\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","_assign","emptyObject","_invariant","warning","ReactPropTypeLocationNames","prop","context","childContext","factory","ReactComponent","isValidElement","ReactNoopUpdateQueue","validateTypeDef","Constructor","typeDef","location","propName","hasOwnProperty","displayName","mixSpecIntoComponent","spec","proto","prototype","autoBindPairs","__reactAutoBindPairs","MIXINS_KEY","RESERVED_SPEC_KEYS","mixins","name","property","isAlreadyDefined","specPolicy","ReactClassInterface","ReactClassMixin","isReactClassMethod","autobind","createMergedResultFunction","createChainedFunction","push","typeofSpec","mergeIntoWithNoDuplicateKeys","one","two","key","undefined","mergedResult","a","apply","arguments","b","c","chainedFunction","bindAutoBindMethod","component","method","boundMethod","bind","__reactBoundContext","__reactBoundMethod","__reactBoundArguments","componentName","constructor","_bind","boundMethod.bind","newThis","_len","length","args","Array","_key","reboundMethod","injectedMixins","statics","propTypes","contextTypes","childContextTypes","getDefaultProps","getInitialState","getChildContext","render","componentWillMount","componentDidMount","componentWillReceiveProps","shouldComponentUpdate","componentWillUpdate","componentDidUpdate","componentWillUnmount","UNSAFE_componentWillMount","UNSAFE_componentWillReceiveProps","UNSAFE_componentWillUpdate","updateComponent","ReactClassStaticInterface","getDerivedStateFromProps","i","IsMountedPreMixin","__isMounted","IsMountedPostMixin","replaceState","newState","callback","updater","enqueueReplaceState","isMounted","__didWarnIsMounted","ReactClassComponent","createClass","fn","props","pairs","autoBindKey","refs","state","initialState","_isMockFunction","isArray","forEach","defaultProps","isReactClassApproved","componentShouldUpdate","componentWillRecieveProps","UNSAFE_componentWillRecieveProps","methodName"]
}
