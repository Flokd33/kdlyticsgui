{
"version":3,
"file":"module$node_modules$$tanstack$table_core$build$lib$features$RowSelection.js",
"lineCount":15,
"mappings":"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",
"sources":["node_modules/@tanstack/table-core/build/lib/features/RowSelection.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$tanstack$table_core$build$lib$features$RowSelection\"] = function(global,require,module,exports) {\n/**\n * table-core\n *\n * Copyright (c) TanStack\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar utils = require('../utils.js');\n\n//\n\nconst RowSelection = {\n  getInitialState: state => {\n    return {\n      rowSelection: {},\n      ...state\n    };\n  },\n  getDefaultOptions: table => {\n    return {\n      onRowSelectionChange: utils.makeStateUpdater('rowSelection', table),\n      enableRowSelection: true,\n      enableMultiRowSelection: true,\n      enableSubRowSelection: true\n      // enableGroupingRowSelection: false,\n      // isAdditiveSelectEvent: (e: unknown) => !!e.metaKey,\n      // isInclusiveSelectEvent: (e: unknown) => !!e.shiftKey,\n    };\n  },\n\n  createTable: table => {\n    return {\n      setRowSelection: updater => table.options.onRowSelectionChange == null ? void 0 : table.options.onRowSelectionChange(updater),\n      resetRowSelection: defaultState => {\n        var _table$initialState$r;\n        return table.setRowSelection(defaultState ? {} : (_table$initialState$r = table.initialState.rowSelection) != null ? _table$initialState$r : {});\n      },\n      toggleAllRowsSelected: value => {\n        table.setRowSelection(old => {\n          value = typeof value !== 'undefined' ? value : !table.getIsAllRowsSelected();\n          const rowSelection = {\n            ...old\n          };\n          const preGroupedFlatRows = table.getPreGroupedRowModel().flatRows;\n\n          // We don't use `mutateRowIsSelected` here for performance reasons.\n          // All of the rows are flat already, so it wouldn't be worth it\n          if (value) {\n            preGroupedFlatRows.forEach(row => {\n              if (!row.getCanSelect()) {\n                return;\n              }\n              rowSelection[row.id] = true;\n            });\n          } else {\n            preGroupedFlatRows.forEach(row => {\n              delete rowSelection[row.id];\n            });\n          }\n          return rowSelection;\n        });\n      },\n      toggleAllPageRowsSelected: value => table.setRowSelection(old => {\n        const resolvedValue = typeof value !== 'undefined' ? value : !table.getIsAllPageRowsSelected();\n        const rowSelection = {\n          ...old\n        };\n        table.getRowModel().rows.forEach(row => {\n          mutateRowIsSelected(rowSelection, row.id, resolvedValue, table);\n        });\n        return rowSelection;\n      }),\n      // addRowSelectionRange: rowId => {\n      //   const {\n      //     rows,\n      //     rowsById,\n      //     options: { selectGroupingRows, selectSubRows },\n      //   } = table\n\n      //   const findSelectedRow = (rows: Row[]) => {\n      //     let found\n      //     rows.find(d => {\n      //       if (d.getIsSelected()) {\n      //         found = d\n      //         return true\n      //       }\n      //       const subFound = findSelectedRow(d.subRows || [])\n      //       if (subFound) {\n      //         found = subFound\n      //         return true\n      //       }\n      //       return false\n      //     })\n      //     return found\n      //   }\n\n      //   const firstRow = findSelectedRow(rows) || rows[0]\n      //   const lastRow = rowsById[rowId]\n\n      //   let include = false\n      //   const selectedRowIds = {}\n\n      //   const addRow = (row: Row) => {\n      //     mutateRowIsSelected(selectedRowIds, row.id, true, {\n      //       rowsById,\n      //       selectGroupingRows: selectGroupingRows!,\n      //       selectSubRows: selectSubRows!,\n      //     })\n      //   }\n\n      //   table.rows.forEach(row => {\n      //     const isFirstRow = row.id === firstRow.id\n      //     const isLastRow = row.id === lastRow.id\n\n      //     if (isFirstRow || isLastRow) {\n      //       if (!include) {\n      //         include = true\n      //       } else if (include) {\n      //         addRow(row)\n      //         include = false\n      //       }\n      //     }\n\n      //     if (include) {\n      //       addRow(row)\n      //     }\n      //   })\n\n      //   table.setRowSelection(selectedRowIds)\n      // },\n      getPreSelectedRowModel: () => table.getCoreRowModel(),\n      getSelectedRowModel: utils.memo(() => [table.getState().rowSelection, table.getCoreRowModel()], (rowSelection, rowModel) => {\n        if (!Object.keys(rowSelection).length) {\n          return {\n            rows: [],\n            flatRows: [],\n            rowsById: {}\n          };\n        }\n        return selectRowsFn(table, rowModel);\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getSelectedRowModel',\n        debug: () => {\n          var _table$options$debugA;\n          return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugTable;\n        }\n      }),\n      getFilteredSelectedRowModel: utils.memo(() => [table.getState().rowSelection, table.getFilteredRowModel()], (rowSelection, rowModel) => {\n        if (!Object.keys(rowSelection).length) {\n          return {\n            rows: [],\n            flatRows: [],\n            rowsById: {}\n          };\n        }\n        return selectRowsFn(table, rowModel);\n      }, {\n        key: process.env.NODE_ENV === 'production' && 'getFilteredSelectedRowModel',\n        debug: () => {\n          var _table$options$debugA2;\n          return (_table$options$debugA2 = table.options.debugAll) != null ? _table$options$debugA2 : table.options.debugTable;\n        }\n      }),\n      getGroupedSelectedRowModel: utils.memo(() => [table.getState().rowSelection, table.getSortedRowModel()], (rowSelection, rowModel) => {\n        if (!Object.keys(rowSelection).length) {\n          return {\n            rows: [],\n            flatRows: [],\n            rowsById: {}\n          };\n        }\n        return selectRowsFn(table, rowModel);\n      }, {\n        key: process.env.NODE_ENV === 'production' && 'getGroupedSelectedRowModel',\n        debug: () => {\n          var _table$options$debugA3;\n          return (_table$options$debugA3 = table.options.debugAll) != null ? _table$options$debugA3 : table.options.debugTable;\n        }\n      }),\n      ///\n\n      // getGroupingRowCanSelect: rowId => {\n      //   const row = table.getRow(rowId)\n\n      //   if (!row) {\n      //     throw new Error()\n      //   }\n\n      //   if (typeof table.options.enableGroupingRowSelection === 'function') {\n      //     return table.options.enableGroupingRowSelection(row)\n      //   }\n\n      //   return table.options.enableGroupingRowSelection ?? false\n      // },\n\n      getIsAllRowsSelected: () => {\n        const preGroupedFlatRows = table.getFilteredRowModel().flatRows;\n        const {\n          rowSelection\n        } = table.getState();\n        let isAllRowsSelected = Boolean(preGroupedFlatRows.length && Object.keys(rowSelection).length);\n        if (isAllRowsSelected) {\n          if (preGroupedFlatRows.some(row => row.getCanSelect() && !rowSelection[row.id])) {\n            isAllRowsSelected = false;\n          }\n        }\n        return isAllRowsSelected;\n      },\n      getIsAllPageRowsSelected: () => {\n        const paginationFlatRows = table.getPaginationRowModel().flatRows.filter(row => row.getCanSelect());\n        const {\n          rowSelection\n        } = table.getState();\n        let isAllPageRowsSelected = !!paginationFlatRows.length;\n        if (isAllPageRowsSelected && paginationFlatRows.some(row => !rowSelection[row.id])) {\n          isAllPageRowsSelected = false;\n        }\n        return isAllPageRowsSelected;\n      },\n      getIsSomeRowsSelected: () => {\n        var _table$getState$rowSe;\n        const totalSelected = Object.keys((_table$getState$rowSe = table.getState().rowSelection) != null ? _table$getState$rowSe : {}).length;\n        return totalSelected > 0 && totalSelected < table.getFilteredRowModel().flatRows.length;\n      },\n      getIsSomePageRowsSelected: () => {\n        const paginationFlatRows = table.getPaginationRowModel().flatRows;\n        return table.getIsAllPageRowsSelected() ? false : paginationFlatRows.filter(row => row.getCanSelect()).some(d => d.getIsSelected() || d.getIsSomeSelected());\n      },\n      getToggleAllRowsSelectedHandler: () => {\n        return e => {\n          table.toggleAllRowsSelected(e.target.checked);\n        };\n      },\n      getToggleAllPageRowsSelectedHandler: () => {\n        return e => {\n          table.toggleAllPageRowsSelected(e.target.checked);\n        };\n      }\n    };\n  },\n  createRow: (row, table) => {\n    return {\n      toggleSelected: value => {\n        const isSelected = row.getIsSelected();\n        table.setRowSelection(old => {\n          value = typeof value !== 'undefined' ? value : !isSelected;\n          if (isSelected === value) {\n            return old;\n          }\n          const selectedRowIds = {\n            ...old\n          };\n          mutateRowIsSelected(selectedRowIds, row.id, value, table);\n          return selectedRowIds;\n        });\n      },\n      getIsSelected: () => {\n        const {\n          rowSelection\n        } = table.getState();\n        return isRowSelected(row, rowSelection);\n      },\n      getIsSomeSelected: () => {\n        const {\n          rowSelection\n        } = table.getState();\n        return isSubRowSelected(row, rowSelection) === 'some';\n      },\n      getIsAllSubRowsSelected: () => {\n        const {\n          rowSelection\n        } = table.getState();\n        return isSubRowSelected(row, rowSelection) === 'all';\n      },\n      getCanSelect: () => {\n        var _table$options$enable;\n        if (typeof table.options.enableRowSelection === 'function') {\n          return table.options.enableRowSelection(row);\n        }\n        return (_table$options$enable = table.options.enableRowSelection) != null ? _table$options$enable : true;\n      },\n      getCanSelectSubRows: () => {\n        var _table$options$enable2;\n        if (typeof table.options.enableSubRowSelection === 'function') {\n          return table.options.enableSubRowSelection(row);\n        }\n        return (_table$options$enable2 = table.options.enableSubRowSelection) != null ? _table$options$enable2 : true;\n      },\n      getCanMultiSelect: () => {\n        var _table$options$enable3;\n        if (typeof table.options.enableMultiRowSelection === 'function') {\n          return table.options.enableMultiRowSelection(row);\n        }\n        return (_table$options$enable3 = table.options.enableMultiRowSelection) != null ? _table$options$enable3 : true;\n      },\n      getToggleSelectedHandler: () => {\n        const canSelect = row.getCanSelect();\n        return e => {\n          var _target;\n          if (!canSelect) return;\n          row.toggleSelected((_target = e.target) == null ? void 0 : _target.checked);\n        };\n      }\n    };\n  }\n};\nconst mutateRowIsSelected = (selectedRowIds, id, value, table) => {\n  var _row$subRows;\n  const row = table.getRow(id);\n\n  // const isGrouped = row.getIsGrouped()\n\n  // if ( // TODO: enforce grouping row selection rules\n  //   !isGrouped ||\n  //   (isGrouped && table.options.enableGroupingRowSelection)\n  // ) {\n  if (value) {\n    if (!row.getCanMultiSelect()) {\n      Object.keys(selectedRowIds).forEach(key => delete selectedRowIds[key]);\n    }\n    if (row.getCanSelect()) {\n      selectedRowIds[id] = true;\n    }\n  } else {\n    delete selectedRowIds[id];\n  }\n  // }\n\n  if ((_row$subRows = row.subRows) != null && _row$subRows.length && row.getCanSelectSubRows()) {\n    row.subRows.forEach(row => mutateRowIsSelected(selectedRowIds, row.id, value, table));\n  }\n};\nfunction selectRowsFn(table, rowModel) {\n  const rowSelection = table.getState().rowSelection;\n  const newSelectedFlatRows = [];\n  const newSelectedRowsById = {};\n\n  // Filters top level and nested rows\n  const recurseRows = function (rows, depth) {\n    return rows.map(row => {\n      var _row$subRows2;\n      const isSelected = isRowSelected(row, rowSelection);\n      if (isSelected) {\n        newSelectedFlatRows.push(row);\n        newSelectedRowsById[row.id] = row;\n      }\n      if ((_row$subRows2 = row.subRows) != null && _row$subRows2.length) {\n        row = {\n          ...row,\n          subRows: recurseRows(row.subRows)\n        };\n      }\n      if (isSelected) {\n        return row;\n      }\n    }).filter(Boolean);\n  };\n  return {\n    rows: recurseRows(rowModel.rows),\n    flatRows: newSelectedFlatRows,\n    rowsById: newSelectedRowsById\n  };\n}\nfunction isRowSelected(row, selection) {\n  var _selection$row$id;\n  return (_selection$row$id = selection[row.id]) != null ? _selection$row$id : false;\n}\nfunction isSubRowSelected(row, selection, table) {\n  if (row.subRows && row.subRows.length) {\n    let allChildrenSelected = true;\n    let someSelected = false;\n    row.subRows.forEach(subRow => {\n      // Bail out early if we know both of these\n      if (someSelected && !allChildrenSelected) {\n        return;\n      }\n      if (isRowSelected(subRow, selection)) {\n        someSelected = true;\n      } else {\n        allChildrenSelected = false;\n      }\n    });\n    return allChildrenSelected ? 'all' : someSelected ? 'some' : false;\n  }\n  return false;\n}\n\nexports.RowSelection = RowSelection;\nexports.isRowSelected = isRowSelected;\nexports.isSubRowSelected = isSubRowSelected;\nexports.selectRowsFn = selectRowsFn;\n//# sourceMappingURL=RowSelection.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","selectRowsFn","table","rowModel","rowSelection","getState","newSelectedFlatRows","newSelectedRowsById","recurseRows","rows","depth","map","row","_row$subRows2","isSelected","isRowSelected","push","id","subRows","length","filter","Boolean","flatRows","rowsById","selection","_selection$row$id","isSubRowSelected","allChildrenSelected","someSelected","forEach","subRow","Object","defineProperty","value","utils","mutateRowIsSelected","selectedRowIds","_row$subRows","getRow","getCanMultiSelect","keys","key","getCanSelect","getCanSelectSubRows","RowSelection","getInitialState","state","getDefaultOptions","onRowSelectionChange","makeStateUpdater","enableRowSelection","enableMultiRowSelection","enableSubRowSelection","createTable","setRowSelection","updater","options","resetRowSelection","defaultState","_table$initialState$r","initialState","toggleAllRowsSelected","old","getIsAllRowsSelected","preGroupedFlatRows","getPreGroupedRowModel","toggleAllPageRowsSelected","resolvedValue","getIsAllPageRowsSelected","getRowModel","getPreSelectedRowModel","getCoreRowModel","getSelectedRowModel","memo","debug","_table$options$debugA","debugAll","debugTable","getFilteredSelectedRowModel","getFilteredRowModel","_table$options$debugA2","getGroupedSelectedRowModel","getSortedRowModel","_table$options$debugA3","isAllRowsSelected","some","paginationFlatRows","getPaginationRowModel","isAllPageRowsSelected","getIsSomeRowsSelected","_table$getState$rowSe","totalSelected","getIsSomePageRowsSelected","d","getIsSelected","getIsSomeSelected","getToggleAllRowsSelectedHandler","e","target","checked","getToggleAllPageRowsSelectedHandler","createRow","toggleSelected","getIsAllSubRowsSelected","_table$options$enable","_table$options$enable2","_table$options$enable3","getToggleSelectedHandler","canSelect","_target"]
}
