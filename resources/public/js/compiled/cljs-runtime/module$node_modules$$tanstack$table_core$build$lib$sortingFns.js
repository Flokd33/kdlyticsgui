shadow$provide.module$node_modules$$tanstack$table_core$build$lib$sortingFns=function(global,require,module,exports){function compareBasic(a,b){return a===b?0:a>b?1:-1}function toString(a){return"number"===typeof a?isNaN(a)||Infinity===a||-Infinity===a?"":String(a):"string"===typeof a?a:""}function compareAlphanumeric(aStr,bStr){aStr=aStr.split(reSplitAlphaNumeric).filter(Boolean);for(bStr=bStr.split(reSplitAlphaNumeric).filter(Boolean);aStr.length&&bStr.length;){const aa=aStr.shift(),bb=bStr.shift(),
an=parseInt(aa,10),bn=parseInt(bb,10),combo=[an,bn].sort();if(isNaN(combo[0])){if(aa>bb)return 1;if(bb>aa)return-1}else{if(isNaN(combo[1]))return isNaN(an)?-1:1;if(an>bn)return 1;if(bn>an)return-1}}return aStr.length-bStr.length}Object.defineProperty(exports,"__esModule",{value:!0});const reSplitAlphaNumeric=/([0-9]+)/gm;exports.reSplitAlphaNumeric=reSplitAlphaNumeric;exports.sortingFns={alphanumeric:(rowA,rowB,columnId)=>compareAlphanumeric(toString(rowA.getValue(columnId)).toLowerCase(),toString(rowB.getValue(columnId)).toLowerCase()),
alphanumericCaseSensitive:(rowA,rowB,columnId)=>compareAlphanumeric(toString(rowA.getValue(columnId)),toString(rowB.getValue(columnId))),text:(rowA,rowB,columnId)=>compareBasic(toString(rowA.getValue(columnId)).toLowerCase(),toString(rowB.getValue(columnId)).toLowerCase()),textCaseSensitive:(rowA,rowB,columnId)=>compareBasic(toString(rowA.getValue(columnId)),toString(rowB.getValue(columnId))),datetime:(rowA,rowB,columnId)=>{rowA=rowA.getValue(columnId);rowB=rowB.getValue(columnId);return rowA>rowB?
1:rowA<rowB?-1:0},basic:(rowA,rowB,columnId)=>compareBasic(rowA.getValue(columnId),rowB.getValue(columnId))}}
//# sourceMappingURL=module$node_modules$$tanstack$table_core$build$lib$sortingFns.js.map
