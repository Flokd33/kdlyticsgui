{
"version":3,
"file":"module$node_modules$$tanstack$table_core$build$lib$features$Expanding.js",
"lineCount":8,
"mappings":"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",
"sources":["node_modules/@tanstack/table-core/build/lib/features/Expanding.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$tanstack$table_core$build$lib$features$Expanding\"] = function(global,require,module,exports) {\n/**\n * table-core\n *\n * Copyright (c) TanStack\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar utils = require('../utils.js');\n\n//\n\nconst Expanding = {\n  getInitialState: state => {\n    return {\n      expanded: {},\n      ...state\n    };\n  },\n  getDefaultOptions: table => {\n    return {\n      onExpandedChange: utils.makeStateUpdater('expanded', table),\n      paginateExpandedRows: true\n    };\n  },\n  createTable: table => {\n    let registered = false;\n    let queued = false;\n    return {\n      _autoResetExpanded: () => {\n        var _ref, _table$options$autoRe;\n        if (!registered) {\n          table._queue(() => {\n            registered = true;\n          });\n          return;\n        }\n        if ((_ref = (_table$options$autoRe = table.options.autoResetAll) != null ? _table$options$autoRe : table.options.autoResetExpanded) != null ? _ref : !table.options.manualExpanding) {\n          if (queued) return;\n          queued = true;\n          table._queue(() => {\n            table.resetExpanded();\n            queued = false;\n          });\n        }\n      },\n      setExpanded: updater => table.options.onExpandedChange == null ? void 0 : table.options.onExpandedChange(updater),\n      toggleAllRowsExpanded: expanded => {\n        if (expanded != null ? expanded : !table.getIsAllRowsExpanded()) {\n          table.setExpanded(true);\n        } else {\n          table.setExpanded({});\n        }\n      },\n      resetExpanded: defaultState => {\n        var _table$initialState$e, _table$initialState;\n        table.setExpanded(defaultState ? {} : (_table$initialState$e = (_table$initialState = table.initialState) == null ? void 0 : _table$initialState.expanded) != null ? _table$initialState$e : {});\n      },\n      getCanSomeRowsExpand: () => {\n        return table.getPrePaginationRowModel().flatRows.some(row => row.getCanExpand());\n      },\n      getToggleAllRowsExpandedHandler: () => {\n        return e => {\n          e.persist == null ? void 0 : e.persist();\n          table.toggleAllRowsExpanded();\n        };\n      },\n      getIsSomeRowsExpanded: () => {\n        const expanded = table.getState().expanded;\n        return expanded === true || Object.values(expanded).some(Boolean);\n      },\n      getIsAllRowsExpanded: () => {\n        const expanded = table.getState().expanded;\n\n        // If expanded is true, save some cycles and return true\n        if (typeof expanded === 'boolean') {\n          return expanded === true;\n        }\n        if (!Object.keys(expanded).length) {\n          return false;\n        }\n\n        // If any row is not expanded, return false\n        if (table.getRowModel().flatRows.some(row => !row.getIsExpanded())) {\n          return false;\n        }\n\n        // They must all be expanded :shrug:\n        return true;\n      },\n      getExpandedDepth: () => {\n        let maxDepth = 0;\n        const rowIds = table.getState().expanded === true ? Object.keys(table.getRowModel().rowsById) : Object.keys(table.getState().expanded);\n        rowIds.forEach(id => {\n          const splitId = id.split('.');\n          maxDepth = Math.max(maxDepth, splitId.length);\n        });\n        return maxDepth;\n      },\n      getPreExpandedRowModel: () => table.getSortedRowModel(),\n      getExpandedRowModel: () => {\n        if (!table._getExpandedRowModel && table.options.getExpandedRowModel) {\n          table._getExpandedRowModel = table.options.getExpandedRowModel(table);\n        }\n        if (table.options.manualExpanding || !table._getExpandedRowModel) {\n          return table.getPreExpandedRowModel();\n        }\n        return table._getExpandedRowModel();\n      }\n    };\n  },\n  createRow: (row, table) => {\n    return {\n      toggleExpanded: expanded => {\n        table.setExpanded(old => {\n          var _expanded;\n          const exists = old === true ? true : !!(old != null && old[row.id]);\n          let oldExpanded = {};\n          if (old === true) {\n            Object.keys(table.getRowModel().rowsById).forEach(rowId => {\n              oldExpanded[rowId] = true;\n            });\n          } else {\n            oldExpanded = old;\n          }\n          expanded = (_expanded = expanded) != null ? _expanded : !exists;\n          if (!exists && expanded) {\n            return {\n              ...oldExpanded,\n              [row.id]: true\n            };\n          }\n          if (exists && !expanded) {\n            const {\n              [row.id]: _,\n              ...rest\n            } = oldExpanded;\n            return rest;\n          }\n          return old;\n        });\n      },\n      getIsExpanded: () => {\n        var _table$options$getIsR;\n        const expanded = table.getState().expanded;\n        return !!((_table$options$getIsR = table.options.getIsRowExpanded == null ? void 0 : table.options.getIsRowExpanded(row)) != null ? _table$options$getIsR : expanded === true || (expanded == null ? void 0 : expanded[row.id]));\n      },\n      getCanExpand: () => {\n        var _table$options$getRow, _table$options$enable, _row$subRows;\n        return (_table$options$getRow = table.options.getRowCanExpand == null ? void 0 : table.options.getRowCanExpand(row)) != null ? _table$options$getRow : ((_table$options$enable = table.options.enableExpanding) != null ? _table$options$enable : true) && !!((_row$subRows = row.subRows) != null && _row$subRows.length);\n      },\n      getToggleExpandedHandler: () => {\n        const canExpand = row.getCanExpand();\n        return () => {\n          if (!canExpand) return;\n          row.toggleExpanded();\n        };\n      }\n    };\n  }\n};\n\nexports.Expanding = Expanding;\n//# sourceMappingURL=Expanding.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","utils","Expanding","getInitialState","state","expanded","getDefaultOptions","table","onExpandedChange","makeStateUpdater","paginateExpandedRows","createTable","registered","queued","_autoResetExpanded","_ref","_table$options$autoRe","options","autoResetAll","autoResetExpanded","manualExpanding","_queue","resetExpanded","setExpanded","updater","toggleAllRowsExpanded","getIsAllRowsExpanded","defaultState","_table$initialState$e","_table$initialState","initialState","getCanSomeRowsExpand","getPrePaginationRowModel","flatRows","some","row","getCanExpand","getToggleAllRowsExpandedHandler","e","persist","getIsSomeRowsExpanded","getState","values","Boolean","keys","length","getRowModel","getIsExpanded","getExpandedDepth","maxDepth","forEach","rowIds","rowsById","id","splitId","split","Math","max","getPreExpandedRowModel","getSortedRowModel","getExpandedRowModel","_getExpandedRowModel","createRow","toggleExpanded","old","_expanded","exists","oldExpanded","rowId","rest","_table$options$getIsR","getIsRowExpanded","_table$options$getRow","_table$options$enable","_row$subRows","getRowCanExpand","enableExpanding","subRows","getToggleExpandedHandler","canExpand"]
}
