{"version":3,"sources":["kdlyticsgui/tools.cljs"],"mappings":";;AAWA,8BAAA,9BAAMA,oEAAWC;AAAjB,AAAA,0FAAwBC,kDAAS,qBAAA,2CAAA,hEAACC,oHAAeF;;AAEjD,kCAAA,lCAAMG,4EAAYC;AAAlB,AAAqB,YAAAC,oCAAsC,4CAAKD;;AAChE,uCAAA,vCAAME,sFAAiBF;AAAvB,AAA0B,iEAAA,IAAA,9DAACG,6CAAK,AAAWH;;AAC3C,yCAAA,zCAAMI,0FAAmBJ;AAAzB,AAA4B,IAAMK,IAAE,0DAAA,IAAA,9DAACF,6CAAK,AAAWH;AAAzB,AAAkC,gEAAA,4DAAA,pHAAK,+CAAA,IAAA,nDAACG,6CAAKE,eAAW,+CAAA,IAAA,nDAACF,6CAAKE,eAAW,+CAAA,IAAA,nDAACF,6CAAKE;;AAE3G,wCAAA,xCAAMC,wFAAkBN;AAAxB,AAA2B,OAACO,qDAAS,yDAAA,zDAACC,uEAA2B,yDAAA,xDAAK,+CAAA,IAAA,nDAACL,6CAAKH,eAAW,+CAAA,/CAACG,6CAAKH;;AAC7F,sCAAA,tCAAMS,oFAAgBT;AAAtB,AAAyB,OAACU,yBAAW,yDAAA,zDAACF,oEAAsCR;;AAC5E,qCAAA,rCAAMW,kFAAeX;AAArB,AAAwB,OAACU,yBAAW,yDAAA,zDAACF,mEAAqCR;;AAI1E,uCAAA,vCAAMY,sFAAiBZ;AAAvB,AACE,IAAMa,KAAG,4CAAKb;AAAd,AACE,iEAAA,6DAAA,tHAAK,gDAAA,IAAA,pDAACG,6CAAKU,gBAAY,gDAAA,IAAA,pDAACV,6CAAKU,gBAAY,gDAAA,IAAA,pDAACV,6CAAKU;;AAEnD,kCAAA,lCAAMC,4EAAYC,EAAEC,EAAEC;AAAtB,AAA4B,sDAAA,WAAAC,1DAACC;AAAD,AAAS,OAACC,6CAAE,4CAAAF,5CAACG,6DAAMN,GAAGC;GAAGC;;AAErD;;;;;gCAAA,hCAAMK,wEAIHC,EAAEN;AAJL,AAKE,OAACO,oBACC,WAAKC,IAAIV,EAAEW;AAAX,AACE,sDAAA,WAAAC,1DAACR;AAAD,AAAS,GAAI,AAACS,oBAAIF;AAAM,IAAAG,WAAM,4CAAAF,5CAACN,6DAAMN;AAAb,AAAA,gFAAAc,2BAAAA,nGAACH,qCAAAA,+CAAAA;;AAAgB,OAACN,6CAAEM,KAAK,4CAAAC,5CAACN,6DAAMN;;GAAKU;GAAMR,KAAKM;;AAU9E,AAAA;;;kDAAA,0DAAAO,5GAAME;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,8EAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,8EAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,8EAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAC,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,gFAAA,hFAAMD,2FAEFE;AAFJ,AAEoB,OAACC,8EAA2BD,eAAe,AAACE,eAAK,AAACC,eAAKH;;;AAF3E,CAAA,gFAAA,hFAAMF,2FAGFE,eAAeI;AAHnB,AAGyB,yGAAA,lGAACH,8EAA2BD,eAAeI;;;AAHpE,CAAA,gFAAA,hFAAMN,2FAIFE,eAAeI,KAAKC;AAJxB,AAKG,IAAME,MAAI,AAACC,6CAAK,yHAAA,xHAAK,AAACC,kDAAoBJ,IAAI,AAACK,4CAAIC,eAAKP;AAAxD,AACE,IAAAQ,mBAAA,AAAAC,cAAab;IAAbc,qBAAA;IAAAC,qBAAA;IAAAC,iBAAA;;AAAA,AAAA,GAAA,AAAA,CAAAA,iBAAAD;AAAA,iBAAA,AAAAD,wDAAAE,rEAAQS;AAAR,AAAA,AACE,AAACC,mDAAMnB,IAAIoB,cAAI,AAAClB,kDAAoBJ,IAAI,6CAAA,7CAACwB;kBAADD;AAAA,AAAO,8DAAAA,vDAACzC,4CAAIsC;;QAApD,PAA4DrB;;AAD9D;AAAA,eAAAQ;eAAAE;eAAAC;eAAA,CAAAC,iBAAA;;;;;;;AAAA,IAAAC,2BAAA,AAAAJ,cAAAD;AAAA,AAAA,GAAAK;AAAA,AAAA,IAAAL,uBAAAK;AAAA,AAAA,GAAA,AAAAC,6BAAAN;AAAA,IAAAO,wBAAA,AAAAC,sBAAAR;AAAA,AAAA,eAAA,AAAAS,qBAAAT;eAAAO;eAAA,AAAAG,gBAAAH;eAAA;;;;;;;AAAA,iBAAA,AAAAI,gBAAAX,7BAAQa;AAAR,AAAA,AACE,AAACC,mDAAMnB,IAAIoB,cAAI,AAAClB,kDAAoBJ,IAAI,6CAAA,7CAACwB;kBAADD;AAAA,AAAO,8DAAAA,vDAACzC,4CAAIsC;;QAApD,PAA4DrB;;AAD9D;AAAA,eAAA,AAAAoB,eAAAZ;eAAA;eAAA;eAAA;;;;;;;;AAAA;;;;;AADF,OAAAN,gBAGGC;;;AARN,CAAA,0EAAA,1EAAMT;;AAAN,AAUA;;;2CAAA,3CAAMgC,8FAEHC,KAAKC;AAFR,AAGE,IAAMC,YAAU,KAAAC,KAAA,OAAA,UAAA,hBAAeH;IACzBI,OAAK,uBAAA,vBAAgBC;AAD3B,AAEE,CAAM,AAAQD,YAAM,AAAkBE,oBAAOJ;;AAC7C,kBAAA,lBAAeE,6BAAgBH;;AAC/B,AAAc,AAAQI,0BAAaD;;AACnC,AAAQA;;AACR,OAAc,AAAQC,0BAAaD;;AAEvC,AAAA,6BAAA,qCAAAvC,lEAAM2C;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,yDAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,yDAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,yDAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAxC,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,2DAAA,3DAAMwC,sEACFC,KAAKC;AADT,AACmB,OAACX,yCAAuB,AAAClE,qBAAQ,AAACqC,8EAA2BuC,OAAO,uDAAA,VAAKC;;;AAD5F,CAAA,2DAAA,3DAAMF,sEAEFC,KAAKC,SAASrC;AAFlB,AAEwB,mFAAA,5EAACsC,yDAASF,KAAKC,SAASrC;;;AAFhD,CAAA,2DAAA,3DAAMmC,sEAGFC,KAAKC,SAASrC,KAAKC;AAHvB,AAIG,OAACyB,yCAAuB,AAAClE,qBAAQ,AAACqC,8EAA2BuC,KAAKpC,KAAKC,MAAM,uDAAA,VAAKoC;;;AAJrF,CAAA,qDAAA,rDAAMF;;AAAN,AAmBA,sCAAA,tCAAMI,oFAAmBC;AAAzB,AACE,IAAMC,KAAG,uBAAA,vBAACC;AAAV,AACE,CAAM,AAASD,WAAID;;AACnB,AAAcG,0BAAiBF;;AAC/B,AAASA;;AACT,qBAAA,rBAACG;;AACD,OAAcD,0BAAiBF;;AAEnC,gDAAA,hDAAMI,wGAA6BC,MAAMC;AAAzC,AACE,IAAMC,UAAQ,CAAA,MAAKF;IACbG,cAAY,CAAA,MAAOF;IACnBG,qBAAmB,WAAKC;AAAL,AAAQ,QAAA,MAAK,AAACC,SAAS,eAAA,dAAKH,mBAAaE;;AAFlE,AAGE,QACE,AAACE,+CAAOC,iBACA,AAACC,6CAAK,4CAAA,WAAAC,vDAAClD;AAAD,AAAM,QAAA,CAAA,CAAA,MAAAkD,oBAASP,eAAY,mBAAAO,nBAACN;GAAuB,8CAAA,9CAACO,kDAAQ,WAAA,VAAKT,iBACjE,CAAA,CAAA,MAAOA,WAAQ,AAACE,mBAAmBF,cACjD,eAAA,dAAKC;;AAIX;;;;+BAAA,/BAAMS,sEAGH/E,KAAKgF;AAHR,AAIE,IAAMC,aAAW,4CAAA,WAAAC,vDAACvD;AAAD,AAAM,GAAI,GAAA,CAAAuD,oBAAA;AAAJA;;AAAgB,oBAAIF;AAAWG;;AAAY,UAAGA;;;GAAenF;AAApF,AACE,OAAC2B,4CAAIyD,cACA,AAACzD,4CACC,AAAC0D,uBACC,6CAAA,7CAACC,gFAAQ,AAAC3D,4CAAI,AAAC4D,6CAAK/C,gBAAMgD,kBAAQ,AAACC,mBAASD,iBAAO,AAACE,oDAAYC,iBAAO,AAACC,6CAAK,kBAAIZ,kBAAWa,eAAEC,gBAAGb,iBACnGA;;AAGX;;;6BAAA,7BAAMc,kEAEHC,IAAItC;AAFP,AAGE,IAAMI,KAAG,uBAAA,vBAACC;AAAV,AACE,CAAM,AAAQD,UAAIkC;;AAClB,CAAM,AAAYlC,cAAIJ;;AACtB,AAAcM,0BAAiBF;;AAC/B,AAAQA;;AACR,OAAcE,0BAAiBF;;AAwBnC;;;iDAAA,jDAAMmC,0GAEHC,IAAIrC;AAFP,AAGE,OAAU,AAAgBsC,4BAAWD,IAAIrC;;AAE3C;;;2CAAA,3CAAMuC,8FAEHF;AAFH,AAGE,OAAU,AAAgBC,4BAAWD;;AAEvC;;;oDAAA,pDAAMG,gHAEHH;AAFH,AAGE,OAAa,AAAgBC,+BAAWD;;AAG1C,AAAKI,wBAAI,KAAAC,uBAAeC;AACxB,uBAAA,vBAAMC,sDAAI1H;AAAV,AAAa,OAASuH,6BAAI,4CAAKvH;;AAC/B,sCAAA,tCAAM2H,oFAAmB3H;AAAzB,AAA4B,QAAA,SAAQ,gBAAA,fAAK,KAAA,JAAGA;;AAC5C,AAAK4H,0BAAM,AAACpB,6CAAKkB,qBAAGC;AAEpB,wDAAA,xDAAME,wHAAqCC;AAA3C,AAEE,IAAA,AACE,IAAM/G,IAAE,AAACiH,sDAAwBF;AAAjC,AACE,GAAA,GAAQ,EAAK,OAAS/G,oBAAG,EAAA,CAAA,kBAAA,MAAA,dAASA,SAAAA;AAAlC;;AAAA;;gBAFJ,QAAAgH,JAGkBE;AAHlB,AAAA;;AAMF;;;8CAAA,9CAAMC,oGAEHC,aAAaC,YAAYC,eAAeC,kBAAkBC;AAF7D,AAGE,IAAMlI,IAAE,CAAA,aAAA,OAAA,nBAAGkI;IAAwBC,IAAE,qBAAA,pBAAGF;IAA0BG,IAAE,CAAG,CAAGL,cAAYD,gBAAcC;IAC9FM,QAAM,CAAG,CAAGF,IAAEA,KAAG,CAAA,CAAA,MAAKnI,KAAEoI;IAAIE,KAAG,CAAG,CAAG,GAAGH,KAAG,AAACI,UAAUF,UAAQ,CAAA,MAAKrI;AADzE,AAEE,QAAGgI,iBAAeM;;AAEtB,0BAAA,1BAAME,4DAAO5E;AAAb,AACE,eAAA,XAAM6E;IACAC,uIAAY,AAACC,gBAAMF,lEACP,6CAAA,7CAACG,lDACD,6CAAA,7CAACC,1BACD,AAACC,iBAAOL;AAJ1B,AAKE,OAACnG,kDAAoB,AAACyG,gDAAQL,OAAO9E","names":["kdlyticsgui.tools/vega-lite","spec","js/module$node_modules$react_vega$lib$index.VegaLite","cljs.core/clj->js","kdlyticsgui.tools/int->gdate","x","js/goog.date.UtcDateTime.fromIsoString","kdlyticsgui.tools/gdate->yyyyMMdd","cljs.core.subs","kdlyticsgui.tools/gdate->yyyy-MM-dd","a","kdlyticsgui.tools/ddMMMyyyy->gdate","cljs_time.format.parse","cljs_time.format.formatter","kdlyticsgui.tools/gdate->ddMMMyy","cljs-time.format/unparse","kdlyticsgui.tools/gdate->MMM-yy","kdlyticsgui.tools/int->dd-MM-yyyy","sx","kdlyticsgui.tools/filterkey=","k","v","coll","p1__34425#","cljs.core.filter","cljs.core._EQ_","cljs.core.get","kdlyticsgui.tools/chainfilter","m","cljs.core/reduce-kv","erg","pred","p1__34426#","cljs.core/fn?","G__34427","var_args","G__34430","kdlyticsgui.tools/vector-of-maps->csv-atomic","js/Error","vector-of-maps","kdlyticsgui.tools.vector_of_maps__GT_csv_atomic","cljs.core/keys","cljs.core/last","cols","sep","cljs.core/deref","res","cljs.core.atom","clojure.string.join","cljs.core.map","cljs.core/name","seq__34431","cljs.core/seq","chunk__34432","count__34433","i__34434","temp__5804__auto__","cljs.core/chunked-seq?","c__5568__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next","line","cljs.core.swap_BANG_","cljs.core/str","p1__34428#","cljs.core.mapv","kdlyticsgui.tools/download-object-as-csv","text","export-name","data-blob","js/Blob","link","js/document","js/URL","G__34436","kdlyticsgui.tools/csv-link","data","filename","kdlyticsgui.tools.csv_link","kdlyticsgui.tools/copy-to-clipboard","val","el","js/document.createElement","js/document.body","js/document.execCommand","kdlyticsgui.tools/semi-bond-modified-duration","years","coupon","periods","semi-coupon","discount-at-period","n","Math/pow","cljs.core.reduce","cljs.core/+","cljs.core.conj","p1__34437#","cljs.core.range","kdlyticsgui.tools/naive-rank","ascending?","clean-coll","p1__34438#","js/Infinity","cljs.core/inc","clojure.set/map-invert","cljs.core.into","cljs.core.comp","cljs.core/second","cljs.core/group-by","cljs.core.map_indexed","cljs.core/vector","cljs.core.sort","cljs.core/<","cljs.core/>","kdlyticsgui.tools/save-png","uri","kdlyticsgui.tools/local-storage-set-item!","key","js/window","kdlyticsgui.tools/local-storage-get-item","kdlyticsgui.tools/local-storage-remove-item!","kdlyticsgui.tools/nff","js/goog.i18n.NumberFormat","goog.i18n.NumberFormat.Format/DECIMAL","kdlyticsgui.tools/nf","kdlyticsgui.tools/round-to-thousand","kdlyticsgui.tools/tnfmt","kdlyticsgui.tools/not-number-m100-to-100-error-status","s","e34439","cljs.reader.read_string","e","kdlyticsgui.tools/new-spread-from-new-price","target-price","clean-price","current-spread","modified-duration","convexity","b","c","delta","s1","Math/sqrt","kdlyticsgui.tools/rot13","alphabet","cipher","cljs.core/cycle","cljs.core.drop","cljs.core.take","cljs.core/zipmap","cljs.core.replace"],"sourcesContent":["(ns kdlyticsgui.tools\r\n  (:require                                                 ;[\"html2canvas\" :as html2canvas]\r\n            [goog.string :as gstring]\r\n            [goog.string.format]\r\n            [cljs-time.format :as tf]\r\n            [\"react-vega\" :as react-vega :refer (VegaLite)])\r\n  (:import (goog.i18n NumberFormat)\r\n           (goog.i18n.NumberFormat Format))\r\n  )\r\n\r\n;------------------------------------------------------VEGA-------------------------------------------------------------\r\n(defn vega-lite [spec] [VegaLite (clj->js {:spec spec}  ) ])\r\n;------------------------------------------------------????-------------------------------------------------------------\r\n(defn int->gdate [x] (goog.date.UtcDateTime.fromIsoString. (str x)))\r\n(defn gdate->yyyyMMdd [x] (subs (.toString x) 0 8))\r\n(defn gdate->yyyy-MM-dd [x] (let [a (subs (.toString x) 0 8)] (str (subs a 0 4) \"-\" (subs a 4 6) \"-\" (subs a 6 8))))\r\n\r\n(defn ddMMMyyyy->gdate [x] (tf/parse (tf/formatter \"dd MMMyyyy\") (str (subs x 0 2) \" \" (subs x 2))))\r\n(defn gdate->ddMMMyy [x] (tf/unparse (cljs-time.format/formatter \"ddMMMyy\") x))\r\n(defn gdate->MMM-yy [x] (tf/unparse (cljs-time.format/formatter \"MMM-yy\") x))\r\n;(defn gdate->yyyyMMdd [x] (tf/unparse (cljs-time.format/formatter \"yyyyMMdd\") x))\r\n\r\n\r\n(defn int->dd-MM-yyyy [x]\r\n  (let [sx (str x)]\r\n    (str (subs sx 6 8) \"-\" (subs sx 4 6) \"-\" (subs sx 0 4))))\r\n\r\n(defn filterkey= [k v coll] (filter #(= (get % k) v) coll))\r\n\r\n(defn chainfilter\r\n  \"Chain filter (boolean AND). Defaults to equality if predicate is not a function.\r\n  example: (chainfilter {:portfolio #(= % \\\"OGEMCORD\\\") :weight pos?} @positions)\r\n  equivalent to (chainfilter {:portfolio \\\"OGEMCORD\\\" :weight pos?} @positions)\"\r\n  [m coll]\r\n  (reduce-kv\r\n    (fn [erg k pred]\r\n      (filter #(if (fn? pred) (pred (get % k)) (= pred (get % k))) erg)) coll m))\r\n\r\n;(defn vector-of-maps->csv\r\n;  ([vector-of-maps] (vector-of-maps->csv vector-of-maps (keys (last vector-of-maps)))) ;use last not first as first is totals that are different)\r\n;  ([vector-of-maps cols] (vector-of-maps->csv vector-of-maps cols \",\"))\r\n;  ([vector-of-maps cols sep]\r\n;   (reduce #(str %1 (clojure.string/join sep (mapv %2 cols)) \"\\n\")\r\n;           (str (clojure.string/join sep (map name cols)) \"\\n\")\r\n;           vector-of-maps)))\r\n\r\n(defn vector-of-maps->csv-atomic\r\n  \"Much less memory hungry, and faster too\"\r\n  ([vector-of-maps] (vector-of-maps->csv-atomic vector-of-maps (keys (last vector-of-maps)))) ;use last not first as first is totals that are different)\r\n  ([vector-of-maps cols] (vector-of-maps->csv-atomic vector-of-maps cols \",\"))\r\n  ([vector-of-maps cols sep]\r\n   (let [res (atom (str (clojure.string/join sep (map name cols)) \"\\n\"))]\r\n     (doseq [line vector-of-maps]\r\n       (swap! res str (clojure.string/join sep (mapv #(get line %) cols)) \"\\n\"))\r\n     @res)))\r\n\r\n(defn download-object-as-csv\r\n  \"This creates a temporary download link\"\r\n  [text export-name]\r\n  (let [data-blob (js/Blob. #js [text] #js {:type \"text/csv\"})\r\n        link (.createElement js/document \"a\")]\r\n    (set! (.-href link) (.createObjectURL js/URL data-blob))\r\n    (.setAttribute link \"download\" export-name)\r\n    (.appendChild (.-body js/document) link)\r\n    (.click link)\r\n    (.removeChild (.-body js/document) link)))\r\n\r\n(defn csv-link\r\n  ([data filename] (download-object-as-csv (clj->js (vector-of-maps->csv-atomic data)) (str filename \".csv\")))\r\n  ([data filename cols] (csv-link data filename cols \",\"))\r\n  ([data filename cols sep]\r\n   (download-object-as-csv (clj->js (vector-of-maps->csv-atomic data cols sep)) (str filename \".csv\"))))\r\n\r\n;(defn react-table-pivot-to-csv [view]         ;_pivotVal\r\n;  (let [pivot (first (js->clj (. (.getResolvedState view) -sortedData)))\r\n;        subrows (pivot \"_subRows\")]\r\n;    (into [(dissoc pivot \"_subRows\")] (for [row subrows] (dissoc row \"_subRows\")))))\r\n;\r\n;(defn react-table-to-csv\r\n;  ([view filename cols]\r\n;   (csv-link (js->clj (. (.getResolvedState view) -sortedData)) filename cols))\r\n;  ([view filename cols pivoted?]\r\n;   (if pivoted?\r\n;     (csv-link (react-table-pivot-to-csv view) filename (concat [\"_pivotVal\"] cols))\r\n;     (react-table-to-csv view filename cols))))\r\n\r\n(defn copy-to-clipboard [val]\r\n  (let [el (js/document.createElement \"textarea\")]\r\n    (set! (.-value el) val)\r\n    (.appendChild js/document.body el)\r\n    (.select el)\r\n    (js/document.execCommand \"copy\")\r\n    (.removeChild js/document.body el)))\r\n\r\n(defn semi-bond-modified-duration [years coupon]\r\n  (let [periods (* 2 years)\r\n        semi-coupon (* 0.5 coupon)\r\n        discount-at-period (fn [n] (/ 1 (Math/pow (inc semi-coupon) n)))]\r\n    (/\r\n      (reduce +\r\n              (conj (map #(* 0.5 % semi-coupon (discount-at-period %)) (range 1 (inc periods)))\r\n                    (* 0.5 periods (discount-at-period periods))))\r\n      (inc semi-coupon))))\r\n\r\n;;;\r\n\r\n(defn naive-rank\r\n  \"We care about top ranks, so we replace nil values accordingly\r\n  BUGS: some nil comes as Double/NaN which also needs to be filtered for\"\r\n  [coll ascending?]\r\n  (let [clean-coll (map #(if (some? %) % (if ascending? js/Infinity (- js/Infinity))) coll)]\r\n    (map inc\r\n         (map\r\n           (clojure.set/map-invert\r\n             (into {} (map (comp first second) (group-by second (map-indexed vector (sort (if ascending? < >) clean-coll))))))\r\n           clean-coll))))\r\n\r\n;;;;;\r\n(defn save-png\r\n  \"From https://stackoverflow.com/questions/31656689/how-to-save-img-to-users-local-computer-using-html2canvas\"\r\n  [uri filename]\r\n  (let [el (js/document.createElement \"a\")]\r\n    (set! (.-href el) uri)\r\n    (set! (.-download el) filename)\r\n    (.appendChild js/document.body el)\r\n    (.click el)\r\n    (.removeChild js/document.body el)))\r\n\r\n;(defn save-image\r\n;  \"Returning a function. Refers to https://clojurescript.org/guides/promise-interop\"\r\n;  [id]\r\n;  (fn []\r\n;    (-> (html2canvas (js/document.querySelector (str \"#\" id)) {}) ;js/document.body\r\n;        (.then #(save-png (.toDataURL %) (str id \"-\" (gdate->yyyyMMdd (cljs-time.core/today)))))\r\n;        (.catch #(js/console.log %))\r\n;        (.finally #(js/console.log \"cleanup\")))))\r\n;\r\n;(defn open-image-in-new-tab\r\n;  \"Returning a function. Refers to https://clojurescript.org/guides/promise-interop\"\r\n;  [id]\r\n;  (fn []\r\n;    (-> (html2canvas (js/document.querySelector (str \"#\" id)) {})\r\n;        (.then #(.toDataURL % \"png\"))\r\n;        (.then #((let [w (js/window.open \"about:blank\")\r\n;                       el (.document.createElement w \"iframe\")]\r\n;                   (set! (.. el -style -cssText) \"border:0; top:0px; left:0px; bottom:0px; right:0px; width:100%; height:100%;\")\r\n;                   (set! (.-src (.document.body.appendChild w el)) %)\r\n;                   (.document.close w)))))))\r\n\r\n;;; below from https://gist.github.com/daveliepmann/cf923140702c8b1de301 ;;;\r\n(defn local-storage-set-item!\r\n  \"Set `key' in browser's localStorage to `val`.\"\r\n  [key val]\r\n  (.setItem (.-localStorage js/window) key val))\r\n\r\n(defn local-storage-get-item\r\n  \"Returns value of `key' from browser's localStorage.\"\r\n  [key]\r\n  (.getItem (.-localStorage js/window) key))\r\n\r\n(defn local-storage-remove-item!\r\n  \"Remove the browser's localStorage value for the given `key`\"\r\n  [key]\r\n  (.removeItem (.-localStorage js/window) key))\r\n\r\n;;;\r\n(def nff (NumberFormat. Format/DECIMAL))\r\n(defn nf [x] (.format nff (str x)))\r\n(defn round-to-thousand [x] (* 1000 (int (/ x 1000.))))\r\n(def tnfmt (comp nf round-to-thousand))\r\n\r\n(defn not-number-m100-to-100-error-status [s]\r\n  ;allows negative numbers for wishlist\r\n  (try\r\n    (let [k (cljs.reader/read-string s)]\r\n      (if-not (and (number? k) (<= -100 k 100)) :error nil))\r\n    (catch :default e\r\n      :error)))\r\n\r\n(defn new-spread-from-new-price\r\n  \"ax2 + bx + c = 0. Delta = b2 - 4ac, solution = [-b +/- srqt(delta)] / 2a\"\r\n  [target-price clean-price current-spread modified-duration convexity]\r\n  (let [a (* convexity 0.5 0.000001) b (* modified-duration 0.0001) c (/ (- clean-price target-price) clean-price)      ;it's -dP/P\r\n        delta (- (* b b) (* 4 a c)) s1 (/ (+ (- b) (Math/sqrt delta)) (* 2 a))] ;s2 (/ (- (- b) (Math/sqrt delta)) (* 2 a))\r\n    (- current-spread s1)))                                 ;                                   ;[ (- current-spread s2)]\r\n\r\n(defn rot13 [text]\r\n  (let [alphabet \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\r\n        cipher (->> (cycle alphabet)\r\n                    (drop 13)\r\n                    (take 52)\r\n                    (zipmap alphabet))]\r\n    (clojure.string/join (replace cipher text))))\r\n"]}