shadow$provide.module$node_modules$$tanstack$table_core$build$lib$core$row=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});var utils=require("module$node_modules$$tanstack$table_core$build$lib$utils"),cell$jscomp$0=require("module$node_modules$$tanstack$table_core$build$lib$core$cell");exports.createRow=(table,id,original,rowIndex,depth,subRows,parentId)=>{let row={id,index:rowIndex,original,depth,parentId,_valuesCache:{},_uniqueValuesCache:{},getValue:columnId=>
{if(row._valuesCache.hasOwnProperty(columnId))return row._valuesCache[columnId];const column=table.getColumn(columnId);if(null!=column&&column.accessorFn)return row._valuesCache[columnId]=column.accessorFn(row.original,rowIndex),row._valuesCache[columnId]},getUniqueValues:columnId=>{if(row._uniqueValuesCache.hasOwnProperty(columnId))return row._uniqueValuesCache[columnId];const column=table.getColumn(columnId);if(null!=column&&column.accessorFn){if(!column.columnDef.getUniqueValues)return row._uniqueValuesCache[columnId]=
[row.getValue(columnId)],row._uniqueValuesCache[columnId];row._uniqueValuesCache[columnId]=column.columnDef.getUniqueValues(row.original,rowIndex);return row._uniqueValuesCache[columnId]}},renderValue:columnId=>{var _row$getValue;return null!=(_row$getValue=row.getValue(columnId))?_row$getValue:table.options.renderFallbackValue},subRows:null!=subRows?subRows:[],getLeafRows:()=>utils.flattenBy(row.subRows,d=>d.subRows),getParentRow:()=>row.parentId?table.getRow(row.parentId):void 0,getParentRows:()=>
{let parentRows=[];for(var currentRow=row;;){currentRow=currentRow.getParentRow();if(!currentRow)break;parentRows.push(currentRow)}return parentRows.reverse()},getAllCells:utils.memo(()=>[table.getAllLeafColumns()],leafColumns=>leafColumns.map(column=>cell$jscomp$0.createCell(table,row,column,column.id)),{key:"row.getAllCells",debug:()=>{var _table$options$debugA;return null!=(_table$options$debugA=table.options.debugAll)?_table$options$debugA:table.options.debugRows}}),_getAllCellsByColumnId:utils.memo(()=>
[row.getAllCells()],allCells=>allCells.reduce((acc,cell)=>{acc[cell.column.id]=cell;return acc},{}),{key:!1,debug:()=>{var _table$options$debugA2;return null!=(_table$options$debugA2=table.options.debugAll)?_table$options$debugA2:table.options.debugRows}})};for(id=0;id<table._features.length;id++)original=table._features[id],Object.assign(row,null==original?void 0:null==original.createRow?void 0:original.createRow(row,table));return row}}
//# sourceMappingURL=module$node_modules$$tanstack$table_core$build$lib$core$row.js.map
