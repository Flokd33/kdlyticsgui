{"version":3,"sources":["jasminegui/var.cljs"],"mappings":"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","names":["G__55992","G__55993","re-frame.core/reg-sub","db","regression","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","risk","G__56002","G__56003","all-proxies","days-with-data","total-days","cljs.core/count","cljs.core.sort_by.cljs$core$IFn$_invoke$arity$2","cljs.core.into.cljs$core$IFn$_invoke$arity$2","iter__4529__auto__","s__56011","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","b__56013","cljs.core/chunk-buffer","i__56012","vec__56015","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__56010","cljs.core/chunk-rest","vec__56020","cljs.core/first","cljs.core/cons","cljs.core/rest","kb","d","cljs.core.update.cljs$core$IFn$_invoke$arity$3","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","cljs.core/name","cljs.core/str","jasminegui.var/nav-var-bar","cljs.core/deref","active-var","G__56028","re-frame.core/subscribe","re-com.core/h-box","re-com.core/v-box","s__56032","b__56034","i__56033","iter__56031","item","jasminegui.static/var-navigation","re-com.core/button","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","G__56040","G__56048","re-frame.core/dispatch","jasminegui.var/portfolio-proxy-table","js/module$node_modules$react_table$lib$index.default","G__56056","jasminegui.tables/case-insensitive-filter","jasminegui.var/var-table","G__56064","jasminegui.tables/round1pc","jasminegui.tables/round1","jasminegui.tables/round0pc","jasminegui.var/standard-box-width","jasminegui.var/dropdown-width","jasminegui.var/var-table-view","re-com.core/title","re-com.core/p","jasminegui.var/backtest-chart","dates","G__56066","data","G__56067","chart-period","G__56068","line","p1__56065#","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","jasminegui.static/var-charts-choice-map","days","G__56069","cljs.core/Keyword","js/Error","G__56070","G__56071","G__56072","G__56073","oz.core/vega-lite","jasminegui.charting/backtest-chart","cljs.core/take-last","G__56074","G__56075","cljs.reader.read_string.cljs$core$IFn$_invoke$arity$1","cljs.core.subs.cljs$core$IFn$_invoke$arity$3","jasminegui.var/histogram-chart","G__56077","G__56078","p1__56076#","G__56079","G__56080","G__56082","G__56083","G__56084","jasminegui.charting/return-histogram","G__56085","jasminegui.var/regression-chart","G__56089","G__56090","p1__56086#","G__56091","G__56092","G__56093","G__56094","G__56095","jasminegui.charting/regression-output","G__56096","G__56097","G__56098","G__56099","G__56100","G__56101","jasminegui.var/var-controller","p1__56102#","p1__56103#","portfolio-map","s__56106","b__56108","i__56107","iter__56105","p","G__56110","portfolio","G__56111","G__56112","re-com.core/single-dropdown","G__56113","re-com.core/gap","G__56114","jasminegui.var/proxy-table","G__56121","display","s__56123","b__56125","i__56124","vec__56126","iter__56122","vec__56129","k","v","jasminegui.var/proxy-table-view","re-com.core/box","jasminegui.var/portfolio-proxies","jasminegui.var/active-home","G__56136","js/window","G__56137","jasminegui.var/var-view","cljs.core/chunk-first"],"sourcesContent":["(ns jasminegui.var\r\n  (:require\r\n    [re-frame.core :as rf]\r\n    [reagent.core :as reagent]\r\n    [re-com.core :refer [p p-span h-box v-box box gap line scroller border label title button close-button checkbox hyperlink-href slider horizontal-bar-tabs radio-button info-button\r\n                         single-dropdown hyperlink\r\n                         input-text input-textarea popover-anchor-wrapper popover-content-wrapper popover-tooltip datepicker-dropdown] :refer-macros [handler-fn]]\r\n    [re-com.box :refer [h-box-args-desc v-box-args-desc box-args-desc gap-args-desc line-args-desc scroller-args-desc border-args-desc flex-child-style]]\r\n    [re-com.util :refer [px]]\r\n    [re-com.validate :refer [string-or-hiccup? alert-type? vector-of-maps?]]\r\n    [\"react-table\" :as rt :default ReactTable]\r\n    [goog.string :as gstring]\r\n    [goog.string.format]\r\n    [jasminegui.mount :as mount]\r\n    [jasminegui.tables :as tables]\r\n    [jasminegui.static :as static]\r\n    [jasminegui.charting :as charting]\r\n    [oz.core :as oz]))\r\n\r\n\r\n(rf/reg-sub\r\n  :var/table\r\n  (fn [db]\r\n    (let [regression (get-in db [:var/data :regression])\r\n          risk (get-in db [:var/data :risk])]\r\n      [{:id \"Daily 1y\"    :std (get-in risk [:daily :sd-1y])    :beta (get-in regression [:daily :beta-1y])   :rsq (get-in regression [:daily :rsq-1y])   :var95 (get-in risk [:daily :var-1y-95pct])   :var99 (get-in risk [:daily :var-1y-99pct])   :maxd (get-in risk [:daily :maxd-1y])}\r\n       {:id \"Daily 3y\"    :std (get-in risk [:daily :sd-3y])    :beta (get-in regression [:daily :beta-3y])   :rsq (get-in regression [:daily :rsq-3y])   :var95 (get-in risk [:daily :var-3y-95pct])   :var99 (get-in risk [:daily :var-3y-99pct])   :maxd (get-in risk [:daily :maxd-3y])}\r\n       {:id \"Weekly 1y\"   :std (get-in risk [:weekly :sd-1y])   :beta (get-in regression [:weekly :beta-1y])  :rsq (get-in regression [:weekly :rsq-1y])  :var95 (get-in risk [:weekly :var-1y-95pct])  :var99 (get-in risk [:weekly :var-1y-99pct])  :maxd (get-in risk [:weekly :maxd-1y])}\r\n       {:id \"Weekly 3y\"   :std (get-in risk [:weekly :sd-3y])   :beta (get-in regression [:weekly :beta-3y])  :rsq (get-in regression [:weekly :rsq-3y])  :var95 (get-in risk [:weekly :var-3y-95pct])  :var99 (get-in risk [:weekly :var-3y-99pct])  :maxd (get-in risk [:weekly :maxd-3y])}\r\n       {:id \"Monthly 1y\"  :std (get-in risk [:monthly :sd-1y])  :beta (get-in regression [:monthly :beta-1y]) :rsq (get-in regression [:monthly :rsq-1y]) :var95 (get-in risk [:monthly :var-1y-95pct]) :var99 (get-in risk [:monthly :var-1y-99pct]) :maxd (get-in risk [:monthly :maxd-1y])}\r\n       {:id \"Monthly 3y\"  :std (get-in risk [:monthly :sd-3y])  :beta (get-in regression [:monthly :beta-3y]) :rsq (get-in regression [:monthly :rsq-3y]) :var95 (get-in risk [:monthly :var-3y-95pct]) :var99 (get-in risk [:monthly :var-3y-99pct]) :maxd (get-in risk [:monthly :maxd-3y])}])))\r\n\r\n(rf/reg-sub\r\n  :var/portfolio-proxies\r\n  (fn [db]\r\n    (let [all-proxies (get-in db [:var/proxies])\r\n          days-with-data (get-in db [:var/data :days-with-data])\r\n          total-days (count (get-in db [:var/dates :daily]))]\r\n      (sort-by :days (into [] (for [[kb d] days-with-data]\r\n                                (update\r\n                                  (merge {:bond (name kb) :days (- total-days d)} (get-in all-proxies [kb]))\r\n                                  :adjdur str) ))))))\r\n\r\n(defn nav-var-bar []\r\n  (let [active-var @(rf/subscribe [:navigation/active-var])]\r\n    [h-box\r\n     :children [[v-box\r\n                 :gap \"20px\" :class \"leftnavbar\"\r\n                 :children (into []\r\n                                 (for [item static/var-navigation]\r\n                                   [button\r\n                                    :class (str \"btn btn-primary btn-block\" (if (and (= active-var (:code item))) \" active\"))\r\n                                    :label (:name item)\r\n                                    :on-click #(rf/dispatch [:navigation/active-var (:code item)])]))]]]))\r\n\r\n(defn portfolio-proxy-table []\r\n  ;(println @(rf/subscribe [:var/portfolio-proxies]))\r\n  [:> ReactTable\r\n   {:data                @(rf/subscribe [:var/portfolio-proxies])\r\n    :columns             [{:Header \"Bond\"             :accessor \"bond\"    :width 150}\r\n                          {:Header \"Days with data\"   :accessor \"days\"    :width 150}\r\n                          {:Header \"Proxy\"            :accessor \"proxy\"   :width 150}\r\n                          {:Header \"Adjust duration?\" :accessor \"adjdur\"  :width 150}]\r\n    :showPagination      true\r\n    :sortable            false\r\n    :filterable          true\r\n    :defaultFilterMethod tables/case-insensitive-filter\r\n    :pageSize            25\r\n    :className           \"-striped\"}])\r\n\r\n(defn var-table []\r\n    [:> ReactTable\r\n     {:data                @(rf/subscribe [:var/table])\r\n      :columns             [{:Header \"Period\"       :accessor \"id\"     :width 90}\r\n                            {:Header \"Volatility\"   :accessor \"std\"    :width 90 :style {:textAlign \"right\"} :Cell tables/round1pc}\r\n                            {:Header \"Index Beta\"   :accessor \"beta\"   :width 90 :style {:textAlign \"right\"} :Cell tables/round1}\r\n                            {:Header \"Index R2\"     :accessor \"rsq\"    :width 90 :style {:textAlign \"right\"} :Cell tables/round0pc}\r\n                            {:Header \"95% VaR\"      :accessor \"var95\"  :width 90 :style {:textAlign \"right\"} :Cell tables/round1pc}\r\n                            {:Header \"99% VaR\"      :accessor \"var99\"  :width 90 :style {:textAlign \"right\"} :Cell tables/round1pc}\r\n                            {:Header \"Max loss (*)\" :accessor \"maxd\"   :width 90 :style {:textAlign \"right\"} :Cell tables/round1pc}]\r\n      :showPagination      false\r\n      :sortable            false\r\n      :filterable          false\r\n      :pageSize            6\r\n      :className           \"-striped\"}])\r\n\r\n(def standard-box-width \"800px\")\r\n(def dropdown-width \"150px\")\r\n\r\n(defn var-table-view []\r\n  [v-box\r\n   :class \"element\" :width \"100%\" :gap \"20px\"\r\n   :children [[title :label \"Backtested VaR\" :level :level1] [var-table] [p \"(*) Max loss goes backwards in time hence can be smaller than VaR.\"]]])\r\n\r\n(defn backtest-chart []\r\n  (let [dates @(rf/subscribe [:var/dates])\r\n        data @(rf/subscribe [:var/data])\r\n        chart-period @(rf/subscribe [:var/chart-period])\r\n        line (first (filter #(= (:id %) chart-period) static/var-charts-choice-map))\r\n        days (case (line :frequency) :daily (* (line :period) 250) :weekly (* (line :period) 52) :monthly (* (line :period) 12))]\r\n     [v-box\r\n      :class \"element\" :width \"100%\" :gap \"20px\"\r\n      :children [[title :label \"Backtested portfolio value\" :level :level1]\r\n                 [oz/vega-lite (charting/backtest-chart\r\n                                 (take-last days (get-in dates [(line :frequency)]))\r\n                                 (take-last days (get-in data [:portfolio-value (line :frequency)]))\r\n                                 (- (cljs.reader/read-string (subs standard-box-width 0 3)) 150) 550)]]]))\r\n\r\n(defn histogram-chart []\r\n  (let [data @(rf/subscribe [:var/data])\r\n        chart-period @(rf/subscribe [:var/chart-period])\r\n        line (first (filter #(= (:id %) chart-period) static/var-charts-choice-map))\r\n        days (case (line :frequency) :daily (* (line :period) 250) :weekly (* (line :period) 52) :monthly (* (line :period) 12))]\r\n    [v-box\r\n     :class \"element\" :width \"100%\" :gap \"20px\"\r\n     :children [[title :label \"Return histogram\" :level :level1]\r\n                [oz/vega-lite (charting/return-histogram\r\n                                (take-last days (get-in data [:portfolio-returns (line :frequency)]))\r\n                                (- (cljs.reader/read-string (subs standard-box-width 0 3)) 150) 550)]]]))\r\n\r\n(defn regression-chart []\r\n  (let [data @(rf/subscribe [:var/data])\r\n        chart-period @(rf/subscribe [:var/chart-period])\r\n        line (first (filter #(= (:id %) chart-period) static/var-charts-choice-map))\r\n        days (case (line :frequency) :daily (* (line :period) 250) :weekly (* (line :period) 52) :monthly (* (line :period) 12))]\r\n    [v-box\r\n     :class \"element\" :width \"100%\" :gap \"20px\"\r\n     :children [[title :label \"Regression\" :level :level1]\r\n                [oz/vega-lite (charting/regression-output\r\n                                (take-last days (get-in data [:portfolio-returns (line :frequency)]))\r\n                                (take-last days (get-in data [:benchmark-returns (line :frequency)]))\r\n                                (get-in data [:regression (line :frequency) (if (= 3 (line :period)) :alpha-3y :alpha-1y)])\r\n                                (get-in data [:regression (line :frequency) (if (= 3 (line :period)) :beta-3y :beta-1y)])\r\n                                (- (cljs.reader/read-string (subs standard-box-width 0 3)) 150) 550)]]]))\r\n\r\n(defn var-controller []\r\n  (let [portfolio-map (into [] (for [p @(rf/subscribe [:portfolios])] {:id p :label p}))\r\n        portfolio (rf/subscribe [:var/portfolio])\r\n        chart-period (rf/subscribe [:var/chart-period])]\r\n     [v-box\r\n      :class \"element\" :width \"100%\" :gap \"20px\"\r\n      :children [[title :label \"Display selection\" :level :level1]\r\n                 [h-box\r\n                  :gap \"20px\" :padding \"0px 20px 0px 0px\"\r\n                  :children [[title :label \"Portfolio:\" :level :level3]\r\n                             [single-dropdown :width dropdown-width :model portfolio :choices portfolio-map :on-change #(rf/dispatch [:get-portfolio-var %])]\r\n                             [gap :size \"20px\"]\r\n                             [title :label \"Chart period:\" :level :level3]\r\n                             [single-dropdown :width dropdown-width :model chart-period :choices static/var-charts-choice-map :on-change #(rf/dispatch [:var/chart-period %])]]]]]))\r\n\r\n(defn proxy-table []\r\n  (let [data @(rf/subscribe [:var/proxies])\r\n        display (sort-by :bond (into [] (for [[k v] data] (update (merge {:bond k} v) :adjdur str))))]\r\n    [:> ReactTable\r\n     {:data                display\r\n      :columns             [{:Header \"Bond\"             :accessor \"bond\"    :width 150}\r\n                            {:Header \"Proxy\"            :accessor \"proxy\"   :width 150}\r\n                            {:Header \"Adjust duration?\" :accessor \"adjdur\"  :width 150}]\r\n      :showPagination      true\r\n      :sortable            false\r\n      :filterable          true\r\n      :defaultFilterMethod tables/case-insensitive-filter\r\n      :pageSize            25\r\n      :className           \"-striped\"}]))\r\n\r\n(defn proxy-table-view []\r\n  [box :class \"subbody rightelement\"\r\n   :child [v-box :class \"element\" :gap \"20px\" :children [[title :label \"Bond proxies\" :level :level1] [proxy-table]]]])\r\n\r\n(defn portfolio-proxies []\r\n   [v-box :class \"element\" :width \"100%\" :gap \"20px\"\r\n    :children [[title :label \"Bond proxies\" :level :level1] [portfolio-proxy-table]]])\r\n\r\n(defn active-home []\r\n  (let [active-var @(rf/subscribe [:navigation/active-var])]\r\n    (.scrollTo js/window 0 0)                             ;on view change we go back to top\r\n    (case active-var\r\n      :overview                       [v-box :width standard-box-width\r\n                                       :gap \"20px\"\r\n                                       :padding \"80px 20px\"\r\n                                       :class \"rightelement\"  :children [[h-box :align :start :children [[var-controller]]]\r\n                                                                         [h-box :align :start :children [[var-table-view] ]]\r\n                                                                         [h-box :align :start :children [[backtest-chart]]]\r\n                                                                         [h-box :align :start :children [[histogram-chart]]]\r\n                                                                         [h-box :align :start :children [[regression-chart]]]\r\n                                                                         ]]\r\n      :proxies [v-box :width standard-box-width :gap \"20px\" :padding \"80px 20px\" :class \"rightelement\"\r\n                :children [[h-box :align :start :children [[portfolio-proxies]]]]]\r\n      [:div.output \"nothing to display\"])))\r\n\r\n\r\n(defn var-view []\r\n  [h-box :gap \"10px\" :padding \"0px\" :children [[nav-var-bar] [active-home]]])\r\n"]}