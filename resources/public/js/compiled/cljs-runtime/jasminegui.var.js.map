{"version":3,"sources":["jasminegui/var.cljs"],"mappings":"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","names":["G__47146","G__47147","re-frame.core/reg-sub","db","regression","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","risk","cljs.core.into.cljs$core$IFn$_invoke$arity$2","iter__4529__auto__","s__47149","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","xs__6292__auto__","cljs.core/first","iterys__4525__auto__","s__47151","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","cljs.core/count","b__47153","cljs.core/chunk-buffer","i__47152","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__47150","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","fs__4526__auto__","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","iter__47148","d","y","clojure.string/capitalize","cljs.core/name","cljs.core.keyword.cljs$core$IFn$_invoke$arity$1","G__47154","G__47155","all-proxies","days-with-data","total-days","cljs.core.sort_by.cljs$core$IFn$_invoke$arity$2","s__47157","b__47159","i__47158","vec__47160","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","iter__47156","vec__47163","kb","cljs.core.update.cljs$core$IFn$_invoke$arity$3","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","cljs.core/str","jasminegui.var/nav-var-bar","cljs.core/deref","active-var","G__47166","re-frame.core/subscribe","re-com.core/h-box","re-com.core/v-box","s__47168","b__47170","i__47169","iter__47167","item","jasminegui.static/var-navigation","re-com.core/button","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","G__47171","G__47172","re-frame.core/dispatch","jasminegui.var/portfolio-proxy-table","js/module$node_modules$react_table$lib$index.default","G__47173","jasminegui.tables/case-insensitive-filter","jasminegui.var/var-table","G__47174","jasminegui.tables/round1pc","jasminegui.tables/round1","jasminegui.tables/round0pc","jasminegui.var/standard-box-width","jasminegui.var/dropdown-width","jasminegui.var/var-table-view","re-com.core/title","re-com.core/p","jasminegui.var/backtest-chart","dates","G__47176","data","G__47177","chart-period","G__47178","line","p1__47175#","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","jasminegui.static/var-charts-choice-map","days","G__47179","cljs.core/Keyword","js/Error","G__47180","G__47181","G__47182","G__47183","oz.core/vega-lite","jasminegui.charting/backtest-chart","cljs.core/take-last","G__47184","G__47187","cljs.reader.read_string.cljs$core$IFn$_invoke$arity$1","cljs.core.subs.cljs$core$IFn$_invoke$arity$3","jasminegui.var/histogram-chart","G__47194","G__47195","p1__47193#","G__47202","G__47204","G__47205","G__47206","G__47207","jasminegui.charting/return-histogram","G__47208","jasminegui.var/regression-chart","G__47217","G__47218","p1__47216#","G__47219","G__47220","G__47221","G__47222","G__47223","jasminegui.charting/regression-output","G__47224","G__47225","G__47226","G__47227","G__47228","G__47229","jasminegui.var/var-controller","p1__47232#","p1__47233#","portfolio-map","s__47240","b__47242","i__47241","iter__47239","p","G__47243","portfolio","G__47244","G__47247","re-com.core/single-dropdown","G__47252","re-com.core/gap","G__47253","jasminegui.var/proxy-table","G__47255","display","s__47257","b__47259","i__47258","vec__47262","iter__47256","vec__47270","k","v","jasminegui.var/proxy-table-view","re-com.core/box","jasminegui.var/portfolio-proxies","jasminegui.var/active-home","G__47280","js/window","G__47281","jasminegui.var/var-view","cljs.core/chunk-first"],"sourcesContent":["(ns jasminegui.var\r\n  (:require\r\n    [re-frame.core :as rf]\r\n    [reagent.core :as reagent]\r\n    [re-com.core :refer [p p-span h-box v-box box gap line scroller border label title button close-button checkbox hyperlink-href slider horizontal-bar-tabs radio-button info-button\r\n                         single-dropdown hyperlink\r\n                         input-text input-textarea popover-anchor-wrapper popover-content-wrapper popover-tooltip datepicker-dropdown] :refer-macros [handler-fn]]\r\n    [re-com.box :refer [h-box-args-desc v-box-args-desc box-args-desc gap-args-desc line-args-desc scroller-args-desc border-args-desc flex-child-style]]\r\n    [re-com.util :refer [px]]\r\n    [re-com.validate :refer [string-or-hiccup? alert-type? vector-of-maps?]]\r\n    [\"react-table\" :as rt :default ReactTable]\r\n    [goog.string :as gstring]\r\n    [goog.string.format]\r\n    [jasminegui.mount :as mount]\r\n    [jasminegui.tables :as tables]\r\n    [jasminegui.static :as static]\r\n    [jasminegui.charting :as charting]\r\n    [oz.core :as oz]))\r\n\r\n\r\n;(rf/reg-sub\r\n;  :var/table\r\n;  (fn [db]\r\n;    (let [regression (get-in db [:var/data :regression])\r\n;          risk (get-in db [:var/data :risk])]\r\n;      [{:id \"Daily 1y\"    :std (get-in risk [:daily :sd-1y])    :beta (get-in regression [:daily :beta-1y])   :rsq (get-in regression [:daily :rsq-1y])   :var95 (get-in risk [:daily :var-1y-95pct])   :var99 (get-in risk [:daily :var-1y-99pct])   :maxd (get-in risk [:daily :maxd-1y])}\r\n;       {:id \"Daily 3y\"    :std (get-in risk [:daily :sd-3y])    :beta (get-in regression [:daily :beta-3y])   :rsq (get-in regression [:daily :rsq-3y])   :var95 (get-in risk [:daily :var-3y-95pct])   :var99 (get-in risk [:daily :var-3y-99pct])   :maxd (get-in risk [:daily :maxd-3y])}\r\n;       {:id \"Weekly 1y\"   :std (get-in risk [:weekly :sd-1y])   :beta (get-in regression [:weekly :beta-1y])  :rsq (get-in regression [:weekly :rsq-1y])  :var95 (get-in risk [:weekly :var-1y-95pct])  :var99 (get-in risk [:weekly :var-1y-99pct])  :maxd (get-in risk [:weekly :maxd-1y])}\r\n;       {:id \"Weekly 3y\"   :std (get-in risk [:weekly :sd-3y])   :beta (get-in regression [:weekly :beta-3y])  :rsq (get-in regression [:weekly :rsq-3y])  :var95 (get-in risk [:weekly :var-3y-95pct])  :var99 (get-in risk [:weekly :var-3y-99pct])  :maxd (get-in risk [:weekly :maxd-3y])}\r\n;       {:id \"Monthly 1y\"  :std (get-in risk [:monthly :sd-1y])  :beta (get-in regression [:monthly :beta-1y]) :rsq (get-in regression [:monthly :rsq-1y]) :var95 (get-in risk [:monthly :var-1y-95pct]) :var99 (get-in risk [:monthly :var-1y-99pct]) :maxd (get-in risk [:monthly :maxd-1y])}\r\n;       {:id \"Monthly 3y\"  :std (get-in risk [:monthly :sd-3y])  :beta (get-in regression [:monthly :beta-3y]) :rsq (get-in regression [:monthly :rsq-3y]) :var95 (get-in risk [:monthly :var-3y-95pct]) :var99 (get-in risk [:monthly :var-3y-99pct]) :maxd (get-in risk [:monthly :maxd-3y])}])))\r\n\r\n(rf/reg-sub\r\n  :var/table\r\n  (fn [db]\r\n    (let [regression (get-in db [:var/data :regression])\r\n          risk (get-in db [:var/data :risk])]\r\n      (into []\r\n            (for [d [:daily :weekly :monthly] y [\"1y\" \"3y\"]]\r\n              {:id    (str (clojure.string/capitalize (name d)) \" \" y)\r\n               :std   (get-in risk        [d (keyword (str \"sd-\" y))])\r\n               :beta  (get-in regression  [d (keyword (str \"beta-\" y))])\r\n               :rsq   (get-in regression  [d (keyword (str \"rsq-\" y))])\r\n               :var95 (get-in risk        [d (keyword (str \"var-\" y \"-95pct\"))])\r\n               :var99 (get-in risk        [d (keyword (str \"var-\" y \"-99pct\"))])\r\n               :maxd  (get-in risk        [d (keyword (str \"maxd-\" y))])})))))\r\n\r\n(rf/reg-sub\r\n  :var/portfolio-proxies\r\n  (fn [db]\r\n    (let [all-proxies (get-in db [:var/proxies])\r\n          days-with-data (get-in db [:var/data :days-with-data])\r\n          total-days (count (get-in db [:var/dates :daily]))]\r\n      (sort-by :days (into [] (for [[kb d] days-with-data]\r\n                                (update\r\n                                  (merge {:bond (name kb) :days (- total-days d)} (get-in all-proxies [kb]))\r\n                                  :adjdur str) ))))))\r\n\r\n(defn nav-var-bar []\r\n  (let [active-var @(rf/subscribe [:navigation/active-var])]\r\n    [h-box\r\n     :children [[v-box\r\n                 :gap \"20px\" :class \"leftnavbar\"\r\n                 :children (into []\r\n                                 (for [item static/var-navigation]\r\n                                   [button\r\n                                    :class (str \"btn btn-primary btn-block\" (if (and (= active-var (:code item))) \" active\"))\r\n                                    :label (:name item)\r\n                                    :on-click #(rf/dispatch [:navigation/active-var (:code item)])]))]]]))\r\n\r\n(defn portfolio-proxy-table []\r\n  ;(println @(rf/subscribe [:var/portfolio-proxies]))\r\n  [:> ReactTable\r\n   {:data                @(rf/subscribe [:var/portfolio-proxies])\r\n    :columns             [{:Header \"Bond\"             :accessor \"bond\"    :width 150}\r\n                          {:Header \"Days with data\"   :accessor \"days\"    :width 150}\r\n                          {:Header \"Proxy\"            :accessor \"proxy\"   :width 150}\r\n                          {:Header \"Adjust duration?\" :accessor \"adjdur\"  :width 150}]\r\n    :showPagination      true\r\n    :sortable            false\r\n    :filterable          true\r\n    :defaultFilterMethod tables/case-insensitive-filter\r\n    :pageSize            25\r\n    :className           \"-striped\"}])\r\n\r\n(defn var-table []\r\n    [:> ReactTable\r\n     {:data                @(rf/subscribe [:var/table])\r\n      :columns             [{:Header \"Period\"       :accessor \"id\"     :width 90}\r\n                            {:Header \"Volatility\"   :accessor \"std\"    :width 90 :style {:textAlign \"right\"} :Cell tables/round1pc}\r\n                            {:Header \"Index Beta\"   :accessor \"beta\"   :width 90 :style {:textAlign \"right\"} :Cell tables/round1}\r\n                            {:Header \"Index R2\"     :accessor \"rsq\"    :width 90 :style {:textAlign \"right\"} :Cell tables/round0pc}\r\n                            {:Header \"95% VaR\"      :accessor \"var95\"  :width 90 :style {:textAlign \"right\"} :Cell tables/round1pc}\r\n                            {:Header \"99% VaR\"      :accessor \"var99\"  :width 90 :style {:textAlign \"right\"} :Cell tables/round1pc}\r\n                            {:Header \"Max loss (*)\" :accessor \"maxd\"   :width 90 :style {:textAlign \"right\"} :Cell tables/round1pc}]\r\n      :showPagination      false\r\n      :sortable            false\r\n      :filterable          false\r\n      :pageSize            6\r\n      :className           \"-striped\"}])\r\n\r\n(def standard-box-width \"800px\")\r\n(def dropdown-width \"150px\")\r\n\r\n(defn var-table-view []\r\n  [v-box\r\n   :class \"element\" :width \"100%\" :gap \"20px\"\r\n   :children [[title :label \"Backtested VaR\" :level :level1] [var-table] [p \"(*) Max loss goes backwards in time hence can be smaller than VaR.\"]]])\r\n\r\n(defn backtest-chart []\r\n  (let [dates @(rf/subscribe [:var/dates])\r\n        data @(rf/subscribe [:var/data])\r\n        chart-period @(rf/subscribe [:var/chart-period])\r\n        line (first (filter #(= (:id %) chart-period) static/var-charts-choice-map))\r\n        days (case (line :frequency) :daily (* (line :period) 250) :weekly (* (line :period) 52) :monthly (* (line :period) 12))]\r\n     [v-box\r\n      :class \"element\" :width \"100%\" :gap \"20px\"\r\n      :children [[title :label \"Backtested portfolio value\" :level :level1]\r\n                 [oz/vega-lite (charting/backtest-chart\r\n                                 (take-last days (get-in dates [(line :frequency)]))\r\n                                 (take-last days (get-in data [:portfolio-value (line :frequency)]))\r\n                                 (- (cljs.reader/read-string (subs standard-box-width 0 3)) 150) 550)]]]))\r\n\r\n(defn histogram-chart []\r\n  (let [data @(rf/subscribe [:var/data])\r\n        chart-period @(rf/subscribe [:var/chart-period])\r\n        line (first (filter #(= (:id %) chart-period) static/var-charts-choice-map))\r\n        days (case (line :frequency) :daily (* (line :period) 250) :weekly (* (line :period) 52) :monthly (* (line :period) 12))]\r\n    [v-box\r\n     :class \"element\" :width \"100%\" :gap \"20px\"\r\n     :children [[title :label \"Return histogram\" :level :level1]\r\n                [oz/vega-lite (charting/return-histogram\r\n                                (take-last days (get-in data [:portfolio-returns (line :frequency)]))\r\n                                (- (cljs.reader/read-string (subs standard-box-width 0 3)) 150) 550)]]]))\r\n\r\n(defn regression-chart []\r\n  (let [data @(rf/subscribe [:var/data])\r\n        chart-period @(rf/subscribe [:var/chart-period])\r\n        line (first (filter #(= (:id %) chart-period) static/var-charts-choice-map))\r\n        days (case (line :frequency) :daily (* (line :period) 250) :weekly (* (line :period) 52) :monthly (* (line :period) 12))]\r\n    [v-box\r\n     :class \"element\" :width \"100%\" :gap \"20px\"\r\n     :children [[title :label \"Regression\" :level :level1]\r\n                [oz/vega-lite (charting/regression-output\r\n                                (take-last days (get-in data [:portfolio-returns (line :frequency)]))\r\n                                (take-last days (get-in data [:benchmark-returns (line :frequency)]))\r\n                                (get-in data [:regression (line :frequency) (if (= 3 (line :period)) :alpha-3y :alpha-1y)])\r\n                                (get-in data [:regression (line :frequency) (if (= 3 (line :period)) :beta-3y :beta-1y)])\r\n                                (- (cljs.reader/read-string (subs standard-box-width 0 3)) 150) 550)]]]))\r\n\r\n(defn var-controller []\r\n  (let [portfolio-map (into [] (for [p @(rf/subscribe [:portfolios])] {:id p :label p}))\r\n        portfolio (rf/subscribe [:var/portfolio])\r\n        chart-period (rf/subscribe [:var/chart-period])]\r\n     [v-box\r\n      :class \"element\" :width \"100%\" :gap \"20px\"\r\n      :children [[title :label \"Display selection\" :level :level1]\r\n                 [h-box\r\n                  :gap \"20px\" :padding \"0px 20px 0px 0px\"\r\n                  :children [[title :label \"Portfolio:\" :level :level3]\r\n                             [single-dropdown :width dropdown-width :model portfolio :choices portfolio-map :on-change #(rf/dispatch [:get-portfolio-var %])]\r\n                             [gap :size \"20px\"]\r\n                             [title :label \"Chart period:\" :level :level3]\r\n                             [single-dropdown :width dropdown-width :model chart-period :choices static/var-charts-choice-map :on-change #(rf/dispatch [:var/chart-period %])]]]]]))\r\n\r\n(defn proxy-table []\r\n  (let [data @(rf/subscribe [:var/proxies])\r\n        display (sort-by :bond (into [] (for [[k v] data] (update (merge {:bond k} v) :adjdur str))))]\r\n    [:> ReactTable\r\n     {:data                display\r\n      :columns             [{:Header \"Bond\"             :accessor \"bond\"    :width 150}\r\n                            {:Header \"Proxy\"            :accessor \"proxy\"   :width 150}\r\n                            {:Header \"Adjust duration?\" :accessor \"adjdur\"  :width 150}]\r\n      :showPagination      true\r\n      :sortable            false\r\n      :filterable          true\r\n      :defaultFilterMethod tables/case-insensitive-filter\r\n      :pageSize            25\r\n      :className           \"-striped\"}]))\r\n\r\n(defn proxy-table-view []\r\n  [box :class \"subbody rightelement\"\r\n   :child [v-box :class \"element\" :gap \"20px\" :children [[title :label \"Bond proxies\" :level :level1] [proxy-table]]]])\r\n\r\n(defn portfolio-proxies []\r\n   [v-box :class \"element\" :width \"100%\" :gap \"20px\"\r\n    :children [[title :label \"Bond proxies\" :level :level1] [portfolio-proxy-table]]])\r\n\r\n(defn active-home []\r\n  (let [active-var @(rf/subscribe [:navigation/active-var])]\r\n    (.scrollTo js/window 0 0)                             ;on view change we go back to top\r\n    (case active-var\r\n      :overview                       [v-box :width standard-box-width\r\n                                       :gap \"20px\"\r\n                                       :padding \"80px 20px\"\r\n                                       :class \"rightelement\"  :children [[h-box :align :start :children [[var-controller]]]\r\n                                                                         [h-box :align :start :children [[var-table-view] ]]\r\n                                                                         [h-box :align :start :children [[backtest-chart]]]\r\n                                                                         [h-box :align :start :children [[histogram-chart]]]\r\n                                                                         [h-box :align :start :children [[regression-chart]]]\r\n                                                                         ]]\r\n      :proxies [v-box :width standard-box-width :gap \"20px\" :padding \"80px 20px\" :class \"rightelement\"\r\n                :children [[h-box :align :start :children [[portfolio-proxies]]]]]\r\n      [:div.output \"nothing to display\"])))\r\n\r\n\r\n(defn var-view []\r\n  [h-box :gap \"10px\" :padding \"0px\" :children [[nav-var-bar] [active-home]]])\r\n"]}