shadow$provide.module$node_modules$$tanstack$table_core$build$lib$filterFns=function(global,require,module,exports){function testFalsey(val){return void 0===val||null===val||""===val}Object.defineProperty(exports,"__esModule",{value:!0});global=(row,columnId,filterValue)=>{var _row$getValue,_row$getValue$toStrin,_row$getValue$toStrin2;filterValue=filterValue.toLowerCase();return!!(null==(_row$getValue=row.getValue(columnId))?0:null==(_row$getValue$toStrin=_row$getValue.toString())?0:null==(_row$getValue$toStrin2=
_row$getValue$toStrin.toLowerCase())?0:_row$getValue$toStrin2.includes(filterValue))};global.autoRemove=val=>testFalsey(val);require=(row,columnId,filterValue)=>{var _row$getValue2,_row$getValue2$toStri;return!!(null==(_row$getValue2=row.getValue(columnId))?0:null==(_row$getValue2$toStri=_row$getValue2.toString())?0:_row$getValue2$toStri.includes(filterValue))};require.autoRemove=val=>testFalsey(val);module=(row,columnId,filterValue)=>{var _row$getValue3,_row$getValue3$toStri;return(null==(_row$getValue3=
row.getValue(columnId))?void 0:null==(_row$getValue3$toStri=_row$getValue3.toString())?void 0:_row$getValue3$toStri.toLowerCase())===(null==filterValue?void 0:filterValue.toLowerCase())};module.autoRemove=val=>testFalsey(val);const arrIncludes=(row,columnId,filterValue)=>{var _row$getValue4;return null==(_row$getValue4=row.getValue(columnId))?void 0:_row$getValue4.includes(filterValue)};arrIncludes.autoRemove=val=>testFalsey(val)||!(null!=val&&val.length);const arrIncludesAll=(row,columnId,filterValue)=>
!filterValue.some(val=>{var _row$getValue5;return!(null!=(_row$getValue5=row.getValue(columnId))&&_row$getValue5.includes(val))});arrIncludesAll.autoRemove=val=>testFalsey(val)||!(null!=val&&val.length);const arrIncludesSome=(row,columnId,filterValue)=>filterValue.some(val=>{var _row$getValue6;return null==(_row$getValue6=row.getValue(columnId))?void 0:_row$getValue6.includes(val)});arrIncludesSome.autoRemove=val=>testFalsey(val)||!(null!=val&&val.length);const equals=(row,columnId,filterValue)=>
row.getValue(columnId)===filterValue;equals.autoRemove=val=>testFalsey(val);const weakEquals=(row,columnId,filterValue)=>row.getValue(columnId)==filterValue;weakEquals.autoRemove=val=>testFalsey(val);const inNumberRange=(row,columnId,filterValue)=>{let [min,max]=filterValue;row=row.getValue(columnId);return row>=min&&row<=max};inNumberRange.resolveFilterValue=val=>{let [unsafeMin,unsafeMax]=val;val="number"!==typeof unsafeMin?parseFloat(unsafeMin):unsafeMin;var parsedMax="number"!==typeof unsafeMax?
parseFloat(unsafeMax):unsafeMax;val=null===unsafeMin||Number.isNaN(val)?-Infinity:val;parsedMax=null===unsafeMax||Number.isNaN(parsedMax)?Infinity:parsedMax;if(val>parsedMax){const temp=val;val=parsedMax;parsedMax=temp}return[val,parsedMax]};inNumberRange.autoRemove=val=>testFalsey(val)||testFalsey(val[0])&&testFalsey(val[1]);exports.filterFns={includesString:global,includesStringSensitive:require,equalsString:module,arrIncludes,arrIncludesAll,arrIncludesSome,equals,weakEquals,inNumberRange}}
//# sourceMappingURL=module$node_modules$$tanstack$table_core$build$lib$filterFns.js.map
