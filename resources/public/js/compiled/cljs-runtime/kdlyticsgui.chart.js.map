{"version":3,"sources":["kdlyticsgui/chart.cljs"],"mappings":"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","names":["kdlyticsgui.chart/colors-risk","kdlyticsgui.chart/add-colors","vec-map","field","colors","p1__70417#","p2__70418#","cljs.core.map","cljs.core.assoc","cljs.core.sort_by","cljs.core/>","kdlyticsgui.chart/pie-chart-strategy","data","title","data-with-color","cljs.core/cycle","kdlyticsgui.chart/bullet-chart-characteristic","kdlyticsgui.chart/line-chart-price-simple","cljs.core/deref","re_frame.core.subscribe","cljs.core.apply","cljs.core/min","cljs.core/max","kdlyticsgui.chart/line-chart-price-hover"],"sourcesContent":["(ns kdlyticsgui.chart\r\n  (:require [re-frame.core :as rf])\r\n  (:require [kdlyticsgui.static :as static]))\r\n;\r\n;\r\n;(defn backtest-chart [portfolio-dates portfolio-value benchmark-value width height]\r\n;  (let [pv (mapv (fn [a b] {:date a :price (* 100 b) :category \"Portfolio\"}) portfolio-dates portfolio-value)\r\n;        bv (if benchmark-value (mapv (fn [a b] {:date a :price (/ b (last benchmark-value) 0.01) :category \"Benchmark\"}) portfolio-dates benchmark-value) [])\r\n;        data (concat pv (take-last 125 bv))                 ;super hacky - for portfolio review - as indices have carry\r\n;        ymin (* 0.99 (apply min (map :price data)))\r\n;        ymax (* 1.01 (apply max (map :price data)))]\r\n;    {:$schema \"https://vega.github.io/schema/vega-lite/v5.json\",\r\n;     :title   nil\r\n;     :width   (if benchmark-value (- width 75) width)             ; 75 for the legend\r\n;     :height  height\r\n;     :data    {:values data :format {:parse {:date \"date:'%Y-%m-%d'\" :price \"number\" :benchmark \"number\"}}}\r\n;     :mark    \"line\",\r\n;     :encoding\r\n;              (merge {:x {:field \"date\" :type \"temporal\" :axis {:format \"%b-%y\", :labelFontSize 14 :title nil} :sort \"descending\"}\r\n;                      :y {:field \"price\" :type \"quantitative\" :scale {:domain [ymin ymax]} :axis {:labelFontSize 14 :title nil}}}\r\n;                     (if benchmark-value\r\n;                       {:color {:field \"category\" :legend {:title nil :labelFontSize 14} :scale {:domain [\"Portfolio\" \"Benchmark\"], :range [\"#134848\" \"#009D80\"]}}}))}))\r\n;\r\n;(defn r5 [x] (* 5 (int (/ (+ x 4) 5))))\r\n;\r\n;(defn return-histogram [returns width height]\r\n;  (let [data (mapv (fn [x] {:return (* 100 x)}) returns)\r\n;        absmax (r5 (Math/ceil (* 100 (apply max (map #(Math/abs %) returns)))))]\r\n;    {:title    nil\r\n;     :data     {:values data\r\n;                :format {:type \"json\" :parse {:return \"number\"}}}\r\n;     :encoding {:x {:bin {:step 0.5}\r\n;                    :field \"return\"\r\n;                    :type \"quantitative\"\r\n;                    :scale {:domain [(- absmax), absmax]}\r\n;                    :axis {:title nil\r\n;                           :labelFontSize 14\r\n;                           :values (vec (range (- absmax) (+ absmax 5) 0.5))\r\n;                           :format \".1f\"}}                           ;\r\n;                :y {:aggregate \"count\" :type \"quantitative\" :axis {:title nil :labelFontSize 14}}}\r\n;     :mark     \"bar\"\r\n;     :width    width\r\n;     :height   height}))\r\n;\r\n;(defn regression-output [portfolio-returns benchmark-returns alpha beta width height]\r\n;  (let [data (mapv (fn [y x] {:portfolio (* 100 y)\r\n;                              :benchmark (* 100 x)\r\n;                              :predict   (* 100 (+ alpha (* beta x)))})\r\n;                           portfolio-returns benchmark-returns)]\r\n;    {:title    nil\r\n;     :data     {:values data\r\n;                :format {:type \"json\" :parse {:portfolio \"number\" :benchmark \"number\" :predict \"number\"}}}\r\n;     :layer [{:mark {:type \"point\" :filled true}\r\n;              :encoding {:x {:field \"benchmark\" :type \"quantitative\" :axis {:title nil :labelFontSize 14 :tickMinStep 0.5 :format \".1f\"}}\r\n;                         :y {:field \"portfolio\" :type \"quantitative\" :axis {:title nil :labelFontSize 14 :tickMinStep 0.5 :format \".1f\"}}}}\r\n;             {:mark {:type \"line\" :color \"firebrick\"}\r\n;              :encoding {:x {:field \"benchmark\" :type \"quantitative\"}\r\n;                         :y {:field \"predict\" :type \"quantitative\" :axis {:title nil :labelFontSize 14 :tickMinStep 0.5 :format \".1f\"}}}}\r\n;             {:mark {:type \"rule\", :color \"green\", :strokeDash [10 10]},\r\n;              :encoding {:x {:datum -2.5, :type \"quantitative\"}, :y {:datum -2.5, :type \"quantitative\"}, :x2 {:datum 2.5, :type \"quantitative\"}, :y2 {:datum 2.5, :type \"quantitative\"}}}]\r\n;     :width width :height height}))\r\n;\r\n;(def performance-colors [\"#134848\" \"#009D80\" \"#FDAA94\" \"#74908D\" \"#591739\" \"#0D3232\" \"#026E62\" \"#C0746D\" \"#54666D\" \"#3C0E2E\"])\r\n;(def esg-colors [\"#134848\" \"#009D80\" \"#FDAA94\" \"#74908D\" \"#591739\" \"#0D3232\" \"#026E62\" \"#C0746D\" \"#54666D\" \"#3C0E2E\" \"#C87A1B\" \"#0A3323\" \"#9A293D\"]) ; based on 13 sectors\r\n;(def chart-text-size 12)\r\n;(def standard-box-width \"1600px\")\r\n;(def standard-box-height \"1024px\")\r\n;(def standard-box-width-nb 800)\r\n;(def standard-box-height-nb 600)\r\n;\r\n;(defn stacked-vertical-bars [rt-pivot-data title]\r\n;  (let [grp (group-by #(get % \"_pivotVal\") rt-pivot-data)\r\n;        xfields (remove #(= % \"_pivotVal\") (keys (first rt-pivot-data)))\r\n;        colors (take (count (keys grp)) performance-colors)\r\n;        new-data (into [] (for [g (keys grp) x xfields] {:ygroup g :xgroup (t/gdate->ddMMMyy (t/int->gdate x)) :value (get (first (grp g)) x)}))]\r\n;      {:$schema  \"https://vega.github.io/schema/vega-lite/v5.json\",\r\n;     :data     {:values new-data},\r\n;     :width    (* 35 (count colors)) :height 500\r\n;     :mark     \"bar\"\r\n;     :encoding {:column  {:field  \"xgroup\" :type \"nominal\" :title nil\r\n;                          :header {:orient \"bottom\" :labelFontSize chart-text-size},\r\n;                          :sort   (mapv #(t/gdate->ddMMMyy (t/int->gdate %)) (sort xfields))}\r\n;                :x       {:field \"ygroup\" :type \"nominal\" :axis {:title nil :labels false}}\r\n;                :y       {:field \"value\", :type \"quantitative\", :axis {:title nil :labelFontSize chart-text-size}}\r\n;                :tooltip [{:field \"xgroup\" :type \"nominal\"} {:field \"ygroup\" :type \"nominal\"} {:field \"value\" :type \"quantitative\"}]\r\n;                :color   {:field \"ygroup\", :type \"nominal\", :scale {:domain (keys grp) :range colors} :legend {:title \"Group\"}}}}))\r\n;\r\n;\r\n;(defn stacked-vertical-bars-esg [rt-pivot-data field-pivot field-chart pivot ]\r\n;  (let [country_codes @(rf/subscribe [:country-codes])\r\n;        country_codes-indexed (zipmap (map :CountryCode country_codes) country_codes)\r\n;        data-sorted (reverse (sort-by :val (for [m rt-pivot-data] {:field (first (vals m)) :val (second (vals m))})))\r\n;        data-clean (if (= pivot \"country\") (take 15 data-sorted) data-sorted)\r\n;        data-adjusted (if (= \"emissions_evic\" (subs field-chart 0 14) ) (map (fn [x] (update x :val * 1000000)) data-clean) data-clean)\r\n;        data_final (if (= pivot \"country\") (map #(assoc % :field (:LongName (get country_codes-indexed (:field %)))) data-adjusted) data-adjusted)\r\n;        xfields (map :field data_final)    ;(map #(get % \"_pivotVal\") rt-pivot-data)\r\n;        yfields (map :val data_final)\r\n;        colors (take (count xfields) esg-colors)\r\n;        ]\r\n;    {:$schema  \"https://vega.github.io/schema/vega-lite/v5.json\"\r\n;     :title {:text (str field-chart \" per \" field-pivot) :fontSize 20}\r\n;     :data     {:values data_final}\r\n;     :width 1000\r\n;     :height 600\r\n;     :mark \"bar\"\r\n;     :encoding {:x       {:field \"field\" :type \"nominal\" :axis {:title (clojure.string/capitalize field-pivot) :labels xfields :labelFontSize 15 :titleFontSize 15} :sort {:field \"val\" :order \"descending\"} }\r\n;                :y       {:field \"val\", :type \"quantitative\" :axis {:title field-chart :labels yfields :labelFontSize 15 :titleFontSize 15}}\r\n;                :tooltip [{:field \"field\" :type \"nominal\" :title field-pivot} {:field \"val\" :type \"quantitative\" :title field-chart :titleFontSize 15 :format \",.0f\"}] ;mils \",.2s\"\r\n;                :color   {:field \"field\", :type \"nominal\", :scale {:domain xfields :range colors} :legend {:title (clojure.string/capitalize field-pivot) :labelFontSize 15 :titleFontSize 15}}\r\n;                }}\r\n;    ))\r\n;\r\n;(defn scatter-esg [raw-data pivot show-tickers]\r\n;  (let [data-raw-clean (if (= pivot \"no\")\r\n;                         raw-data\r\n;                         (for [f (flatten (for [t raw-data] (get t \"_subRows\")))] (get f \"_original\") ))\r\n;        data-clean (map (fn [x] (update x \"emissions_evic_1_2\" * 1000000)) data-raw-clean)\r\n;        second-mark (if show-tickers\r\n;                      {:mark     {:type \"text\" :dx 10 :align \"left\"}\r\n;                       :encoding {:x       {:field \"amt_carbon_intensity_1_2\" :type \"quantitative\" :scale {:zero false} :axis {:title \"Intensity\" :labelFontSize 15 :titleFontSize 15}}\r\n;                                  :y       {:field \"emissions_evic_1_2\" :type \"quantitative\" :scale {:zero false} :axis {:title \"Footprint\" :labelFontSize 15 :titleFontSize 15}}\r\n;                                  :text    {:field \"Ticker\" :type \"nominal\"}\r\n;                                  }}\r\n;                      nil\r\n;                      )\r\n;        ]\r\n;    {:$schema  \"https://vega.github.io/schema/vega-lite/v5.json\",\r\n;     :data     {:values data-clean}\r\n;     :title {:text \"Footprint/Intensity - Scope 1 and 2 \" :fontSize 20}\r\n;     ;:params {:name \"grid\" :select \"interval\" :bind \"scales\"}\r\n;     :width    1000\r\n;     :height   800\r\n;     :layer (remove nil? (concat [{:selection {:grid {:type \"interval\" :bind \"scales\"}}\r\n;              :mark     {:opacity 0.5 :type \"circle\" }\r\n;              :encoding {:x       {:field \"amt_carbon_intensity_1_2\" :type \"quantitative\" :scale {:zero false} :axis {:title \"Intensity\" :labelFontSize 15 :titleFontSize 15}}\r\n;                         :y       {:field \"emissions_evic_1_2\" :type \"quantitative\" :scale {:zero false} :axis {:title \"Footprint\" :labelFontSize 15 :titleFontSize 15}}\r\n;                         :text    {:field \"Ticker\" :type \"nominal\"}\r\n;                         ;:shape   {:field \"method_cat_scope_1\", :type \"nominal\" :legend {:title \"Method\" :labelFontSize 15 :titleFontSize 15}} ;method_cat_scope_1\r\n;                         :color   {:field \"sector\", :type \"nominal\" :scale {:range esg-colors} :legend {:title \"Sector\" :labelFontSize 15 :titleFontSize 15}}\r\n;                         :size   {:field \"amt_carbon_emissions_1_2\" :type \"quantitative\" :legend {:title \"Emissions\" :labelFontSize 15 :titleFontSize 15}}\r\n;                         :tooltip [{:field \"Ticker\" :type \"nominal\" :title \"Ticker\"} {:field \"sector\" :type \"nominal\" :title \"Sector\"}\r\n;                                   {:field \"cat_scope_1_method\" :type \"nominal\" :title \"Method Scope 1\"}\r\n;                                   {:field \"cat_scope_2_method\" :type \"nominal\" :title \"Method Scope 2\"}\r\n;                                   {:field \"amt_carbon_emissions_1_2\" :type \"quantitative\" :title \"Emissions\" :format \",.2s\"}\r\n;                                   {:field \"amt_carbon_intensity_1_2\" :type \"quantitative\" :title \"Intensity\" :format \",.0f\"}\r\n;                                   {:field \"emissions_evic_1_2\" :type \"quantitative\" :title \"Footprint\" :format \",.0f\"}\r\n;                                   ]\r\n;                         }\r\n;              }\r\n;             second-mark\r\n;             ]))\r\n;     }\r\n;    ))\r\n;\r\n;(defn stacked-vertical-bars-2 [data title]\r\n;  (let [new-data (->> (sort-by :date data)\r\n;                      (map #(update % :weight * 100))\r\n;                      (map #(assoc % :date-mmm-yy ((comp t/gdate->MMM-yy t/int->gdate :date) %)))) ]\r\n;    {:$schema  \"https://vega.github.io/schema/vega-lite/v5.json\",\r\n;     :data     {:values new-data},\r\n;     :width    800\r\n;     :height   400\r\n;     :encoding {:x       {:field \"date-mmm-yy\" :type \"nominal\" :axis {:title nil :labelFontSize 15} :sort {:field \"date\"}}}\r\n;     :layer [{:mark      {:type \"bar\" :color \"#134848\"}\r\n;              :encoding {:y       {:field \"original-quantity\" :type \"quantitative\" :axis {:title \"Nominal\" :format \",.2s\" :labelFontSize 15 :titleFontSize 15 :titleColor \"#134848\"}}}}\r\n;              {:mark     {:type \"line\" :color \"#D83949\"}\r\n;               :encoding {:y       {:field \"weight\" :type \"quantitative\" :axis {:title \"Weight %\" :labelFontSize 15 :titleFontSize 15 :titleColor \"#D83949\"}}}}]\r\n;     :resolve {:scale {:y \"independent\" }}}))\r\n;\r\n;(defn stacked-vertical-bars-3 [data-weight data-price title]\r\n;  (let [new-data (->> data-weight\r\n;                      (map #(update % :weight * 100))\r\n;                      (map #(assoc % :price (:price (first (t/chainfilter {:date (t/gdate->yyyy-MM-dd (t/int->gdate (% :date)))} data-price)))))\r\n;                      (map #(assoc % :date-mmm-yy ((comp t/gdate->MMM-yy t/int->gdate :date) %))))]\r\n;    {:$schema  \"https://vega.github.io/schema/vega-lite/v5.json\",\r\n;     :data     {:values new-data},\r\n;     :width    800\r\n;     :height   400\r\n;     :encoding {:x       {:field \"date-mmm-yy\" :type \"nominal\" :axis {:title nil :labelFontSize 15} :sort {:field \"date\"}}}\r\n;     :layer [{:mark      {:type \"line\" :color \"#134848\"}    ;#7F6EBC\r\n;              :encoding {:y       {:field \"price\" :type \"quantitative\" :axis {:title \"Price\" :labelFontSize 15 :titleFontSize 15 :titleColor \"#134848\"}}}} ;#7F6EBC\r\n;             {:mark     {:type \"line\" :color \"#D83949\"}\r\n;              :encoding {:y       {:field \"weight\" :type \"quantitative\" :axis {:title \"Weight %\" :labelFontSize 15 :titleFontSize 15 :titleColor \"#D83949\"}}}}]\r\n;     :resolve {:scale {:y \"independent\" }}}))\r\n;\r\n;\r\n\r\n(def colors-risk [\"#19A68C\" \"#E89687\" \"#B2A896\" \"#652043\" \"#392B5E\" \"#CF6F13\" \"#809A96\" \"#222222\" \"#DB4857\" \"#E8E5CE\" \"#FFB43D\" \"#004042\" \"#134848\" \"#009D80\" \"#FDAA94\" \"#74908D\" \"#591739\" \"#0D3232\" \"#026E62\" \"#C0746D\" \"#54666D\" \"#3C0E2E\" \"#C87A1B\" \"#0A3323\" \"#9A293D\"])\r\n(defn add-colors [vec-map field colors] (map #(assoc %1 :color %2) (sort-by field > vec-map) colors))\r\n\r\n(defn pie-chart-strategy [data title]\r\n  (let [data-with-color (add-colors data :nav-eur-perc (cycle colors-risk))]\r\n    {:$schema  \"https://vega.github.io/schema/vega-lite/v5.json\"\r\n     :title {:text title :fontSize 20}\r\n     :data  {:values data-with-color}\r\n     :width 400 :height 350\r\n     :encoding {:theta  {:field \"nav-eur-perc\" :type \"quantitative\" :stack true}}\r\n     :layer [{:mark {:type \"arc\" :outerRadius 115}\r\n            :encoding {:color {:field \"color\" :type \"nominal\" :scale nil :legend nil}\r\n                       :order {:field \"nav-eur-perc\" :type \"quantitative\"}}}\r\n           {:mark {:type \"text\" :radius 130 :size 14}\r\n            :encoding {:text {:field \"strategy\" :type \"nominal\"}\r\n                       :order {:field \"nav-eur-perc\" :type \"quantitative\"}}}\r\n           {:mark {:type \"text\" :radius 80 :size 10 :fontWeight \"bold\"}\r\n            :encoding {:text {:field \"value-display\" :type \"nominal\"}\r\n                       :order {:field \"nav-eur-perc\" :type \"quantitative\"}}}\r\n           ]})\r\n  )\r\n\r\n(defn bullet-chart-characteristic [data title]\r\n  (let []\r\n    {:$schema  \"https://vega.github.io/schema/vega-lite/v5.json\"\r\n     :title {:text title :fontSize 20}\r\n     :data  {:values data}\r\n     :facet {:row {:field \"title\" :type \"ordinal\" :header {:labelAngle 0 :title \"\"}}}\r\n     :spacing 10\r\n     :spec {:encoding {:x  {:type \"quantitative\" :scale {:nice false} :title \"\"}}\r\n            :layer [{:mark {:type \"bar\" :color \"#eee\"}\r\n                     :encoding {:x {:field \"ranges[2]\"}}}\r\n                    {:mark {:type \"bar\" :color \"#ddd\"}\r\n                     :encoding {:x {:field \"ranges[1]\"}}}\r\n                    {:mark {:type \"bar\" :color \"#ccc\"}\r\n                     :encoding {:x {:field \"ranges[0]\"}}}\r\n\r\n                    {:mark {:type \"bar\" :color \"lightsteelblue\" :size 10}\r\n                     :encoding {:x {:field \"measures[1]\"}}}\r\n                    {:mark {:type \"bar\" :color \"steelblue\" :size 10}\r\n                     :encoding {:x {:field \"measures[0]\"}}}\r\n\r\n                    {:mark {:type \"tick\" :color \"black\" :size 10}\r\n                     :encoding {:x {:field \"markers[0]\"}}}\r\n                    ]\r\n            }\r\n     :resolve {:scale {:x \"independent\"}}\r\n     :config {:tick {:thickness 2} :scale {:barBandPaddingInner 0}}\r\n\r\n     })\r\n\r\n  )\r\n\r\n\r\n\r\n\r\n;\r\n;(defn mod-date [date]  (str (subs date 0 4) (subs date 5 7) (subs date 8 10) ))\r\n;\r\n;(defn bar-chart-countries [data field title]\r\n;  {:$schema  \"https://vega.github.io/schema/vega-lite/v5.json\" :title {:text title :fontSize 20}\r\n;   :data     {:values data} :width 1300 :height 600\r\n;   :layer [{:mark {:type \"bar\":color \"#4C3C84\"}\r\n;            :encoding {:x       {:field field :type \"quantitative\"  :axis {:title \"%\" :labelFontSize 15 :titleFontSize 15}}\r\n;                       :y       {:field \"asset\", :type \"nominal\" :axis {:title \"%\" :labelFontSize 15 :titleFontSize 15} :sort {:field field :order \"descending\" :op \"sum\"}}\r\n;                       :tooltip [{:field field :type \"quantitative\" :title \"%\" } {:field \"asset\" :type \"nominal\" :title \"Country\" }]}\r\n;            }]}\r\n;  )\r\n;\r\n;(defn bar-chart-rating [data title]\r\n;  (let [data-renamed (mapv #(clojure.set/rename-keys % {:bb_ratings :BB :d_ratings :D :cc_ratings :CC :ccc_ratings :CCC :bbb_ratings :BBB :b_ratings :B :aaa_ratings :AAA :aa_ratings :AA :c_ratings :C :a_ratings  :A}) (flatten data))\r\n;        data-reformat (vec (flatten (for [d data-renamed] (for [k d] {:date (d :date) :value (val k) :rating (name (key k))}))))\r\n;        data-clean (t/chainfilter {:rating #(not (= % \"date\" )) } data-reformat)\r\n;        ]\r\n;    {:$schema  \"https://vega.github.io/schema/vega-lite/v5.json\" :title {:text title :fontSize 20}\r\n;     :data     {:values data-clean} :width 1300 :height 600\r\n;     :layer [{:mark {:type \"bar\":color \"#4C3C84\"}\r\n;              :encoding {:x       {:field \"date\" :type \"nominal\"  :axis {:title \"Date\" :labelFontSize 15 :titleFontSize 15 :labelAngle -60 :labelLimit 0} }\r\n;                         :y       {:field \"value\", :type \"quantitative\" :axis {:title \"%\" :labelFontSize 15 :titleFontSize 15} :scale {:domain [0 100]}}\r\n;                         :color   {:field \"rating\" :type \"nominal\" :scale {:range [\"#134848\" \"#009D80\" \"#FDAA94\" \"#74908D\" \"#591739\" \"#0D3232\" \"#026E62\" \"#C0746D\" \"#54666D\" \"#3C0E2E\"]}}\r\n;                         :tooltip [{:field \"date\" :type \"nominal\" :title \"Date\" }{:field \"rating\" :type \"nominal\" :title \"Rating\"}{:field \"value\" :type \"quantitative\" :title \"%\"}]\r\n;                         }\r\n;              }]}\r\n;    )\r\n;  )\r\n;\r\n;\r\n;(defn bar-chart-duration [data-raw color title]\r\n;  (let [data-duration-clean (for [d data-raw] (assoc d :diff (- (:duration d) (:benchmark d))))\r\n;        data-duration-clean-filtered (t/chainfilter {:date #(> (t/int->gdate (js/parseInt (mod-date %))) (t/int->gdate 20160929))} data-duration-clean) ;; no BM data before Sept 16'. (->> data-weight\r\n;        ]\r\n;    {:$schema  \"https://vega.github.io/schema/vega-lite/v5.json\"\r\n;     :title {:text title :fontSize 20}\r\n;     :data     {:values data-duration-clean-filtered}\r\n;     :width 1500 :height 600\r\n;     :layer [{:mark {:type \"bar\" :color color}\r\n;              :encoding {:x       {:field \"date\" :type \"temporal\"  :axis {:title \"Date\" :labelFontSize 15 :titleFontSize 15 :labelAngle -60 :labelLimit 0 :format \"%b-%y\"}}\r\n;                         :y       {:field \"diff\", :type \"quantitative\" :axis {:title \"Net allocation vs CEMBI\" :labelFontSize 15 :titleFontSize 15}}\r\n;                         :tooltip [{:field \"date\" :type \"temporal\" :title \"Date\" } {:field \"diff\" :type \"quantitative\" :title \"diff\" }\r\n;                                   {:field \"duration\" :type \"quantitative\" :title \"Funds\" } {:field \"benchmark\" :type \"quantitative\" :title \"BM\" }]}}\r\n;             {:mark {:type \"rule\"}\r\n;              :encoding {:y       {:field \"diff\", :type \"quantitative\" :aggregate \"mean\"}\r\n;                         :color {:value \"#C33345\"}\r\n;                         :size {:value 3}}}]}))\r\n;\r\n;(defn bar-chart-cash [data-raw color title]\r\n;  (let []\r\n;    {:$schema  \"https://vega.github.io/schema/vega-lite/v5.json\"\r\n;     :title {:text title :fontSize 20}\r\n;     :data     {:values data-raw}\r\n;     :width 1500 :height 600\r\n;     :layer [{:mark {:type \"bar\" :color color}\r\n;              :encoding {:x       {:field \"date\" :type \"temporal\" :axis {:title \"Date\" :labelFontSize 15 :titleFontSize 15 :labelAngle -60 :labelLimit 0 :format \"%b-%y\"}}\r\n;                         :y       {:field \"cash\", :type \"quantitative\" :axis {:title \"% Cash\" :labelFontSize 15 :titleFontSize 15}}\r\n;                         :tooltip [{:field \"date\" :type \"temporal\" :title \"Date\" } {:field \"cash\" :type \"quantitative\" :title \"% cash\" }]}}\r\n;             {:mark {:type \"rule\"}\r\n;              :encoding {:y       {:field \"cash\", :type \"quantitative\" :aggregate \"mean\"}\r\n;                         :color {:value \"#C33345\"}\r\n;                         :size {:value 3}}}]}))\r\n\r\n(defn line-chart-price-simple [data]\r\n  (let []\r\n    {:$schema  \"https://vega.github.io/schema/vega-lite/v5.json\"\r\n     :title    {:text @(rf/subscribe [:price-history/name]) :fontSize 15}\r\n     :width    1000\r\n     :height   400\r\n     :data     {:values data :format {:parse {:date \"date:'%Y-%m-%d'\" :price \"number\"}}}\r\n     :mark     \"line\"\r\n     :selection {:grid {:type \"interval\" :bind \"scales\"}}\r\n     :encoding {:y  {:field \"close\" :type \"quantitative\" :axis {:title \"Price\" :titleFontSize 14 :labelFontSize 12} :scale {:domain [(dec (apply min (map :close data))) (inc (apply max (map :close data)))]}}\r\n                :x  {:field \"date\" :type \"temporal\" :axis {:title \"Date\" :titleFontSize 14 :labelFontSize 12 :format \"%b-%y\" }  :sort \"ascending\"}\r\n                :tooltip [{:field \"date\" :type \"temporal\", :title \"Date\"}\r\n                          {:field \"close\" :type \"quantitative\" :title \"Close price\"}]\r\n                ;:color {:field \"Bond\" :type \"nominal\" :scale {:range [\"#134848\" \"#FDAA94\"]}}\r\n                }}))\r\n\r\n\r\n(defn line-chart-price-hover [data]\r\n  \"2 marks: line, circle\"\r\n  (let []\r\n    {:$schema  \"https://vega.github.io/schema/vega-lite/v5.json\"\r\n     :title    {:text @(rf/subscribe [:price-history/name]) :fontSize 15} :width 1000  :height 400\r\n     :data     {:values data :format {:parse {:date \"date:'%Y-%m-%d'\" :price \"number\"}}}\r\n     :encoding {:x  {:field \"date\" :type \"temporal\" :axis {:title \"Date\" :titleFontSize 14 :labelFontSize 12 :format \"%b-%y\" }  :sort \"ascending\"}\r\n                :y  {:field \"close\" :type \"quantitative\" :axis {:title \"Price\" :titleFontSize 14 :labelFontSize 12} :scale {:domain [(dec (apply min (map :close data))) (inc (apply max (map :close data)))]}}}\r\n     :layer [{:mark     \"line\" :selection {:grid {:type \"interval\" :bind \"scales\"}}}\r\n             {:mark     {:type \"circle\" }\r\n              :encoding {:opacity {:condition {:test {:param \"hover\" :empty false} :value 1} :value 0}\r\n                         :size {:condition {:test {:param \"hover\" :empty false} :value 100} :value 0}\r\n                         :tooltip [{:field \"date\" :type \"temporal\", :title \"Date\"} {:field \"close\" :type \"quantitative\" :title \"Close price\"}]\r\n                         :color {:value \"#4dfffc\"}\r\n                         }\r\n              :params [{:name \"hover\" :select {:type \"point\" :fields [\"date\"] :nearest true :on \"mouseover\" :clear \"mouseout\"}}]}\r\n             ]\r\n     }))\r\n\r\n\r\n\r\n\r\n"]}