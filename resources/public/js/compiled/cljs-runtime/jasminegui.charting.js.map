{"version":3,"sources":["jasminegui/charting.cljs"],"mappings":";;;AA2EA,AAAA,AAAMA,AAAgBC,AAAgBC,AAAgBC,AAAMC;AAA5D,AACE,AAAMC,AAAK,AAACC,AAAK,AAAKC,AAAEC;AAAP,AAAA,AAAA,AAAA,AAAiBD,AAAS,AAAA,AAAOC;AAAKP,AAAgBC;AACjEO,AAAK,AAAA,AAAQ,AAACC,AAAMC,AAAI,AAAA,AAACC,AAAWP;AACpCQ,AAAK,AAAA,AAAQ,AAACH,AAAMI,AAAI,AAAA,AAACF,AAAWP;AAF1C,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAMUF,AACCC,AACOC,AAIyDI,AAAKI;;AAElF,AAAA,AAAME,AAAIC;AAAV,AAAa,AAAA,AAAK,AAAA,AAAK,AAAA,AAAG,AAAA,AAAGA;;AAE7B,AAAA,AAAMC,AAAkBC,AAAQf,AAAMC;AAAtC,AACE,AAAMC,AAAK,AAACc,AAAK,AAAKH;AAAL,AAAA,AAAA,AAAiB,AAAA,AAAOA;AAAKE;AACxCE,AAAO,AAACL,AAAG,AAAAM,AAAW,AAAA,AAAO,AAACX,AAAMI,AAAI,AAAA,AAAAS,AAACX;AAAD,AAAM,AAAAW,AAACC;AAAYN;AAAhD,AAAA,AAAAG,AAACC;;AADlB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAIsBjB,AAKa,AAAGe,AAASA,AAGd,AAACK,AAAI,AAAA,AAACC,AAAM,AAAGN,AAAQ,AAAA,AAAGA,AAI9CjB,AACAC;;AAEf,AAAA,AAAMuB,AAAmBC,AAAkBC,AAAkBC,AAAMC,AAAK5B,AAAMC;AAA9E,AACE,AAAMC,AAAK,AAACC,AAAK,AAAK0B,AAAEhB;AAAP,AAAA,AAAA,AAAA,AAAA,AAAsB,AAAA,AAAOgB,AACP,AAAA,AAAOhB,AACP,AAAA,AAAO,AAAGc,AAAM,AAAGC,AAAKf;AACtCY,AAAkBC;AAH3C,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAOsBxB,AAUTF,AACAC","names":["jasminegui.charting/backtest-chart","portfolio-dates","portfolio-value","width","height","data","cljs.core.mapv.cljs$core$IFn$_invoke$arity$3","a","b","ymin","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/min","cljs.core.map.cljs$core$IFn$_invoke$arity$2","ymax","cljs.core/max","jasminegui.charting/r5","x","jasminegui.charting/return-histogram","returns","cljs.core.mapv.cljs$core$IFn$_invoke$arity$2","absmax","G__42253","Math/ceil","p1__42252#","Math/abs","cljs.core/vec","cljs.core.range.cljs$core$IFn$_invoke$arity$3","jasminegui.charting/regression-output","portfolio-returns","benchmark-returns","alpha","beta","y"],"sourcesContent":["(ns jasminegui.charting\r\n  (:require [jasminegui.static :as static]))\r\n\r\n;\r\n;;(def five-color-scale [(:Sea100 static/emcd-colors) (:Sky100 static/emcd-colors) (:Sea80 static/emcd-colors) (:Sky80 static/emcd-colors) (:Sea60 static/emcd-colors)])\r\n;(def five-color-scale [\"#ffa07a\" (:Sea100 static/emcd-colors) (:Sky100 static/emcd-colors) (:Sea80 static/emcd-colors) (:Sky80 static/emcd-colors)])\r\n;\r\n;(defn performance-bar-chart [trade lyk width height]\r\n;  {:$schema \"https://vega.github.io/schema/vega-lite/v4.json\",\r\n;   :title   (str (if (= lyk :ltd) \"LTD\" \"YTD\") \" performance comparison (%)\")\r\n;   :width   width\r\n;   :height  height\r\n;   :data\r\n;            {:values\r\n;             [{:instrument (:NAME trade) :performance (* 100 (if (= lyk :ltd) (:ltd-return trade) (:ytd-return trade)))}\r\n;              {:instrument \"CEMBI\" :performance (* 100 (if (= lyk :ltd) (:cembi-return-ltd trade) (:cembi-return-ytd trade)))}\r\n;              {:instrument \"Rating\" :performance (* 100 (if (= lyk :ltd) (:cembi-rating-return-ltd trade) (:cembi-rating-return-ytd trade)))}\r\n;              {:instrument \"Country\" :performance (* 100 (if (= lyk :ltd) (:cembi-country-return-ltd trade) (:cembi-country-return-ytd trade)))}\r\n;              {:instrument \"Sector\" :performance (* 100 (if (= lyk :ltd) (:cembi-sector-return-ltd trade) (:cembi-sector-return-ytd trade)))}\r\n;              ]},\r\n;   :encoding\r\n;            {:x     {:field \"instrument\" :type \"ordinal\" :sort [(:NAME trade) \"CEMBI\" \"Rating\" \"Country\" \"Sector\"] :axis {:title nil}},\r\n;             :y     {:field \"performance\" :type \"quantitative\" :axis {:title nil}}\r\n;             :color {:field \"instrument\" :type \"nominal\" :sort [(:NAME trade) \"CEMBI\" \"Rating\" \"Country\" \"Sector\"] :scale {:range five-color-scale} :legend nil}}\r\n;   :layer   [{:mark \"bar\"}\r\n;             {:mark {:type \"text\" :align \"top\" :baseline \"middle\" :dx -10 :dy -10} :encoding {:text {:field \"performance\" :type \"quantitative\" :format \".1f\"}}}]\r\n;   })\r\n;\r\n;\r\n;\r\n;(defn reshape-history-for-vega [data]\r\n;  (let [ks (keys (dissoc (last data) :date))\r\n;        f (fn [x] (map (fn [y] {:date (:date x) :symbol (name y) :return (x y)}) ks))]\r\n;    (apply concat (map f data))))\r\n;\r\n;(defn performance-history-chart [trade source-data lyk width height]\r\n;  (let [data (reshape-history-for-vega source-data)\r\n;        ymin (* 0.99 (apply min (map :return data)))\r\n;        ymax (* 1.01 (apply max (map :return data)))\r\n;        ]\r\n;    {:$schema \"https://vega.github.io/schema/vega-lite/v4.json\",\r\n;     :title (str (if (= lyk :ltd) \"LTD\" \"YTD\") \" performance history\")\r\n;     :width width\r\n;     :height height\r\n;     :data {:values data :format {:parse {:date \"date:'%Y%m%d'\" :return \"quantitative\"}}}\r\n;     :mark \"line\",\r\n;     :encoding\r\n;              {:x \t   {:field \"date\"  :type \"temporal\" :axis {:format \"%b-%y\", :labelFontSize 10 :title nil}}\r\n;               :y     {:field \"return\" :type \"quantitative\"  :scale {:domain [ymin ymax]}  :axis {:title nil}}\r\n;               :color {:field \"symbol\"\r\n;                       :type \"nominal\"\r\n;                       :sort [(:NAME trade) (get-in trade [:indices :main]) (get-in trade [:indices :rating]) (get-in trade [:indices :country]) (get-in trade [:indices :sector])]\r\n;                       :scale {:range five-color-scale}}}}))\r\n;\r\n;(defn price-history-with-triggers-chart [trade data width height]\r\n;  (let [relval-price (get-in trade [:relval-alert :implied-price])\r\n;        target-price (get-in trade [:target-alert :implied-price])\r\n;        review-price (get-in trade [:review-alert :implied-price])\r\n;        range (remove nil? (concat (mapv (keyword (:NAME trade)) data) [relval-price target-price review-price]))\r\n;        ymin (- (apply min range) 2)\r\n;        ymax (+ (apply max range) 2)]\r\n;    {:$schema \"https://vega.github.io/schema/vega-lite/v4.json\",\r\n;     :title   (str (:NAME trade) \" trade history vs triggers\")\r\n;     :width   width\r\n;     :height  height\r\n;     :data    {:values data :format {:parse {:date \"date:'%Y%m%d'\" :return \"quantitative\"}}}\r\n;     :layer   [{:mark \"line\" :encoding {:x {:field \"date\" :type \"temporal\" :axis {:format \"%b-%y\", :labelFontSize 10 :title nil}} :y {:field (:NAME trade) :type \"quantitative\" :scale {:domain [ymin ymax]} :axis {:title nil}}}}\r\n;               {:mark {:type \"rule\" :color \"red\"} :data {:values {:y review-price}} :encoding {:y {:field \"y\"}}}\r\n;               {:mark {:type \"rule\" :color \"green\"} :data {:values {:y relval-price}} :encoding {:y {:field \"y\"}}}\r\n;               {:mark {:type \"rule\" :color \"yellow\"} :data {:values {:y target-price}} :encoding {:y {:field \"y\"}}}\r\n;               {:mark {:type \"text\" :dx -20 :dy -15} :data {:values [{:label \"review\" :price review-price :dt (:date (last data))}] :format {:parse {:dt \"date:'%Y%m%d'\" :price \"quantitative\"}}} :encoding {:y {:field \"price\" :type \"quantitative\"} :x {:field \"dt\" :type \"temporal\"} :text {:field \"label\" :type \"nominal\"}}}\r\n;               {:mark {:type \"text\" :dx -20 :dy -15} :data {:values [{:label \"relval\" :price relval-price :dt (:date (last data))}] :format {:parse {:dt \"date:'%Y%m%d'\" :price \"quantitative\"}}} :encoding {:y {:field \"price\" :type \"quantitative\"} :x {:field \"dt\" :type \"temporal\"} :text {:field \"label\" :type \"nominal\"}}}\r\n;               {:mark {:type \"text\" :dx -20 :dy -15} :data {:values [{:label \"price\" :price target-price :dt (:date (last data))}] :format {:parse {:dt \"date:'%Y%m%d'\" :price \"quantitative\"}}} :encoding {:y {:field \"price\" :type \"quantitative\"} :x {:field \"dt\" :type \"temporal\"} :text {:field \"label\" :type \"nominal\"}}}\r\n;               ]}))\r\n\r\n(defn backtest-chart [portfolio-dates portfolio-value width height]\r\n  (let [data (mapv (fn [a b] {:date a :price (* 100 b)}) portfolio-dates portfolio-value)\r\n        ymin (* 0.99 (apply min (map :price data)))\r\n        ymax (* 1.01 (apply max (map :price data)))\r\n        ]\r\n    {:$schema \"https://vega.github.io/schema/vega-lite/v4.json\",\r\n     :title nil\r\n     :width width\r\n     :height height\r\n     :data {:values data :format {:parse {:date \"date:'%Y-%m-%d'\" :return \"quantitative\"}}}\r\n     :mark \"line\",\r\n     :encoding\r\n              {:x \t   {:field \"date\"  :type \"temporal\" :axis {:format \"%b-%y\", :labelFontSize 14 :title nil} :sort \"descending\"}\r\n               :y     {:field \"price\" :type \"quantitative\"  :scale {:domain [ymin ymax]}  :axis {:labelFontSize 14 :title nil}}}}))\r\n\r\n(defn r5 [x] (* 5 (int (/ (+ x 4) 5))))\r\n\r\n(defn return-histogram [returns width height]\r\n  (let [data (mapv (fn [x] {:return (* 100 x)}) returns)\r\n        absmax (r5 (Math/ceil (* 100 (apply max (map #(Math/abs %) returns)))))]\r\n    ;(print \"absmax\" (apply max (map #(Math/abs %) returns)))\r\n    {:title    nil\r\n     :data     {:values data\r\n                :format {:type \"json\" :parse {:return \"number\"}}}\r\n     :encoding {:x {:bin {:step 0.5}\r\n                    :field \"return\"\r\n                    :type \"quantitative\"\r\n                    :scale {:domain [(- absmax), absmax]}\r\n                    :axis {:title nil\r\n                           :labelFontSize 14\r\n                           :values (vec (range (- absmax) (+ absmax 5) 0.5))\r\n                           :format \".1f\"}}                           ;\r\n                :y {:aggregate \"count\" :type \"quantitative\" :axis {:title nil :labelFontSize 14}}}\r\n     :mark     \"bar\"\r\n     :width    width\r\n     :height   height}))\r\n\r\n(defn regression-output [portfolio-returns benchmark-returns alpha beta width height]\r\n  (let [data (mapv (fn [y x] {:portfolio (* 100 y)\r\n                              :benchmark (* 100 x)\r\n                              :predict   (* 100 (+ alpha (* beta x)))})\r\n                           portfolio-returns benchmark-returns)]\r\n    ;(println benchmark-returns)\r\n    ;(print \"absmax\" (apply max (map #(Math/abs %) returns)))\r\n    {:title    nil\r\n     :data     {:values data\r\n                :format {:type \"json\" :parse {:portfolio \"number\" :benchmark \"number\" :predict \"number\"}}}\r\n     :layer [\r\n             {:mark {:type \"point\" :filled true}\r\n              :encoding {:x {:field \"benchmark\" :type \"quantitative\" :axis {:title nil :labelFontSize 14 :tickMinStep 0.5 :format \".1f\"}}\r\n                         :y {:field \"portfolio\" :type \"quantitative\" :axis {:title nil :labelFontSize 14 :tickMinStep 0.5 :format \".1f\"}}}}\r\n             {:mark {:type \"line\" :color \"firebrick\"}\r\n              :encoding {:x {:field \"benchmark\" :type \"quantitative\"}\r\n                         :y {:field \"predict\" :type \"quantitative\" :axis {:title nil :labelFontSize 14 :tickMinStep 0.5 :format \".1f\"}}}}\r\n             ]\r\n     :width    width\r\n     :height   height}))"]}