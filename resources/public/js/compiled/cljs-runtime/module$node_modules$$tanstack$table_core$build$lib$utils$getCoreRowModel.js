shadow$provide.module$node_modules$$tanstack$table_core$build$lib$utils$getCoreRowModel=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});var row=require("module$node_modules$$tanstack$table_core$build$lib$core$row"),utils=require("module$node_modules$$tanstack$table_core$build$lib$utils");exports.getCoreRowModel=function(){return table=>utils.memo(()=>[table.options.data],data=>{const rowModel={rows:[],flatRows:[],rowsById:{}},accessRows=function(originalRows,
depth,parentRow){void 0===depth&&(depth=0);const rows=[];for(let i=0;i<originalRows.length;i++){const row$1=row.createRow(table,table._getRowId(originalRows[i],i,parentRow),originalRows[i],i,depth,void 0,null==parentRow?void 0:parentRow.id);rowModel.flatRows.push(row$1);rowModel.rowsById[row$1.id]=row$1;rows.push(row$1);if(table.options.getSubRows){var _row$originalSubRows;row$1.originalSubRows=table.options.getSubRows(originalRows[i],i);null!=(_row$originalSubRows=row$1.originalSubRows)&&_row$originalSubRows.length&&
(row$1.subRows=accessRows(row$1.originalSubRows,depth+1,row$1))}}return rows};rowModel.rows=accessRows(data);return rowModel},{key:"getRowModel",debug:()=>{var _table$options$debugA;return null!=(_table$options$debugA=table.options.debugAll)?_table$options$debugA:table.options.debugTable},onChange:()=>{table._autoResetPageIndex()}})}}
//# sourceMappingURL=module$node_modules$$tanstack$table_core$build$lib$utils$getCoreRowModel.js.map
