{
"version":3,
"file":"module$node_modules$vega_transforms$build$vega_transforms.js",
"lineCount":116,
"mappings":"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",
"sources":["node_modules/vega-transforms/build/vega-transforms.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$vega_transforms$build$vega_transforms\"] = function(global,require,module,exports) {\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('vega-util'), require('vega-dataflow'), require('vega-statistics'), require('vega-time')) :\n  typeof define === 'function' && define.amd ? define(['exports', 'vega-util', 'vega-dataflow', 'vega-statistics', 'vega-time'], factory) :\n  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.vega = {}, global.vega, global.vega, global.vega, global.vega));\n})(this, (function (exports, vegaUtil, vegaDataflow, vegaStatistics, vegaTime) { 'use strict';\n\n  function multikey(f) {\n    return x => {\n      const n = f.length;\n      let i = 1,\n        k = String(f[0](x));\n      for (; i < n; ++i) {\n        k += '|' + f[i](x);\n      }\n      return k;\n    };\n  }\n  function groupkey(fields) {\n    return !fields || !fields.length ? function () {\n      return '';\n    } : fields.length === 1 ? fields[0] : multikey(fields);\n  }\n\n  function measureName(op, field, as) {\n    return as || op + (!field ? '' : '_' + field);\n  }\n  const noop = () => {};\n  const base_op = {\n    init: noop,\n    add: noop,\n    rem: noop,\n    idx: 0\n  };\n  const AggregateOps = {\n    values: {\n      init: m => m.cell.store = true,\n      value: m => m.cell.data.values(),\n      idx: -1\n    },\n    count: {\n      value: m => m.cell.num\n    },\n    __count__: {\n      value: m => m.missing + m.valid\n    },\n    missing: {\n      value: m => m.missing\n    },\n    valid: {\n      value: m => m.valid\n    },\n    sum: {\n      init: m => m.sum = 0,\n      value: m => m.sum,\n      add: (m, v) => m.sum += +v,\n      rem: (m, v) => m.sum -= v\n    },\n    product: {\n      init: m => m.product = 1,\n      value: m => m.valid ? m.product : undefined,\n      add: (m, v) => m.product *= v,\n      rem: (m, v) => m.product /= v\n    },\n    mean: {\n      init: m => m.mean = 0,\n      value: m => m.valid ? m.mean : undefined,\n      add: (m, v) => (m.mean_d = v - m.mean, m.mean += m.mean_d / m.valid),\n      rem: (m, v) => (m.mean_d = v - m.mean, m.mean -= m.valid ? m.mean_d / m.valid : m.mean)\n    },\n    average: {\n      value: m => m.valid ? m.mean : undefined,\n      req: ['mean'],\n      idx: 1\n    },\n    variance: {\n      init: m => m.dev = 0,\n      value: m => m.valid > 1 ? m.dev / (m.valid - 1) : undefined,\n      add: (m, v) => m.dev += m.mean_d * (v - m.mean),\n      rem: (m, v) => m.dev -= m.mean_d * (v - m.mean),\n      req: ['mean'],\n      idx: 1\n    },\n    variancep: {\n      value: m => m.valid > 1 ? m.dev / m.valid : undefined,\n      req: ['variance'],\n      idx: 2\n    },\n    stdev: {\n      value: m => m.valid > 1 ? Math.sqrt(m.dev / (m.valid - 1)) : undefined,\n      req: ['variance'],\n      idx: 2\n    },\n    stdevp: {\n      value: m => m.valid > 1 ? Math.sqrt(m.dev / m.valid) : undefined,\n      req: ['variance'],\n      idx: 2\n    },\n    stderr: {\n      value: m => m.valid > 1 ? Math.sqrt(m.dev / (m.valid * (m.valid - 1))) : undefined,\n      req: ['variance'],\n      idx: 2\n    },\n    distinct: {\n      value: m => m.cell.data.distinct(m.get),\n      req: ['values'],\n      idx: 3\n    },\n    ci0: {\n      value: m => m.cell.data.ci0(m.get),\n      req: ['values'],\n      idx: 3\n    },\n    ci1: {\n      value: m => m.cell.data.ci1(m.get),\n      req: ['values'],\n      idx: 3\n    },\n    median: {\n      value: m => m.cell.data.q2(m.get),\n      req: ['values'],\n      idx: 3\n    },\n    q1: {\n      value: m => m.cell.data.q1(m.get),\n      req: ['values'],\n      idx: 3\n    },\n    q3: {\n      value: m => m.cell.data.q3(m.get),\n      req: ['values'],\n      idx: 3\n    },\n    min: {\n      init: m => m.min = undefined,\n      value: m => m.min = Number.isNaN(m.min) ? m.cell.data.min(m.get) : m.min,\n      add: (m, v) => {\n        if (v < m.min || m.min === undefined) m.min = v;\n      },\n      rem: (m, v) => {\n        if (v <= m.min) m.min = NaN;\n      },\n      req: ['values'],\n      idx: 4\n    },\n    max: {\n      init: m => m.max = undefined,\n      value: m => m.max = Number.isNaN(m.max) ? m.cell.data.max(m.get) : m.max,\n      add: (m, v) => {\n        if (v > m.max || m.max === undefined) m.max = v;\n      },\n      rem: (m, v) => {\n        if (v >= m.max) m.max = NaN;\n      },\n      req: ['values'],\n      idx: 4\n    },\n    argmin: {\n      init: m => m.argmin = undefined,\n      value: m => m.argmin || m.cell.data.argmin(m.get),\n      add: (m, v, t) => {\n        if (v < m.min) m.argmin = t;\n      },\n      rem: (m, v) => {\n        if (v <= m.min) m.argmin = undefined;\n      },\n      req: ['min', 'values'],\n      idx: 3\n    },\n    argmax: {\n      init: m => m.argmax = undefined,\n      value: m => m.argmax || m.cell.data.argmax(m.get),\n      add: (m, v, t) => {\n        if (v > m.max) m.argmax = t;\n      },\n      rem: (m, v) => {\n        if (v >= m.max) m.argmax = undefined;\n      },\n      req: ['max', 'values'],\n      idx: 3\n    }\n  };\n  const ValidAggregateOps = Object.keys(AggregateOps).filter(d => d !== '__count__');\n  function measure(key, value) {\n    return out => vegaUtil.extend({\n      name: key,\n      out: out || key\n    }, base_op, value);\n  }\n  [...ValidAggregateOps, '__count__'].forEach(key => {\n    AggregateOps[key] = measure(key, AggregateOps[key]);\n  });\n  function createMeasure(op, name) {\n    return AggregateOps[op](name);\n  }\n  function compareIndex(a, b) {\n    return a.idx - b.idx;\n  }\n  function resolve(agg) {\n    const map = {};\n    agg.forEach(a => map[a.name] = a);\n    const getreqs = a => {\n      if (!a.req) return;\n      a.req.forEach(key => {\n        if (!map[key]) getreqs(map[key] = AggregateOps[key]());\n      });\n    };\n    agg.forEach(getreqs);\n    return Object.values(map).sort(compareIndex);\n  }\n  function init() {\n    this.valid = 0;\n    this.missing = 0;\n    this._ops.forEach(op => op.init(this));\n  }\n  function add(v, t) {\n    if (v == null || v === '') {\n      ++this.missing;\n      return;\n    }\n    if (v !== v) return;\n    ++this.valid;\n    this._ops.forEach(op => op.add(this, v, t));\n  }\n  function rem(v, t) {\n    if (v == null || v === '') {\n      --this.missing;\n      return;\n    }\n    if (v !== v) return;\n    --this.valid;\n    this._ops.forEach(op => op.rem(this, v, t));\n  }\n  function set(t) {\n    this._out.forEach(op => t[op.out] = op.value(this));\n    return t;\n  }\n  function compileMeasures(agg, field) {\n    const get = field || vegaUtil.identity,\n      ops = resolve(agg),\n      out = agg.slice().sort(compareIndex);\n    function ctr(cell) {\n      this._ops = ops;\n      this._out = out;\n      this.cell = cell;\n      this.init();\n    }\n    ctr.prototype.init = init;\n    ctr.prototype.add = add;\n    ctr.prototype.rem = rem;\n    ctr.prototype.set = set;\n    ctr.prototype.get = get;\n    ctr.fields = agg.map(op => op.out);\n    return ctr;\n  }\n\n  function TupleStore(key) {\n    this._key = key ? vegaUtil.field(key) : vegaDataflow.tupleid;\n    this.reset();\n  }\n  const prototype$1 = TupleStore.prototype;\n  prototype$1.reset = function () {\n    this._add = [];\n    this._rem = [];\n    this._ext = null;\n    this._get = null;\n    this._q = null;\n  };\n  prototype$1.add = function (v) {\n    this._add.push(v);\n  };\n  prototype$1.rem = function (v) {\n    this._rem.push(v);\n  };\n  prototype$1.values = function () {\n    this._get = null;\n    if (this._rem.length === 0) return this._add;\n    const a = this._add,\n      r = this._rem,\n      k = this._key,\n      n = a.length,\n      m = r.length,\n      x = Array(n - m),\n      map = {};\n    let i, j, v;\n\n    // use unique key field to clear removed values\n    for (i = 0; i < m; ++i) {\n      map[k(r[i])] = 1;\n    }\n    for (i = 0, j = 0; i < n; ++i) {\n      if (map[k(v = a[i])]) {\n        map[k(v)] = 0;\n      } else {\n        x[j++] = v;\n      }\n    }\n    this._rem = [];\n    return this._add = x;\n  };\n\n  // memoizing statistics methods\n\n  prototype$1.distinct = function (get) {\n    const v = this.values(),\n      map = {};\n    let n = v.length,\n      count = 0,\n      s;\n    while (--n >= 0) {\n      s = get(v[n]) + '';\n      if (!vegaUtil.hasOwnProperty(map, s)) {\n        map[s] = 1;\n        ++count;\n      }\n    }\n    return count;\n  };\n  prototype$1.extent = function (get) {\n    if (this._get !== get || !this._ext) {\n      const v = this.values(),\n        i = vegaUtil.extentIndex(v, get);\n      this._ext = [v[i[0]], v[i[1]]];\n      this._get = get;\n    }\n    return this._ext;\n  };\n  prototype$1.argmin = function (get) {\n    return this.extent(get)[0] || {};\n  };\n  prototype$1.argmax = function (get) {\n    return this.extent(get)[1] || {};\n  };\n  prototype$1.min = function (get) {\n    const m = this.extent(get)[0];\n    return m != null ? get(m) : undefined;\n  };\n  prototype$1.max = function (get) {\n    const m = this.extent(get)[1];\n    return m != null ? get(m) : undefined;\n  };\n  prototype$1.quartile = function (get) {\n    if (this._get !== get || !this._q) {\n      this._q = vegaStatistics.quartiles(this.values(), get);\n      this._get = get;\n    }\n    return this._q;\n  };\n  prototype$1.q1 = function (get) {\n    return this.quartile(get)[0];\n  };\n  prototype$1.q2 = function (get) {\n    return this.quartile(get)[1];\n  };\n  prototype$1.q3 = function (get) {\n    return this.quartile(get)[2];\n  };\n  prototype$1.ci = function (get) {\n    if (this._get !== get || !this._ci) {\n      this._ci = vegaStatistics.bootstrapCI(this.values(), 1000, 0.05, get);\n      this._get = get;\n    }\n    return this._ci;\n  };\n  prototype$1.ci0 = function (get) {\n    return this.ci(get)[0];\n  };\n  prototype$1.ci1 = function (get) {\n    return this.ci(get)[1];\n  };\n\n  /**\n   * Group-by aggregation operator.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {Array<function(object): *>} [params.groupby] - An array of accessors to groupby.\n   * @param {Array<function(object): *>} [params.fields] - An array of accessors to aggregate.\n   * @param {Array<string>} [params.ops] - An array of strings indicating aggregation operations.\n   * @param {Array<string>} [params.as] - An array of output field names for aggregated values.\n   * @param {boolean} [params.cross=false] - A flag indicating that the full\n   *   cross-product of groupby values should be generated, including empty cells.\n   *   If true, the drop parameter is ignored and empty cells are retained.\n   * @param {boolean} [params.drop=true] - A flag indicating if empty cells should be removed.\n   */\n  function Aggregate(params) {\n    vegaDataflow.Transform.call(this, null, params);\n    this._adds = []; // array of added output tuples\n    this._mods = []; // array of modified output tuples\n    this._alen = 0; // number of active added tuples\n    this._mlen = 0; // number of active modified tuples\n    this._drop = true; // should empty aggregation cells be removed\n    this._cross = false; // produce full cross-product of group-by values\n\n    this._dims = []; // group-by dimension accessors\n    this._dnames = []; // group-by dimension names\n\n    this._measures = []; // collection of aggregation monoids\n    this._countOnly = false; // flag indicating only count aggregation\n    this._counts = null; // collection of count fields\n    this._prev = null; // previous aggregation cells\n\n    this._inputs = null; // array of dependent input tuple field names\n    this._outputs = null; // array of output tuple field names\n  }\n\n  Aggregate.Definition = {\n    'type': 'Aggregate',\n    'metadata': {\n      'generates': true,\n      'changes': true\n    },\n    'params': [{\n      'name': 'groupby',\n      'type': 'field',\n      'array': true\n    }, {\n      'name': 'ops',\n      'type': 'enum',\n      'array': true,\n      'values': ValidAggregateOps\n    }, {\n      'name': 'fields',\n      'type': 'field',\n      'null': true,\n      'array': true\n    }, {\n      'name': 'as',\n      'type': 'string',\n      'null': true,\n      'array': true\n    }, {\n      'name': 'drop',\n      'type': 'boolean',\n      'default': true\n    }, {\n      'name': 'cross',\n      'type': 'boolean',\n      'default': false\n    }, {\n      'name': 'key',\n      'type': 'field'\n    }]\n  };\n  vegaUtil.inherits(Aggregate, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      const aggr = this,\n        out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS),\n        mod = _.modified();\n      aggr.stamp = out.stamp;\n      if (aggr.value && (mod || pulse.modified(aggr._inputs, true))) {\n        aggr._prev = aggr.value;\n        aggr.value = mod ? aggr.init(_) : Object.create(null);\n        pulse.visit(pulse.SOURCE, t => aggr.add(t));\n      } else {\n        aggr.value = aggr.value || aggr.init(_);\n        pulse.visit(pulse.REM, t => aggr.rem(t));\n        pulse.visit(pulse.ADD, t => aggr.add(t));\n      }\n\n      // Indicate output fields and return aggregate tuples.\n      out.modifies(aggr._outputs);\n\n      // Should empty cells be dropped?\n      aggr._drop = _.drop !== false;\n\n      // If domain cross-product requested, generate empty cells as needed\n      // and ensure that empty cells are not dropped\n      if (_.cross && aggr._dims.length > 1) {\n        aggr._drop = false;\n        aggr.cross();\n      }\n      if (pulse.clean() && aggr._drop) {\n        out.clean(true).runAfter(() => this.clean());\n      }\n      return aggr.changes(out);\n    },\n    cross() {\n      const aggr = this,\n        curr = aggr.value,\n        dims = aggr._dnames,\n        vals = dims.map(() => ({})),\n        n = dims.length;\n\n      // collect all group-by domain values\n      function collect(cells) {\n        let key, i, t, v;\n        for (key in cells) {\n          t = cells[key].tuple;\n          for (i = 0; i < n; ++i) {\n            vals[i][v = t[dims[i]]] = v;\n          }\n        }\n      }\n      collect(aggr._prev);\n      collect(curr);\n\n      // iterate over key cross-product, create cells as needed\n      function generate(base, tuple, index) {\n        const name = dims[index],\n          v = vals[index++];\n        for (const k in v) {\n          const key = base ? base + '|' + k : k;\n          tuple[name] = v[k];\n          if (index < n) generate(key, tuple, index);else if (!curr[key]) aggr.cell(key, tuple);\n        }\n      }\n      generate('', {}, 0);\n    },\n    init(_) {\n      // initialize input and output fields\n      const inputs = this._inputs = [],\n        outputs = this._outputs = [],\n        inputMap = {};\n      function inputVisit(get) {\n        const fields = vegaUtil.array(vegaUtil.accessorFields(get)),\n          n = fields.length;\n        let i = 0,\n          f;\n        for (; i < n; ++i) {\n          if (!inputMap[f = fields[i]]) {\n            inputMap[f] = 1;\n            inputs.push(f);\n          }\n        }\n      }\n\n      // initialize group-by dimensions\n      this._dims = vegaUtil.array(_.groupby);\n      this._dnames = this._dims.map(d => {\n        const dname = vegaUtil.accessorName(d);\n        inputVisit(d);\n        outputs.push(dname);\n        return dname;\n      });\n      this.cellkey = _.key ? _.key : groupkey(this._dims);\n\n      // initialize aggregate measures\n      this._countOnly = true;\n      this._counts = [];\n      this._measures = [];\n      const fields = _.fields || [null],\n        ops = _.ops || ['count'],\n        as = _.as || [],\n        n = fields.length,\n        map = {};\n      let field, op, m, mname, outname, i;\n      if (n !== ops.length) {\n        vegaUtil.error('Unmatched number of fields and aggregate ops.');\n      }\n      for (i = 0; i < n; ++i) {\n        field = fields[i];\n        op = ops[i];\n        if (field == null && op !== 'count') {\n          vegaUtil.error('Null aggregate field specified.');\n        }\n        mname = vegaUtil.accessorName(field);\n        outname = measureName(op, mname, as[i]);\n        outputs.push(outname);\n        if (op === 'count') {\n          this._counts.push(outname);\n          continue;\n        }\n        m = map[mname];\n        if (!m) {\n          inputVisit(field);\n          m = map[mname] = [];\n          m.field = field;\n          this._measures.push(m);\n        }\n        if (op !== 'count') this._countOnly = false;\n        m.push(createMeasure(op, outname));\n      }\n      this._measures = this._measures.map(m => compileMeasures(m, m.field));\n      return Object.create(null); // aggregation cells (this.value)\n    },\n\n    // -- Cell Management -----\n\n    cellkey: groupkey(),\n    cell(key, t) {\n      let cell = this.value[key];\n      if (!cell) {\n        cell = this.value[key] = this.newcell(key, t);\n        this._adds[this._alen++] = cell;\n      } else if (cell.num === 0 && this._drop && cell.stamp < this.stamp) {\n        cell.stamp = this.stamp;\n        this._adds[this._alen++] = cell;\n      } else if (cell.stamp < this.stamp) {\n        cell.stamp = this.stamp;\n        this._mods[this._mlen++] = cell;\n      }\n      return cell;\n    },\n    newcell(key, t) {\n      const cell = {\n        key: key,\n        num: 0,\n        agg: null,\n        tuple: this.newtuple(t, this._prev && this._prev[key]),\n        stamp: this.stamp,\n        store: false\n      };\n      if (!this._countOnly) {\n        const measures = this._measures,\n          n = measures.length;\n        cell.agg = Array(n);\n        for (let i = 0; i < n; ++i) {\n          cell.agg[i] = new measures[i](cell);\n        }\n      }\n      if (cell.store) {\n        cell.data = new TupleStore();\n      }\n      return cell;\n    },\n    newtuple(t, p) {\n      const names = this._dnames,\n        dims = this._dims,\n        n = dims.length,\n        x = {};\n      for (let i = 0; i < n; ++i) {\n        x[names[i]] = dims[i](t);\n      }\n      return p ? vegaDataflow.replace(p.tuple, x) : vegaDataflow.ingest(x);\n    },\n    clean() {\n      const cells = this.value;\n      for (const key in cells) {\n        if (cells[key].num === 0) {\n          delete cells[key];\n        }\n      }\n    },\n    // -- Process Tuples -----\n\n    add(t) {\n      const key = this.cellkey(t),\n        cell = this.cell(key, t);\n      cell.num += 1;\n      if (this._countOnly) return;\n      if (cell.store) cell.data.add(t);\n      const agg = cell.agg;\n      for (let i = 0, n = agg.length; i < n; ++i) {\n        agg[i].add(agg[i].get(t), t);\n      }\n    },\n    rem(t) {\n      const key = this.cellkey(t),\n        cell = this.cell(key, t);\n      cell.num -= 1;\n      if (this._countOnly) return;\n      if (cell.store) cell.data.rem(t);\n      const agg = cell.agg;\n      for (let i = 0, n = agg.length; i < n; ++i) {\n        agg[i].rem(agg[i].get(t), t);\n      }\n    },\n    celltuple(cell) {\n      const tuple = cell.tuple,\n        counts = this._counts;\n\n      // consolidate stored values\n      if (cell.store) {\n        cell.data.values();\n      }\n\n      // update tuple properties\n      for (let i = 0, n = counts.length; i < n; ++i) {\n        tuple[counts[i]] = cell.num;\n      }\n      if (!this._countOnly) {\n        const agg = cell.agg;\n        for (let i = 0, n = agg.length; i < n; ++i) {\n          agg[i].set(tuple);\n        }\n      }\n      return tuple;\n    },\n    changes(out) {\n      const adds = this._adds,\n        mods = this._mods,\n        prev = this._prev,\n        drop = this._drop,\n        add = out.add,\n        rem = out.rem,\n        mod = out.mod;\n      let cell, key, i, n;\n      if (prev) for (key in prev) {\n        cell = prev[key];\n        if (!drop || cell.num) rem.push(cell.tuple);\n      }\n      for (i = 0, n = this._alen; i < n; ++i) {\n        add.push(this.celltuple(adds[i]));\n        adds[i] = null; // for garbage collection\n      }\n\n      for (i = 0, n = this._mlen; i < n; ++i) {\n        cell = mods[i];\n        (cell.num === 0 && drop ? rem : mod).push(this.celltuple(cell));\n        mods[i] = null; // for garbage collection\n      }\n\n      this._alen = this._mlen = 0; // reset list of active cells\n      this._prev = null;\n      return out;\n    }\n  });\n\n  // epsilon bias to offset floating point error (#1737)\n  const EPSILON$1 = 1e-14;\n\n  /**\n   * Generates a binning function for discretizing data.\n   * @constructor\n   * @param {object} params - The parameters for this operator. The\n   *   provided values should be valid options for the {@link bin} function.\n   * @param {function(object): *} params.field - The data field to bin.\n   */\n  function Bin(params) {\n    vegaDataflow.Transform.call(this, null, params);\n  }\n  Bin.Definition = {\n    'type': 'Bin',\n    'metadata': {\n      'modifies': true\n    },\n    'params': [{\n      'name': 'field',\n      'type': 'field',\n      'required': true\n    }, {\n      'name': 'interval',\n      'type': 'boolean',\n      'default': true\n    }, {\n      'name': 'anchor',\n      'type': 'number'\n    }, {\n      'name': 'maxbins',\n      'type': 'number',\n      'default': 20\n    }, {\n      'name': 'base',\n      'type': 'number',\n      'default': 10\n    }, {\n      'name': 'divide',\n      'type': 'number',\n      'array': true,\n      'default': [5, 2]\n    }, {\n      'name': 'extent',\n      'type': 'number',\n      'array': true,\n      'length': 2,\n      'required': true\n    }, {\n      'name': 'span',\n      'type': 'number'\n    }, {\n      'name': 'step',\n      'type': 'number'\n    }, {\n      'name': 'steps',\n      'type': 'number',\n      'array': true\n    }, {\n      'name': 'minstep',\n      'type': 'number',\n      'default': 0\n    }, {\n      'name': 'nice',\n      'type': 'boolean',\n      'default': true\n    }, {\n      'name': 'name',\n      'type': 'string'\n    }, {\n      'name': 'as',\n      'type': 'string',\n      'array': true,\n      'length': 2,\n      'default': ['bin0', 'bin1']\n    }]\n  };\n  vegaUtil.inherits(Bin, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      const band = _.interval !== false,\n        bins = this._bins(_),\n        start = bins.start,\n        step = bins.step,\n        as = _.as || ['bin0', 'bin1'],\n        b0 = as[0],\n        b1 = as[1];\n      let flag;\n      if (_.modified()) {\n        pulse = pulse.reflow(true);\n        flag = pulse.SOURCE;\n      } else {\n        flag = pulse.modified(vegaUtil.accessorFields(_.field)) ? pulse.ADD_MOD : pulse.ADD;\n      }\n      pulse.visit(flag, band ? t => {\n        const v = bins(t);\n        // minimum bin value (inclusive)\n        t[b0] = v;\n        // maximum bin value (exclusive)\n        // use convoluted math for better floating point agreement\n        // see https://github.com/vega/vega/issues/830\n        // infinite values propagate through this formula! #2227\n        t[b1] = v == null ? null : start + step * (1 + (v - start) / step);\n      } : t => t[b0] = bins(t));\n      return pulse.modifies(band ? as : b0);\n    },\n    _bins(_) {\n      if (this.value && !_.modified()) {\n        return this.value;\n      }\n      const field = _.field,\n        bins = vegaStatistics.bin(_),\n        step = bins.step;\n      let start = bins.start,\n        stop = start + Math.ceil((bins.stop - start) / step) * step,\n        a,\n        d;\n      if ((a = _.anchor) != null) {\n        d = a - (start + step * Math.floor((a - start) / step));\n        start += d;\n        stop += d;\n      }\n      const f = function (t) {\n        let v = vegaUtil.toNumber(field(t));\n        return v == null ? null : v < start ? -Infinity : v > stop ? +Infinity : (v = Math.max(start, Math.min(v, stop - step)), start + step * Math.floor(EPSILON$1 + (v - start) / step));\n      };\n      f.start = start;\n      f.stop = bins.stop;\n      f.step = step;\n      return this.value = vegaUtil.accessor(f, vegaUtil.accessorFields(field), _.name || 'bin_' + vegaUtil.accessorName(field));\n    }\n  });\n\n  function SortedList (idFunc, source, input) {\n    const $ = idFunc;\n    let data = source || [],\n      add = input || [],\n      rem = {},\n      cnt = 0;\n    return {\n      add: t => add.push(t),\n      remove: t => rem[$(t)] = ++cnt,\n      size: () => data.length,\n      data: (compare, resort) => {\n        if (cnt) {\n          data = data.filter(t => !rem[$(t)]);\n          rem = {};\n          cnt = 0;\n        }\n        if (resort && compare) {\n          data.sort(compare);\n        }\n        if (add.length) {\n          data = compare ? vegaUtil.merge(compare, data, add.sort(compare)) : data.concat(add);\n          add = [];\n        }\n        return data;\n      }\n    };\n  }\n\n  /**\n   * Collects all data tuples that pass through this operator.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(*,*): number} [params.sort] - An optional\n   *   comparator function for additionally sorting the collected tuples.\n   */\n  function Collect(params) {\n    vegaDataflow.Transform.call(this, [], params);\n  }\n  Collect.Definition = {\n    'type': 'Collect',\n    'metadata': {\n      'source': true\n    },\n    'params': [{\n      'name': 'sort',\n      'type': 'compare'\n    }]\n  };\n  vegaUtil.inherits(Collect, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      const out = pulse.fork(pulse.ALL),\n        list = SortedList(vegaDataflow.tupleid, this.value, out.materialize(out.ADD).add),\n        sort = _.sort,\n        mod = pulse.changed() || sort && (_.modified('sort') || pulse.modified(sort.fields));\n      out.visit(out.REM, list.remove);\n      this.modified(mod);\n      this.value = out.source = list.data(vegaDataflow.stableCompare(sort), mod);\n\n      // propagate tree root if defined\n      if (pulse.source && pulse.source.root) {\n        this.value.root = pulse.source.root;\n      }\n      return out;\n    }\n  });\n\n  /**\n   * Generates a comparator function.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {Array<string|function>} params.fields - The fields to compare.\n   * @param {Array<string>} [params.orders] - The sort orders.\n   *   Each entry should be one of \"ascending\" (default) or \"descending\".\n   */\n  function Compare(params) {\n    vegaDataflow.Operator.call(this, null, update$5, params);\n  }\n  vegaUtil.inherits(Compare, vegaDataflow.Operator);\n  function update$5(_) {\n    return this.value && !_.modified() ? this.value : vegaUtil.compare(_.fields, _.orders);\n  }\n\n  /**\n   * Count regexp-defined pattern occurrences in a text field.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(object): *} params.field - An accessor for the text field.\n   * @param {string} [params.pattern] - RegExp string defining the text pattern.\n   * @param {string} [params.case] - One of 'lower', 'upper' or null (mixed) case.\n   * @param {string} [params.stopwords] - RegExp string of words to ignore.\n   */\n  function CountPattern(params) {\n    vegaDataflow.Transform.call(this, null, params);\n  }\n  CountPattern.Definition = {\n    'type': 'CountPattern',\n    'metadata': {\n      'generates': true,\n      'changes': true\n    },\n    'params': [{\n      'name': 'field',\n      'type': 'field',\n      'required': true\n    }, {\n      'name': 'case',\n      'type': 'enum',\n      'values': ['upper', 'lower', 'mixed'],\n      'default': 'mixed'\n    }, {\n      'name': 'pattern',\n      'type': 'string',\n      'default': '[\\\\w\"]+'\n    }, {\n      'name': 'stopwords',\n      'type': 'string',\n      'default': ''\n    }, {\n      'name': 'as',\n      'type': 'string',\n      'array': true,\n      'length': 2,\n      'default': ['text', 'count']\n    }]\n  };\n  function tokenize(text, tcase, match) {\n    switch (tcase) {\n      case 'upper':\n        text = text.toUpperCase();\n        break;\n      case 'lower':\n        text = text.toLowerCase();\n        break;\n    }\n    return text.match(match);\n  }\n  vegaUtil.inherits(CountPattern, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      const process = update => tuple => {\n        var tokens = tokenize(get(tuple), _.case, match) || [],\n          t;\n        for (var i = 0, n = tokens.length; i < n; ++i) {\n          if (!stop.test(t = tokens[i])) update(t);\n        }\n      };\n      const init = this._parameterCheck(_, pulse),\n        counts = this._counts,\n        match = this._match,\n        stop = this._stop,\n        get = _.field,\n        as = _.as || ['text', 'count'],\n        add = process(t => counts[t] = 1 + (counts[t] || 0)),\n        rem = process(t => counts[t] -= 1);\n      if (init) {\n        pulse.visit(pulse.SOURCE, add);\n      } else {\n        pulse.visit(pulse.ADD, add);\n        pulse.visit(pulse.REM, rem);\n      }\n      return this._finish(pulse, as); // generate output tuples\n    },\n\n    _parameterCheck(_, pulse) {\n      let init = false;\n      if (_.modified('stopwords') || !this._stop) {\n        this._stop = new RegExp('^' + (_.stopwords || '') + '$', 'i');\n        init = true;\n      }\n      if (_.modified('pattern') || !this._match) {\n        this._match = new RegExp(_.pattern || '[\\\\w\\']+', 'g');\n        init = true;\n      }\n      if (_.modified('field') || pulse.modified(_.field.fields)) {\n        init = true;\n      }\n      if (init) this._counts = {};\n      return init;\n    },\n    _finish(pulse, as) {\n      const counts = this._counts,\n        tuples = this._tuples || (this._tuples = {}),\n        text = as[0],\n        count = as[1],\n        out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS);\n      let w, t, c;\n      for (w in counts) {\n        t = tuples[w];\n        c = counts[w] || 0;\n        if (!t && c) {\n          tuples[w] = t = vegaDataflow.ingest({});\n          t[text] = w;\n          t[count] = c;\n          out.add.push(t);\n        } else if (c === 0) {\n          if (t) out.rem.push(t);\n          counts[w] = null;\n          tuples[w] = null;\n        } else if (t[count] !== c) {\n          t[count] = c;\n          out.mod.push(t);\n        }\n      }\n      return out.modifies(as);\n    }\n  });\n\n  /**\n   * Perform a cross-product of a tuple stream with itself.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(object):boolean} [params.filter] - An optional filter\n   *   function for selectively including tuples in the cross product.\n   * @param {Array<string>} [params.as] - The names of the output fields.\n   */\n  function Cross(params) {\n    vegaDataflow.Transform.call(this, null, params);\n  }\n  Cross.Definition = {\n    'type': 'Cross',\n    'metadata': {\n      'generates': true\n    },\n    'params': [{\n      'name': 'filter',\n      'type': 'expr'\n    }, {\n      'name': 'as',\n      'type': 'string',\n      'array': true,\n      'length': 2,\n      'default': ['a', 'b']\n    }]\n  };\n  vegaUtil.inherits(Cross, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      const out = pulse.fork(pulse.NO_SOURCE),\n        as = _.as || ['a', 'b'],\n        a = as[0],\n        b = as[1],\n        reset = !this.value || pulse.changed(pulse.ADD_REM) || _.modified('as') || _.modified('filter');\n      let data = this.value;\n      if (reset) {\n        if (data) out.rem = data;\n        data = pulse.materialize(pulse.SOURCE).source;\n        out.add = this.value = cross(data, a, b, _.filter || vegaUtil.truthy);\n      } else {\n        out.mod = data;\n      }\n      out.source = this.value;\n      return out.modifies(as);\n    }\n  });\n  function cross(input, a, b, filter) {\n    var data = [],\n      t = {},\n      n = input.length,\n      i = 0,\n      j,\n      left;\n    for (; i < n; ++i) {\n      t[a] = left = input[i];\n      for (j = 0; j < n; ++j) {\n        t[b] = input[j];\n        if (filter(t)) {\n          data.push(vegaDataflow.ingest(t));\n          t = {};\n          t[a] = left;\n        }\n      }\n    }\n    return data;\n  }\n\n  const Distributions = {\n    kde: vegaStatistics.randomKDE,\n    mixture: vegaStatistics.randomMixture,\n    normal: vegaStatistics.randomNormal,\n    lognormal: vegaStatistics.randomLogNormal,\n    uniform: vegaStatistics.randomUniform\n  };\n  const DISTRIBUTIONS = 'distributions',\n    FUNCTION = 'function',\n    FIELD = 'field';\n\n  /**\n   * Parse a parameter object for a probability distribution.\n   * @param {object} def - The distribution parameter object.\n   * @param {function():Array<object>} - A method for requesting\n   *   source data. Used for distributions (such as KDE) that\n   *   require sample data points. This method will only be\n   *   invoked if the 'from' parameter for a target data source\n   *   is not provided. Typically this method returns backing\n   *   source data for a Pulse object.\n   * @return {object} - The output distribution object.\n   */\n  function parse(def, data) {\n    const func = def[FUNCTION];\n    if (!vegaUtil.hasOwnProperty(Distributions, func)) {\n      vegaUtil.error('Unknown distribution function: ' + func);\n    }\n    const d = Distributions[func]();\n    for (const name in def) {\n      // if data field, extract values\n      if (name === FIELD) {\n        d.data((def.from || data()).map(def[name]));\n      }\n\n      // if distribution mixture, recurse to parse each definition\n      else if (name === DISTRIBUTIONS) {\n        d[name](def[name].map(_ => parse(_, data)));\n      }\n\n      // otherwise, simply set the parameter\n      else if (typeof d[name] === FUNCTION) {\n        d[name](def[name]);\n      }\n    }\n    return d;\n  }\n\n  /**\n   * Grid sample points for a probability density. Given a distribution and\n   * a sampling extent, will generate points suitable for plotting either\n   * PDF (probability density function) or CDF (cumulative distribution\n   * function) curves.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {object} params.distribution - The probability distribution. This\n   *   is an object parameter dependent on the distribution type.\n   * @param {string} [params.method='pdf'] - The distribution method to sample.\n   *   One of 'pdf' or 'cdf'.\n   * @param {Array<number>} [params.extent] - The [min, max] extent over which\n   *   to sample the distribution. This argument is required in most cases, but\n   *   can be omitted if the distribution (e.g., 'kde') supports a 'data' method\n   *   that returns numerical sample points from which the extent can be deduced.\n   * @param {number} [params.minsteps=25] - The minimum number of curve samples\n   *   for plotting the density.\n   * @param {number} [params.maxsteps=200] - The maximum number of curve samples\n   *   for plotting the density.\n   * @param {number} [params.steps] - The exact number of curve samples for\n   *   plotting the density. If specified, overrides both minsteps and maxsteps\n   *   to set an exact number of uniform samples. Useful in conjunction with\n   *   a fixed extent to ensure consistent sample points for stacked densities.\n   */\n  function Density(params) {\n    vegaDataflow.Transform.call(this, null, params);\n  }\n  const distributions = [{\n    'key': {\n      'function': 'normal'\n    },\n    'params': [{\n      'name': 'mean',\n      'type': 'number',\n      'default': 0\n    }, {\n      'name': 'stdev',\n      'type': 'number',\n      'default': 1\n    }]\n  }, {\n    'key': {\n      'function': 'lognormal'\n    },\n    'params': [{\n      'name': 'mean',\n      'type': 'number',\n      'default': 0\n    }, {\n      'name': 'stdev',\n      'type': 'number',\n      'default': 1\n    }]\n  }, {\n    'key': {\n      'function': 'uniform'\n    },\n    'params': [{\n      'name': 'min',\n      'type': 'number',\n      'default': 0\n    }, {\n      'name': 'max',\n      'type': 'number',\n      'default': 1\n    }]\n  }, {\n    'key': {\n      'function': 'kde'\n    },\n    'params': [{\n      'name': 'field',\n      'type': 'field',\n      'required': true\n    }, {\n      'name': 'from',\n      'type': 'data'\n    }, {\n      'name': 'bandwidth',\n      'type': 'number',\n      'default': 0\n    }]\n  }];\n  const mixture = {\n    'key': {\n      'function': 'mixture'\n    },\n    'params': [{\n      'name': 'distributions',\n      'type': 'param',\n      'array': true,\n      'params': distributions\n    }, {\n      'name': 'weights',\n      'type': 'number',\n      'array': true\n    }]\n  };\n  Density.Definition = {\n    'type': 'Density',\n    'metadata': {\n      'generates': true\n    },\n    'params': [{\n      'name': 'extent',\n      'type': 'number',\n      'array': true,\n      'length': 2\n    }, {\n      'name': 'steps',\n      'type': 'number'\n    }, {\n      'name': 'minsteps',\n      'type': 'number',\n      'default': 25\n    }, {\n      'name': 'maxsteps',\n      'type': 'number',\n      'default': 200\n    }, {\n      'name': 'method',\n      'type': 'string',\n      'default': 'pdf',\n      'values': ['pdf', 'cdf']\n    }, {\n      'name': 'distribution',\n      'type': 'param',\n      'params': distributions.concat(mixture)\n    }, {\n      'name': 'as',\n      'type': 'string',\n      'array': true,\n      'default': ['value', 'density']\n    }]\n  };\n  vegaUtil.inherits(Density, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      const out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS);\n      if (!this.value || pulse.changed() || _.modified()) {\n        const dist = parse(_.distribution, source(pulse)),\n          minsteps = _.steps || _.minsteps || 25,\n          maxsteps = _.steps || _.maxsteps || 200;\n        let method = _.method || 'pdf';\n        if (method !== 'pdf' && method !== 'cdf') {\n          vegaUtil.error('Invalid density method: ' + method);\n        }\n        if (!_.extent && !dist.data) {\n          vegaUtil.error('Missing density extent parameter.');\n        }\n        method = dist[method];\n        const as = _.as || ['value', 'density'],\n          domain = _.extent || vegaUtil.extent(dist.data()),\n          values = vegaStatistics.sampleCurve(method, domain, minsteps, maxsteps).map(v => {\n            const tuple = {};\n            tuple[as[0]] = v[0];\n            tuple[as[1]] = v[1];\n            return vegaDataflow.ingest(tuple);\n          });\n        if (this.value) out.rem = this.value;\n        this.value = out.add = out.source = values;\n      }\n      return out;\n    }\n  });\n  function source(pulse) {\n    return () => pulse.materialize(pulse.SOURCE).source;\n  }\n\n  // use either provided alias or accessor field name\n  function fieldNames(fields, as) {\n    if (!fields) return null;\n    return fields.map((f, i) => as[i] || vegaUtil.accessorName(f));\n  }\n  function partition$1(data, groupby, field) {\n    const groups = [],\n      get = f => f(t);\n    let map, i, n, t, k, g;\n\n    // partition data points into groups\n    if (groupby == null) {\n      groups.push(data.map(field));\n    } else {\n      for (map = {}, i = 0, n = data.length; i < n; ++i) {\n        t = data[i];\n        k = groupby.map(get);\n        g = map[k];\n        if (!g) {\n          map[k] = g = [];\n          g.dims = k;\n          groups.push(g);\n        }\n        g.push(field(t));\n      }\n    }\n    return groups;\n  }\n\n  const Output = 'bin';\n\n  /**\n   * Dot density binning for dot plot construction.\n   * Based on Leland Wilkinson, Dot Plots, The American Statistician, 1999.\n   * https://www.cs.uic.edu/~wilkinson/Publications/dotplots.pdf\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(object): *} params.field - The value field to bin.\n   * @param {Array<function(object): *>} [params.groupby] - An array of accessors to groupby.\n   * @param {number} [params.step] - The step size (bin width) within which dots should be\n   *   stacked. Defaults to 1/30 of the extent of the data *field*.\n   * @param {boolean} [params.smooth=false] - A boolean flag indicating if dot density\n   *   stacks should be smoothed to reduce variance.\n   */\n  function DotBin(params) {\n    vegaDataflow.Transform.call(this, null, params);\n  }\n  DotBin.Definition = {\n    'type': 'DotBin',\n    'metadata': {\n      'modifies': true\n    },\n    'params': [{\n      'name': 'field',\n      'type': 'field',\n      'required': true\n    }, {\n      'name': 'groupby',\n      'type': 'field',\n      'array': true\n    }, {\n      'name': 'step',\n      'type': 'number'\n    }, {\n      'name': 'smooth',\n      'type': 'boolean',\n      'default': false\n    }, {\n      'name': 'as',\n      'type': 'string',\n      'default': Output\n    }]\n  };\n  const autostep = (data, field) => vegaUtil.span(vegaUtil.extent(data, field)) / 30;\n  vegaUtil.inherits(DotBin, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      if (this.value && !(_.modified() || pulse.changed())) {\n        return pulse; // early exit\n      }\n\n      const source = pulse.materialize(pulse.SOURCE).source,\n        groups = partition$1(pulse.source, _.groupby, vegaUtil.identity),\n        smooth = _.smooth || false,\n        field = _.field,\n        step = _.step || autostep(source, field),\n        sort = vegaDataflow.stableCompare((a, b) => field(a) - field(b)),\n        as = _.as || Output,\n        n = groups.length;\n\n      // compute dotplot bins per group\n      let min = Infinity,\n        max = -Infinity,\n        i = 0,\n        j;\n      for (; i < n; ++i) {\n        const g = groups[i].sort(sort);\n        j = -1;\n        for (const v of vegaStatistics.dotbin(g, step, smooth, field)) {\n          if (v < min) min = v;\n          if (v > max) max = v;\n          g[++j][as] = v;\n        }\n      }\n      this.value = {\n        start: min,\n        stop: max,\n        step: step\n      };\n      return pulse.reflow(true).modifies(as);\n    }\n  });\n\n  /**\n   * Wraps an expression function with access to external parameters.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function} params.expr - The expression function. The\n   *  function should accept both a datum and a parameter object.\n   *  This operator's value will be a new function that wraps the\n   *  expression function with access to this operator's parameters.\n   */\n  function Expression(params) {\n    vegaDataflow.Operator.call(this, null, update$4, params);\n    this.modified(true);\n  }\n  vegaUtil.inherits(Expression, vegaDataflow.Operator);\n  function update$4(_) {\n    const expr = _.expr;\n    return this.value && !_.modified('expr') ? this.value : vegaUtil.accessor(datum => expr(datum, _), vegaUtil.accessorFields(expr), vegaUtil.accessorName(expr));\n  }\n\n  /**\n   * Computes extents (min/max) for a data field.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(object): *} params.field - The field over which to compute extends.\n   */\n  function Extent(params) {\n    vegaDataflow.Transform.call(this, [undefined, undefined], params);\n  }\n  Extent.Definition = {\n    'type': 'Extent',\n    'metadata': {},\n    'params': [{\n      'name': 'field',\n      'type': 'field',\n      'required': true\n    }]\n  };\n  vegaUtil.inherits(Extent, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      const extent = this.value,\n        field = _.field,\n        mod = pulse.changed() || pulse.modified(field.fields) || _.modified('field');\n      let min = extent[0],\n        max = extent[1];\n      if (mod || min == null) {\n        min = +Infinity;\n        max = -Infinity;\n      }\n      pulse.visit(mod ? pulse.SOURCE : pulse.ADD, t => {\n        const v = vegaUtil.toNumber(field(t));\n        if (v != null) {\n          // NaNs will fail all comparisons!\n          if (v < min) min = v;\n          if (v > max) max = v;\n        }\n      });\n      if (!Number.isFinite(min) || !Number.isFinite(max)) {\n        let name = vegaUtil.accessorName(field);\n        if (name) name = ` for field \"${name}\"`;\n        pulse.dataflow.warn(`Infinite extent${name}: [${min}, ${max}]`);\n        min = max = undefined;\n      }\n      this.value = [min, max];\n    }\n  });\n\n  /**\n   * Provides a bridge between a parent transform and a target subflow that\n   * consumes only a subset of the tuples that pass through the parent.\n   * @constructor\n   * @param {Pulse} pulse - A pulse to use as the value of this operator.\n   * @param {Transform} parent - The parent transform (typically a Facet instance).\n   */\n  function Subflow(pulse, parent) {\n    vegaDataflow.Operator.call(this, pulse);\n    this.parent = parent;\n    this.count = 0;\n  }\n  vegaUtil.inherits(Subflow, vegaDataflow.Operator, {\n    /**\n     * Routes pulses from this subflow to a target transform.\n     * @param {Transform} target - A transform that receives the subflow of tuples.\n     */\n    connect(target) {\n      this.detachSubflow = target.detachSubflow;\n      this.targets().add(target);\n      return target.source = this;\n    },\n    /**\n     * Add an 'add' tuple to the subflow pulse.\n     * @param {Tuple} t - The tuple being added.\n     */\n    add(t) {\n      this.count += 1;\n      this.value.add.push(t);\n    },\n    /**\n     * Add a 'rem' tuple to the subflow pulse.\n     * @param {Tuple} t - The tuple being removed.\n     */\n    rem(t) {\n      this.count -= 1;\n      this.value.rem.push(t);\n    },\n    /**\n     * Add a 'mod' tuple to the subflow pulse.\n     * @param {Tuple} t - The tuple being modified.\n     */\n    mod(t) {\n      this.value.mod.push(t);\n    },\n    /**\n     * Re-initialize this operator's pulse value.\n     * @param {Pulse} pulse - The pulse to copy from.\n     * @see Pulse.init\n     */\n    init(pulse) {\n      this.value.init(pulse, pulse.NO_SOURCE);\n    },\n    /**\n     * Evaluate this operator. This method overrides the\n     * default behavior to simply return the contained pulse value.\n     * @return {Pulse}\n     */\n    evaluate() {\n      // assert: this.value.stamp === pulse.stamp\n      return this.value;\n    }\n  });\n\n  /**\n   * Facets a dataflow into a set of subflows based on a key.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(Dataflow, string): Operator} params.subflow - A function\n   *   that generates a subflow of operators and returns its root operator.\n   * @param {function(object): *} params.key - The key field to facet by.\n   */\n  function Facet(params) {\n    vegaDataflow.Transform.call(this, {}, params);\n    this._keys = vegaUtil.fastmap(); // cache previously calculated key values\n\n    // keep track of active subflows, use as targets array for listeners\n    // this allows us to limit propagation to only updated subflows\n    const a = this._targets = [];\n    a.active = 0;\n    a.forEach = f => {\n      for (let i = 0, n = a.active; i < n; ++i) {\n        f(a[i], i, a);\n      }\n    };\n  }\n  vegaUtil.inherits(Facet, vegaDataflow.Transform, {\n    activate(flow) {\n      this._targets[this._targets.active++] = flow;\n    },\n    // parent argument provided by PreFacet subclass\n    subflow(key, flow, pulse, parent) {\n      const flows = this.value;\n      let sf = vegaUtil.hasOwnProperty(flows, key) && flows[key],\n        df,\n        p;\n      if (!sf) {\n        p = parent || (p = this._group[key]) && p.tuple;\n        df = pulse.dataflow;\n        sf = new Subflow(pulse.fork(pulse.NO_SOURCE), this);\n        df.add(sf).connect(flow(df, key, p));\n        flows[key] = sf;\n        this.activate(sf);\n      } else if (sf.value.stamp < pulse.stamp) {\n        sf.init(pulse);\n        this.activate(sf);\n      }\n      return sf;\n    },\n    clean() {\n      const flows = this.value;\n      let detached = 0;\n      for (const key in flows) {\n        if (flows[key].count === 0) {\n          const detach = flows[key].detachSubflow;\n          if (detach) detach();\n          delete flows[key];\n          ++detached;\n        }\n      }\n\n      // remove inactive targets from the active targets array\n      if (detached) {\n        const active = this._targets.filter(sf => sf && sf.count > 0);\n        this.initTargets(active);\n      }\n    },\n    initTargets(act) {\n      const a = this._targets,\n        n = a.length,\n        m = act ? act.length : 0;\n      let i = 0;\n      for (; i < m; ++i) {\n        a[i] = act[i];\n      }\n      for (; i < n && a[i] != null; ++i) {\n        a[i] = null; // ensure old flows can be garbage collected\n      }\n\n      a.active = m;\n    },\n    transform(_, pulse) {\n      const df = pulse.dataflow,\n        key = _.key,\n        flow = _.subflow,\n        cache = this._keys,\n        rekey = _.modified('key'),\n        subflow = key => this.subflow(key, flow, pulse);\n      this._group = _.group || {};\n      this.initTargets(); // reset list of active subflows\n\n      pulse.visit(pulse.REM, t => {\n        const id = vegaDataflow.tupleid(t),\n          k = cache.get(id);\n        if (k !== undefined) {\n          cache.delete(id);\n          subflow(k).rem(t);\n        }\n      });\n      pulse.visit(pulse.ADD, t => {\n        const k = key(t);\n        cache.set(vegaDataflow.tupleid(t), k);\n        subflow(k).add(t);\n      });\n      if (rekey || pulse.modified(key.fields)) {\n        pulse.visit(pulse.MOD, t => {\n          const id = vegaDataflow.tupleid(t),\n            k0 = cache.get(id),\n            k1 = key(t);\n          if (k0 === k1) {\n            subflow(k1).mod(t);\n          } else {\n            cache.set(id, k1);\n            subflow(k0).rem(t);\n            subflow(k1).add(t);\n          }\n        });\n      } else if (pulse.changed(pulse.MOD)) {\n        pulse.visit(pulse.MOD, t => {\n          subflow(cache.get(vegaDataflow.tupleid(t))).mod(t);\n        });\n      }\n      if (rekey) {\n        pulse.visit(pulse.REFLOW, t => {\n          const id = vegaDataflow.tupleid(t),\n            k0 = cache.get(id),\n            k1 = key(t);\n          if (k0 !== k1) {\n            cache.set(id, k1);\n            subflow(k0).rem(t);\n            subflow(k1).add(t);\n          }\n        });\n      }\n      if (pulse.clean()) {\n        df.runAfter(() => {\n          this.clean();\n          cache.clean();\n        });\n      } else if (cache.empty > df.cleanThreshold) {\n        df.runAfter(cache.clean);\n      }\n      return pulse;\n    }\n  });\n\n  /**\n   * Generates one or more field accessor functions.\n   * If the 'name' parameter is an array, an array of field accessors\n   * will be created and the 'as' parameter will be ignored.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {string} params.name - The field name(s) to access.\n   * @param {string} params.as - The accessor function name.\n   */\n  function Field(params) {\n    vegaDataflow.Operator.call(this, null, update$3, params);\n  }\n  vegaUtil.inherits(Field, vegaDataflow.Operator);\n  function update$3(_) {\n    return this.value && !_.modified() ? this.value : vegaUtil.isArray(_.name) ? vegaUtil.array(_.name).map(f => vegaUtil.field(f)) : vegaUtil.field(_.name, _.as);\n  }\n\n  /**\n   * Filters data tuples according to a predicate function.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(object): *} params.expr - The predicate expression function\n   *   that determines a tuple's filter status. Truthy values pass the filter.\n   */\n  function Filter(params) {\n    vegaDataflow.Transform.call(this, vegaUtil.fastmap(), params);\n  }\n  Filter.Definition = {\n    'type': 'Filter',\n    'metadata': {\n      'changes': true\n    },\n    'params': [{\n      'name': 'expr',\n      'type': 'expr',\n      'required': true\n    }]\n  };\n  vegaUtil.inherits(Filter, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      const df = pulse.dataflow,\n        cache = this.value,\n        // cache ids of filtered tuples\n        output = pulse.fork(),\n        add = output.add,\n        rem = output.rem,\n        mod = output.mod,\n        test = _.expr;\n      let isMod = true;\n      pulse.visit(pulse.REM, t => {\n        const id = vegaDataflow.tupleid(t);\n        if (!cache.has(id)) rem.push(t);else cache.delete(id);\n      });\n      pulse.visit(pulse.ADD, t => {\n        if (test(t, _)) add.push(t);else cache.set(vegaDataflow.tupleid(t), 1);\n      });\n      function revisit(t) {\n        const id = vegaDataflow.tupleid(t),\n          b = test(t, _),\n          s = cache.get(id);\n        if (b && s) {\n          cache.delete(id);\n          add.push(t);\n        } else if (!b && !s) {\n          cache.set(id, 1);\n          rem.push(t);\n        } else if (isMod && b && !s) {\n          mod.push(t);\n        }\n      }\n      pulse.visit(pulse.MOD, revisit);\n      if (_.modified()) {\n        isMod = false;\n        pulse.visit(pulse.REFLOW, revisit);\n      }\n      if (cache.empty > df.cleanThreshold) df.runAfter(cache.clean);\n      return output;\n    }\n  });\n\n  /**\n   * Flattens array-typed field values into new data objects.\n   * If multiple fields are specified, they are treated as parallel arrays,\n   * with output values included for each matching index (or null if missing).\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {Array<function(object): *>} params.fields - An array of field\n   *   accessors for the tuple fields that should be flattened.\n   * @param {string} [params.index] - Optional output field name for index\n   *   value. If unspecified, no index field is included in the output.\n   * @param {Array<string>} [params.as] - Output field names for flattened\n   *   array fields. Any unspecified fields will use the field name provided\n   *   by the fields accessors.\n   */\n  function Flatten(params) {\n    vegaDataflow.Transform.call(this, [], params);\n  }\n  Flatten.Definition = {\n    'type': 'Flatten',\n    'metadata': {\n      'generates': true\n    },\n    'params': [{\n      'name': 'fields',\n      'type': 'field',\n      'array': true,\n      'required': true\n    }, {\n      'name': 'index',\n      'type': 'string'\n    }, {\n      'name': 'as',\n      'type': 'string',\n      'array': true\n    }]\n  };\n  vegaUtil.inherits(Flatten, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      const out = pulse.fork(pulse.NO_SOURCE),\n        fields = _.fields,\n        as = fieldNames(fields, _.as || []),\n        index = _.index || null,\n        m = as.length;\n\n      // remove any previous results\n      out.rem = this.value;\n\n      // generate flattened tuples\n      pulse.visit(pulse.SOURCE, t => {\n        const arrays = fields.map(f => f(t)),\n          maxlen = arrays.reduce((l, a) => Math.max(l, a.length), 0);\n        let i = 0,\n          j,\n          d,\n          v;\n        for (; i < maxlen; ++i) {\n          d = vegaDataflow.derive(t);\n          for (j = 0; j < m; ++j) {\n            d[as[j]] = (v = arrays[j][i]) == null ? null : v;\n          }\n          if (index) {\n            d[index] = i;\n          }\n          out.add.push(d);\n        }\n      });\n      this.value = out.source = out.add;\n      if (index) out.modifies(index);\n      return out.modifies(as);\n    }\n  });\n\n  /**\n   * Folds one more tuple fields into multiple tuples in which the field\n   * name and values are available under new 'key' and 'value' fields.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(object): *} params.fields - An array of field accessors\n   *   for the tuple fields that should be folded.\n   * @param {Array<string>} [params.as] - Output field names for folded key\n   *   and value fields, defaults to ['key', 'value'].\n   */\n  function Fold(params) {\n    vegaDataflow.Transform.call(this, [], params);\n  }\n  Fold.Definition = {\n    'type': 'Fold',\n    'metadata': {\n      'generates': true\n    },\n    'params': [{\n      'name': 'fields',\n      'type': 'field',\n      'array': true,\n      'required': true\n    }, {\n      'name': 'as',\n      'type': 'string',\n      'array': true,\n      'length': 2,\n      'default': ['key', 'value']\n    }]\n  };\n  vegaUtil.inherits(Fold, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      const out = pulse.fork(pulse.NO_SOURCE),\n        fields = _.fields,\n        fnames = fields.map(vegaUtil.accessorName),\n        as = _.as || ['key', 'value'],\n        k = as[0],\n        v = as[1],\n        n = fields.length;\n      out.rem = this.value;\n      pulse.visit(pulse.SOURCE, t => {\n        for (let i = 0, d; i < n; ++i) {\n          d = vegaDataflow.derive(t);\n          d[k] = fnames[i];\n          d[v] = fields[i](t);\n          out.add.push(d);\n        }\n      });\n      this.value = out.source = out.add;\n      return out.modifies(as);\n    }\n  });\n\n  /**\n   * Invokes a function for each data tuple and saves the results as a new field.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(object): *} params.expr - The formula function to invoke for each tuple.\n   * @param {string} params.as - The field name under which to save the result.\n   * @param {boolean} [params.initonly=false] - If true, the formula is applied to\n   *   added tuples only, and does not update in response to modifications.\n   */\n  function Formula(params) {\n    vegaDataflow.Transform.call(this, null, params);\n  }\n  Formula.Definition = {\n    'type': 'Formula',\n    'metadata': {\n      'modifies': true\n    },\n    'params': [{\n      'name': 'expr',\n      'type': 'expr',\n      'required': true\n    }, {\n      'name': 'as',\n      'type': 'string',\n      'required': true\n    }, {\n      'name': 'initonly',\n      'type': 'boolean'\n    }]\n  };\n  vegaUtil.inherits(Formula, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      const func = _.expr,\n        as = _.as,\n        mod = _.modified(),\n        flag = _.initonly ? pulse.ADD : mod ? pulse.SOURCE : pulse.modified(func.fields) || pulse.modified(as) ? pulse.ADD_MOD : pulse.ADD;\n      if (mod) {\n        // parameters updated, need to reflow\n        pulse = pulse.materialize().reflow(true);\n      }\n      if (!_.initonly) {\n        pulse.modifies(as);\n      }\n      return pulse.visit(flag, t => t[as] = func(t, _));\n    }\n  });\n\n  /**\n   * Generates data tuples using a provided generator function.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(Parameters): object} params.generator - A tuple generator\n   *   function. This function is given the operator parameters as input.\n   *   Changes to any additional parameters will not trigger re-calculation\n   *   of previously generated tuples. Only future tuples are affected.\n   * @param {number} params.size - The number of tuples to produce.\n   */\n  function Generate(params) {\n    vegaDataflow.Transform.call(this, [], params);\n  }\n  vegaUtil.inherits(Generate, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      const out = pulse.fork(pulse.ALL),\n        gen = _.generator;\n      let data = this.value,\n        num = _.size - data.length,\n        add,\n        rem,\n        t;\n      if (num > 0) {\n        // need more tuples, generate and add\n        for (add = []; --num >= 0;) {\n          add.push(t = vegaDataflow.ingest(gen(_)));\n          data.push(t);\n        }\n        out.add = out.add.length ? out.materialize(out.ADD).add.concat(add) : add;\n      } else {\n        // need fewer tuples, remove\n        rem = data.slice(0, -num);\n        out.rem = out.rem.length ? out.materialize(out.REM).rem.concat(rem) : rem;\n        data = data.slice(-num);\n      }\n      out.source = this.value = data;\n      return out;\n    }\n  });\n\n  function ascending(a, b) {\n    return a == null || b == null ? NaN : a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;\n  }\n\n  function descending(a, b) {\n    return a == null || b == null ? NaN : b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;\n  }\n\n  function bisector(f) {\n    let compare1, compare2, delta;\n\n    // If an accessor is specified, promote it to a comparator. In this case we\n    // can test whether the search value is (self-) comparable. We can\u2019t do this\n    // for a comparator (except for specific, known comparators) because we can\u2019t\n    // tell if the comparator is symmetric, and an asymmetric comparator can\u2019t be\n    // used to test whether a single value is comparable.\n    if (f.length !== 2) {\n      compare1 = ascending;\n      compare2 = (d, x) => ascending(f(d), x);\n      delta = (d, x) => f(d) - x;\n    } else {\n      compare1 = f === ascending || f === descending ? f : zero;\n      compare2 = f;\n      delta = f;\n    }\n    function left(a, x, lo = 0, hi = a.length) {\n      if (lo < hi) {\n        if (compare1(x, x) !== 0) return hi;\n        do {\n          const mid = lo + hi >>> 1;\n          if (compare2(a[mid], x) < 0) lo = mid + 1;else hi = mid;\n        } while (lo < hi);\n      }\n      return lo;\n    }\n    function right(a, x, lo = 0, hi = a.length) {\n      if (lo < hi) {\n        if (compare1(x, x) !== 0) return hi;\n        do {\n          const mid = lo + hi >>> 1;\n          if (compare2(a[mid], x) <= 0) lo = mid + 1;else hi = mid;\n        } while (lo < hi);\n      }\n      return lo;\n    }\n    function center(a, x, lo = 0, hi = a.length) {\n      const i = left(a, x, lo, hi - 1);\n      return i > lo && delta(a[i - 1], x) > -delta(a[i], x) ? i - 1 : i;\n    }\n    return {\n      left,\n      center,\n      right\n    };\n  }\n  function zero() {\n    return 0;\n  }\n\n  function* numbers(values, valueof) {\n    if (valueof === undefined) {\n      for (let value of values) {\n        if (value != null && (value = +value) >= value) {\n          yield value;\n        }\n      }\n    } else {\n      let index = -1;\n      for (let value of values) {\n        if ((value = valueof(value, ++index, values)) != null && (value = +value) >= value) {\n          yield value;\n        }\n      }\n    }\n  }\n\n  function compareDefined(compare = ascending) {\n    if (compare === ascending) return ascendingDefined;\n    if (typeof compare !== \"function\") throw new TypeError(\"compare is not a function\");\n    return (a, b) => {\n      const x = compare(a, b);\n      if (x || x === 0) return x;\n      return (compare(b, b) === 0) - (compare(a, a) === 0);\n    };\n  }\n  function ascendingDefined(a, b) {\n    return (a == null || !(a >= a)) - (b == null || !(b >= b)) || (a < b ? -1 : a > b ? 1 : 0);\n  }\n\n  function max(values, valueof) {\n    let max;\n    if (valueof === undefined) {\n      for (const value of values) {\n        if (value != null && (max < value || max === undefined && value >= value)) {\n          max = value;\n        }\n      }\n    } else {\n      let index = -1;\n      for (let value of values) {\n        if ((value = valueof(value, ++index, values)) != null && (max < value || max === undefined && value >= value)) {\n          max = value;\n        }\n      }\n    }\n    return max;\n  }\n\n  function min(values, valueof) {\n    let min;\n    if (valueof === undefined) {\n      for (const value of values) {\n        if (value != null && (min > value || min === undefined && value >= value)) {\n          min = value;\n        }\n      }\n    } else {\n      let index = -1;\n      for (let value of values) {\n        if ((value = valueof(value, ++index, values)) != null && (min > value || min === undefined && value >= value)) {\n          min = value;\n        }\n      }\n    }\n    return min;\n  }\n\n  // Based on https://github.com/mourner/quickselect\n  // ISC license, Copyright 2018 Vladimir Agafonkin.\n  function quickselect(array, k, left = 0, right = Infinity, compare) {\n    k = Math.floor(k);\n    left = Math.floor(Math.max(0, left));\n    right = Math.floor(Math.min(array.length - 1, right));\n    if (!(left <= k && k <= right)) return array;\n    compare = compare === undefined ? ascendingDefined : compareDefined(compare);\n    while (right > left) {\n      if (right - left > 600) {\n        const n = right - left + 1;\n        const m = k - left + 1;\n        const z = Math.log(n);\n        const s = 0.5 * Math.exp(2 * z / 3);\n        const sd = 0.5 * Math.sqrt(z * s * (n - s) / n) * (m - n / 2 < 0 ? -1 : 1);\n        const newLeft = Math.max(left, Math.floor(k - m * s / n + sd));\n        const newRight = Math.min(right, Math.floor(k + (n - m) * s / n + sd));\n        quickselect(array, k, newLeft, newRight, compare);\n      }\n      const t = array[k];\n      let i = left;\n      let j = right;\n      swap(array, left, k);\n      if (compare(array[right], t) > 0) swap(array, left, right);\n      while (i < j) {\n        swap(array, i, j), ++i, --j;\n        while (compare(array[i], t) < 0) ++i;\n        while (compare(array[j], t) > 0) --j;\n      }\n      if (compare(array[left], t) === 0) swap(array, left, j);else ++j, swap(array, j, right);\n      if (j <= k) left = j + 1;\n      if (k <= j) right = j - 1;\n    }\n    return array;\n  }\n  function swap(array, i, j) {\n    const t = array[i];\n    array[i] = array[j];\n    array[j] = t;\n  }\n\n  function quantile(values, p, valueof) {\n    values = Float64Array.from(numbers(values, valueof));\n    if (!(n = values.length) || isNaN(p = +p)) return;\n    if (p <= 0 || n < 2) return min(values);\n    if (p >= 1) return max(values);\n    var n,\n      i = (n - 1) * p,\n      i0 = Math.floor(i),\n      value0 = max(quickselect(values, i0).subarray(0, i0 + 1)),\n      value1 = min(values.subarray(i0 + 1));\n    return value0 + (value1 - value0) * (i - i0);\n  }\n\n  function mean(values, valueof) {\n    let count = 0;\n    let sum = 0;\n    if (valueof === undefined) {\n      for (let value of values) {\n        if (value != null && (value = +value) >= value) {\n          ++count, sum += value;\n        }\n      }\n    } else {\n      let index = -1;\n      for (let value of values) {\n        if ((value = valueof(value, ++index, values)) != null && (value = +value) >= value) {\n          ++count, sum += value;\n        }\n      }\n    }\n    if (count) return sum / count;\n  }\n\n  function median(values, valueof) {\n    return quantile(values, 0.5, valueof);\n  }\n\n  function range(start, stop, step) {\n    start = +start, stop = +stop, step = (n = arguments.length) < 2 ? (stop = start, start = 0, 1) : n < 3 ? 1 : +step;\n    var i = -1,\n      n = Math.max(0, Math.ceil((stop - start) / step)) | 0,\n      range = new Array(n);\n    while (++i < n) {\n      range[i] = start + i * step;\n    }\n    return range;\n  }\n\n  const Methods = {\n    value: 'value',\n    median: median,\n    mean: mean,\n    min: min,\n    max: max\n  };\n  const Empty = [];\n\n  /**\n   * Impute missing values.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(object): *} params.field - The value field to impute.\n   * @param {Array<function(object): *>} [params.groupby] - An array of\n   *   accessors to determine series within which to perform imputation.\n   * @param {function(object): *} params.key - An accessor for a key value.\n   *   Each key value should be unique within a group. New tuples will be\n   *   imputed for any key values that are not found within a group.\n   * @param {Array<*>} [params.keyvals] - Optional array of required key\n   *   values. New tuples will be imputed for any key values that are not\n   *   found within a group. In addition, these values will be automatically\n   *   augmented with the key values observed in the input data.\n   * @param {string} [method='value'] - The imputation method to use. One of\n   *   'value', 'mean', 'median', 'max', 'min'.\n   * @param {*} [value=0] - The constant value to use for imputation\n   *   when using method 'value'.\n   */\n  function Impute(params) {\n    vegaDataflow.Transform.call(this, [], params);\n  }\n  Impute.Definition = {\n    'type': 'Impute',\n    'metadata': {\n      'changes': true\n    },\n    'params': [{\n      'name': 'field',\n      'type': 'field',\n      'required': true\n    }, {\n      'name': 'key',\n      'type': 'field',\n      'required': true\n    }, {\n      'name': 'keyvals',\n      'array': true\n    }, {\n      'name': 'groupby',\n      'type': 'field',\n      'array': true\n    }, {\n      'name': 'method',\n      'type': 'enum',\n      'default': 'value',\n      'values': ['value', 'mean', 'median', 'max', 'min']\n    }, {\n      'name': 'value',\n      'default': 0\n    }]\n  };\n  function getValue(_) {\n    var m = _.method || Methods.value,\n      v;\n    if (Methods[m] == null) {\n      vegaUtil.error('Unrecognized imputation method: ' + m);\n    } else if (m === Methods.value) {\n      v = _.value !== undefined ? _.value : 0;\n      return () => v;\n    } else {\n      return Methods[m];\n    }\n  }\n  function getField(_) {\n    const f = _.field;\n    return t => t ? f(t) : NaN;\n  }\n  vegaUtil.inherits(Impute, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      var out = pulse.fork(pulse.ALL),\n        impute = getValue(_),\n        field = getField(_),\n        fName = vegaUtil.accessorName(_.field),\n        kName = vegaUtil.accessorName(_.key),\n        gNames = (_.groupby || []).map(vegaUtil.accessorName),\n        groups = partition(pulse.source, _.groupby, _.key, _.keyvals),\n        curr = [],\n        prev = this.value,\n        m = groups.domain.length,\n        group,\n        value,\n        gVals,\n        kVal,\n        g,\n        i,\n        j,\n        l,\n        n,\n        t;\n      for (g = 0, l = groups.length; g < l; ++g) {\n        group = groups[g];\n        gVals = group.values;\n        value = NaN;\n\n        // add tuples for missing values\n        for (j = 0; j < m; ++j) {\n          if (group[j] != null) continue;\n          kVal = groups.domain[j];\n          t = {\n            _impute: true\n          };\n          for (i = 0, n = gVals.length; i < n; ++i) t[gNames[i]] = gVals[i];\n          t[kName] = kVal;\n          t[fName] = Number.isNaN(value) ? value = impute(group, field) : value;\n          curr.push(vegaDataflow.ingest(t));\n        }\n      }\n\n      // update pulse with imputed tuples\n      if (curr.length) out.add = out.materialize(out.ADD).add.concat(curr);\n      if (prev.length) out.rem = out.materialize(out.REM).rem.concat(prev);\n      this.value = curr;\n      return out;\n    }\n  });\n  function partition(data, groupby, key, keyvals) {\n    var get = f => f(t),\n      groups = [],\n      domain = keyvals ? keyvals.slice() : [],\n      kMap = {},\n      gMap = {},\n      gVals,\n      gKey,\n      group,\n      i,\n      j,\n      k,\n      n,\n      t;\n    domain.forEach((k, i) => kMap[k] = i + 1);\n    for (i = 0, n = data.length; i < n; ++i) {\n      t = data[i];\n      k = key(t);\n      j = kMap[k] || (kMap[k] = domain.push(k));\n      gKey = (gVals = groupby ? groupby.map(get) : Empty) + '';\n      if (!(group = gMap[gKey])) {\n        group = gMap[gKey] = [];\n        groups.push(group);\n        group.values = gVals;\n      }\n      group[j - 1] = t;\n    }\n    groups.domain = domain;\n    return groups;\n  }\n\n  /**\n   * Extend input tuples with aggregate values.\n   * Calcuates aggregate values and joins them with the input stream.\n   * @constructor\n   */\n  function JoinAggregate(params) {\n    Aggregate.call(this, params);\n  }\n  JoinAggregate.Definition = {\n    'type': 'JoinAggregate',\n    'metadata': {\n      'modifies': true\n    },\n    'params': [{\n      'name': 'groupby',\n      'type': 'field',\n      'array': true\n    }, {\n      'name': 'fields',\n      'type': 'field',\n      'null': true,\n      'array': true\n    }, {\n      'name': 'ops',\n      'type': 'enum',\n      'array': true,\n      'values': ValidAggregateOps\n    }, {\n      'name': 'as',\n      'type': 'string',\n      'null': true,\n      'array': true\n    }, {\n      'name': 'key',\n      'type': 'field'\n    }]\n  };\n  vegaUtil.inherits(JoinAggregate, Aggregate, {\n    transform(_, pulse) {\n      const aggr = this,\n        mod = _.modified();\n      let cells;\n\n      // process all input tuples to calculate aggregates\n      if (aggr.value && (mod || pulse.modified(aggr._inputs, true))) {\n        cells = aggr.value = mod ? aggr.init(_) : {};\n        pulse.visit(pulse.SOURCE, t => aggr.add(t));\n      } else {\n        cells = aggr.value = aggr.value || this.init(_);\n        pulse.visit(pulse.REM, t => aggr.rem(t));\n        pulse.visit(pulse.ADD, t => aggr.add(t));\n      }\n\n      // update aggregation cells\n      aggr.changes();\n\n      // write aggregate values to input tuples\n      pulse.visit(pulse.SOURCE, t => {\n        vegaUtil.extend(t, cells[aggr.cellkey(t)].tuple);\n      });\n      return pulse.reflow(mod).modifies(this._outputs);\n    },\n    changes() {\n      const adds = this._adds,\n        mods = this._mods;\n      let i, n;\n      for (i = 0, n = this._alen; i < n; ++i) {\n        this.celltuple(adds[i]);\n        adds[i] = null; // for garbage collection\n      }\n\n      for (i = 0, n = this._mlen; i < n; ++i) {\n        this.celltuple(mods[i]);\n        mods[i] = null; // for garbage collection\n      }\n\n      this._alen = this._mlen = 0; // reset list of active cells\n    }\n  });\n\n  /**\n   * Compute kernel density estimates (KDE) for one or more data groups.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {Array<function(object): *>} [params.groupby] - An array of accessors\n   *   to groupby.\n   * @param {function(object): *} params.field - An accessor for the data field\n   *   to estimate.\n   * @param {number} [params.bandwidth=0] - The KDE kernel bandwidth.\n   *   If zero or unspecified, the bandwidth is automatically determined.\n   * @param {boolean} [params.counts=false] - A boolean flag indicating if the\n   *   output values should be probability estimates (false, default) or\n   *   smoothed counts (true).\n   * @param {string} [params.cumulative=false] - A boolean flag indicating if a\n   *   density (false) or cumulative distribution (true) should be generated.\n   * @param {Array<number>} [params.extent] - The domain extent over which to\n   *   plot the density. If unspecified, the [min, max] data extent is used.\n   * @param {string} [params.resolve='independent'] - Indicates how parameters for\n   *   multiple densities should be resolved. If \"independent\" (the default), each\n   *   density may have its own domain extent and dynamic number of curve sample\n   *   steps. If \"shared\", the KDE transform will ensure that all densities are\n   *   defined over a shared domain and curve steps, enabling stacking.\n   * @param {number} [params.minsteps=25] - The minimum number of curve samples\n   *   for plotting the density.\n   * @param {number} [params.maxsteps=200] - The maximum number of curve samples\n   *   for plotting the density.\n   * @param {number} [params.steps] - The exact number of curve samples for\n   *   plotting the density. If specified, overrides both minsteps and maxsteps\n   *   to set an exact number of uniform samples. Useful in conjunction with\n   *   a fixed extent to ensure consistent sample points for stacked densities.\n   */\n  function KDE(params) {\n    vegaDataflow.Transform.call(this, null, params);\n  }\n  KDE.Definition = {\n    'type': 'KDE',\n    'metadata': {\n      'generates': true\n    },\n    'params': [{\n      'name': 'groupby',\n      'type': 'field',\n      'array': true\n    }, {\n      'name': 'field',\n      'type': 'field',\n      'required': true\n    }, {\n      'name': 'cumulative',\n      'type': 'boolean',\n      'default': false\n    }, {\n      'name': 'counts',\n      'type': 'boolean',\n      'default': false\n    }, {\n      'name': 'bandwidth',\n      'type': 'number',\n      'default': 0\n    }, {\n      'name': 'extent',\n      'type': 'number',\n      'array': true,\n      'length': 2\n    }, {\n      'name': 'resolve',\n      'type': 'enum',\n      'values': ['shared', 'independent'],\n      'default': 'independent'\n    }, {\n      'name': 'steps',\n      'type': 'number'\n    }, {\n      'name': 'minsteps',\n      'type': 'number',\n      'default': 25\n    }, {\n      'name': 'maxsteps',\n      'type': 'number',\n      'default': 200\n    }, {\n      'name': 'as',\n      'type': 'string',\n      'array': true,\n      'default': ['value', 'density']\n    }]\n  };\n  vegaUtil.inherits(KDE, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      const out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS);\n      if (!this.value || pulse.changed() || _.modified()) {\n        const source = pulse.materialize(pulse.SOURCE).source,\n          groups = partition$1(source, _.groupby, _.field),\n          names = (_.groupby || []).map(vegaUtil.accessorName),\n          bandwidth = _.bandwidth,\n          method = _.cumulative ? 'cdf' : 'pdf',\n          as = _.as || ['value', 'density'],\n          values = [];\n        let domain = _.extent,\n          minsteps = _.steps || _.minsteps || 25,\n          maxsteps = _.steps || _.maxsteps || 200;\n        if (method !== 'pdf' && method !== 'cdf') {\n          vegaUtil.error('Invalid density method: ' + method);\n        }\n        if (_.resolve === 'shared') {\n          if (!domain) domain = vegaUtil.extent(source, _.field);\n          minsteps = maxsteps = _.steps || maxsteps;\n        }\n        groups.forEach(g => {\n          const density = vegaStatistics.randomKDE(g, bandwidth)[method],\n            scale = _.counts ? g.length : 1,\n            local = domain || vegaUtil.extent(g);\n          vegaStatistics.sampleCurve(density, local, minsteps, maxsteps).forEach(v => {\n            const t = {};\n            for (let i = 0; i < names.length; ++i) {\n              t[names[i]] = g.dims[i];\n            }\n            t[as[0]] = v[0];\n            t[as[1]] = v[1] * scale;\n            values.push(vegaDataflow.ingest(t));\n          });\n        });\n        if (this.value) out.rem = this.value;\n        this.value = out.add = out.source = values;\n      }\n      return out;\n    }\n  });\n\n  /**\n   * Generates a key function.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {Array<string>} params.fields - The field name(s) for the key function.\n   * @param {boolean} params.flat - A boolean flag indicating if the field names\n   *  should be treated as flat property names, side-stepping nested field\n   *  lookups normally indicated by dot or bracket notation.\n   */\n  function Key(params) {\n    vegaDataflow.Operator.call(this, null, update$2, params);\n  }\n  vegaUtil.inherits(Key, vegaDataflow.Operator);\n  function update$2(_) {\n    return this.value && !_.modified() ? this.value : vegaUtil.key(_.fields, _.flat);\n  }\n\n  /**\n   * Load and parse data from an external source. Marshalls parameter\n   * values and then invokes the Dataflow request method.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {string} params.url - The URL to load from.\n   * @param {object} params.format - The data format options.\n   */\n  function Load(params) {\n    vegaDataflow.Transform.call(this, [], params);\n    this._pending = null;\n  }\n  vegaUtil.inherits(Load, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      const df = pulse.dataflow;\n      if (this._pending) {\n        // update state and return pulse\n        return output(this, pulse, this._pending);\n      }\n      if (stop(_)) return pulse.StopPropagation;\n      if (_.values) {\n        // parse and ingest values, return output pulse\n        return output(this, pulse, df.parse(_.values, _.format));\n      } else if (_.async) {\n        // return promise for non-blocking async loading\n        const p = df.request(_.url, _.format).then(res => {\n          this._pending = vegaUtil.array(res.data);\n          return df => df.touch(this);\n        });\n        return {\n          async: p\n        };\n      } else {\n        // return promise for synchronous loading\n        return df.request(_.url, _.format).then(res => output(this, pulse, vegaUtil.array(res.data)));\n      }\n    }\n  });\n  function stop(_) {\n    return _.modified('async') && !(_.modified('values') || _.modified('url') || _.modified('format'));\n  }\n  function output(op, pulse, data) {\n    data.forEach(vegaDataflow.ingest);\n    const out = pulse.fork(pulse.NO_FIELDS & pulse.NO_SOURCE);\n    out.rem = op.value;\n    op.value = out.source = out.add = data;\n    op._pending = null;\n    if (out.rem.length) out.clean(true);\n    return out;\n  }\n\n  /**\n   * Extend tuples by joining them with values from a lookup table.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {Map} params.index - The lookup table map.\n   * @param {Array<function(object): *} params.fields - The fields to lookup.\n   * @param {Array<string>} params.as - Output field names for each lookup value.\n   * @param {*} [params.default] - A default value to use if lookup fails.\n   */\n  function Lookup(params) {\n    vegaDataflow.Transform.call(this, {}, params);\n  }\n  Lookup.Definition = {\n    'type': 'Lookup',\n    'metadata': {\n      'modifies': true\n    },\n    'params': [{\n      'name': 'index',\n      'type': 'index',\n      'params': [{\n        'name': 'from',\n        'type': 'data',\n        'required': true\n      }, {\n        'name': 'key',\n        'type': 'field',\n        'required': true\n      }]\n    }, {\n      'name': 'values',\n      'type': 'field',\n      'array': true\n    }, {\n      'name': 'fields',\n      'type': 'field',\n      'array': true,\n      'required': true\n    }, {\n      'name': 'as',\n      'type': 'string',\n      'array': true\n    }, {\n      'name': 'default',\n      'default': null\n    }]\n  };\n  vegaUtil.inherits(Lookup, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      const keys = _.fields,\n        index = _.index,\n        values = _.values,\n        defaultValue = _.default == null ? null : _.default,\n        reset = _.modified(),\n        n = keys.length;\n      let flag = reset ? pulse.SOURCE : pulse.ADD,\n        out = pulse,\n        as = _.as,\n        set,\n        m,\n        mods;\n      if (values) {\n        m = values.length;\n        if (n > 1 && !as) {\n          vegaUtil.error('Multi-field lookup requires explicit \"as\" parameter.');\n        }\n        if (as && as.length !== n * m) {\n          vegaUtil.error('The \"as\" parameter has too few output field names.');\n        }\n        as = as || values.map(vegaUtil.accessorName);\n        set = function (t) {\n          for (var i = 0, k = 0, j, v; i < n; ++i) {\n            v = index.get(keys[i](t));\n            if (v == null) for (j = 0; j < m; ++j, ++k) t[as[k]] = defaultValue;else for (j = 0; j < m; ++j, ++k) t[as[k]] = values[j](v);\n          }\n        };\n      } else {\n        if (!as) {\n          vegaUtil.error('Missing output field names.');\n        }\n        set = function (t) {\n          for (var i = 0, v; i < n; ++i) {\n            v = index.get(keys[i](t));\n            t[as[i]] = v == null ? defaultValue : v;\n          }\n        };\n      }\n      if (reset) {\n        out = pulse.reflow(true);\n      } else {\n        mods = keys.some(k => pulse.modified(k.fields));\n        flag |= mods ? pulse.MOD : 0;\n      }\n      pulse.visit(flag, set);\n      return out.modifies(as);\n    }\n  });\n\n  /**\n   * Computes global min/max extents over a collection of extents.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {Array<Array<number>>} params.extents - The input extents.\n   */\n  function MultiExtent(params) {\n    vegaDataflow.Operator.call(this, null, update$1, params);\n  }\n  vegaUtil.inherits(MultiExtent, vegaDataflow.Operator);\n  function update$1(_) {\n    if (this.value && !_.modified()) {\n      return this.value;\n    }\n    const ext = _.extents,\n      n = ext.length;\n    let min = +Infinity,\n      max = -Infinity,\n      i,\n      e;\n    for (i = 0; i < n; ++i) {\n      e = ext[i];\n      if (e[0] < min) min = e[0];\n      if (e[1] > max) max = e[1];\n    }\n    return [min, max];\n  }\n\n  /**\n   * Merge a collection of value arrays.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {Array<Array<*>>} params.values - The input value arrrays.\n   */\n  function MultiValues(params) {\n    vegaDataflow.Operator.call(this, null, update, params);\n  }\n  vegaUtil.inherits(MultiValues, vegaDataflow.Operator);\n  function update(_) {\n    return this.value && !_.modified() ? this.value : _.values.reduce((data, _) => data.concat(_), []);\n  }\n\n  /**\n   * Operator whose value is simply its parameter hash. This operator is\n   * useful for enabling reactive updates to values of nested objects.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   */\n  function Params(params) {\n    vegaDataflow.Transform.call(this, null, params);\n  }\n  vegaUtil.inherits(Params, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      this.modified(_.modified());\n      this.value = _;\n      return pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS); // do not pass tuples\n    }\n  });\n\n  /**\n   * Aggregate and pivot selected field values to become new fields.\n   * This operator is useful to construction cross-tabulations.\n   * @constructor\n   * @param {Array<function(object): *>} [params.groupby] - An array of accessors\n   *  to groupby. These fields act just like groupby fields of an Aggregate transform.\n   * @param {function(object): *} params.field - The field to pivot on. The unique\n   *  values of this field become new field names in the output stream.\n   * @param {function(object): *} params.value - The field to populate pivoted fields.\n   *  The aggregate values of this field become the values of the new pivoted fields.\n   * @param {string} [params.op] - The aggregation operation for the value field,\n   *  applied per cell in the output stream. The default is \"sum\".\n   * @param {number} [params.limit] - An optional parameter indicating the maximum\n   *  number of pivoted fields to generate. The pivoted field names are sorted in\n   *  ascending order prior to enforcing the limit.\n   */\n  function Pivot(params) {\n    Aggregate.call(this, params);\n  }\n  Pivot.Definition = {\n    'type': 'Pivot',\n    'metadata': {\n      'generates': true,\n      'changes': true\n    },\n    'params': [{\n      'name': 'groupby',\n      'type': 'field',\n      'array': true\n    }, {\n      'name': 'field',\n      'type': 'field',\n      'required': true\n    }, {\n      'name': 'value',\n      'type': 'field',\n      'required': true\n    }, {\n      'name': 'op',\n      'type': 'enum',\n      'values': ValidAggregateOps,\n      'default': 'sum'\n    }, {\n      'name': 'limit',\n      'type': 'number',\n      'default': 0\n    }, {\n      'name': 'key',\n      'type': 'field'\n    }]\n  };\n  vegaUtil.inherits(Pivot, Aggregate, {\n    _transform: Aggregate.prototype.transform,\n    transform(_, pulse) {\n      return this._transform(aggregateParams(_, pulse), pulse);\n    }\n  });\n\n  // Shoehorn a pivot transform into an aggregate transform!\n  // First collect all unique pivot field values.\n  // Then generate aggregate fields for each output pivot field.\n  function aggregateParams(_, pulse) {\n    const key = _.field,\n      value = _.value,\n      op = (_.op === 'count' ? '__count__' : _.op) || 'sum',\n      fields = vegaUtil.accessorFields(key).concat(vegaUtil.accessorFields(value)),\n      keys = pivotKeys(key, _.limit || 0, pulse);\n\n    // if data stream content changes, pivot fields may change\n    // flag parameter modification to ensure re-initialization\n    if (pulse.changed()) _.set('__pivot__', null, null, true);\n    return {\n      key: _.key,\n      groupby: _.groupby,\n      ops: keys.map(() => op),\n      fields: keys.map(k => get(k, key, value, fields)),\n      as: keys.map(k => k + ''),\n      modified: _.modified.bind(_)\n    };\n  }\n\n  // Generate aggregate field accessor.\n  // Output NaN for non-existent values; aggregator will ignore!\n  function get(k, key, value, fields) {\n    return vegaUtil.accessor(d => key(d) === k ? value(d) : NaN, fields, k + '');\n  }\n\n  // Collect (and optionally limit) all unique pivot values.\n  function pivotKeys(key, limit, pulse) {\n    const map = {},\n      list = [];\n    pulse.visit(pulse.SOURCE, t => {\n      const k = key(t);\n      if (!map[k]) {\n        map[k] = 1;\n        list.push(k);\n      }\n    });\n    list.sort(vegaUtil.ascending);\n    return limit ? list.slice(0, limit) : list;\n  }\n\n  /**\n   * Partitions pre-faceted data into tuple subflows.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(Dataflow, string): Operator} params.subflow - A function\n   *   that generates a subflow of operators and returns its root operator.\n   * @param {function(object): Array<object>} params.field - The field\n   *   accessor for an array of subflow tuple objects.\n   */\n  function PreFacet(params) {\n    Facet.call(this, params);\n  }\n  vegaUtil.inherits(PreFacet, Facet, {\n    transform(_, pulse) {\n      const flow = _.subflow,\n        field = _.field,\n        subflow = t => this.subflow(vegaDataflow.tupleid(t), flow, pulse, t);\n      if (_.modified('field') || field && pulse.modified(vegaUtil.accessorFields(field))) {\n        vegaUtil.error('PreFacet does not support field modification.');\n      }\n      this.initTargets(); // reset list of active subflows\n\n      if (field) {\n        pulse.visit(pulse.MOD, t => {\n          const sf = subflow(t);\n          field(t).forEach(_ => sf.mod(_));\n        });\n        pulse.visit(pulse.ADD, t => {\n          const sf = subflow(t);\n          field(t).forEach(_ => sf.add(vegaDataflow.ingest(_)));\n        });\n        pulse.visit(pulse.REM, t => {\n          const sf = subflow(t);\n          field(t).forEach(_ => sf.rem(_));\n        });\n      } else {\n        pulse.visit(pulse.MOD, t => subflow(t).mod(t));\n        pulse.visit(pulse.ADD, t => subflow(t).add(t));\n        pulse.visit(pulse.REM, t => subflow(t).rem(t));\n      }\n      if (pulse.clean()) {\n        pulse.runAfter(() => this.clean());\n      }\n      return pulse;\n    }\n  });\n\n  /**\n   * Performs a relational projection, copying selected fields from source\n   * tuples to a new set of derived tuples.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {Array<function(object): *} params.fields - The fields to project,\n   *   as an array of field accessors. If unspecified, all fields will be\n   *   copied with names unchanged.\n   * @param {Array<string>} [params.as] - Output field names for each projected\n   *   field. Any unspecified fields will use the field name provided by\n   *   the field accessor.\n   */\n  function Project(params) {\n    vegaDataflow.Transform.call(this, null, params);\n  }\n  Project.Definition = {\n    'type': 'Project',\n    'metadata': {\n      'generates': true,\n      'changes': true\n    },\n    'params': [{\n      'name': 'fields',\n      'type': 'field',\n      'array': true\n    }, {\n      'name': 'as',\n      'type': 'string',\n      'null': true,\n      'array': true\n    }]\n  };\n  vegaUtil.inherits(Project, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      const out = pulse.fork(pulse.NO_SOURCE),\n        fields = _.fields,\n        as = fieldNames(_.fields, _.as || []),\n        derive = fields ? (s, t) => project(s, t, fields, as) : vegaDataflow.rederive;\n      let lut;\n      if (this.value) {\n        lut = this.value;\n      } else {\n        pulse = pulse.addAll();\n        lut = this.value = {};\n      }\n      pulse.visit(pulse.REM, t => {\n        const id = vegaDataflow.tupleid(t);\n        out.rem.push(lut[id]);\n        lut[id] = null;\n      });\n      pulse.visit(pulse.ADD, t => {\n        const dt = derive(t, vegaDataflow.ingest({}));\n        lut[vegaDataflow.tupleid(t)] = dt;\n        out.add.push(dt);\n      });\n      pulse.visit(pulse.MOD, t => {\n        out.mod.push(derive(t, lut[vegaDataflow.tupleid(t)]));\n      });\n      return out;\n    }\n  });\n  function project(s, t, fields, as) {\n    for (let i = 0, n = fields.length; i < n; ++i) {\n      t[as[i]] = fields[i](s);\n    }\n    return t;\n  }\n\n  /**\n   * Proxy the value of another operator as a pure signal value.\n   * Ensures no tuples are propagated.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {*} params.value - The value to proxy, becomes the value of this operator.\n   */\n  function Proxy(params) {\n    vegaDataflow.Transform.call(this, null, params);\n  }\n  vegaUtil.inherits(Proxy, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      this.value = _.value;\n      return _.modified('value') ? pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS) : pulse.StopPropagation;\n    }\n  });\n\n  /**\n   * Generates sample quantile values from an input data stream.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(object): *} params.field - An accessor for the data field\n   *   over which to calculate quantile values.\n   * @param {Array<function(object): *>} [params.groupby] - An array of accessors\n   *   to groupby.\n   * @param {Array<number>} [params.probs] - An array of probabilities in\n   *   the range (0, 1) for which to compute quantile values. If not specified,\n   *   the *step* parameter will be used.\n   * @param {Array<number>} [params.step=0.01] - A probability step size for\n   *   sampling quantile values. All values from one-half the step size up to\n   *   1 (exclusive) will be sampled. This parameter is only used if the\n   *   *quantiles* parameter is not provided.\n   */\n  function Quantile(params) {\n    vegaDataflow.Transform.call(this, null, params);\n  }\n  Quantile.Definition = {\n    'type': 'Quantile',\n    'metadata': {\n      'generates': true,\n      'changes': true\n    },\n    'params': [{\n      'name': 'groupby',\n      'type': 'field',\n      'array': true\n    }, {\n      'name': 'field',\n      'type': 'field',\n      'required': true\n    }, {\n      'name': 'probs',\n      'type': 'number',\n      'array': true\n    }, {\n      'name': 'step',\n      'type': 'number',\n      'default': 0.01\n    }, {\n      'name': 'as',\n      'type': 'string',\n      'array': true,\n      'default': ['prob', 'value']\n    }]\n  };\n  const EPSILON = 1e-14;\n  vegaUtil.inherits(Quantile, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      const out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS),\n        as = _.as || ['prob', 'value'];\n      if (this.value && !_.modified() && !pulse.changed()) {\n        out.source = this.value;\n        return out;\n      }\n      const source = pulse.materialize(pulse.SOURCE).source,\n        groups = partition$1(source, _.groupby, _.field),\n        names = (_.groupby || []).map(vegaUtil.accessorName),\n        values = [],\n        step = _.step || 0.01,\n        p = _.probs || range(step / 2, 1 - EPSILON, step),\n        n = p.length;\n      groups.forEach(g => {\n        const q = vegaStatistics.quantiles(g, p);\n        for (let i = 0; i < n; ++i) {\n          const t = {};\n          for (let i = 0; i < names.length; ++i) {\n            t[names[i]] = g.dims[i];\n          }\n          t[as[0]] = p[i];\n          t[as[1]] = q[i];\n          values.push(vegaDataflow.ingest(t));\n        }\n      });\n      if (this.value) out.rem = this.value;\n      this.value = out.add = out.source = values;\n      return out;\n    }\n  });\n\n  /**\n   * Relays a data stream between data processing pipelines.\n   * If the derive parameter is set, this transform will create derived\n   * copies of observed tuples. This provides derived data streams in which\n   * modifications to the tuples do not pollute an upstream data source.\n   * @param {object} params - The parameters for this operator.\n   * @param {number} [params.derive=false] - Boolean flag indicating if\n   *   the transform should make derived copies of incoming tuples.\n   * @constructor\n   */\n  function Relay(params) {\n    vegaDataflow.Transform.call(this, null, params);\n  }\n  vegaUtil.inherits(Relay, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      let out, lut;\n      if (this.value) {\n        lut = this.value;\n      } else {\n        out = pulse = pulse.addAll();\n        lut = this.value = {};\n      }\n      if (_.derive) {\n        out = pulse.fork(pulse.NO_SOURCE);\n        pulse.visit(pulse.REM, t => {\n          const id = vegaDataflow.tupleid(t);\n          out.rem.push(lut[id]);\n          lut[id] = null;\n        });\n        pulse.visit(pulse.ADD, t => {\n          const dt = vegaDataflow.derive(t);\n          lut[vegaDataflow.tupleid(t)] = dt;\n          out.add.push(dt);\n        });\n        pulse.visit(pulse.MOD, t => {\n          const dt = lut[vegaDataflow.tupleid(t)];\n          for (const k in t) {\n            dt[k] = t[k];\n            // down stream writes may overwrite re-derived tuples\n            // conservatively mark all source fields as modified\n            out.modifies(k);\n          }\n          out.mod.push(dt);\n        });\n      }\n      return out;\n    }\n  });\n\n  /**\n   * Samples tuples passing through this operator.\n   * Uses reservoir sampling to maintain a representative sample.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {number} [params.size=1000] - The maximum number of samples.\n   */\n  function Sample(params) {\n    vegaDataflow.Transform.call(this, [], params);\n    this.count = 0;\n  }\n  Sample.Definition = {\n    'type': 'Sample',\n    'metadata': {},\n    'params': [{\n      'name': 'size',\n      'type': 'number',\n      'default': 1000\n    }]\n  };\n  vegaUtil.inherits(Sample, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      const out = pulse.fork(pulse.NO_SOURCE),\n        mod = _.modified('size'),\n        num = _.size,\n        map = this.value.reduce((m, t) => (m[vegaDataflow.tupleid(t)] = 1, m), {});\n      let res = this.value,\n        cnt = this.count,\n        cap = 0;\n\n      // sample reservoir update function\n      function update(t) {\n        let p, idx;\n        if (res.length < num) {\n          res.push(t);\n        } else {\n          idx = ~~((cnt + 1) * vegaStatistics.random());\n          if (idx < res.length && idx >= cap) {\n            p = res[idx];\n            if (map[vegaDataflow.tupleid(p)]) out.rem.push(p); // eviction\n            res[idx] = t;\n          }\n        }\n        ++cnt;\n      }\n      if (pulse.rem.length) {\n        // find all tuples that should be removed, add to output\n        pulse.visit(pulse.REM, t => {\n          const id = vegaDataflow.tupleid(t);\n          if (map[id]) {\n            map[id] = -1;\n            out.rem.push(t);\n          }\n          --cnt;\n        });\n\n        // filter removed tuples out of the sample reservoir\n        res = res.filter(t => map[vegaDataflow.tupleid(t)] !== -1);\n      }\n      if ((pulse.rem.length || mod) && res.length < num && pulse.source) {\n        // replenish sample if backing data source is available\n        cap = cnt = res.length;\n        pulse.visit(pulse.SOURCE, t => {\n          // update, but skip previously sampled tuples\n          if (!map[vegaDataflow.tupleid(t)]) update(t);\n        });\n        cap = -1;\n      }\n      if (mod && res.length > num) {\n        const n = res.length - num;\n        for (let i = 0; i < n; ++i) {\n          map[vegaDataflow.tupleid(res[i])] = -1;\n          out.rem.push(res[i]);\n        }\n        res = res.slice(n);\n      }\n      if (pulse.mod.length) {\n        // propagate modified tuples in the sample reservoir\n        pulse.visit(pulse.MOD, t => {\n          if (map[vegaDataflow.tupleid(t)]) out.mod.push(t);\n        });\n      }\n      if (pulse.add.length) {\n        // update sample reservoir\n        pulse.visit(pulse.ADD, update);\n      }\n      if (pulse.add.length || cap < 0) {\n        // output newly added tuples\n        out.add = res.filter(t => !map[vegaDataflow.tupleid(t)]);\n      }\n      this.count = cnt;\n      this.value = out.source = res;\n      return out;\n    }\n  });\n\n  /**\n   * Generates data tuples for a specified sequence range of numbers.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {number} params.start - The first number in the sequence.\n   * @param {number} params.stop - The last number (exclusive) in the sequence.\n   * @param {number} [params.step=1] - The step size between numbers in the sequence.\n   */\n  function Sequence(params) {\n    vegaDataflow.Transform.call(this, null, params);\n  }\n  Sequence.Definition = {\n    'type': 'Sequence',\n    'metadata': {\n      'generates': true,\n      'changes': true\n    },\n    'params': [{\n      'name': 'start',\n      'type': 'number',\n      'required': true\n    }, {\n      'name': 'stop',\n      'type': 'number',\n      'required': true\n    }, {\n      'name': 'step',\n      'type': 'number',\n      'default': 1\n    }, {\n      'name': 'as',\n      'type': 'string',\n      'default': 'data'\n    }]\n  };\n  vegaUtil.inherits(Sequence, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      if (this.value && !_.modified()) return;\n      const out = pulse.materialize().fork(pulse.MOD),\n        as = _.as || 'data';\n      out.rem = this.value ? pulse.rem.concat(this.value) : pulse.rem;\n      this.value = range(_.start, _.stop, _.step || 1).map(v => {\n        const t = {};\n        t[as] = v;\n        return vegaDataflow.ingest(t);\n      });\n      out.add = pulse.add.concat(this.value);\n      return out;\n    }\n  });\n\n  /**\n   * Propagates a new pulse without any tuples so long as the input\n   * pulse contains some added, removed or modified tuples.\n   * @param {object} params - The parameters for this operator.\n   * @constructor\n   */\n  function Sieve(params) {\n    vegaDataflow.Transform.call(this, null, params);\n    this.modified(true); // always treat as modified\n  }\n\n  vegaUtil.inherits(Sieve, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      this.value = pulse.source;\n      return pulse.changed() ? pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS) : pulse.StopPropagation;\n    }\n  });\n\n  /**\n   * Discretize dates to specific time units.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(object): *} params.field - The data field containing date/time values.\n   */\n  function TimeUnit(params) {\n    vegaDataflow.Transform.call(this, null, params);\n  }\n  const OUTPUT = ['unit0', 'unit1'];\n  TimeUnit.Definition = {\n    'type': 'TimeUnit',\n    'metadata': {\n      'modifies': true\n    },\n    'params': [{\n      'name': 'field',\n      'type': 'field',\n      'required': true\n    }, {\n      'name': 'interval',\n      'type': 'boolean',\n      'default': true\n    }, {\n      'name': 'units',\n      'type': 'enum',\n      'values': vegaTime.TIME_UNITS,\n      'array': true\n    }, {\n      'name': 'step',\n      'type': 'number',\n      'default': 1\n    }, {\n      'name': 'maxbins',\n      'type': 'number',\n      'default': 40\n    }, {\n      'name': 'extent',\n      'type': 'date',\n      'array': true\n    }, {\n      'name': 'timezone',\n      'type': 'enum',\n      'default': 'local',\n      'values': ['local', 'utc']\n    }, {\n      'name': 'as',\n      'type': 'string',\n      'array': true,\n      'length': 2,\n      'default': OUTPUT\n    }]\n  };\n  vegaUtil.inherits(TimeUnit, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      const field = _.field,\n        band = _.interval !== false,\n        utc = _.timezone === 'utc',\n        floor = this._floor(_, pulse),\n        offset = (utc ? vegaTime.utcInterval : vegaTime.timeInterval)(floor.unit).offset,\n        as = _.as || OUTPUT,\n        u0 = as[0],\n        u1 = as[1],\n        step = floor.step;\n      let min = floor.start || Infinity,\n        max = floor.stop || -Infinity,\n        flag = pulse.ADD;\n      if (_.modified() || pulse.changed(pulse.REM) || pulse.modified(vegaUtil.accessorFields(field))) {\n        pulse = pulse.reflow(true);\n        flag = pulse.SOURCE;\n        min = Infinity;\n        max = -Infinity;\n      }\n      pulse.visit(flag, t => {\n        const v = field(t);\n        let a, b;\n        if (v == null) {\n          t[u0] = null;\n          if (band) t[u1] = null;\n        } else {\n          t[u0] = a = b = floor(v);\n          if (band) t[u1] = b = offset(a, step);\n          if (a < min) min = a;\n          if (b > max) max = b;\n        }\n      });\n      floor.start = min;\n      floor.stop = max;\n      return pulse.modifies(band ? as : u0);\n    },\n    _floor(_, pulse) {\n      const utc = _.timezone === 'utc';\n\n      // get parameters\n      const {\n        units,\n        step\n      } = _.units ? {\n        units: _.units,\n        step: _.step || 1\n      } : vegaTime.timeBin({\n        extent: _.extent || vegaUtil.extent(pulse.materialize(pulse.SOURCE).source, _.field),\n        maxbins: _.maxbins\n      });\n\n      // check / standardize time units\n      const tunits = vegaTime.timeUnits(units),\n        prev = this.value || {},\n        floor = (utc ? vegaTime.utcFloor : vegaTime.timeFloor)(tunits, step);\n      floor.unit = vegaUtil.peek(tunits);\n      floor.units = tunits;\n      floor.step = step;\n      floor.start = prev.start;\n      floor.stop = prev.stop;\n      return this.value = floor;\n    }\n  });\n\n  /**\n   * An index that maps from unique, string-coerced, field values to tuples.\n   * Assumes that the field serves as a unique key with no duplicate values.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(object): *} params.field - The field accessor to index.\n   */\n  function TupleIndex(params) {\n    vegaDataflow.Transform.call(this, vegaUtil.fastmap(), params);\n  }\n  vegaUtil.inherits(TupleIndex, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      const df = pulse.dataflow,\n        field = _.field,\n        index = this.value,\n        set = t => index.set(field(t), t);\n      let mod = true;\n      if (_.modified('field') || pulse.modified(field.fields)) {\n        index.clear();\n        pulse.visit(pulse.SOURCE, set);\n      } else if (pulse.changed()) {\n        pulse.visit(pulse.REM, t => index.delete(field(t)));\n        pulse.visit(pulse.ADD, set);\n      } else {\n        mod = false;\n      }\n      this.modified(mod);\n      if (index.empty > df.cleanThreshold) df.runAfter(index.clean);\n      return pulse.fork();\n    }\n  });\n\n  /**\n   * Extracts an array of values. Assumes the source data has already been\n   * reduced as needed (e.g., by an upstream Aggregate transform).\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(object): *} params.field - The domain field to extract.\n   * @param {function(*,*): number} [params.sort] - An optional\n   *   comparator function for sorting the values. The comparator will be\n   *   applied to backing tuples prior to value extraction.\n   */\n  function Values(params) {\n    vegaDataflow.Transform.call(this, null, params);\n  }\n  vegaUtil.inherits(Values, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      const run = !this.value || _.modified('field') || _.modified('sort') || pulse.changed() || _.sort && pulse.modified(_.sort.fields);\n      if (run) {\n        this.value = (_.sort ? pulse.source.slice().sort(vegaDataflow.stableCompare(_.sort)) : pulse.source).map(_.field);\n      }\n    }\n  });\n\n  function WindowOp(op, field, param, as) {\n    const fn = WindowOps[op](field, param);\n    return {\n      init: fn.init || vegaUtil.zero,\n      update: function (w, t) {\n        t[as] = fn.next(w);\n      }\n    };\n  }\n  const WindowOps = {\n    row_number: function () {\n      return {\n        next: w => w.index + 1\n      };\n    },\n    rank: function () {\n      let rank;\n      return {\n        init: () => rank = 1,\n        next: w => {\n          const i = w.index,\n            data = w.data;\n          return i && w.compare(data[i - 1], data[i]) ? rank = i + 1 : rank;\n        }\n      };\n    },\n    dense_rank: function () {\n      let drank;\n      return {\n        init: () => drank = 1,\n        next: w => {\n          const i = w.index,\n            d = w.data;\n          return i && w.compare(d[i - 1], d[i]) ? ++drank : drank;\n        }\n      };\n    },\n    percent_rank: function () {\n      const rank = WindowOps.rank(),\n        next = rank.next;\n      return {\n        init: rank.init,\n        next: w => (next(w) - 1) / (w.data.length - 1)\n      };\n    },\n    cume_dist: function () {\n      let cume;\n      return {\n        init: () => cume = 0,\n        next: w => {\n          const d = w.data,\n            c = w.compare;\n          let i = w.index;\n          if (cume < i) {\n            while (i + 1 < d.length && !c(d[i], d[i + 1])) ++i;\n            cume = i;\n          }\n          return (1 + cume) / d.length;\n        }\n      };\n    },\n    ntile: function (field, num) {\n      num = +num;\n      if (!(num > 0)) vegaUtil.error('ntile num must be greater than zero.');\n      const cume = WindowOps.cume_dist(),\n        next = cume.next;\n      return {\n        init: cume.init,\n        next: w => Math.ceil(num * next(w))\n      };\n    },\n    lag: function (field, offset) {\n      offset = +offset || 1;\n      return {\n        next: w => {\n          const i = w.index - offset;\n          return i >= 0 ? field(w.data[i]) : null;\n        }\n      };\n    },\n    lead: function (field, offset) {\n      offset = +offset || 1;\n      return {\n        next: w => {\n          const i = w.index + offset,\n            d = w.data;\n          return i < d.length ? field(d[i]) : null;\n        }\n      };\n    },\n    first_value: function (field) {\n      return {\n        next: w => field(w.data[w.i0])\n      };\n    },\n    last_value: function (field) {\n      return {\n        next: w => field(w.data[w.i1 - 1])\n      };\n    },\n    nth_value: function (field, nth) {\n      nth = +nth;\n      if (!(nth > 0)) vegaUtil.error('nth_value nth must be greater than zero.');\n      return {\n        next: w => {\n          const i = w.i0 + (nth - 1);\n          return i < w.i1 ? field(w.data[i]) : null;\n        }\n      };\n    },\n    prev_value: function (field) {\n      let prev;\n      return {\n        init: () => prev = null,\n        next: w => {\n          const v = field(w.data[w.index]);\n          return v != null ? prev = v : prev;\n        }\n      };\n    },\n    next_value: function (field) {\n      let v, i;\n      return {\n        init: () => (v = null, i = -1),\n        next: w => {\n          const d = w.data;\n          return w.index <= i ? v : (i = find(field, d, w.index)) < 0 ? (i = d.length, v = null) : v = field(d[i]);\n        }\n      };\n    }\n  };\n  function find(field, data, index) {\n    for (let n = data.length; index < n; ++index) {\n      const v = field(data[index]);\n      if (v != null) return index;\n    }\n    return -1;\n  }\n  const ValidWindowOps = Object.keys(WindowOps);\n\n  function WindowState(_) {\n    const ops = vegaUtil.array(_.ops),\n      fields = vegaUtil.array(_.fields),\n      params = vegaUtil.array(_.params),\n      as = vegaUtil.array(_.as),\n      outputs = this.outputs = [],\n      windows = this.windows = [],\n      inputs = {},\n      map = {},\n      counts = [],\n      measures = [];\n    let countOnly = true;\n    function visitInputs(f) {\n      vegaUtil.array(vegaUtil.accessorFields(f)).forEach(_ => inputs[_] = 1);\n    }\n    visitInputs(_.sort);\n    ops.forEach((op, i) => {\n      const field = fields[i],\n        mname = vegaUtil.accessorName(field),\n        name = measureName(op, mname, as[i]);\n      visitInputs(field);\n      outputs.push(name);\n\n      // Window operation\n      if (vegaUtil.hasOwnProperty(WindowOps, op)) {\n        windows.push(WindowOp(op, fields[i], params[i], name));\n      }\n\n      // Aggregate operation\n      else {\n        if (field == null && op !== 'count') {\n          vegaUtil.error('Null aggregate field specified.');\n        }\n        if (op === 'count') {\n          counts.push(name);\n          return;\n        }\n        countOnly = false;\n        let m = map[mname];\n        if (!m) {\n          m = map[mname] = [];\n          m.field = field;\n          measures.push(m);\n        }\n        m.push(createMeasure(op, name));\n      }\n    });\n    if (counts.length || measures.length) {\n      this.cell = cell(measures, counts, countOnly);\n    }\n    this.inputs = Object.keys(inputs);\n  }\n  const prototype = WindowState.prototype;\n  prototype.init = function () {\n    this.windows.forEach(_ => _.init());\n    if (this.cell) this.cell.init();\n  };\n  prototype.update = function (w, t) {\n    const cell = this.cell,\n      wind = this.windows,\n      data = w.data,\n      m = wind && wind.length;\n    let j;\n    if (cell) {\n      for (j = w.p0; j < w.i0; ++j) cell.rem(data[j]);\n      for (j = w.p1; j < w.i1; ++j) cell.add(data[j]);\n      cell.set(t);\n    }\n    for (j = 0; j < m; ++j) wind[j].update(w, t);\n  };\n  function cell(measures, counts, countOnly) {\n    measures = measures.map(m => compileMeasures(m, m.field));\n    const cell = {\n      num: 0,\n      agg: null,\n      store: false,\n      count: counts\n    };\n    if (!countOnly) {\n      var n = measures.length,\n        a = cell.agg = Array(n),\n        i = 0;\n      for (; i < n; ++i) a[i] = new measures[i](cell);\n    }\n    if (cell.store) {\n      var store = cell.data = new TupleStore();\n    }\n    cell.add = function (t) {\n      cell.num += 1;\n      if (countOnly) return;\n      if (store) store.add(t);\n      for (let i = 0; i < n; ++i) {\n        a[i].add(a[i].get(t), t);\n      }\n    };\n    cell.rem = function (t) {\n      cell.num -= 1;\n      if (countOnly) return;\n      if (store) store.rem(t);\n      for (let i = 0; i < n; ++i) {\n        a[i].rem(a[i].get(t), t);\n      }\n    };\n    cell.set = function (t) {\n      let i, n;\n\n      // consolidate stored values\n      if (store) store.values();\n\n      // update tuple properties\n      for (i = 0, n = counts.length; i < n; ++i) t[counts[i]] = cell.num;\n      if (!countOnly) for (i = 0, n = a.length; i < n; ++i) a[i].set(t);\n    };\n    cell.init = function () {\n      cell.num = 0;\n      if (store) store.reset();\n      for (let i = 0; i < n; ++i) a[i].init();\n    };\n    return cell;\n  }\n\n  /**\n   * Perform window calculations and write results to the input stream.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(*,*): number} [params.sort] - A comparator function for sorting tuples within a window.\n   * @param {Array<function(object): *>} [params.groupby] - An array of accessors by which to partition tuples into separate windows.\n   * @param {Array<string>} params.ops - An array of strings indicating window operations to perform.\n   * @param {Array<function(object): *>} [params.fields] - An array of accessors\n   *   for data fields to use as inputs to window operations.\n   * @param {Array<*>} [params.params] - An array of parameter values for window operations.\n   * @param {Array<string>} [params.as] - An array of output field names for window operations.\n   * @param {Array<number>} [params.frame] - Window frame definition as two-element array.\n   * @param {boolean} [params.ignorePeers=false] - If true, base window frame boundaries on row\n   *   number alone, ignoring peers with identical sort values. If false (default),\n   *   the window boundaries will be adjusted to include peer values.\n   */\n  function Window(params) {\n    vegaDataflow.Transform.call(this, {}, params);\n    this._mlen = 0;\n    this._mods = [];\n  }\n  Window.Definition = {\n    'type': 'Window',\n    'metadata': {\n      'modifies': true\n    },\n    'params': [{\n      'name': 'sort',\n      'type': 'compare'\n    }, {\n      'name': 'groupby',\n      'type': 'field',\n      'array': true\n    }, {\n      'name': 'ops',\n      'type': 'enum',\n      'array': true,\n      'values': ValidWindowOps.concat(ValidAggregateOps)\n    }, {\n      'name': 'params',\n      'type': 'number',\n      'null': true,\n      'array': true\n    }, {\n      'name': 'fields',\n      'type': 'field',\n      'null': true,\n      'array': true\n    }, {\n      'name': 'as',\n      'type': 'string',\n      'null': true,\n      'array': true\n    }, {\n      'name': 'frame',\n      'type': 'number',\n      'null': true,\n      'array': true,\n      'length': 2,\n      'default': [null, 0]\n    }, {\n      'name': 'ignorePeers',\n      'type': 'boolean',\n      'default': false\n    }]\n  };\n  vegaUtil.inherits(Window, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      this.stamp = pulse.stamp;\n      const mod = _.modified(),\n        cmp = vegaDataflow.stableCompare(_.sort),\n        key = groupkey(_.groupby),\n        group = t => this.group(key(t));\n\n      // initialize window state\n      let state = this.state;\n      if (!state || mod) {\n        state = this.state = new WindowState(_);\n      }\n\n      // partition input tuples\n      if (mod || pulse.modified(state.inputs)) {\n        this.value = {};\n        pulse.visit(pulse.SOURCE, t => group(t).add(t));\n      } else {\n        pulse.visit(pulse.REM, t => group(t).remove(t));\n        pulse.visit(pulse.ADD, t => group(t).add(t));\n      }\n\n      // perform window calculations for each modified partition\n      for (let i = 0, n = this._mlen; i < n; ++i) {\n        processPartition(this._mods[i], state, cmp, _);\n      }\n      this._mlen = 0;\n      this._mods = [];\n\n      // TODO don't reflow everything?\n      return pulse.reflow(mod).modifies(state.outputs);\n    },\n    group(key) {\n      let group = this.value[key];\n      if (!group) {\n        group = this.value[key] = SortedList(vegaDataflow.tupleid);\n        group.stamp = -1;\n      }\n      if (group.stamp < this.stamp) {\n        group.stamp = this.stamp;\n        this._mods[this._mlen++] = group;\n      }\n      return group;\n    }\n  });\n  function processPartition(list, state, cmp, _) {\n    const sort = _.sort,\n      range = sort && !_.ignorePeers,\n      frame = _.frame || [null, 0],\n      data = list.data(cmp),\n      // use cmp for stable sort\n      n = data.length,\n      b = range ? bisector(sort) : null,\n      w = {\n        i0: 0,\n        i1: 0,\n        p0: 0,\n        p1: 0,\n        index: 0,\n        data: data,\n        compare: sort || vegaUtil.constant(-1)\n      };\n    state.init();\n    for (let i = 0; i < n; ++i) {\n      setWindow(w, frame, i, n);\n      if (range) adjustRange(w, b);\n      state.update(w, data[i]);\n    }\n  }\n  function setWindow(w, f, i, n) {\n    w.p0 = w.i0;\n    w.p1 = w.i1;\n    w.i0 = f[0] == null ? 0 : Math.max(0, i - Math.abs(f[0]));\n    w.i1 = f[1] == null ? n : Math.min(n, i + Math.abs(f[1]) + 1);\n    w.index = i;\n  }\n\n  // if frame type is 'range', adjust window for peer values\n  function adjustRange(w, bisect) {\n    const r0 = w.i0,\n      r1 = w.i1 - 1,\n      c = w.compare,\n      d = w.data,\n      n = d.length - 1;\n    if (r0 > 0 && !c(d[r0], d[r0 - 1])) w.i0 = bisect.left(d, d[r0]);\n    if (r1 < n && !c(d[r1], d[r1 + 1])) w.i1 = bisect.right(d, d[r1]);\n  }\n\n  exports.aggregate = Aggregate;\n  exports.bin = Bin;\n  exports.collect = Collect;\n  exports.compare = Compare;\n  exports.countpattern = CountPattern;\n  exports.cross = Cross;\n  exports.density = Density;\n  exports.dotbin = DotBin;\n  exports.expression = Expression;\n  exports.extent = Extent;\n  exports.facet = Facet;\n  exports.field = Field;\n  exports.filter = Filter;\n  exports.flatten = Flatten;\n  exports.fold = Fold;\n  exports.formula = Formula;\n  exports.generate = Generate;\n  exports.impute = Impute;\n  exports.joinaggregate = JoinAggregate;\n  exports.kde = KDE;\n  exports.key = Key;\n  exports.load = Load;\n  exports.lookup = Lookup;\n  exports.multiextent = MultiExtent;\n  exports.multivalues = MultiValues;\n  exports.params = Params;\n  exports.pivot = Pivot;\n  exports.prefacet = PreFacet;\n  exports.project = Project;\n  exports.proxy = Proxy;\n  exports.quantile = Quantile;\n  exports.relay = Relay;\n  exports.sample = Sample;\n  exports.sequence = Sequence;\n  exports.sieve = Sieve;\n  exports.subflow = Subflow;\n  exports.timeunit = TimeUnit;\n  exports.tupleindex = TupleIndex;\n  exports.values = Values;\n  exports.window = Window;\n\n}));\n\n};"],
"names":["shadow$provide","global","require","module","exports","factory","define","amd","globalThis","self","vega","vegaUtil","vegaDataflow","vegaStatistics","vegaTime","multikey","f","x","n","length","i","k","String","groupkey","fields","measure","key","value","out","extend","name","base_op","compareIndex","a","b","idx","resolve","agg","map","forEach","getreqs","req","AggregateOps","Object","values","sort","init","missing","valid","_ops","op","add","v","t","rem","set","_out","compileMeasures","field","ctr","cell","ops","get","identity","slice","prototype","TupleStore","_key","tupleid","reset","Aggregate","params","Transform","call","_adds","_mods","_mlen","_alen","_drop","_cross","_dims","_dnames","_measures","_countOnly","_outputs","_inputs","_prev","_counts","Bin","SortedList","idFunc","source","input","data","cnt","push","remove","size","compare","resort","filter","merge","concat","Collect","Compare","Operator","update$5","_","modified","orders","CountPattern","Cross","parse","def","func","FUNCTION","hasOwnProperty","Distributions","error","d","FIELD","from","DISTRIBUTIONS","Density","pulse","materialize","SOURCE","fieldNames","as","accessorName","partition$1","groupby","groups","g","dims","DotBin","Expression","update$4","expr","accessor","datum","accessorFields","Extent","undefined","Subflow","parent","count","Facet","_keys","fastmap","_targets","active","a.forEach","Field","update$3","isArray","array","Filter","Flatten","Fold","Formula","Generate","ascending","NaN","descending","bisector","left","lo","hi","compare1","mid","compare2","delta","zero","center","right","numbers","valueof","index","compareDefined","ascendingDefined","TypeError","max","min","quickselect","Infinity","Math","floor","m","z","log","s","exp","sd","sqrt","newLeft","newRight","j","swap","range","start","stop","step","arguments","ceil","Array","Impute","getValue","method","Methods","getField","partition","keyvals","domain","kMap","gMap","group","gKey","gVals","Empty","JoinAggregate","KDE","Key","update$2","flat","Load","_pending","output","ingest","fork","NO_FIELDS","NO_SOURCE","clean","Lookup","MultiExtent","update$1","ext","extents","e","MultiValues","update","reduce","Params","Pivot","aggregateParams","keys","pivotKeys","limit","changed","bind","list","visit","PreFacet","Project","Proxy","Quantile","Relay","Sample","Sequence","Sieve","TimeUnit","TupleIndex","Values","WindowOp","param","fn","WindowOps","w","next","WindowState","visitInputs","inputs","outputs","windows","counts","measures","countOnly","mname","num","store","cell.add","cell.rem","cell.set","cell.init","Window","processPartition","state","cmp","ignorePeers","frame","i0","i1","p0","p1","constant","abs","r0","r1","c","bisect","noop","__count__","sum","product","mean","mean_d","average","variance","dev","variancep","stdev","stdevp","stderr","distinct","ci0","ci1","median","q2","q1","q3","Number","isNaN","argmin","argmax","ValidAggregateOps","prototype$1","prototype$1.reset","_add","_rem","_q","_get","_ext","prototype$1.add","prototype$1.rem","prototype$1.values","r","prototype$1.distinct","extent","prototype$1.extent","extentIndex","prototype$1.argmin","prototype$1.argmax","prototype$1.min","prototype$1.max","quartile","prototype$1.quartile","quartiles","prototype$1.q1","prototype$1.q2","prototype$1.q3","ci","prototype$1.ci","_ci","bootstrapCI","prototype$1.ci0","prototype$1.ci1","Definition","inherits","transform","aggr","mod","stamp","create","REM","ADD","modifies","drop","cross","runAfter","changes","collect","cells","tuple","vals","generate","base","curr","inputVisit","inputMap","dname","cellkey","outname","newcell","newtuple","p","names","replace","celltuple","adds","mods","prev","band","interval","bins","_bins","b0","b1","reflow","flag","ADD_MOD","bin","anchor","toNumber","EPSILON$1","ALL","stableCompare","root","process","match","case","text","toUpperCase","toLowerCase","tokens","test","_parameterCheck","_match","_stop","_finish","RegExp","stopwords","pattern","tuples","_tuples","ADD_REM","truthy","kde","randomKDE","mixture","randomMixture","normal","randomNormal","lognormal","randomLogNormal","uniform","randomUniform","distributions","dist","distribution","minsteps","steps","maxsteps","sampleCurve","Output","smooth","span","dotbin","isFinite","dataflow","warn","connect","target","detachSubflow","targets","evaluate","activate","flow","subflow","flows","sf","_group","df","detached","detach","initTargets","act","cache","rekey","id","delete","MOD","k0","k1","REFLOW","empty","cleanThreshold","revisit","isMod","has","arrays","maxlen","l","derive","fnames","initonly","gen","generator","Float64Array","value0","subarray","value1","impute","fName","kName","gNames","kVal","_impute","bandwidth","cumulative","density","scale","local","StopPropagation","format","async","request","url","then","res","touch","defaultValue","default","some","_transform","rederive","lut","addAll","dt","probs","EPSILON","q","quantiles","random","cap","OUTPUT","TIME_UNITS","utc","timezone","_floor","offset","utcInterval","timeInterval","unit","u0","u1","units","timeBin","maxbins","tunits","timeUnits","utcFloor","timeFloor","peek","clear","row_number","rank","dense_rank","drank","percent_rank","cume_dist","cume","ntile","lag","lead","first_value","last_value","nth_value","nth","prev_value","next_value","ValidWindowOps","prototype.init","prototype.update","wind","aggregate","countpattern","expression","facet","flatten","fold","formula","joinaggregate","load","lookup","multiextent","multivalues","pivot","prefacet","project","proxy","quantile","relay","sample","sequence","sieve","timeunit","tupleindex","window"]
}
