{
"version":3,
"file":"module$node_modules$$tanstack$table_core$build$lib$features$Ordering.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,CAAA,oEAAA,CAAyF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAajIC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAAEG,MAAO,CAAA,CAAT,CAA7C,CAEA,KAAIC,MAAQN,OAAA,CAAQ,0DAAR,CAAZ,CACIO,SAAWP,OAAA,CAAQ,sEAAR,CA4DfE,QAAQM,CAAAA,QAAR,CAxDiBA,CACfC,gBAAiBC,KAAAD,EACR,MAAA,CAAA,MAAA,CAAA,EAAA,CAAA,CACLE,YAAa,EADR,CAAA,CAEFD,KAFE,CAFMF,CAOfI,kBAAmBC,KAAAD,EACV,EACLE,oBAAqBR,KAAMS,CAAAA,gBAAN,CAAuB,aAAvB;AAAsCF,KAAtC,CADhB,EARML,CAYfQ,YAAaH,KAAAG,EACJ,EACLC,eAAgBC,OAAAD,EAAgD,IAArC,EAAAJ,KAAMM,CAAAA,OAAQL,CAAAA,mBAAd,CAA4C,IAAK,EAAjD,CAAqDD,KAAMM,CAAAA,OAAQL,CAAAA,mBAAd,CAAkCI,OAAlC,CAD3E,CAELE,iBAAkBC,YAAAD,EAAgB,CAChC,IAAIE,qBACJT,MAAMI,CAAAA,cAAN,CAAqBI,YAAA,CAAe,EAAf,CAAgF,IAA5D,GAACC,qBAAD,CAAyBT,KAAMU,CAAAA,YAAaZ,CAAAA,WAA5C,EAAmEW,qBAAnE,CAA2F,EAApI,CAFgC,CAF7B,CAMLE,mBAAoBlB,KAAMmB,CAAAA,IAAN,CAAW,EAAA,EAAM,CAACZ,KAAMa,CAAAA,QAAN,EAAiBf,CAAAA,WAAlB,CAA+BE,KAAMa,CAAAA,QAAN,EAAiBC,CAAAA,QAAhD,CAA0Dd,KAAMM,CAAAA,OAAQS,CAAAA,iBAAxE,CAAjB,CAA6G,CAACjB,WAAD,CAAcgB,QAAd,CAAwBC,iBAAxB,CAAA,EAA8CC,OAAA;AAAW,CAGxL,IAAIC,eAAiB,EAGrB,IAAqB,IAArB,EAAMnB,WAAN,EAA6BA,WAAYoB,CAAAA,MAAzC,CAEO,CACL,MAAMC,gBAAkB,CAAC,GAAGrB,WAAJ,CAQxB,KALMsB,OAKN,CALoB,CAAC,GAAGJ,OAAJ,CAKpB,CAAOI,OAAYF,CAAAA,MAAnB,EAA6BC,eAAgBD,CAAAA,MAA7C,CAAA,CAAqD,CACnD,MAAMG,eAAiBF,eAAgBG,CAAAA,KAAhB,EAAvB,CACMC,WAAaH,OAAYI,CAAAA,SAAZ,CAAsBC,CAAA,EAAKA,CAAEC,CAAAA,EAAP,GAAcL,cAApC,CACF,EAAC,CAAlB,CAAIE,UAAJ,EACEN,cAAeU,CAAAA,IAAf,CAAoBP,OAAYQ,CAAAA,MAAZ,CAAmBL,UAAnB,CAA+B,CAA/B,CAAA,CAAkC,CAAlC,CAApB,CAJiD,CASrDN,cAAA,CAAiB,CAAC,GAAGA,cAAJ,CAAoB,GAAGG,OAAvB,CAlBZ,CAFP,IACEH,eAAA,CAAiBD,OAqBnB,OAAOtB,SAASmC,CAAAA,YAAT,CAAsBZ,cAAtB,CAAsCH,QAAtC,CAAgDC,iBAAhD,CA5BiL,CAAtK,CA6BjB,CACDe,IAA+C,mBAD9C,CA7BiB,CANf,EAbMnC,CApBgH;",
"sources":["node_modules/@tanstack/table-core/build/lib/features/Ordering.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$tanstack$table_core$build$lib$features$Ordering\"] = function(global,require,module,exports) {\n/**\n * table-core\n *\n * Copyright (c) TanStack\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar utils = require('../utils.js');\nvar Grouping = require('./Grouping.js');\n\n//\n\nconst Ordering = {\n  getInitialState: state => {\n    return {\n      columnOrder: [],\n      ...state\n    };\n  },\n  getDefaultOptions: table => {\n    return {\n      onColumnOrderChange: utils.makeStateUpdater('columnOrder', table)\n    };\n  },\n  createTable: table => {\n    return {\n      setColumnOrder: updater => table.options.onColumnOrderChange == null ? void 0 : table.options.onColumnOrderChange(updater),\n      resetColumnOrder: defaultState => {\n        var _table$initialState$c;\n        table.setColumnOrder(defaultState ? [] : (_table$initialState$c = table.initialState.columnOrder) != null ? _table$initialState$c : []);\n      },\n      _getOrderColumnsFn: utils.memo(() => [table.getState().columnOrder, table.getState().grouping, table.options.groupedColumnMode], (columnOrder, grouping, groupedColumnMode) => columns => {\n        // Sort grouped columns to the start of the column list\n        // before the headers are built\n        let orderedColumns = [];\n\n        // If there is no order, return the normal columns\n        if (!(columnOrder != null && columnOrder.length)) {\n          orderedColumns = columns;\n        } else {\n          const columnOrderCopy = [...columnOrder];\n\n          // If there is an order, make a copy of the columns\n          const columnsCopy = [...columns];\n\n          // And make a new ordered array of the columns\n\n          // Loop over the columns and place them in order into the new array\n          while (columnsCopy.length && columnOrderCopy.length) {\n            const targetColumnId = columnOrderCopy.shift();\n            const foundIndex = columnsCopy.findIndex(d => d.id === targetColumnId);\n            if (foundIndex > -1) {\n              orderedColumns.push(columnsCopy.splice(foundIndex, 1)[0]);\n            }\n          }\n\n          // If there are any columns left, add them to the end\n          orderedColumns = [...orderedColumns, ...columnsCopy];\n        }\n        return Grouping.orderColumns(orderedColumns, grouping, groupedColumnMode);\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getOrderColumnsFn'\n        // debug: () => table.options.debugAll ?? table.options.debugTable,\n      })\n    };\n  }\n};\n\nexports.Ordering = Ordering;\n//# sourceMappingURL=Ordering.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","utils","Grouping","Ordering","getInitialState","state","columnOrder","getDefaultOptions","table","onColumnOrderChange","makeStateUpdater","createTable","setColumnOrder","updater","options","resetColumnOrder","defaultState","_table$initialState$c","initialState","_getOrderColumnsFn","memo","getState","grouping","groupedColumnMode","columns","orderedColumns","length","columnOrderCopy","columnsCopy","targetColumnId","shift","foundIndex","findIndex","d","id","push","splice","orderColumns","key"]
}
