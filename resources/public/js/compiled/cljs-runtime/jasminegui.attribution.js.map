{"version":3,"sources":["jasminegui/attribution.cljs"],"mappings":"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","names":["jasminegui.attribution/dropdown-width","jasminegui.attribution/single-portfolio-attribution-display","cljs.core/deref","p1__63278#","is-tree","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","G__63281","re-frame.core/subscribe","risk-choices","rfil","G__63282","p1__63276#","cljs.core.mapv.cljs$core$IFn$_invoke$arity$2","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core.range.cljs$core$IFn$_invoke$arity$2","grouping-columns","cljs.core.into.cljs$core$IFn$_invoke$arity$2","iter__4529__auto__","s__63286","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","cljs.core/count","b__63288","cljs.core/chunk-buffer","i__63287","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__63285","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","r","cljs.core.remove.cljs$core$IFn$_invoke$arity$2","cljs.core/nil?","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","jasminegui.tables/attribution-table-columns","additional-des-cols","cljs.core/set","cljs.core.map.cljs$core$IFn$_invoke$arity$2","jasminegui.static/attribution-choice-map","accessors","display","G__63333","js/module$node_modules$react_table$lib$index.default","jasminegui.tables/case-insensitive-filter","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","cljs.core.distinct.cljs$core$IFn$_invoke$arity$1","cljs.core.keyword.cljs$core$IFn$_invoke$arity$1","G__63393","G__63344","re-frame.core/dispatch","jasminegui.attribution/multiple-portfolio-attribution-display","p1__63409#","display-key-one","G__63412","width-one","G__63415","attribution-choices","G__63418","p1__63403#","s__63426","b__63428","i__63427","iter__63425","display-one","G__63454","cols","s__63456","b__63458","i__63457","iter__63455","p","G__63468","cljs.core/some","G__63459","G__63463","jasminegui.tables/sum-rows","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","cljs.core/name","G__63483","G__63477","jasminegui.attribution/shortcut-row","key","shortcut","G__63489","re-com.core/title","s__63493","b__63495","i__63494","iter__63492","i","re-com.core/md-circle-icon-button","G__63507","G__63514","jasminegui.attribution/filtering-row","risk-filter","G__63521","s__63524","b__63526","i__63525","p1__63517#","iter__63523","re-com.core/single-dropdown","reagent.core/cursor","G__63541","G__63548","jasminegui.attribution/csv-link","data","filename","jasminegui.tools/download-object-as-csv","cljs.core/clj->js","jasminegui.tools/vector-of-maps->csv","jasminegui.attribution/single-portfolio-attribution-controller","p1__63557#","p1__63558#","portfolio-map","s__63575","b__63577","i__63576","iter__63574","G__63584","display-style","G__63586","portfolio","G__63589","period","G__63590","re-com.core/box","re-com.core/v-box","G__63595","re-com.core/h-box","re-com.core/gap","jasminegui.static/tree-table-choices","G__63597","jasminegui.static/attribution-period-choices","G__63600","p1__63567#","G__63603","G__63606","jasminegui.attribution/multiple-portfolio-attribution-controller","p1__63608#","p1__63609#","p1__63610#","p1__63615#","s__63619","b__63621","i__63620","iter__63618","G__63623","G__63624","portfolios","G__63625","selected-portfolios","G__63626","field-one","G__63627","G__63628","G__63636","G__63639","G__63640","jasminegui.static/attribution-field-choices","G__63641","re-com.core/button","G__63642","G__63645","G__63646","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","x","jasminegui.static/portfolio-alignment-groups","G__63649","G__63651","G__63658","re-com.core/selection-list","G__63660","G__63662","jasminegui.attribution/go-to-attribution-risk","state","rowInfo","instance","G__63669","re-frame.core/dispatch-sync","G__63670","jasminegui.attribution/summary-display","fmt","jasminegui.tables/round2colpct","timeframes","targets","G__63672","G__63673","s__63675","b__63677","i__63676","vec__63680","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","iter__63674","vec__63709","k1","v1","s__63684","b__63686","i__63685","vec__63693","iter__63683","vec__63701","s__63715","b__63717","i__63716","vec__63727","iter__63714","vec__63734","k2","v2","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","G__63757","jasminegui.attribution/nav-attribution-bar","active-home","G__63766","s__63769","b__63771","i__63770","iter__63768","item","jasminegui.static/attribution-navigation","G__63781","G__63783","jasminegui.attribution/active-home","js/window","G__63786","cljs.core/Keyword","G__63788","jasminegui.attribution/home-view","cljs.core/chunk-first"],"sourcesContent":["(ns jasminegui.attribution\r\n  (:require\r\n    [re-frame.core :as rf]\r\n    [reagent.core :as r]\r\n    [goog.string :as gstring]\r\n    [goog.string.format]\r\n    [re-com.core :refer [p p-span h-box v-box box gap line scroller border label title button close-button checkbox hyperlink-href slider horizontal-bar-tabs radio-button info-button\r\n                         single-dropdown hyperlink modal-panel alert-box throbber input-password selection-list md-circle-icon-button\r\n                         input-text input-textarea popover-anchor-wrapper popover-content-wrapper popover-tooltip datepicker-dropdown] :refer-macros [handler-fn]]\r\n    [re-com.box :refer [h-box-args-desc v-box-args-desc box-args-desc gap-args-desc line-args-desc scroller-args-desc border-args-desc flex-child-style]]\r\n    [re-com.util :refer [px]]\r\n    [\"react-table\" :as rt :default ReactTable]\r\n    [jasminegui.mount :as mount]\r\n    [jasminegui.static :as static]\r\n    [jasminegui.tools :as tools]\r\n    [jasminegui.tables :as tables]\r\n\r\n    [re-com.validate :refer [string-or-hiccup? alert-type? vector-of-maps?]])\r\n  (:import (goog.i18n NumberFormat)\r\n           (goog.i18n.NumberFormat Format))\r\n  )\r\n\r\n\r\n\r\n\r\n\r\n;\r\n;\r\n;(defn strategy-pop-up [this]\r\n;  (r/as-element [:div [:span {:title (aget this \"row\" \"strategy\")} (aget this \"row\" \"strategy-shortcut\")]]))\r\n;\r\n;(defn last-price-props [this]\r\n;  (if-not (nil? this)\r\n;    (let [status (aget this \"row\" \"status\")\r\n;          prefix (if (= status \"CLOSED\") \"(c) \" \"\")]\r\n;      (r/as-element (str prefix (gstring/format \"%.2f\" (aget this \"value\")))))\r\n;    (clj->js {:style nil})))\r\n;\r\n\r\n(def dropdown-width \"150px\")\r\n\r\n(defn single-portfolio-attribution-display []\r\n  (let [\r\n        is-tree (= @(rf/subscribe [:single-portfolio-attribution/display-style]) \"Tree\")\r\n        risk-choices (let [rfil @(rf/subscribe [:single-portfolio-attribution/filter])] (mapv #(if (not= \"None\" (rfil %)) (rfil %)) (range 1 4)))\r\n        grouping-columns (into [] (for [r (remove nil? (conj risk-choices :security))] (tables/attribution-table-columns r)))\r\n        additional-des-cols (remove (set (conj risk-choices \"None\")) (map :id static/attribution-choice-map))\r\n        accessors (mapv :accessor grouping-columns)\r\n        display  @(rf/subscribe [:single-portfolio-attribution/clean-table])]\r\n    ;(println additional-des-cols)\r\n    [:> ReactTable\r\n     {:data                display\r\n      :defaultFilterMethod tables/case-insensitive-filter\r\n      :columns [\r\n                {:Header \"Groups\" :columns grouping-columns}\r\n                {:Header \"Effect\" :columns (mapv tables/attribution-table-columns [:total-effect])}\r\n                {:Header \"Contribution\" :columns (mapv tables/attribution-table-columns [:contribution :bm-contribution])}\r\n                {:Header \"Weight\" :columns (mapv tables/attribution-table-columns [:xs-weight :weight :bm-weight])}\r\n                {:Header \"Additional information\" :columns (mapv tables/attribution-table-columns (concat additional-des-cols [:code :rating]))}\r\n                            ]\r\n      :showPagination      (not is-tree)\r\n      :sortable            (not is-tree)\r\n      :filterable          (not is-tree)\r\n      :pageSize            (if is-tree (inc (count (distinct (map (keyword (first accessors)) display)))) 25) ;(inc (count display))\r\n      :className           \"-striped -highlight\"\r\n      :pivotBy             (if is-tree accessors [])\r\n      :defaultFiltered     (if is-tree [] @(rf/subscribe [:single-portfolio-attribution/table-filter]))\r\n      :onFilteredChange    #(rf/dispatch [:single-portfolio-attribution/table-filter %])\r\n      ;\r\n      }]\r\n\r\n    ))\r\n\r\n\r\n(defn multiple-portfolio-attribution-display []\r\n  (let [display-key-one @(rf/subscribe [:multiple-portfolio-attribution/field-one])\r\n        width-one 100                                      ;(get-in tables/table-columns [display-key-one :width])\r\n        is-tree (= @(rf/subscribe [:multiple-portfolio-attribution/display-style]) \"Tree\")\r\n        attribution-choices (let [rfil @(rf/subscribe [:multiple-portfolio-attribution/filter])] (mapv #(if (not= \"None\" (rfil %)) (rfil %)) (range 1 4)))\r\n        grouping-columns (into [] (for [r (remove nil? (conj attribution-choices :security))] (tables/attribution-table-columns r)))\r\n        accessors (mapv :accessor grouping-columns)\r\n        display-one @(rf/subscribe [:multiple-portfolio-attribution/clean-table])\r\n        cols (into [] (for [p @(rf/subscribe [:portfolios]) :when (some #{p} @(rf/subscribe [:multiple-portfolio-attribution/selected-portfolios]))]\r\n                        {:Header p\r\n                         :accessor p\r\n                         :width width-one\r\n                         :style {:textAlign \"right\"}\r\n                         :aggregate tables/sum-rows\r\n                         :Cell (get-in tables/attribution-table-columns [display-key-one :Cell])\r\n                         :filterable false}))]\r\n    ;(println (nth display-one 800))\r\n    [:> ReactTable\r\n     {:data                display-one\r\n      :defaultFilterMethod tables/case-insensitive-filter\r\n      :columns             [{:Header \"Groups\" :columns grouping-columns}\r\n                            {:Header (str \"Portfolio \" (name display-key-one)) :columns cols}\r\n                            {:Header \"Description\" :columns (mapv tables/attribution-table-columns [:code :rating])}\r\n                            ]\r\n      :showPagination      (not is-tree)\r\n      :sortable            (not is-tree)\r\n      :filterable          (not is-tree)\r\n      :pageSize            (if is-tree (inc (count (distinct (map (keyword (first accessors)) display-one)))) 25)\r\n      :className           \"-striped -highlight\"\r\n      :pivotBy             (if is-tree accessors [])\r\n      :defaultFiltered     (if is-tree [] @(rf/subscribe [:multiple-portfolio-attribution/table-filter])) ; [{:id \"analyst\" :value \"Tammy\"}]\r\n      :onFilteredChange    #(rf/dispatch [:multiple-portfolio-attribution/table-filter %])}]\r\n\r\n    ))\r\n\r\n\r\n(defn shortcut-row [key]\r\n  (let [shortcut (rf/subscribe [key])]\r\n    (into [] (concat [[title :label \"Shortcuts:\" :level :level3]]\r\n                     (into [] (for [i (range 1 5)]\r\n                                [md-circle-icon-button\r\n                                 :md-icon-name (str \"zmdi-collection-item-\" i)\r\n                                 :class (if (= @shortcut i) \"active\" \"default\")\r\n                                 :on-click #(rf/dispatch [key i])]))))))\r\n\r\n(defn filtering-row [key]\r\n  (let [risk-filter (rf/subscribe [key])]\r\n    (into [] (for [i (range 1 4)]\r\n               [single-dropdown\r\n                :width dropdown-width\r\n                :model (r/cursor risk-filter [i])\r\n                :choices static/attribution-choice-map\r\n                :on-change #(rf/dispatch [key i %])]))))\r\n\r\n(defn csv-link [data filename]\r\n  (tools/download-object-as-csv (clj->js (tools/vector-of-maps->csv data)) (str filename \".csv\")))\r\n\r\n(defn single-portfolio-attribution-controller []\r\n  (let [portfolio-map (into [] (for [p @(rf/subscribe [:portfolios])] {:id p :label p}))\r\n        display-style (rf/subscribe [:single-portfolio-attribution/display-style])\r\n        portfolio (rf/subscribe [:single-portfolio-attribution/portfolio])\r\n        period (rf/subscribe [:single-portfolio-attribution/period])]\r\n    [box :class \"subbody rightelement\" :child\r\n     [v-box :class \"element\" :align-self :center :justify :center :gap \"20px\"\r\n      :children [[title :label (str \"Attribution drill-down \" @(rf/subscribe [:attribution-date])) :level :level1]\r\n                 [h-box :gap \"50px\"\r\n                  :children [\r\n                             [v-box :gap \"15px\"\r\n                              :children [\r\n                                         [h-box\r\n                                          :gap \"10px\"\r\n                                          :children [\r\n                                                     [title :label \"Display type:\" :level :level3]\r\n                                                     [gap :size \"1\"]\r\n                                                     [single-dropdown :width dropdown-width :model display-style :choices static/tree-table-choices :on-change #(rf/dispatch [:single-portfolio-attribution/display-style %])]]]\r\n                                         [h-box\r\n                                          :gap \"10px\"\r\n                                          :children [\r\n                                                     [title :label \"Period:\" :level :level3]\r\n                                                     [gap :size \"1\"]\r\n                                                     [single-dropdown :width dropdown-width :model period :choices static/attribution-period-choices :on-change #(rf/dispatch [:change-single-attribution-period %])]]]\r\n                                         ]]\r\n                             [v-box :gap \"10px\" :children [\r\n                                                           [h-box :gap \"10px\" :children\r\n                                                            (into [] (concat [[title :label \"Filtering:\" :level :level3]\r\n                                                                              [single-dropdown :width dropdown-width :model portfolio :choices portfolio-map :on-change #(rf/dispatch [:change-single-attribution-portfolio %])]]\r\n                                                                             (filtering-row :single-portfolio-attribution/filter)))]\r\n                                                           [h-box :gap \"20px\" :children (into [] (concat\r\n                                                                                                   (shortcut-row :single-portfolio-attribution/shortcut)\r\n                                                                                                   [[gap :size \"50px\"]\r\n                                                                                                    [title :label \"Download:\" :level :level3]\r\n                                                                                                    [md-circle-icon-button :md-icon-name \"zmdi-download\" :on-click #(csv-link @(rf/subscribe [:single-portfolio-attribution/table]) @portfolio)]]))]]]]]\r\n                 [single-portfolio-attribution-display]]]]))\r\n\r\n\r\n;(defn csv-link-multiple-portfolio []\r\n;  (tools/download-object-as-csv\r\n;    (clj->js (tools/vector-of-maps->csv @(rf/subscribe [:multiple-portfolio-risk/table])))\r\n;    \"pivot.csv\"))\r\n\r\n(defn multiple-portfolio-attribution-controller []\r\n  (let [portfolio-map (into [] (for [p  @(rf/subscribe [:portfolios])] {:id p :label p}))\r\n        display-style (rf/subscribe [:multiple-portfolio-attribution/display-style])\r\n        portfolios @(rf/subscribe [:portfolios])\r\n        selected-portfolios (rf/subscribe [:multiple-portfolio-attribution/selected-portfolios])\r\n        field-one (rf/subscribe [:multiple-portfolio-attribution/field-one])\r\n        period (rf/subscribe [:multiple-portfolio-attribution/period])]\r\n    [box :class \"subbody rightelement\" :child\r\n     [v-box :class \"element\" :align-self :center :justify :center :gap \"20px\"\r\n      :children [[title :label (str \"Attribution drill-down \" @(rf/subscribe [:attribution-date])) :level :level1]\r\n                 [h-box :gap \"50px\"\r\n                  :children\r\n                  [\r\n                   [v-box :gap \"20px\"\r\n                    :children [\r\n                               [h-box :gap \"10px\" :children [[title :label \"Display type:\" :level :level3] [gap :size \"1\"] [single-dropdown :width dropdown-width :model display-style :choices static/tree-table-choices :on-change #(rf/dispatch [:multiple-portfolio-attribution/display-style %])]]]\r\n                               [h-box :gap \"10px\" :children [[title :label \"Period:\" :level :level3] [gap :size \"1\"] [single-dropdown :width dropdown-width :model period :choices static/attribution-period-choices :on-change #(rf/dispatch [:change-multiple-attribution-period %])]]]\r\n                               [h-box :gap \"10px\" :children [[title :label \"Field:\" :level :level3] [gap :size \"1\"] [single-dropdown :width dropdown-width :model field-one :choices static/attribution-field-choices :on-change #(rf/dispatch [:change-multiple-attribution-target %])]]]]]\r\n                   [v-box :gap \"10px\"\r\n                    :children [[title :label \"Portfolios:\" :level :level3]\r\n                               [button :style {:width \"100%\"} :label \"All\"      :on-click #(rf/dispatch [:multiple-portfolio-attribution/selected-portfolios (set portfolios)])]\r\n                               [button :style {:width \"100%\"} :label \"None\"     :on-click #(rf/dispatch [:multiple-portfolio-attribution/selected-portfolios #{}])]\r\n                               [button :style {:width \"100%\"} :label \"CEMBI\"    :on-click #(rf/dispatch [:multiple-portfolio-attribution/selected-portfolios (set (:portfolios (first (filter (fn [x] (= (:id x) :cembi)) static/portfolio-alignment-groups))))])]\r\n                               [button :style {:width \"100%\"} :label \"Allianz\"  :on-click #(rf/dispatch [:multiple-portfolio-attribution/selected-portfolios (set (:portfolios (first (filter (fn [x] (= (:id x) :allianz)) static/portfolio-alignment-groups))))])]\r\n                               [button :style {:width \"100%\"} :label \"IG\"       :on-click #(rf/dispatch [:multiple-portfolio-attribution/selected-portfolios (set (:portfolios (first (filter (fn [x] (= (:id x) :ig)) static/portfolio-alignment-groups))))])]\r\n                               [button :style {:width \"100%\"} :label \"Talanx\"   :on-click #(rf/dispatch [:multiple-portfolio-attribution/selected-portfolios (set (:portfolios (first (filter (fn [x] (= (:id x) :talanx)) static/portfolio-alignment-groups))))])]]]\r\n                   [selection-list :width dropdown-width :model selected-portfolios :choices portfolio-map :on-change #(rf/dispatch [:multiple-portfolio-attribution/selected-portfolios %])]\r\n                   [v-box :gap \"20px\"\r\n                    :children [[h-box :gap \"10px\" :children (into [] (concat [[title :label \"Filtering:\" :level :level3]] (filtering-row :multiple-portfolio-attribution/filter)))]\r\n                               [h-box :gap \"10px\" :children (shortcut-row :multiple-portfolio-attribution/shortcut)]\r\n                               [h-box :gap \"10px\" :children [ [title :label \"Download:\" :level :level3]\r\n                                                             [md-circle-icon-button :md-icon-name \"zmdi-download\" :on-click #(csv-link @(rf/subscribe [:multiple-portfolio-attribution/table]) \"pivot\")]]]]]]]\r\n                 [multiple-portfolio-attribution-display]\r\n                 ]]]\r\n    ))\r\n\r\n\r\n\r\n\r\n(defn go-to-attribution-risk [state rowInfo instance] (clj->js {:onClick #(do (rf/dispatch-sync [:navigation/active-attribution :single-portfolio]) (rf/dispatch [:change-single-attribution-portfolio (aget rowInfo \"row\" \"portfolio\")])) :style {:cursor \"pointer\"}}))\r\n\r\n(defn summary-display []\r\n  (let [fmt {:width 90 :style {:textAlign \"right\"} :Cell tables/round2colpct}\r\n        timeframes [[\"Year to date\" \"ytd\"] [\"Month to date\" \"mtd\"] [\"Week to date\" \"wtd\"] [\"Daily\" \"day\"]]\r\n        targets [[\"Fund\" \"-Fund-Contribution\"] [\"Benchmark\" \"-Index-Contribution\"] [\"Relative\" \"-Total-Effect\"]]]\r\n  [box :class \"subbody rightelement\" :child\r\n   [v-box :class \"element\" :gap \"20px\"\r\n    :children [[title :label (str \"Summary \" @(rf/subscribe [:attribution-date])) :level :level1]\r\n               [:> ReactTable\r\n                {:data           @(rf/subscribe [:attribution/summary])\r\n                 :columns        (into [{:Header \"Portfolio\" :accessor \"portfolio\" :width 120}]\r\n                                       (for [[k1 v1] timeframes]\r\n                                         {:Header k1\r\n                                          :columns (into [] (for [[k2 v2] targets]\r\n                                                              (merge {:Header k2\r\n                                                                      :accessor (str v1 v2)}\r\n                                                                     fmt)))}))\r\n                 :showPagination false\r\n                 :pageSize       (count @(rf/subscribe [:attribution/summary]))\r\n                 :getTrProps     go-to-attribution-risk\r\n                 :className      \"-striped -highlight\"}]]]]))\r\n\r\n\r\n(defn nav-attribution-bar []\r\n  (let [active-home @(rf/subscribe [:navigation/active-attribution])]\r\n    [h-box\r\n     ;:align :start\r\n     :children [\r\n                [v-box\r\n                 :gap \"20px\"\r\n                 :class \"leftnavbar\"\r\n                 :children (into []\r\n                                 (for [item static/attribution-navigation]\r\n                                   [button\r\n                                    :class (str \"btn btn-primary btn-block\" (if (and (= active-home (:code item))) \" active\"))\r\n                                    ;:style {:font-size \"12px\"}\r\n                                    :label (:name item)\r\n                                    :on-click #(rf/dispatch [:navigation/active-attribution (:code item)])]))]\r\n                ;[line :color \"#CA3E47\" :class \"separatorvline\"]\r\n                ]]))\r\n\r\n(defn active-home []\r\n  (.scrollTo js/window 0 0)                             ;on view change we go back to top\r\n  (case @(rf/subscribe [:navigation/active-attribution])\r\n    :summary                        [summary-display]\r\n    :single-portfolio               [single-portfolio-attribution-controller]\r\n    :all-portfolios                 [multiple-portfolio-attribution-controller]\r\n    [:div.output \"nothing to display\"]))\r\n\r\n\r\n(defn home-view []\r\n  [h-box :gap \"10px\"\r\n   ;:style {:overflow \"hidden\"}\r\n   :padding \"0px\"\r\n   :children [[nav-attribution-bar] [active-home]]])\r\n\r\n"]}