{"version":3,"sources":["jasminegui/riskviews.cljs"],"mappings":"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","names":["jasminegui.riskviews/nff","js/goog.i18n.NumberFormat","goog.i18n.NumberFormat.Format/DECIMAL","jasminegui.riskviews/nf","x","jasminegui.riskviews/round-to-thousand","jasminegui.riskviews/tnfmt","cljs.core.comp.cljs$core$IFn$_invoke$arity$2","jasminegui.riskviews/nfcell","this","reagent.core/as-element","temp__5733__auto__","jasminegui.riskviews/case-insensitive-filter","filterfn","row","jasminegui.riskviews/txt-format","fmt","goog.string/format","jasminegui.riskviews/round3","cljs.core.partial.cljs$core$IFn$_invoke$arity$2","jasminegui.riskviews/round2","jasminegui.riskviews/round1","jasminegui.riskviews/yield-format","jasminegui.riskviews/zspread-format","jasminegui.riskviews/rating-sort","a","b","cljs.core/deref","t","G__45220","re-frame.core/subscribe","G__45221","cljs.core.keyword.cljs$core$IFn$_invoke$arity$1","G__45222","jasminegui.riskviews/sum-rows","vals","cljs.core.reduce.cljs$core$IFn$_invoke$arity$2","cljs.core/+","jasminegui.riskviews/median","coll","sorted","cljs.core.sort.cljs$core$IFn$_invoke$arity$1","cljs.core.remove.cljs$core$IFn$_invoke$arity$2","cljs.core/nil?","cnt","cljs.core/count","halfway","cljs.core/quot","cljs.core/odd?","cljs.core.nth.cljs$core$IFn$_invoke$arity$2","bottom","bottom-val","top-val","jasminegui.riskviews/roundpc","G__45223","G__45224","jasminegui.riskviews/round1pc","jasminegui.riskviews/round2pc","jasminegui.riskviews/round1pcytd","style","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","G__45225","G__45226","jasminegui.riskviews/round0pc-trigger","c","v","G__45229","G__45230","colorize","jasminegui.riskviews/strategy-pop-up","jasminegui.riskviews/last-price-props","status","prefix","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","G__45233","G__45234","cljs.core/clj->js","jasminegui.riskviews/bigger-than","jasminegui.riskviews/rating-score-to-string","jasminegui.riskviews/table-columns","cljs.core/first","jasminegui.riskviews/first-level-sort","G__45235","jasminegui.riskviews/add-total-line-to-pivot","pivoted-table","portfolios","total-line","cljs.core.into.cljs$core$IFn$_invoke$arity$2","iter__4523__auto__","s__45237","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4521__auto__","size__4522__auto__","b__45239","cljs.core/chunk-buffer","i__45238","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__45236","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","p","cljs.core.map.cljs$core$IFn$_invoke$arity$2","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","jasminegui.riskviews/dropdown-width","jasminegui.riskviews/single-portfolio-risk-display","p1__45242#","positions","G__45243","portfolio","G__45244","portfolio-total-line","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","G__45247","fexpr__45246","G__45248","is-tree","G__45249","portfolio-positions","p1__45240#","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","viewable-positions","and__4120__auto__","G__45251","p1__45241#","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","risk-filter","G__45252","risk-choice-1","risk-choice-2","risk-choice-3","grouping-columns","s__45254","b__45256","i__45255","iter__45253","r","accessors","cljs.core.mapv.cljs$core$IFn$_invoke$arity$2","accessors-k","cljs.core/keyword","display","cljs.core.sort_by.cljs$core$IFn$_invoke$arity$2","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/juxt","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","cljs.core.println.cljs$core$IFn$_invoke$arity$variadic","G__45257","js/module$node_modules$react_table$lib$index.default","cljs.core.distinct.cljs$core$IFn$_invoke$arity$1","G__45259","G__45258","re-frame.core/dispatch","jasminegui.riskviews/multiple-portfolio-risk-display","p1__45261#","pivoted-positions","G__45262","selected-portfolios","G__45263","kselected-portfolios","G__45264","hide-zero-risk","G__45265","number-of-fields","G__45266","display-key-one","G__45267","cell-one","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","display-key-two","G__45268","cell-two","width-one","G__45269","G__45270","s__45272","b__45274","i__45273","iter__45271","pivoted-data","p1__45260#","fexpr__45275","thfil","line","cljs.core/every?","cljs.core/zero?","pivoted-data-hide-zero","display-one","cljs.core/name","s__45278","b__45280","i__45279","iter__45277","cljs.core/some","G__45281","G__45276","jasminegui.riskviews/multiple-portfolio-alignment-risk-display","group","p1__45282#","G__45285","jasminegui.static/portfolio-alignment-groups","G__45286","base-portfolio","kportfolios","display-key","G__45287","G__45288","G__45289","s__45291","b__45293","i__45292","iter__45290","p1__45283#","fexpr__45294","differentiate","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","temp-line","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","fexpr__45295","pivoted-data-diff","threshold","cljs.reader.read_string.cljs$core$IFn$_invoke$arity$1","p1__45284#","G__45296","jasminegui.static/threshold-choices-alignment","pivoted-data-diff-post-th","s__45298","b__45300","i__45299","iter__45297","G__45301","jasminegui.riskviews/single-portfolio-risk-controller","portfolio-map","s__45307","b__45309","i__45308","iter__45306","G__45310","display-style","G__45311","G__45312","G__45313","G__45314","re-com.core/box","re-com.core/v-box","re-com.core/title","re-com.core/h-box","p1__45302#","p1__45303#","p1__45305#","cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic","re-com.core/single-dropdown","G__45315","re-com.core/gap","G__45316","s__45318","b__45320","i__45319","p1__45304#","iter__45317","i","cljs.core.range.cljs$core$IFn$_invoke$arity$2","reagent.core/cursor","jasminegui.static/risk-choice-map","G__45321","G__45322","re-com.core/checkbox","G__45323","jasminegui.riskviews/multiple-portfolio-risk-controller","s__45330","b__45332","i__45331","iter__45329","G__45333","G__45334","G__45335","G__45336","G__45337","field-one","G__45338","field-two","G__45339","G__45340","p1__45324#","p1__45325#","p1__45326#","p1__45328#","G__45341","jasminegui.static/field-choices","G__45342","re-com.core/selection-list","G__45343","s__45345","b__45347","i__45346","p1__45327#","iter__45344","G__45348","G__45349","G__45350","jasminegui.riskviews/portfolio-alignment-risk-controller","G__45356","G__45357","portfolio-alignment-group","G__45358","field","G__45359","G__45360","p1__45351#","p1__45352#","p1__45353#","p1__45354#","G__45361","jasminegui.static/field-choices-alignment","G__45362","G__45363","G__45364","s__45366","b__45368","i__45367","p1__45355#","iter__45365","G__45369","G__45370","jasminegui.riskviews/summary-display","G__45372","G__45373","totals","G__45374","s__45376","b__45378","i__45377","iter__45375","s__45380","b__45382","i__45381","iter__45379","s__45384","b__45386","i__45385","iter__45383","k","p1__45371#","G__45387","G__45388","G__45389","G__45390","G__45391","G__45392","G__45393","cljs.core/chunk-first"],"sourcesContent":["(ns jasminegui.riskviews\r\n  (:require\r\n    [oz.core :as oz]\r\n    [re-frame.core :as rf]\r\n    [reagent.core :as r]\r\n    [goog.string :as gstring]\r\n    [goog.string.format]\r\n    [re-com.core :refer [p p-span h-box v-box box gap line scroller border label title button close-button checkbox hyperlink-href slider horizontal-bar-tabs radio-button info-button\r\n                         single-dropdown hyperlink modal-panel alert-box throbber input-password selection-list\r\n                         input-text input-textarea popover-anchor-wrapper popover-content-wrapper popover-tooltip datepicker-dropdown] :refer-macros [handler-fn]]\r\n    [re-com.box :refer [h-box-args-desc v-box-args-desc box-args-desc gap-args-desc line-args-desc scroller-args-desc border-args-desc flex-child-style]]\r\n    [re-com.util :refer [px]]\r\n    [\"react-table\" :as rt :default ReactTable]\r\n    [goog.string :as gstring]\r\n    [goog.string.format]\r\n    [jasminegui.mount :as mount]\r\n    [jasminegui.static :as static]\r\n\r\n    [re-com.validate :refer [string-or-hiccup? alert-type? vector-of-maps?]])\r\n  (:import (goog.i18n NumberFormat)\r\n           (goog.i18n.NumberFormat Format))\r\n  )\r\n\r\n\r\n(def nff (NumberFormat. Format/DECIMAL))\r\n(defn nf [x] (.format nff (str x)))\r\n(defn round-to-thousand [x] (* 1000 (int (/ x 1000.))))\r\n(def tnfmt (comp nf round-to-thousand))\r\n\r\n\r\n(defn nfcell [this]\r\n  (r/as-element\r\n    (if-let [x (aget this \"value\")]\r\n      [:div  (nf (int x))]\r\n      \"-\")))\r\n\r\n\r\n(defn case-insensitive-filter [filterfn row]\r\n  \"filterfn is {id: column_name value: text_in_filter_box\"\r\n  ;(println row)\r\n  (.includes (.toLowerCase (str (aget row (aget filterfn \"id\")))) (.toLowerCase (aget filterfn \"value\")))\r\n\r\n  ;(or\r\n  ;  (.includes (.toLowerCase (str (aget row (aget filterfn \"id\")))) (.toLowerCase (aget filterfn \"value\")))\r\n  ;  (.includes (.toLowerCase (str (aget row (aget filterfn \"_pivotId\")))) (.toLowerCase (aget filterfn \"value\")))\r\n  ;  )\r\n\r\n  )\r\n\r\n(defn txt-format [fmt this]    (r/as-element (if-let [x (aget this \"value\")] (gstring/format fmt x) \"-\")))\r\n(def round3         (partial txt-format \"%.3f\"))\r\n(def round2         (partial txt-format \"%.2f\"))\r\n(def round1         (partial txt-format \"%.1f\"))\r\n(def yield-format   (partial txt-format \"%.2f%\"))\r\n(def zspread-format (partial txt-format \"%.0fbps\"))\r\n\r\n(defn rating-sort [a b]\r\n  (let [t @(rf/subscribe [:rating-to-score])] (<= (t (keyword a)) (t (keyword b)))))\r\n\r\n(defn sum-rows [vals] (reduce + vals))\r\n\r\n(defn median [coll]\r\n  (let [sorted (sort (remove nil? coll))\r\n        cnt (count sorted)\r\n        halfway (quot cnt 2)]\r\n    (cond\r\n      (zero? cnt) nil\r\n      (odd? cnt) (nth sorted halfway)\r\n      :else (let [bottom (dec halfway) bottom-val (nth sorted bottom) top-val (nth sorted halfway)] (* 0.5 (+ bottom-val top-val))))))\r\n\r\n\r\n(defn roundpc [fmt this]\r\n  (r/as-element\r\n    (if-let [x (aget this \"value\")]\r\n      [:div {:style {:color (if (neg? x) \"red\" \"black\")}} (gstring/format fmt (* 100 x))]\r\n      \"-\")))\r\n\r\n(def round1pc (partial roundpc \"%.1f%\"))\r\n(def round2pc (partial roundpc \"%.2f%\"))\r\n\r\n(defn round1pcytd  [this]\r\n  (r/as-element\r\n    (if-let [x (aget this \"value\")]\r\n      (let [style (merge (if (neg? x) {:color \"red\"} {:color \"black\"})\r\n                         (if (aget this \"row\" \"thisyear\") {:font-style \"italic\"} {}))]\r\n        [:div {:style style} (gstring/format \"%.1f%\" (* 100 x))])\r\n      \"-\")))\r\n\r\n(defn round0pc-trigger  [this]\r\n  (r/as-element\r\n    (if-let [x (aget this \"value\")]\r\n      (letfn [(colorize [c v] [:div {:style {:color c}} (gstring/format \"%.0f%\" (* 100 v))])]\r\n        (cond\r\n          (>= x 1.0) (colorize \"red\" x)\r\n          (>= x 0.5) (colorize \"orange\" x)\r\n          (>= x 0.0) (colorize \"black\" x)\r\n          (< x 0.0) \"<0%\"\r\n          :else \"-\"))\r\n      \"-\")))\r\n\r\n(defn strategy-pop-up [this]\r\n  (r/as-element [:div [:span {:title (aget this \"row\" \"strategy\")} (aget this \"row\" \"strategy-shortcut\")]]))\r\n\r\n(defn last-price-props [this]\r\n  (if-not (nil? this)\r\n    (let [status (aget this \"row\" \"status\")\r\n          prefix (if (= status \"CLOSED\") \"(c) \" \"\")]\r\n      (r/as-element (str prefix (gstring/format \"%.2f\" (aget this \"value\")))))\r\n    (clj->js {:style nil})))\r\n\r\n;(defn format-date-from-int-rt [this] (tools/format-date-from-int (aget this \"value\")))\r\n;\r\n;(defn status-props [this]\r\n;  (if-not (nil? this)\r\n;    (let [status (aget this \"row\" \"status\")]\r\n;      (r/as-element (if (= status \"CLOSED\") (tools/format-date-from-int (aget this \"row\" \"exit-date\")) status)))\r\n;    (clj->js {:style nil})))\r\n;\r\n;(defn exit-date-props [this]\r\n;  (if-not (nil? this)\r\n;    (let [status (aget this \"row\" \"status\")]\r\n;      (r/as-element (if (= status \"CLOSED\") (tools/format-date-from-int (aget this \"row\" \"exit-date\")) status)))\r\n;    (clj->js {:style nil})))\r\n\r\n;(defn case-insensitive-filter [filterfn row]\r\n;  \"filterfn is {id: column_name value: text_in_filter_box\"\r\n;  (.includes  (.toLowerCase (str (aget row (aget filterfn \"id\"))))  (.toLowerCase (aget filterfn \"value\"))))\r\n;\r\n;(defn exit-date-filter [filterfn row]\r\n;  \"if user types LIVE, filters by today's exit date\"\r\n;  (if (.includes \"live\" (.toLowerCase (aget filterfn \"value\")))\r\n;    (.includes (.toLowerCase (str (aget row (aget filterfn \"id\")))) (tools/gdate-to-yyyymmdd static/gtoday))\r\n;    (.includes (.toLowerCase (str (aget row (aget filterfn \"id\")))) (.toLowerCase (aget filterfn \"value\")))))\r\n;\r\n\r\n(defn bigger-than [filterfn row]\r\n  \"filterfn is {id: column_name value: text_in_filter_box\"\r\n  (>  (aget row \"weight\")  (aget filterfn \"value\")))\r\n\r\n\r\n\r\n(defn rating-score-to-string [this] (aget this \"row\" \"qt-iam-int-lt-median-rating\"))\r\n\r\n\r\n(def table-columns\r\n  {:id                          {:Header \"ID\"             :accessor \"id\"                          :show false}\r\n   :id-show                     {:Header \"ID\"             :accessor \"id\"                          :width 75}\r\n   :region                      {:Header \"Region\" :accessor \"jpm-region\" :width 140 }\r\n   :country                     {:Header \"Country\" :accessor \"qt-risk-country-name\" :width 140}\r\n   :issuer                      {:Header \"Issuer\" :accessor \"TICKER\" :width 140 }\r\n   :sector                      {:Header \"Sector\" :accessor \"qt-jpm-sector\" :width 140}\r\n   :rating                      {:Header \"Rating\" :accessor \"qt-iam-int-lt-median-rating\" :show false}  ; :show false\r\n  ;  :rating                      {:Header \"Rating\" :accessor \"qt-iam-int-lt-median-rating\"  :show false} :sortMethod rating-sort} ; :show false\r\n   :rating-score                {:Header \"Rating\" :accessor \"qt-iam-int-lt-median-rating-score\" :Cell rating-score-to-string :aggregate first}\r\n   :name                        {:Header \"Name\" :accessor \"NAME\" :width 140} ;  :filterMethod case-insensitive-filter\r\n   :isin                        {:Header \"ISIN\"           :accessor \"isin\"                        :width 125 } ;:style {:textAlign \"center\"}\r\n   :description                 {:Header \"thinkFolio ID\" :accessor \"description\" :width 500}\r\n   :nav                         {:Header \"Fund\" :accessor \"weight\" :width 60 :style {:textAlign \"right\"} :aggregate sum-rows :Cell round2 :filterable true :filterMethod bigger-than}\r\n   :bm-weight                         {:Header \"Index\" :accessor \"bm-weight\" :width 60 :style {:textAlign \"right\"} :aggregate sum-rows :Cell round2 :filterable false}\r\n   :nominal                     {:Header \"Nominal\" :accessor \"original-quantity\" :width 120 :style {:textAlign \"right\"} :aggregate sum-rows :Cell nfcell :filterable true :filterMethod bigger-than}\r\n   :z-spread                    {:Header \"Z-spread\" :accessor \"qt-libor-spread\" :width 80 :style {:textAlign \"right\"} :aggregate median :Cell nfcell :filterable false}\r\n   :g-spread                    {:Header \"G-spread\" :accessor \"qt-govt-spread\" :width 80 :style {:textAlign \"right\"} :aggregate median :Cell nfcell :filterable false}\r\n   :duration                    {:Header \"M dur\" :accessor \"qt-modified-duration\" :width 60 :style {:textAlign \"right\"} :aggregate median :Cell round2 :filterable false}\r\n   :yield                       {:Header \"Yield\" :accessor \"qt-yield\" :width 60 :style {:textAlign \"right\"} :aggregate median :Cell round2pc :filterable false}\r\n   :value                       {:Header \"Value\" :accessor \"base-value\" :width 120 :style {:textAlign \"right\"} :aggregate sum-rows :Cell nfcell :filterable true :filterMethod bigger-than}\r\n   :contrib-gspread             {:Header \"G-spread\" :accessor \"contrib-gspread\" :width 80 :style {:textAlign \"right\"} :aggregate sum-rows :Cell round1 :filterable false}\r\n   :contrib-zspread                         {:Header \"Fund\" :accessor \"contrib-zspread\" :width 80 :style {:textAlign \"right\"} :aggregate sum-rows :Cell round1 :filterable false}\r\n   :contrib-yield                         {:Header \"Fund\" :accessor \"contrib-yield\" :width 60 :style {:textAlign \"right\"} :aggregate sum-rows :Cell round2pc :filterable false}\r\n   :contrib-mdur                         {:Header \"Fund\" :accessor \"contrib-mdur\" :width 60 :style {:textAlign \"right\"} :aggregate sum-rows :Cell round2 :filterable false}\r\n   :bm-contrib-yield                         {:Header \"Index\" :accessor \"bm-contrib-yield\" :width 60 :style {:textAlign \"right\"} :aggregate sum-rows :Cell round2pc :filterable false}\r\n   :bm-contrib-eir-duration                         {:Header \"Index\" :accessor \"bm-contrib-eir-duration\" :width 60 :style {:textAlign \"right\"} :aggregate sum-rows :Cell round2 :filterable false}\r\n   :cash-pct                         {:Header \"Cash\" :accessor \"cash-pct\" :width 60 :style {:textAlign \"right\"} :Cell yield-format :filterable false}\r\n   :contrib-bond-yield                         {:Header \"Bond yield\" :accessor \"contrib-bond-yield\" :width 80 :style {:textAlign \"right\"} :Cell round2pc :filterable false}\r\n   :weight-delta                         {:Header \"Delta\" :accessor \"weight-delta\" :width 60 :style {:textAlign \"right\"} :aggregate sum-rows :Cell round2 :filterable false}\r\n   :mdur-delta                         {:Header \"Delta\" :accessor \"mdur-delta\" :width 60 :style {:textAlign \"right\"} :aggregate sum-rows :Cell round2 :filterable false}\r\n\r\n   })\r\n\r\n\r\n;(defn sum-rows [vals] (reduce + vals))\r\n\r\n(defn first-level-sort [x]\r\n  (case x\r\n    \"Cash\" \"AAA\"\r\n    x))\r\n\r\n(defn add-total-line-to-pivot [pivoted-table portfolios]\r\n  (let [total-line (merge\r\n                     {:jpm-region      \"Total\"\r\n                      :qt-jpm-sector  \"Total\"\r\n                      :qt-risk-country-name     \"Total\"\r\n                      :TICKER      \"Total\"\r\n                      :NAME        \"Total\"\r\n                      :description \"Total\"\r\n                      }\r\n                     (into {} (for [p portfolios] [(keyword p) (reduce + (map (keyword p) pivoted-table))]))\r\n                     )]\r\n    (conj pivoted-table total-line)))\r\n\r\n\r\n(def dropdown-width \"150px\")\r\n\r\n(defn single-portfolio-risk-display []\r\n  (let [positions @(rf/subscribe [:positions])\r\n        portfolio @(rf/subscribe [:single-portfolio-risk/portfolio])\r\n        portfolio-total-line (assoc (@(rf/subscribe [:total-positions]) (keyword portfolio)) :qt-iam-int-lt-median-rating \"Total\" :qt-iam-int-lt-median-rating-score \"00 Total\")\r\n        is-tree (= @(rf/subscribe [:single-portfolio-risk/display-style]) \"Tree\")\r\n        portfolio-positions (filter #(= (:portfolio %) portfolio) positions)\r\n\r\n        viewable-positions (if (and (not is-tree) @(rf/subscribe [:single-portfolio-risk/hide-zero-holdings])) (filter #(not= (:weight %) 0) portfolio-positions) portfolio-positions)\r\n        risk-filter @(rf/subscribe [:single-portfolio-risk/filter])\r\n        risk-choice-1 (if (not= \"None\" (risk-filter 1)) (risk-filter 1))\r\n        risk-choice-2 (if (not= \"None\" (risk-filter 2)) (risk-filter 2))\r\n        risk-choice-3 (if (not= \"None\" (risk-filter 3)) (risk-filter 3))\r\n        grouping-columns (into [] (for [r (remove nil? [risk-choice-1 risk-choice-2 risk-choice-3 :name])] (table-columns r)))\r\n        accessors (mapv :accessor grouping-columns)\r\n        accessors-k (mapv keyword accessors)\r\n        display (conj (sort-by (apply juxt (concat [(comp first-level-sort (first accessors-k))] (rest accessors-k))) viewable-positions) portfolio-total-line)\r\n        ]\r\n    (println @(rf/subscribe [:single-portfolio-risk/table-filter]))\r\n    [:> ReactTable\r\n     {:data                display\r\n      :defaultFilterMethod case-insensitive-filter\r\n      :columns             [{:Header \"Groups\" :columns grouping-columns}\r\n                            {:Header \"NAV\" :columns (mapv table-columns [:nav :bm-weight :weight-delta])}\r\n                            {:Header \"Duration\" :columns (mapv table-columns [:contrib-mdur :bm-contrib-eir-duration :mdur-delta])}\r\n                            {:Header \"Yield\" :columns (mapv table-columns [:contrib-yield :bm-contrib-yield])}\r\n                            {:Header \"Z-spread\" :columns (mapv table-columns [:contrib-zspread ])}\r\n                            {:Header \"Position\" :columns (mapv table-columns [:value :nominal])}\r\n                            ;{:Header \"Index contribution\" :columns (mapv table-columns [:bm-contrib-yield :bm-contrib-eir-duration])}\r\n                            {:Header (if is-tree \"Bond analytics (median)\" \"Bond analytics\") :columns (mapv table-columns [:yield :z-spread :g-spread :duration])}\r\n                            {:Header \"Description\" :columns (mapv table-columns [:rating :isin :description])}]\r\n      :showPagination      (not is-tree)\r\n      :sortable            (not is-tree)\r\n      :filterable          (not is-tree)\r\n      :pageSize            (if is-tree (inc (count (distinct (map (first accessors-k) portfolio-positions)))) 30) ;(inc (count display))\r\n      :className           \"-striped -highlight\"\r\n      :pivotBy             (if is-tree accessors [])\r\n      :defaultFiltered     (if is-tree [] @(rf/subscribe [:single-portfolio-risk/table-filter])) ; [{:id \"analyst\" :value \"Tammy\"}]\r\n      :onFilteredChange    #(rf/dispatch [:single-portfolio-risk/table-filter %])\r\n      }]\r\n\r\n        ))\r\n\r\n\r\n(defn multiple-portfolio-risk-display []\r\n  (let [\r\n        pivoted-positions @(rf/subscribe [:pivoted-positions])\r\n        selected-portfolios @(rf/subscribe [:multiple-portfolio-risk/selected-portfolios])\r\n        kselected-portfolios (mapv keyword selected-portfolios)\r\n        portfolios  @(rf/subscribe [:portfolios])\r\n        hide-zero-risk (rf/subscribe [:multiple-portfolio-risk/hide-zero-holdings])\r\n        number-of-fields @(rf/subscribe [:multiple-portfolio-risk/field-number])\r\n        display-key-one @(rf/subscribe [:multiple-portfolio-risk/field-one])\r\n        cell-one (get-in table-columns [display-key-one :Cell])\r\n        display-key-two @(rf/subscribe [:multiple-portfolio-risk/field-two])\r\n        cell-two (get-in table-columns [display-key-two :Cell])\r\n        width-one 100                                      ;(get-in table-columns [display-key-one :width])\r\n        is-tree (= @(rf/subscribe [:multiple-portfolio-risk/display-style]) \"Tree\")\r\n        risk-filter @(rf/subscribe [:multiple-portfolio-risk/filter])\r\n        risk-choice-1 (if (not= \"None\" (risk-filter 1)) (risk-filter 1))\r\n        risk-choice-2 (if (not= \"None\" (risk-filter 2)) (risk-filter 2))\r\n        risk-choice-3 (if (not= \"None\" (risk-filter 3)) (risk-filter 3))\r\n        grouping-columns (into [] (for [r (remove nil? [risk-choice-1 risk-choice-2 risk-choice-3 :name])] (table-columns r)))\r\n        accessors (mapv :accessor grouping-columns)\r\n        accessors-k (mapv keyword accessors)\r\n        pivoted-data (map #(merge % ((keyword (get-in table-columns [display-key-one :accessor])) %)) pivoted-positions)\r\n        thfil (fn [line] (not (every? zero? (map line kselected-portfolios))))\r\n        pivoted-data-hide-zero (if (and (not is-tree) hide-zero-risk) (filter thfil pivoted-data) pivoted-data)\r\n        display-one (add-total-line-to-pivot (sort-by\r\n                      (apply juxt (concat [(comp first-level-sort (first accessors-k))] (rest accessors-k)))\r\n                      pivoted-data-hide-zero) portfolios)\r\n        ]\r\n    ;    (print portfolios \"hi\" (map (nth pivoted-data-hide-zero 300) (mapv keyword portfolios)))\r\n    [:> ReactTable\r\n     {:data                display-one\r\n      :defaultFilterMethod case-insensitive-filter\r\n      :columns             (if (= number-of-fields \"One\")\r\n\r\n                             [{:Header \"Groups\" :columns grouping-columns}\r\n                              {:Header  (str \"Portfolio \" (name display-key-one))\r\n                               :columns (into [] (for [p portfolios :when (some #{p} selected-portfolios)] {:Header p :accessor p :width width-one :style {:textAlign \"right\"} :aggregate sum-rows :Cell cell-one :filterable false}))}\r\n                              {:Header  \"Description\"\r\n                               :columns (mapv table-columns [:rating :isin :description])}]\r\n\r\n\r\n                             )\r\n      :showPagination      (not is-tree)\r\n      :sortable            (not is-tree)\r\n      :filterable          (not is-tree)\r\n      :pageSize            (if is-tree (inc (count (distinct (map (first accessors-k) display-one)))) 30)\r\n      :className           \"-striped -highlight\"\r\n      :pivotBy             (if is-tree accessors [])\r\n      :defaultFiltered     (if is-tree [] @(rf/subscribe [:single-portfolio-risk/table-filter])) ; [{:id \"analyst\" :value \"Tammy\"}]\r\n      :onFilteredChange    #(rf/dispatch [:single-portfolio-risk/table-filter %])\r\n\r\n      }]\r\n\r\n    ))\r\n\r\n;(def differentiate-pivoted-positions [table base]\r\n;  (into []\r\n;        (for [line table]\r\n;          (for [key quantitative-fields]\r\n;\r\n;            )\r\n;          (for p portfolios)\r\n;\r\n;          )\r\n;        )\r\n;  )\r\n\r\n(defn multiple-portfolio-alignment-risk-display []\r\n  (let [\r\n        group (:portfolios (first (filter #(= (:id %) @(rf/subscribe [:portfolio-alignment/group])) static/portfolio-alignment-groups)))\r\n        pivoted-positions @(rf/subscribe [:pivoted-positions])\r\n        base-portfolio (first group)\r\n        portfolios (rest group)\r\n        kportfolios (mapv keyword portfolios)\r\n        display-key @(rf/subscribe [:portfolio-alignment/field])\r\n        cell-one (get-in table-columns [display-key :Cell])\r\n        width-one 100\r\n        is-tree (= @(rf/subscribe [:portfolio-alignment/display-style]) \"Tree\")\r\n        risk-filter @(rf/subscribe [:portfolio-alignment/filter])\r\n        risk-choice-1 (if (not= \"None\" (risk-filter 1)) (risk-filter 1))\r\n        risk-choice-2 (if (not= \"None\" (risk-filter 2)) (risk-filter 2))\r\n        risk-choice-3 (if (not= \"None\" (risk-filter 3)) (risk-filter 3))\r\n        grouping-columns (into [] (for [r (remove nil? [risk-choice-1 risk-choice-2 risk-choice-3 :name])] (table-columns r)))\r\n        accessors (mapv :accessor grouping-columns)\r\n        accessors-k (mapv keyword accessors)\r\n        pivoted-data (map #(merge % ((keyword (get-in table-columns [display-key :accessor])) %)) pivoted-positions)\r\n        differentiate (fn [line] (reduce\r\n                                   (fn [temp-line p] (assoc temp-line p (- (p temp-line) ((keyword base-portfolio) temp-line))))\r\n                                   line\r\n                                   kportfolios))\r\n        pivoted-data-diff (map differentiate pivoted-data)\r\n        threshold (cljs.reader/read-string (:label (first (filter #(= (:id %) @(rf/subscribe [:portfolio-alignment/threshold])) static/threshold-choices-alignment))))\r\n        thfil (fn [line] (some (fn [x] (or (< x (- threshold)) (> x threshold))) (map line kportfolios)))\r\n        pivoted-data-diff-post-th (filter thfil pivoted-data-diff)\r\n        display (add-total-line-to-pivot (sort-by\r\n                                               (apply juxt (concat [(comp first-level-sort (first accessors-k))] (rest accessors-k)))\r\n                                               pivoted-data-diff-post-th) portfolios)\r\n        ]\r\n    (println kportfolios)\r\n    [:> ReactTable\r\n     {:data                display\r\n      :defaultFilterMethod case-insensitive-filter\r\n      :columns\r\n\r\n                             [{:Header \"Groups\" :columns grouping-columns}\r\n                              {:Header  (str \"Portfolio \" (name display-key) \" vs \" base-portfolio)\r\n                               :columns (into [] (for [p portfolios] {:Header p :accessor p :width width-one :style {:textAlign \"right\"} :aggregate sum-rows :Cell cell-one :filterable false}))}\r\n                              {:Header  \"Description\"\r\n                               :columns [{:Header \"thinkFolio ID\" :accessor \"description\" :width 500} (table-columns :rating)]}]\r\n\r\n      :showPagination      (not is-tree)\r\n      :sortable            (not is-tree)\r\n      :filterable          (not is-tree)\r\n      :pageSize            (if is-tree (inc (count (distinct (map (first accessors-k) display)))) 30)\r\n      :className           \"-striped -highlight\"\r\n      :pivotBy             (if is-tree accessors [])}]\r\n\r\n    ))\r\n\r\n(defn single-portfolio-risk-controller []\r\n  (let [\r\n        portfolio-map (into [] (for [p @(rf/subscribe [:portfolios])] {:id p :label p}))\r\n        display-style (rf/subscribe [:single-portfolio-risk/display-style])\r\n        portfolio (rf/subscribe [:single-portfolio-risk/portfolio])\r\n        risk-filter (rf/subscribe [:single-portfolio-risk/filter])\r\n        hide-zero-risk (rf/subscribe [:single-portfolio-risk/hide-zero-holdings])\r\n        ]\r\n    [box :class \"subbody rightelement\" :child\r\n     [v-box :class \"element\" :align-self :center :justify :center :gap \"20px\"\r\n      :children [[title :label \"Portfolio drill-down\" :level :level1]\r\n                 [h-box :gap \"10px\"\r\n                  :children [(concat [\r\n                                      [title :label \"Display type:\" :level :level3]\r\n                                      [single-dropdown :width dropdown-width :model display-style :choices [{:id \"Table\" :label \"Table\"} {:id \"Tree\" :label \"Tree\"}] :on-change #(rf/dispatch [:single-portfolio-risk/display-style %])]\r\n                                      [gap :size \"50px\"]\r\n                                      [title :label \"Filtering:\" :level :level3]\r\n                                      [single-dropdown :width dropdown-width :model portfolio :choices portfolio-map :on-change #(rf/dispatch [:single-portfolio-risk/portfolio %])]]\r\n                                     (into [] (for [i (range 1 4)] [single-dropdown :width dropdown-width :model (r/cursor risk-filter [i]) :choices static/risk-choice-map :on-change #(rf/dispatch [:single-portfolio-risk/filter i %])]))\r\n                                     [[gap :size \"50px\"]\r\n                                      [checkbox :model hide-zero-risk :label \"Hide zero positions in table view\" :disabled? (= @display-style \"Tree\") :on-change #(rf/dispatch [:single-portfolio-risk/hide-zero-holdings %])]]\r\n                                     )\r\n\r\n                             ]]\r\n                 ;[h-box :gap \"10px\" :children [[title :label \"Shortcuts:\"]]]\r\n                 [single-portfolio-risk-display]]]])\r\n  )\r\n;\r\n\r\n(defn multiple-portfolio-risk-controller []\r\n  (let [\r\n        portfolio-map (into [] (for [p  @(rf/subscribe [:portfolios])] {:id p :label p}))\r\n        display-style (rf/subscribe [:multiple-portfolio-risk/display-style])\r\n        risk-filter (rf/subscribe [:multiple-portfolio-risk/filter])\r\n        selected-portfolios (rf/subscribe [:multiple-portfolio-risk/selected-portfolios])\r\n        number-of-fields (rf/subscribe [:multiple-portfolio-risk/field-number])\r\n        field-one (rf/subscribe [:multiple-portfolio-risk/field-one])\r\n        field-two (rf/subscribe [:multiple-portfolio-risk/field-two])\r\n        hide-zero-risk (rf/subscribe [:multiple-portfolio-risk/hide-zero-holdings])\r\n        ]\r\n    [box :class \"subbody rightelement\" :child\r\n     [v-box :class \"element\" :align-self :center :justify :center :gap \"20px\"\r\n      :children [[title :label \"Portfolio drill-down\" :level :level1]\r\n                 [h-box :gap \"10px\"\r\n                  :children (concat [\r\n                                     [v-box :gap \"15px\" :children [[title :label \"Display type:\" :level :level3] ;[title :label \"Fields:\" :level :level3]\r\n                                                                   [title :label \"Field:\" :level :level3] ;[title :label \"Field two:\" :level :level3]\r\n                                                                   ]]\r\n                                     [v-box :gap \"10px\" :children [[single-dropdown :width dropdown-width :model display-style :choices [{:id \"Table\" :label \"Table\"} {:id \"Tree\" :label \"Tree\"}] :on-change #(rf/dispatch [:multiple-portfolio-risk/display-style %])]\r\n                                                                   ;[single-dropdown :width dropdown-width :model number-of-fields :choices [{:id \"One\" :label \"One\"} {:id \"Two\" :label \"Two\"}] :on-change #(rf/dispatch [:multiple-portfolio-risk/field-number %])]\r\n                                                                   [single-dropdown :width dropdown-width :model field-one :choices static/field-choices :on-change #(rf/dispatch [:multiple-portfolio-risk/field-one %])]\r\n                                                                   ;[single-dropdown :width dropdown-width :model field-two :choices static/field-choices :on-change #(rf/dispatch [:multiple-portfolio-risk/field-two %])]\r\n                                                                   ]]\r\n                                     [gap :size \"50px\"]\r\n                                     [title :label \"Filtering:\" :level :level3]\r\n                                     [selection-list :width dropdown-width :height \"250px\" :model selected-portfolios :choices portfolio-map :on-change #(rf/dispatch [:multiple-portfolio-risk/selected-portfolios %])]]\r\n                                    (into [] (for [i (range 1 4)] [single-dropdown :width dropdown-width :model (r/cursor risk-filter [i]) :choices static/risk-choice-map :on-change #(rf/dispatch [:multiple-portfolio-risk/filter i %])]))\r\n                  [[gap :size \"50px\"]\r\n                   [checkbox :model hide-zero-risk :label \"Hide zero positions in table view\" :disabled? (= @display-style \"Tree\") :on-change #(rf/dispatch [:multiple-portfolio-risk/hide-zero-holdings %])]])\r\n\r\n                  ]\r\n                 ;[h-box :gap \"10px\" :children [[title :label \"Shortcuts:\"]]]\r\n                 [multiple-portfolio-risk-display]]]])\r\n  )\r\n\r\n(defn portfolio-alignment-risk-controller []\r\n  (let [\r\n        display-style (rf/subscribe [:portfolio-alignment/display-style])\r\n        risk-filter (rf/subscribe [:portfolio-alignment/filter])\r\n        portfolio-alignment-group (rf/subscribe [:portfolio-alignment/group])\r\n        field (rf/subscribe [:portfolio-alignment/field])\r\n        threshold (rf/subscribe [:portfolio-alignment/threshold])\r\n        ]\r\n    [box :class \"subbody rightelement\" :child\r\n     [v-box :class \"element\" :align-self :center :justify :center :gap \"20px\"\r\n      :children [[title :label \"Portfolio drill-down\" :level :level1]\r\n                 [h-box :gap \"10px\"\r\n                  :children (concat [\r\n                                     [v-box :gap \"15px\" :children [[title :label \"Display type:\" :level :level3]  [title :label \"Field:\" :level :level3] [title :label \"Threshold:\" :level :level3] ]]\r\n                                     [v-box :gap \"10px\" :children [[single-dropdown :width dropdown-width :model display-style :choices [{:id \"Table\" :label \"Table\"} {:id \"Tree\" :label \"Tree\"}] :on-change #(rf/dispatch [:portfolio-alignment/display-style %])]\r\n                                                                   [single-dropdown :width dropdown-width :model field :choices static/field-choices-alignment :on-change #(rf/dispatch [:portfolio-alignment/field %])]\r\n                                                                   [single-dropdown :width dropdown-width :model threshold :choices static/threshold-choices-alignment :on-change #(rf/dispatch [:portfolio-alignment/threshold %])]\r\n                                                                   ]]\r\n                                     [gap :size \"50px\"]\r\n                                     [title :label \"Filtering:\" :level :level3]\r\n                                     [single-dropdown :width dropdown-width :model portfolio-alignment-group :choices static/portfolio-alignment-groups :on-change #(rf/dispatch [:portfolio-alignment/group %])]]\r\n                                    (into [] (for [i (range 1 4)] [single-dropdown :width dropdown-width :model (r/cursor risk-filter [i]) :choices static/risk-choice-map :on-change #(rf/dispatch [:portfolio-alignment/filter i %])])))]\r\n                 ;[h-box :gap \"10px\" :children [[title :label \"Shortcuts:\"]]]\r\n                 [multiple-portfolio-alignment-risk-display]\r\n\r\n                 ]]])\r\n  )\r\n\r\n\r\n\r\n(defn summary-display []\r\n  (let [positions @(rf/subscribe [:positions])\r\n        portfolios @(rf/subscribe [:portfolios])\r\n        totals @(rf/subscribe [:total-positions])\r\n        display (into [] (for [p portfolios]\r\n                           (merge\r\n                             {:portfolio       p}\r\n                             (into {} (for [k [:cash-pct :base-value :contrib-yield :contrib-zspread :contrib-gspread :contrib-mdur :qt-iam-int-lt-median-rating :qt-iam-int-lt-median-rating-score]] [k (get-in totals [(keyword p) k])]))\r\n                             {\r\n                              ;:cash-pct (reduce + (map :weight (filter #(and (= (:portfolio %) p) (= (:jpm-region %) \"Cash\")) positions)))\r\n                              :contrib-bond-yield (- (get-in totals [(keyword p) :contrib-yield]) (reduce + (map :contrib-yield (filter #(and (= (:portfolio %) p) (= (:jpm-region %) \"Cash\")) positions))))\r\n                              })))]\r\n    [box :class \"subbody rightelement\" :child\r\n     [v-box :class \"element\" :align-self :center :justify :center :gap \"20px\"\r\n      :children [[title :label \"Summary\" :level :level1]\r\n    [:> ReactTable\r\n     {:data           display\r\n      :columns        [{:Header \"Portfolio\" :accessor \"portfolio\" :width 120}\r\n                       {:Header \"Balance\" :columns (mapv table-columns [:value :cash-pct])}\r\n                       {:Header \"Value\" :columns [(assoc (table-columns :contrib-yield) :Header \"Yield\")\r\n                                                  (table-columns :contrib-bond-yield)\r\n                                                  (assoc (table-columns :contrib-mdur) :Header \"M Dur\")\r\n                                                  (table-columns :rating)\r\n                                                  (assoc (table-columns :rating-score) :width 60  )\r\n                                                  (assoc (table-columns :contrib-zspread) :Header \"Z-spread\")\r\n                                                  (assoc (table-columns :contrib-gspread) :Header \"G-spread\")]}\r\n                       ]\r\n      :showPagination false\r\n      :pageSize       (count portfolios)\r\n      :className      \"-striped -highlight\"}]]]]))\r\n"]}