{"version":3,"sources":["jasminegui/riskviews.cljs"],"mappings":"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","names":["jasminegui.riskviews/nff","js/goog.i18n.NumberFormat","goog.i18n.NumberFormat.Format/DECIMAL","jasminegui.riskviews/nf","x","jasminegui.riskviews/round-to-thousand","jasminegui.riskviews/tnfmt","cljs.core.comp.cljs$core$IFn$_invoke$arity$2","jasminegui.riskviews/nfcell","this","reagent.core/as-element","temp__5733__auto__","jasminegui.riskviews/case-insensitive-filter","filterfn","row","jasminegui.riskviews/txt-format","fmt","goog.string/format","jasminegui.riskviews/round3","cljs.core.partial.cljs$core$IFn$_invoke$arity$2","jasminegui.riskviews/round2","jasminegui.riskviews/round1","jasminegui.riskviews/yield-format","jasminegui.riskviews/zspread-format","jasminegui.riskviews/rating-sort","a","b","cljs.core/deref","t","G__64109","re-frame.core/subscribe","G__64110","cljs.core.keyword.cljs$core$IFn$_invoke$arity$1","G__64111","jasminegui.riskviews/sum-rows","vals","cljs.core.reduce.cljs$core$IFn$_invoke$arity$2","cljs.core/+","jasminegui.riskviews/median","coll","sorted","cljs.core.sort.cljs$core$IFn$_invoke$arity$1","cljs.core.remove.cljs$core$IFn$_invoke$arity$2","cljs.core/nil?","cnt","cljs.core/count","halfway","cljs.core/quot","cljs.core/odd?","cljs.core.nth.cljs$core$IFn$_invoke$arity$2","bottom","bottom-val","top-val","jasminegui.riskviews/roundpc","G__64112","G__64113","jasminegui.riskviews/round1pc","jasminegui.riskviews/round2pc","jasminegui.riskviews/round1pcytd","style","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","G__64114","G__64115","jasminegui.riskviews/round0pc-trigger","c","v","G__64118","G__64119","colorize","jasminegui.riskviews/strategy-pop-up","jasminegui.riskviews/last-price-props","status","prefix","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","G__64122","G__64123","cljs.core/clj->js","jasminegui.riskviews/compare-nb","input","rowval","G__64124","cljs.core.subs.cljs$core$IFn$_invoke$arity$3","cljs.reader.read_string.cljs$core$IFn$_invoke$arity$1","cljs.core.subs.cljs$core$IFn$_invoke$arity$2","jasminegui.riskviews/rating-score-to-string","jasminegui.riskviews/table-columns","cljs.core/first","jasminegui.riskviews/first-level-sort","G__64125","jasminegui.riskviews/add-total-line-to-pivot","pivoted-table","portfolios","total-line","cljs.core.into.cljs$core$IFn$_invoke$arity$2","iter__4529__auto__","s__64127","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","b__64129","cljs.core/chunk-buffer","i__64128","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__64126","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","p","cljs.core.map.cljs$core$IFn$_invoke$arity$2","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","jasminegui.riskviews/dropdown-width","jasminegui.riskviews/single-portfolio-risk-display","p1__64132#","positions","G__64133","portfolio","G__64134","portfolio-total-line","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","G__64137","fexpr__64136","G__64138","is-tree","G__64139","portfolio-positions","p1__64130#","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","viewable-positions","G__64141","p1__64131#","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","risk-filter","G__64142","risk-choice-1","risk-choice-2","risk-choice-3","additional-des-cols","jasminegui.static/risk-choice-map","grouping-columns","s__64144","b__64146","i__64145","iter__64143","r","accessors","cljs.core.mapv.cljs$core$IFn$_invoke$arity$2","accessors-k","cljs.core/keyword","display","cljs.core.sort_by.cljs$core$IFn$_invoke$arity$2","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/juxt","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","js/module$node_modules$react_table$lib$index.default","cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic","cljs.core.distinct.cljs$core$IFn$_invoke$arity$1","G__64148","G__64147","re-frame.core/dispatch","jasminegui.riskviews/multiple-portfolio-risk-display","p1__64150#","pivoted-positions","G__64151","selected-portfolios","G__64152","kselected-portfolios","G__64153","hide-zero-risk","G__64154","number-of-fields","G__64155","display-key-one","G__64156","cell-one","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","display-key-two","G__64157","cell-two","width-one","G__64158","G__64159","s__64161","b__64163","i__64162","iter__64160","pivoted-data","p1__64149#","fexpr__64164","thfil","line","cljs.core/every?","cljs.core/zero?","pivoted-data-hide-zero","display-one","cljs.core/name","s__64167","b__64169","i__64168","iter__64166","cljs.core/some","G__64170","G__64165","jasminegui.riskviews/multiple-portfolio-alignment-risk-display","group","p1__64171#","G__64174","jasminegui.static/portfolio-alignment-groups","G__64175","base-portfolio","kportfolios","display-key","G__64176","G__64177","G__64178","s__64180","b__64182","i__64181","iter__64179","p1__64172#","fexpr__64183","differentiate","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","temp-line","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","fexpr__64184","pivoted-data-diff","threshold","p1__64173#","G__64185","jasminegui.static/threshold-choices-alignment","pivoted-data-diff-post-th","cljs.core.println.cljs$core$IFn$_invoke$arity$variadic","s__64187","b__64189","i__64188","iter__64186","G__64190","jasminegui.riskviews/single-portfolio-risk-controller","portfolio-map","s__64196","b__64198","i__64197","iter__64195","G__64199","display-style","G__64200","G__64201","G__64202","G__64203","re-com.core/box","re-com.core/v-box","re-com.core/title","G__64205","re-com.core/h-box","p1__64191#","p1__64192#","p1__64194#","re-com.core/single-dropdown","G__64206","re-com.core/gap","G__64207","s__64209","b__64211","i__64210","p1__64193#","iter__64208","i","cljs.core.range.cljs$core$IFn$_invoke$arity$2","reagent.core/cursor","G__64212","G__64213","re-com.core/checkbox","G__64214","jasminegui.riskviews/multiple-portfolio-risk-controller","s__64221","b__64223","i__64222","iter__64220","G__64224","G__64225","G__64226","G__64227","G__64228","field-one","G__64229","field-two","G__64230","G__64231","G__64233","p1__64215#","p1__64216#","p1__64217#","p1__64219#","G__64234","jasminegui.static/field-choices","G__64235","re-com.core/selection-list","G__64236","s__64238","b__64240","i__64239","p1__64218#","iter__64237","G__64241","G__64242","G__64243","jasminegui.riskviews/portfolio-alignment-risk-controller","G__64249","G__64250","portfolio-alignment-group","G__64251","field","G__64252","G__64253","G__64255","p1__64244#","p1__64245#","p1__64246#","p1__64247#","G__64256","jasminegui.static/field-choices-alignment","G__64257","G__64258","G__64259","s__64261","b__64263","i__64262","p1__64248#","iter__64260","G__64264","G__64265","jasminegui.riskviews/summary-display","G__64267","G__64268","totals","G__64269","s__64271","b__64273","i__64272","iter__64270","s__64275","b__64277","i__64276","iter__64274","s__64279","b__64281","i__64280","iter__64278","k","p1__64266#","G__64283","G__64284","G__64285","G__64286","G__64287","G__64288","G__64289","G__64290","cljs.core/chunk-first"],"sourcesContent":["(ns jasminegui.riskviews\r\n  (:require\r\n    [oz.core :as oz]\r\n    [re-frame.core :as rf]\r\n    [reagent.core :as r]\r\n    [goog.string :as gstring]\r\n    [goog.string.format]\r\n    [re-com.core :refer [p p-span h-box v-box box gap line scroller border label title button close-button checkbox hyperlink-href slider horizontal-bar-tabs radio-button info-button\r\n                         single-dropdown hyperlink modal-panel alert-box throbber input-password selection-list\r\n                         input-text input-textarea popover-anchor-wrapper popover-content-wrapper popover-tooltip datepicker-dropdown] :refer-macros [handler-fn]]\r\n    [re-com.box :refer [h-box-args-desc v-box-args-desc box-args-desc gap-args-desc line-args-desc scroller-args-desc border-args-desc flex-child-style]]\r\n    [re-com.util :refer [px]]\r\n    [\"react-table\" :as rt :default ReactTable]\r\n    [goog.string :as gstring]\r\n    [goog.string.format]\r\n    [jasminegui.mount :as mount]\r\n    [jasminegui.static :as static]\r\n\r\n    [re-com.validate :refer [string-or-hiccup? alert-type? vector-of-maps?]])\r\n  (:import (goog.i18n NumberFormat)\r\n           (goog.i18n.NumberFormat Format))\r\n  )\r\n\r\n\r\n(def nff (NumberFormat. Format/DECIMAL))\r\n(defn nf [x] (.format nff (str x)))\r\n(defn round-to-thousand [x] (* 1000 (int (/ x 1000.))))\r\n(def tnfmt (comp nf round-to-thousand))\r\n\r\n\r\n(defn nfcell [this]\r\n  (r/as-element\r\n    (if-let [x (aget this \"value\")]\r\n      [:div  (nf (int x))]\r\n      \"-\")))\r\n\r\n\r\n(defn case-insensitive-filter [filterfn row]\r\n  \"filterfn is {id: column_name value: text_in_filter_box\"\r\n  ;(println row)\r\n  (.includes (.toLowerCase (str (aget row (aget filterfn \"id\")))) (.toLowerCase (aget filterfn \"value\")))\r\n\r\n  ;(or\r\n  ;  (.includes (.toLowerCase (str (aget row (aget filterfn \"id\")))) (.toLowerCase (aget filterfn \"value\")))\r\n  ;  (.includes (.toLowerCase (str (aget row (aget filterfn \"_pivotId\")))) (.toLowerCase (aget filterfn \"value\")))\r\n  ;  )\r\n\r\n  )\r\n\r\n(defn txt-format [fmt this]    (r/as-element (if-let [x (aget this \"value\")] (gstring/format fmt x) \"-\")))\r\n(def round3         (partial txt-format \"%.3f\"))\r\n(def round2         (partial txt-format \"%.2f\"))\r\n(def round1         (partial txt-format \"%.1f\"))\r\n(def yield-format   (partial txt-format \"%.2f%\"))\r\n(def zspread-format (partial txt-format \"%.0fbps\"))\r\n\r\n(defn rating-sort [a b]\r\n  (let [t @(rf/subscribe [:rating-to-score])] (<= (t (keyword a)) (t (keyword b)))))\r\n\r\n(defn sum-rows [vals] (reduce + vals))\r\n\r\n(defn median [coll]\r\n  (let [sorted (sort (remove nil? coll))\r\n        cnt (count sorted)\r\n        halfway (quot cnt 2)]\r\n    (cond\r\n      (zero? cnt) nil\r\n      (odd? cnt) (nth sorted halfway)\r\n      :else (let [bottom (dec halfway) bottom-val (nth sorted bottom) top-val (nth sorted halfway)] (* 0.5 (+ bottom-val top-val))))))\r\n\r\n\r\n(defn roundpc [fmt this]\r\n  (r/as-element\r\n    (if-let [x (aget this \"value\")]\r\n      [:div {:style {:color (if (neg? x) \"red\" \"black\")}} (gstring/format fmt (* 100 x))]\r\n      \"-\")))\r\n\r\n(def round1pc (partial roundpc \"%.1f%\"))\r\n(def round2pc (partial roundpc \"%.2f%\"))\r\n\r\n(defn round1pcytd  [this]\r\n  (r/as-element\r\n    (if-let [x (aget this \"value\")]\r\n      (let [style (merge (if (neg? x) {:color \"red\"} {:color \"black\"})\r\n                         (if (aget this \"row\" \"thisyear\") {:font-style \"italic\"} {}))]\r\n        [:div {:style style} (gstring/format \"%.1f%\" (* 100 x))])\r\n      \"-\")))\r\n\r\n(defn round0pc-trigger  [this]\r\n  (r/as-element\r\n    (if-let [x (aget this \"value\")]\r\n      (letfn [(colorize [c v] [:div {:style {:color c}} (gstring/format \"%.0f%\" (* 100 v))])]\r\n        (cond\r\n          (>= x 1.0) (colorize \"red\" x)\r\n          (>= x 0.5) (colorize \"orange\" x)\r\n          (>= x 0.0) (colorize \"black\" x)\r\n          (< x 0.0) \"<0%\"\r\n          :else \"-\"))\r\n      \"-\")))\r\n\r\n(defn strategy-pop-up [this]\r\n  (r/as-element [:div [:span {:title (aget this \"row\" \"strategy\")} (aget this \"row\" \"strategy-shortcut\")]]))\r\n\r\n(defn last-price-props [this]\r\n  (if-not (nil? this)\r\n    (let [status (aget this \"row\" \"status\")\r\n          prefix (if (= status \"CLOSED\") \"(c) \" \"\")]\r\n      (r/as-element (str prefix (gstring/format \"%.2f\" (aget this \"value\")))))\r\n    (clj->js {:style nil})))\r\n\r\n;(defn format-date-from-int-rt [this] (tools/format-date-from-int (aget this \"value\")))\r\n;\r\n;(defn status-props [this]\r\n;  (if-not (nil? this)\r\n;    (let [status (aget this \"row\" \"status\")]\r\n;      (r/as-element (if (= status \"CLOSED\") (tools/format-date-from-int (aget this \"row\" \"exit-date\")) status)))\r\n;    (clj->js {:style nil})))\r\n;\r\n;(defn exit-date-props [this]\r\n;  (if-not (nil? this)\r\n;    (let [status (aget this \"row\" \"status\")]\r\n;      (r/as-element (if (= status \"CLOSED\") (tools/format-date-from-int (aget this \"row\" \"exit-date\")) status)))\r\n;    (clj->js {:style nil})))\r\n\r\n;(defn case-insensitive-filter [filterfn row]\r\n;  \"filterfn is {id: column_name value: text_in_filter_box\"\r\n;  (.includes  (.toLowerCase (str (aget row (aget filterfn \"id\"))))  (.toLowerCase (aget filterfn \"value\"))))\r\n;\r\n;(defn exit-date-filter [filterfn row]\r\n;  \"if user types LIVE, filters by today's exit date\"\r\n;  (if (.includes \"live\" (.toLowerCase (aget filterfn \"value\")))\r\n;    (.includes (.toLowerCase (str (aget row (aget filterfn \"id\")))) (tools/gdate-to-yyyymmdd static/gtoday))\r\n;    (.includes (.toLowerCase (str (aget row (aget filterfn \"id\")))) (.toLowerCase (aget filterfn \"value\")))))\r\n;\r\n\r\n(defn compare-nb [filterfn row]\r\n  \"filterfn is {id: column_name value: text_in_filter_box\"\r\n  (let [input (aget filterfn \"value\")\r\n        rowval (aget row (aget filterfn \"id\"))]\r\n    (case (subs input 0 1)\r\n      \">\" (> rowval (cljs.reader/read-string (subs input 1)))\r\n      \"<\" (< rowval (cljs.reader/read-string (subs input 1)))\r\n      (> rowval (cljs.reader/read-string input))\r\n      )))\r\n\r\n\r\n\r\n(defn rating-score-to-string [this] (aget this \"row\" \"qt-iam-int-lt-median-rating\"))\r\n\r\n\r\n(def table-columns\r\n  {:id                          {:Header \"ID\"             :accessor \"id\"                          :show false}\r\n   :id-show                     {:Header \"ID\"             :accessor \"id\"                          :width 75}\r\n   :region                      {:Header \"Region\"         :accessor \"jpm-region\" :width 140 }\r\n   :country                     {:Header \"Country\"        :accessor \"qt-risk-country-name\" :width 140}\r\n   :issuer                      {:Header \"Issuer\"         :accessor \"TICKER\" :width 140 }\r\n   :sector                      {:Header \"Sector\"         :accessor \"qt-jpm-sector\" :width 140}\r\n   :rating                      {:Header \"Rating\"         :accessor \"qt-iam-int-lt-median-rating\" :show false}  ; :show false\r\n  ;  :rating                      {:Header \"Rating\" :accessor \"qt-iam-int-lt-median-rating\"  :show false} :sortMethod rating-sort} ; :show false\r\n   :rating-score                {:Header \"Rating\"         :accessor \"qt-iam-int-lt-median-rating-score\" :Cell rating-score-to-string :aggregate first}\r\n   :name                        {:Header \"Name\"           :accessor \"NAME\" :width 140} ;  :filterMethod case-insensitive-filter\r\n   :isin                        {:Header \"ISIN\"           :accessor \"isin\"                        :width 125 } ;:style {:textAlign \"center\"}\r\n   :description                 {:Header \"thinkFolio ID\"  :accessor \"description\" :width 500}\r\n   :nav                         {:Header \"Fund\"           :accessor \"weight\" :width 60 :style {:textAlign \"right\"} :aggregate sum-rows :Cell round2 :filterable true :filterMethod compare-nb}\r\n   :bm-weight                   {:Header \"Index\"          :accessor \"bm-weight\" :width 60 :style {:textAlign \"right\"} :aggregate sum-rows :Cell round2 :filterable true :filterMethod compare-nb}\r\n   :nominal                     {:Header \"Nominal\"        :accessor \"original-quantity\" :width 120 :style {:textAlign \"right\"} :aggregate sum-rows :Cell nfcell :filterable true :filterMethod compare-nb}\r\n   :z-spread                    {:Header \"Z-spread\"       :accessor \"qt-libor-spread\" :width 80 :style {:textAlign \"right\"} :aggregate median :Cell nfcell :filterable true :filterMethod compare-nb}\r\n   :g-spread                    {:Header \"G-spread\"       :accessor \"qt-govt-spread\" :width 80 :style {:textAlign \"right\"} :aggregate median :Cell nfcell :filterable true :filterMethod compare-nb}\r\n   :duration                    {:Header \"M dur\"          :accessor \"qt-modified-duration\" :width 60 :style {:textAlign \"right\"} :aggregate median :Cell round2 :filterable true :filterMethod compare-nb}\r\n   :yield                       {:Header \"Yield\"          :accessor \"qt-yield\" :width 60 :style {:textAlign \"right\"} :aggregate median :Cell round2pc :filterable true :filterMethod compare-nb}\r\n   :value                       {:Header \"Value\"          :accessor \"base-value\" :width 120 :style {:textAlign \"right\"} :aggregate sum-rows :Cell nfcell :filterable true :filterMethod compare-nb}\r\n   :contrib-gspread             {:Header \"G-spread\"       :accessor \"contrib-gspread\" :width 80 :style {:textAlign \"right\"} :aggregate sum-rows :Cell round1 :filterable false}\r\n   :contrib-zspread             {:Header \"Fund\"           :accessor \"contrib-zspread\" :width 80 :style {:textAlign \"right\"} :aggregate sum-rows :Cell round1 :filterable false}\r\n   :contrib-yield               {:Header \"Fund\"           :accessor \"contrib-yield\" :width 60 :style {:textAlign \"right\"} :aggregate sum-rows :Cell round2pc :filterable false}\r\n   :contrib-mdur                {:Header \"Fund\"           :accessor \"contrib-mdur\" :width 60 :style {:textAlign \"right\"} :aggregate sum-rows :Cell round2 :filterable false}\r\n   :bm-contrib-yield            {:Header \"Index\"          :accessor \"bm-contrib-yield\" :width 60 :style {:textAlign \"right\"} :aggregate sum-rows :Cell round2pc :filterable false}\r\n   :bm-contrib-eir-duration     {:Header \"Index\"          :accessor \"bm-contrib-eir-duration\" :width 60 :style {:textAlign \"right\"} :aggregate sum-rows :Cell round2 :filterable false}\r\n   :cash-pct                    {:Header \"Cash\"           :accessor \"cash-pct\" :width 60 :style {:textAlign \"right\"} :Cell yield-format :filterable false}\r\n   :contrib-bond-yield          {:Header \"Bond yield\"     :accessor \"contrib-bond-yield\" :width 80 :style {:textAlign \"right\"} :Cell round2pc :filterable false}\r\n   :weight-delta                {:Header \"Delta\"          :accessor \"weight-delta\" :width 60 :style {:textAlign \"right\"} :aggregate sum-rows :Cell round2 :filterable true :filterMethod compare-nb}\r\n   :mdur-delta                  {:Header \"Delta\"          :accessor \"mdur-delta\" :width 60 :style {:textAlign \"right\"} :aggregate sum-rows :Cell round2 :filterable false}\r\n\r\n   })\r\n\r\n\r\n;(defn sum-rows [vals] (reduce + vals))\r\n\r\n(defn first-level-sort [x]\r\n  (case x\r\n    \"Cash\"        \"AAA\"\r\n    \"Collateral\"  \"AAA\"\r\n    \"Forwards\"    \"AAA\"\r\n    \"Equities\"    \"AAA\"\r\n    x))\r\n\r\n(defn add-total-line-to-pivot [pivoted-table portfolios]\r\n  (let [total-line (merge\r\n                     {:jpm-region           \"Total\"\r\n                      :qt-jpm-sector        \"Total\"\r\n                      :qt-risk-country-name \"Total\"\r\n                      :TICKER               \"Total\"\r\n                      :NAME                 \"Total\"\r\n                      :description          \"Total\"\r\n                      :isin                 \"Total\"}\r\n                     (into {} (for [p portfolios] [(keyword p) (reduce + (map (keyword p) pivoted-table))])))]\r\n    (conj pivoted-table total-line)))\r\n\r\n\r\n(def dropdown-width \"150px\")\r\n\r\n(defn single-portfolio-risk-display []\r\n  (let [positions @(rf/subscribe [:positions])\r\n        portfolio @(rf/subscribe [:single-portfolio-risk/portfolio])\r\n        portfolio-total-line (assoc (@(rf/subscribe [:total-positions]) (keyword portfolio)) :qt-iam-int-lt-median-rating \"Total\" :qt-iam-int-lt-median-rating-score \"00 Total\")\r\n        is-tree (= @(rf/subscribe [:single-portfolio-risk/display-style]) \"Tree\")\r\n        portfolio-positions (filter #(= (:portfolio %) portfolio) positions)\r\n\r\n        viewable-positions (if (and (not is-tree) @(rf/subscribe [:single-portfolio-risk/hide-zero-holdings])) (filter #(not= (:weight %) 0) portfolio-positions) portfolio-positions)\r\n        risk-filter @(rf/subscribe [:single-portfolio-risk/filter])\r\n        risk-choice-1 (if (not= \"None\" (risk-filter 1)) (risk-filter 1))\r\n        risk-choice-2 (if (not= \"None\" (risk-filter 2)) (risk-filter 2))\r\n        risk-choice-3 (if (not= \"None\" (risk-filter 3)) (risk-filter 3))\r\n        additional-des-cols (remove #{\"None\" risk-choice-1 risk-choice-2 risk-choice-3} (map :id static/risk-choice-map))\r\n        grouping-columns (into [] (for [r (remove nil? [risk-choice-1 risk-choice-2 risk-choice-3 :name])] (table-columns r)))\r\n        accessors (mapv :accessor grouping-columns)\r\n        accessors-k (mapv keyword accessors)\r\n        display (conj (sort-by (apply juxt (concat [(comp first-level-sort (first accessors-k))] (rest accessors-k))) viewable-positions) portfolio-total-line)\r\n        ]\r\n    ;(println @(rf/subscribe [:single-portfolio-risk/table-filter]))\r\n    [:> ReactTable\r\n     {:data                display\r\n      :defaultFilterMethod case-insensitive-filter\r\n      :columns             [{:Header \"Groups\" :columns grouping-columns}\r\n                            {:Header \"NAV\" :columns (mapv table-columns [:nav :bm-weight :weight-delta])}\r\n                            {:Header \"Duration\" :columns (mapv table-columns [:contrib-mdur :bm-contrib-eir-duration :mdur-delta])}\r\n                            {:Header \"Yield\" :columns (mapv table-columns [:contrib-yield :bm-contrib-yield])}\r\n                            {:Header \"Z-spread\" :columns (mapv table-columns [:contrib-zspread ])}\r\n                            {:Header \"Position\" :columns (mapv table-columns [:value :nominal])}\r\n                            ;{:Header \"Index contribution\" :columns (mapv table-columns [:bm-contrib-yield :bm-contrib-eir-duration])}\r\n                            {:Header (if is-tree \"Bond analytics (median)\" \"Bond analytics\") :columns (mapv table-columns [:yield :z-spread :g-spread :duration])}\r\n                            {:Header \"Description\" :columns (mapv table-columns (into [] (concat [:rating :isin] additional-des-cols [:description])))}]\r\n      :showPagination      (not is-tree)\r\n      :sortable            (not is-tree)\r\n      :filterable          (not is-tree)\r\n      :pageSize            (if is-tree (inc (count (distinct (map (first accessors-k) portfolio-positions)))) 25) ;(inc (count display))\r\n      :className           \"-striped -highlight\"\r\n      :pivotBy             (if is-tree accessors [])\r\n      :defaultFiltered     (if is-tree [] @(rf/subscribe [:single-portfolio-risk/table-filter])) ; [{:id \"analyst\" :value \"Tammy\"}]\r\n      :onFilteredChange    #(rf/dispatch [:single-portfolio-risk/table-filter %])\r\n      }]\r\n\r\n        ))\r\n\r\n\r\n(defn multiple-portfolio-risk-display []\r\n  (let [\r\n        pivoted-positions @(rf/subscribe [:pivoted-positions])\r\n        selected-portfolios @(rf/subscribe [:multiple-portfolio-risk/selected-portfolios])\r\n        kselected-portfolios (mapv keyword selected-portfolios)\r\n        portfolios  @(rf/subscribe [:portfolios])\r\n        hide-zero-risk @(rf/subscribe [:multiple-portfolio-risk/hide-zero-holdings])\r\n        number-of-fields @(rf/subscribe [:multiple-portfolio-risk/field-number])\r\n        display-key-one @(rf/subscribe [:multiple-portfolio-risk/field-one])\r\n        cell-one (get-in table-columns [display-key-one :Cell])\r\n        display-key-two @(rf/subscribe [:multiple-portfolio-risk/field-two])\r\n        cell-two (get-in table-columns [display-key-two :Cell])\r\n        width-one 100                                      ;(get-in table-columns [display-key-one :width])\r\n        is-tree (= @(rf/subscribe [:multiple-portfolio-risk/display-style]) \"Tree\")\r\n        risk-filter @(rf/subscribe [:multiple-portfolio-risk/filter])\r\n        risk-choice-1 (if (not= \"None\" (risk-filter 1)) (risk-filter 1))\r\n        risk-choice-2 (if (not= \"None\" (risk-filter 2)) (risk-filter 2))\r\n        risk-choice-3 (if (not= \"None\" (risk-filter 3)) (risk-filter 3))\r\n        grouping-columns (into [] (for [r (remove nil? [risk-choice-1 risk-choice-2 risk-choice-3 :name])] (table-columns r)))\r\n        accessors (mapv :accessor grouping-columns)\r\n        accessors-k (mapv keyword accessors)\r\n        pivoted-data (map #(merge % ((keyword (get-in table-columns [display-key-one :accessor])) %)) pivoted-positions)\r\n        thfil (fn [line] (not (every? zero? (map line kselected-portfolios))))\r\n        pivoted-data-hide-zero (if (and (not is-tree) hide-zero-risk) (filter thfil pivoted-data) pivoted-data)\r\n        display-one (add-total-line-to-pivot (sort-by\r\n                      (apply juxt (concat [(comp first-level-sort (first accessors-k))] (rest accessors-k)))\r\n                      pivoted-data-hide-zero) portfolios)\r\n        ]\r\n    [:> ReactTable\r\n     {:data                display-one\r\n      :defaultFilterMethod case-insensitive-filter\r\n      :columns             (if (= number-of-fields \"One\")\r\n\r\n                             [{:Header \"Groups\" :columns grouping-columns}\r\n                              {:Header  (str \"Portfolio \" (name display-key-one))\r\n                               :columns (into [] (for [p portfolios :when (some #{p} selected-portfolios)] {:Header p :accessor p :width width-one :style {:textAlign \"right\"} :aggregate sum-rows :Cell cell-one :filterable false}))}\r\n                              {:Header  \"Description\"\r\n                               :columns (mapv table-columns [:rating :isin :description])}]\r\n\r\n                             )\r\n      :showPagination      (not is-tree)\r\n      :sortable            (not is-tree)\r\n      :filterable          (not is-tree)\r\n      :pageSize            (if is-tree (inc (count (distinct (map (first accessors-k) display-one)))) 25)\r\n      :className           \"-striped -highlight\"\r\n      :pivotBy             (if is-tree accessors [])\r\n      :defaultFiltered     (if is-tree [] @(rf/subscribe [:single-portfolio-risk/table-filter])) ; [{:id \"analyst\" :value \"Tammy\"}]\r\n      :onFilteredChange    #(rf/dispatch [:single-portfolio-risk/table-filter %])\r\n\r\n      }]\r\n\r\n    ))\r\n\r\n;(def differentiate-pivoted-positions [table base]\r\n;  (into []\r\n;        (for [line table]\r\n;          (for [key quantitative-fields]\r\n;\r\n;            )\r\n;          (for p portfolios)\r\n;\r\n;          )\r\n;        )\r\n;  )\r\n\r\n(defn multiple-portfolio-alignment-risk-display []\r\n  (let [\r\n        group (:portfolios (first (filter #(= (:id %) @(rf/subscribe [:portfolio-alignment/group])) static/portfolio-alignment-groups)))\r\n        pivoted-positions @(rf/subscribe [:pivoted-positions])\r\n        base-portfolio (first group)\r\n        portfolios (rest group)\r\n        kportfolios (mapv keyword portfolios)\r\n        display-key @(rf/subscribe [:portfolio-alignment/field])\r\n        cell-one (get-in table-columns [display-key :Cell])\r\n        width-one 100\r\n        is-tree (= @(rf/subscribe [:portfolio-alignment/display-style]) \"Tree\")\r\n        risk-filter @(rf/subscribe [:portfolio-alignment/filter])\r\n        risk-choice-1 (if (not= \"None\" (risk-filter 1)) (risk-filter 1))\r\n        risk-choice-2 (if (not= \"None\" (risk-filter 2)) (risk-filter 2))\r\n        risk-choice-3 (if (not= \"None\" (risk-filter 3)) (risk-filter 3))\r\n        grouping-columns (into [] (for [r (remove nil? [risk-choice-1 risk-choice-2 risk-choice-3 :name])] (table-columns r)))\r\n        accessors (mapv :accessor grouping-columns)\r\n        accessors-k (mapv keyword accessors)\r\n        pivoted-data (map #(merge % ((keyword (get-in table-columns [display-key :accessor])) %)) pivoted-positions)\r\n        differentiate (fn [line] (reduce\r\n                                   (fn [temp-line p] (assoc temp-line p (- (p temp-line) ((keyword base-portfolio) temp-line))))\r\n                                   line\r\n                                   kportfolios))\r\n        pivoted-data-diff (map differentiate pivoted-data)\r\n        threshold (cljs.reader/read-string (:label (first (filter #(= (:id %) @(rf/subscribe [:portfolio-alignment/threshold])) static/threshold-choices-alignment))))\r\n        thfil (fn [line] (some (fn [x] (or (< x (- threshold)) (> x threshold))) (map line kportfolios)))\r\n        pivoted-data-diff-post-th (filter thfil pivoted-data-diff)\r\n        display (add-total-line-to-pivot (sort-by\r\n                                               (apply juxt (concat [(comp first-level-sort (first accessors-k))] (rest accessors-k)))\r\n                                               pivoted-data-diff-post-th) portfolios)\r\n        ]\r\n    (println kportfolios)\r\n    [:> ReactTable\r\n     {:data                display\r\n      :defaultFilterMethod case-insensitive-filter\r\n      :columns\r\n\r\n                             [{:Header \"Groups\" :columns grouping-columns}\r\n                              {:Header  (str \"Portfolio \" (name display-key) \" vs \" base-portfolio)\r\n                               :columns (into [] (for [p portfolios] {:Header p :accessor p :width width-one :style {:textAlign \"right\"} :aggregate sum-rows :Cell cell-one :filterable false}))}\r\n                              {:Header  \"Description\"\r\n                               :columns [{:Header \"thinkFolio ID\" :accessor \"description\" :width 500} (table-columns :rating)]}]\r\n\r\n      :showPagination      (not is-tree)\r\n      :sortable            (not is-tree)\r\n      :filterable          (not is-tree)\r\n      :pageSize            (if is-tree (inc (count (distinct (map (first accessors-k) display)))) 25)\r\n      :className           \"-striped -highlight\"\r\n      :pivotBy             (if is-tree accessors [])}]\r\n\r\n    ))\r\n\r\n(defn single-portfolio-risk-controller []\r\n  (let [\r\n        portfolio-map (into [] (for [p @(rf/subscribe [:portfolios])] {:id p :label p}))\r\n        display-style (rf/subscribe [:single-portfolio-risk/display-style])\r\n        portfolio (rf/subscribe [:single-portfolio-risk/portfolio])\r\n        risk-filter (rf/subscribe [:single-portfolio-risk/filter])\r\n        hide-zero-risk (rf/subscribe [:single-portfolio-risk/hide-zero-holdings])\r\n        ]\r\n    [box :class \"subbody rightelement\" :child\r\n     [v-box :class \"element\" :align-self :center :justify :center :gap \"20px\"\r\n      :children [[title :label (str \"Portfolio drill-down \" @(rf/subscribe [:qt-date])) :level :level1]\r\n                 [h-box :gap \"10px\"\r\n                  :children (into [] (concat [\r\n                                               [title :label \"Display type:\" :level :level3]\r\n                                               [single-dropdown :width dropdown-width :model display-style :choices [{:id \"Table\" :label \"Table\"} {:id \"Tree\" :label \"Tree\"}] :on-change #(rf/dispatch [:single-portfolio-risk/display-style %])]\r\n                                               [gap :size \"50px\"]\r\n                                               [title :label \"Filtering:\" :level :level3]\r\n                                               [single-dropdown :width dropdown-width :model portfolio :choices portfolio-map :on-change #(rf/dispatch [:single-portfolio-risk/portfolio %])]]\r\n                                              (into [] (for [i (range 1 4)] [single-dropdown :width dropdown-width :model (r/cursor risk-filter [i]) :choices static/risk-choice-map :on-change #(rf/dispatch [:single-portfolio-risk/filter i %])]))\r\n                                              [[gap :size \"50px\"]\r\n                                               [checkbox :model hide-zero-risk :label \"Hide zero positions in table view\" :disabled? (= @display-style \"Tree\") :on-change #(rf/dispatch [:single-portfolio-risk/hide-zero-holdings %])]]\r\n                                              ))\r\n\r\n                             ]\r\n                 ;[h-box :gap \"10px\" :children [[title :label \"Shortcuts:\"]]]\r\n                 [single-portfolio-risk-display]]]])\r\n  )\r\n;\r\n\r\n(defn multiple-portfolio-risk-controller []\r\n  (let [\r\n        portfolio-map (into [] (for [p  @(rf/subscribe [:portfolios])] {:id p :label p}))\r\n        display-style (rf/subscribe [:multiple-portfolio-risk/display-style])\r\n        risk-filter (rf/subscribe [:multiple-portfolio-risk/filter])\r\n        selected-portfolios (rf/subscribe [:multiple-portfolio-risk/selected-portfolios])\r\n        number-of-fields (rf/subscribe [:multiple-portfolio-risk/field-number])\r\n        field-one (rf/subscribe [:multiple-portfolio-risk/field-one])\r\n        field-two (rf/subscribe [:multiple-portfolio-risk/field-two])\r\n        hide-zero-risk (rf/subscribe [:multiple-portfolio-risk/hide-zero-holdings])\r\n        ]\r\n    [box :class \"subbody rightelement\" :child\r\n     [v-box :class \"element\" :align-self :center :justify :center :gap \"20px\"\r\n      :children [[title :label (str \"Portfolio drill-down \" @(rf/subscribe [:qt-date])) :level :level1]\r\n                 [h-box :gap \"10px\"\r\n                  :children (into [] (concat [\r\n                                              [v-box :gap \"15px\" :children [[title :label \"Display type:\" :level :level3] ;[title :label \"Fields:\" :level :level3]\r\n                                                                            [title :label \"Field:\" :level :level3] ;[title :label \"Field two:\" :level :level3]\r\n                                                                            ]]\r\n                                              [v-box :gap \"10px\" :children [[single-dropdown :width dropdown-width :model display-style :choices [{:id \"Table\" :label \"Table\"} {:id \"Tree\" :label \"Tree\"}] :on-change #(rf/dispatch [:multiple-portfolio-risk/display-style %])]\r\n                                                                            ;[single-dropdown :width dropdown-width :model number-of-fields :choices [{:id \"One\" :label \"One\"} {:id \"Two\" :label \"Two\"}] :on-change #(rf/dispatch [:multiple-portfolio-risk/field-number %])]\r\n                                                                            [single-dropdown :width dropdown-width :model field-one :choices static/field-choices :on-change #(rf/dispatch [:multiple-portfolio-risk/field-one %])]\r\n                                                                            ;[single-dropdown :width dropdown-width :model field-two :choices static/field-choices :on-change #(rf/dispatch [:multiple-portfolio-risk/field-two %])]\r\n                                                                            ]]\r\n                                              [gap :size \"50px\"]\r\n                                              [title :label \"Filtering:\" :level :level3]\r\n                                              [selection-list :width dropdown-width :height \"250px\" :model selected-portfolios :choices portfolio-map :on-change #(rf/dispatch [:multiple-portfolio-risk/selected-portfolios %])]]\r\n                                             (into [] (for [i (range 1 4)] [single-dropdown :width dropdown-width :model (r/cursor risk-filter [i]) :choices static/risk-choice-map :on-change #(rf/dispatch [:multiple-portfolio-risk/filter i %])]))\r\n                                             [[gap :size \"50px\"]\r\n                                              [checkbox :model hide-zero-risk :label \"Hide zero positions in table view\" :disabled? (= @display-style \"Tree\") :on-change #(rf/dispatch [:multiple-portfolio-risk/hide-zero-holdings %])]]))\r\n\r\n                  ]\r\n                 ;[h-box :gap \"10px\" :children [[title :label \"Shortcuts:\"]]]\r\n                 [multiple-portfolio-risk-display]]]])\r\n  )\r\n\r\n(defn portfolio-alignment-risk-controller []\r\n  (let [\r\n        display-style (rf/subscribe [:portfolio-alignment/display-style])\r\n        risk-filter (rf/subscribe [:portfolio-alignment/filter])\r\n        portfolio-alignment-group (rf/subscribe [:portfolio-alignment/group])\r\n        field (rf/subscribe [:portfolio-alignment/field])\r\n        threshold (rf/subscribe [:portfolio-alignment/threshold])\r\n        ]\r\n    [box :class \"subbody rightelement\" :child\r\n     [v-box :class \"element\" :align-self :center :justify :center :gap \"20px\"\r\n      :children [[title :label (str \"Portfolio drill-down \" @(rf/subscribe [:qt-date])) :level :level1]\r\n                 [h-box :gap \"10px\"\r\n                  :children (into [] (concat [\r\n                                              [v-box :gap \"15px\" :children [[title :label \"Display type:\" :level :level3] [title :label \"Field:\" :level :level3] [title :label \"Threshold:\" :level :level3]]]\r\n                                              [v-box :gap \"10px\" :children [[single-dropdown :width dropdown-width :model display-style :choices [{:id \"Table\" :label \"Table\"} {:id \"Tree\" :label \"Tree\"}] :on-change #(rf/dispatch [:portfolio-alignment/display-style %])]\r\n                                                                            [single-dropdown :width dropdown-width :model field :choices static/field-choices-alignment :on-change #(rf/dispatch [:portfolio-alignment/field %])]\r\n                                                                            [single-dropdown :width dropdown-width :model threshold :choices static/threshold-choices-alignment :on-change #(rf/dispatch [:portfolio-alignment/threshold %])]\r\n                                                                            ]]\r\n                                              [gap :size \"50px\"]\r\n                                              [title :label \"Filtering:\" :level :level3]\r\n                                              [single-dropdown :width dropdown-width :model portfolio-alignment-group :choices static/portfolio-alignment-groups :on-change #(rf/dispatch [:portfolio-alignment/group %])]]\r\n                                             (into [] (for [i (range 1 4)] [single-dropdown :width dropdown-width :model (r/cursor risk-filter [i]) :choices static/risk-choice-map :on-change #(rf/dispatch [:portfolio-alignment/filter i %])]))))]\r\n                 ;[h-box :gap \"10px\" :children [[title :label \"Shortcuts:\"]]]\r\n                 [multiple-portfolio-alignment-risk-display]\r\n\r\n                 ]]])\r\n  )\r\n\r\n\r\n\r\n(defn summary-display []\r\n  (let [positions @(rf/subscribe [:positions])\r\n        portfolios @(rf/subscribe [:portfolios])\r\n        totals @(rf/subscribe [:total-positions])\r\n        display (into [] (for [p portfolios]\r\n                           (merge\r\n                             {:portfolio       p}\r\n                             (into {} (for [k [:cash-pct :base-value :contrib-yield :contrib-zspread :contrib-gspread :contrib-mdur :qt-iam-int-lt-median-rating :qt-iam-int-lt-median-rating-score]] [k (get-in totals [(keyword p) k])]))\r\n                             {\r\n                              ;:cash-pct (reduce + (map :weight (filter #(and (= (:portfolio %) p) (= (:jpm-region %) \"Cash\")) positions)))\r\n                              :contrib-bond-yield (- (get-in totals [(keyword p) :contrib-yield]) (reduce + (map :contrib-yield (filter #(and (= (:portfolio %) p) (not= (:asset-class %) \"BONDS\")) positions))))\r\n                              })))]\r\n    [box :class \"subbody rightelement\" :child\r\n     [v-box :class \"element\" :align-self :center :justify :center :gap \"20px\"\r\n      :children [[title :label (str \"Summary \" @(rf/subscribe [:qt-date])) :level :level1]\r\n    [:> ReactTable\r\n     {:data           display\r\n      :columns        [{:Header \"Portfolio\" :accessor \"portfolio\" :width 120}\r\n                       {:Header \"Balance\" :columns (mapv table-columns [:value :cash-pct])}\r\n                       {:Header \"Value\" :columns [(assoc (table-columns :contrib-yield) :Header \"Yield\")\r\n                                                  (table-columns :contrib-bond-yield)\r\n                                                  (assoc (table-columns :contrib-mdur) :Header \"M Dur\")\r\n                                                  (table-columns :rating)\r\n                                                  (assoc (table-columns :rating-score) :width 60  )\r\n                                                  (assoc (table-columns :contrib-zspread) :Header \"Z-spread\")\r\n                                                  (assoc (table-columns :contrib-gspread) :Header \"G-spread\")]}\r\n                       ]\r\n      :showPagination false\r\n      :pageSize       (count portfolios)\r\n      :className      \"-striped -highlight\"}]]]]))\r\n"]}