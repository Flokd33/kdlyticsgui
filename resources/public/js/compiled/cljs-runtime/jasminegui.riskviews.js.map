{"version":3,"sources":["jasminegui/riskviews.cljs"],"mappings":"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","names":["re_frame.core.reg_event_fx.cljs$core$IFn$_invoke$arity$2","p__51844","p__51845","map__51853","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","vec__51854","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","db","_","name","bond-sedol","portfolios","start-date","end-date","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","jasminegui.static/server-address","p__51882","p__51883","map__51886","vec__51889","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","p__51933","p__51935","map__51942","vec__51943","p__51986","p__51987","map__51989","vec__51994","portfolio","jasminegui.tools/gdate-to-yyyymmdd","re_frame.core.reg_event_db.cljs$core$IFn$_invoke$arity$2","p__52013","vec__52016","data","p__52030","vec__52034","p__52040","vec__52047","jasminegui.riskviews/first-level-sort","x","G__52056","jasminegui.riskviews/add-total-line-to-pivot","pivoted-table","kportfolios","total-line","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","cljs.core.into.cljs$core$IFn$_invoke$arity$2","iter__4529__auto__","s__52064","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","cljs.core/count","b__52066","cljs.core/chunk-buffer","i__52065","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__52063","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","p","cljs.core.reduce.cljs$core$IFn$_invoke$arity$2","cljs.core/+","cljs.core.map.cljs$core$IFn$_invoke$arity$2","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","jasminegui.riskviews/add-total-line-to-attribution-pivot","template","s__52083","b__52085","i__52084","vec__52165","iter__52082","vec__52170","k","v","s__52178","b__52180","i__52179","iter__52177","G__52209","G__52210","re-frame.core/reg-sub","positions","portfolio-total-line","G__52214","fexpr__52213","cljs.core.keyword.cljs$core$IFn$_invoke$arity$1","is-tree","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","portfolio-positions","p1__52205#","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","viewable-positions","p1__52206#","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","risk-choices","cljs.core/deref","rfil","G__52224","re-frame.core/subscribe","p1__52207#","cljs.core.mapv.cljs$core$IFn$_invoke$arity$2","cljs.core.range.cljs$core$IFn$_invoke$arity$2","grouping-columns","s__52230","b__52232","i__52231","iter__52229","r","cljs.core.remove.cljs$core$IFn$_invoke$arity$2","cljs.core/nil?","jasminegui.tables/risk-table-columns","accessors-k","cljs.core/keyword","cljs.core.sort_by.cljs$core$IFn$_invoke$arity$2","cljs.core/juxt","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","cljs.core.comp.cljs$core$IFn$_invoke$arity$2","G__52255","G__52256","s__52263","b__52265","i__52264","vec__52272","iter__52262","vec__52280","p1__52254#","s__52296","b__52298","i__52297","iter__52295","jasminegui.tables/attribution-table-columns","G__52313","G__52314","pivoted-positions","kselected-portfolios","hide-zero-risk","display-key-one","G__52315","p1__52305#","s__52317","b__52319","i__52318","iter__52316","pivoted-data","p1__52306#","fexpr__52405","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","thfil","line","cljs.core/every?","cljs.core/zero?","pivoted-data-hide-zero","G__52409","G__52410","attribution-choices","G__52412","p1__52407#","s__52416","b__52418","i__52417","iter__52415","p1__52408#","fexpr__52421","G__52432","G__52433","group","p1__52428#","jasminegui.static/portfolio-alignment-groups","base-kportfolio","G__52434","p1__52429#","s__52438","b__52440","i__52439","iter__52437","p1__52430#","fexpr__52447","differentiate","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","temp-line","pivoted-data-diff","threshold","cljs.reader.read_string.cljs$core$IFn$_invoke$arity$1","p1__52431#","jasminegui.static/threshold-choices-alignment","cljs.core/some","pivoted-data-diff-post-th","G__52453","G__52454","s__52462","b__52464","i__52463","iter__52461","s__52466","b__52468","i__52467","iter__52465","s__52478","b__52480","i__52479","iter__52477","p1__52452#","jasminegui.riskviews/dropdown-width","jasminegui.riskviews/mini-dropdown-width","jasminegui.riskviews/single-bond-trade-history","state","rowInfo","instance","cljs.core/clj->js","G__52489","re-frame.core/dispatch","G__52490","G__52491","G__52492","G__52493","jasminegui.riskviews/single-portfolio-risk-display","p1__52508#","G__52510","G__52511","G__52512","p1__52505#","G__52513","p1__52506#","s__52516","b__52518","i__52517","iter__52515","additional-des-cols","cljs.core/set","jasminegui.static/risk-choice-map","accessors","display","G__52521","js/module$node_modules$react_table$lib$index.default","jasminegui.tables/case-insensitive-filter","cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic","cljs.core.distinct.cljs$core$IFn$_invoke$arity$1","G__52566","G__52522","jasminegui.riskviews/single-bond-trade-flat-history","G__52568","G__52570","G__52571","jasminegui.riskviews/multiple-portfolio-risk-display","p1__52575#","G__52577","width-one","G__52578","G__52579","p1__52573#","s__52583","b__52585","i__52584","iter__52582","display-one","G__52599","cols","s__52607","b__52609","i__52608","iter__52606","G__52620","G__52614","G__52618","jasminegui.tables/sum-rows","cljs.core/name","G__52622","G__52621","jasminegui.riskviews/portfolio-alignment-risk-display","p1__52640#","p1__52638#","G__52641","base-portfolio","display-key","G__52642","cell-one","G__52643","G__52644","p1__52639#","s__52650","b__52652","i__52651","iter__52649","G__52653","s__52656","b__52658","i__52657","iter__52655","G__52660","G__52661","G__52654","jasminegui.riskviews/shortcut-row","key","shortcut","G__52666","re-com.core/title","s__52668","b__52670","i__52669","iter__52667","i","re-com.core/md-circle-icon-button","G__52671","G__52676","jasminegui.riskviews/filtering-row","risk-filter","G__52678","s__52680","b__52682","i__52681","p1__52677#","iter__52679","re-com.core/single-dropdown","reagent.core/cursor","G__52683","G__52691","jasminegui.riskviews/single-portfolio-risk-controller","p1__52692#","p1__52693#","portfolio-map","s__52696","b__52698","i__52697","iter__52695","G__52699","display-style","G__52700","G__52701","G__52702","re-com.core/box","re-com.core/v-box","G__52704","re-com.core/h-box","jasminegui.static/tree-table-choices","G__52705","re-com.core/checkbox","G__52706","p1__52694#","G__52707","re-com.core/gap","jasminegui.tools.csv_link.cljs$core$IFn$_invoke$arity$2","G__52708","jasminegui.riskviews/multiple-portfolio-risk-controller","p1__52709#","p1__52710#","p1__52711#","p1__52712#","s__52714","b__52716","i__52715","iter__52713","G__52717","G__52718","G__52719","selected-portfolios","G__52720","number-of-fields","G__52721","field-one","G__52722","field-two","G__52723","G__52724","G__52726","G__52727","G__52728","jasminegui.static/risk-field-choices","G__52729","re-com.core/button","G__52730","G__52731","G__52732","G__52733","G__52734","G__52735","re-com.core/selection-list","G__52736","G__52737","jasminegui.riskviews/portfolio-alignment-risk-controller","p1__52738#","p1__52739#","p1__52740#","p1__52741#","G__52742","portfolio-alignment-group","G__52743","field","G__52744","G__52745","G__52747","G__52748","G__52749","G__52750","G__52751","G__52752","jasminegui.riskviews/go-to-portfolio-risk","G__52753","re-frame.core/dispatch-sync","G__52754","jasminegui.riskviews/summary-display","G__52756","G__52757","G__52758","G__52759","G__52760","G__52761","G__52762","G__52763","G__52764","G__52765","G__52766","G__52767","jasminegui.riskviews/portfolio-history-table","G__52768","G__52769","re-com.core/throbber","jasminegui.tradehistory/subs10","jasminegui.tradehistory/nfh","jasminegui.tables/round2","G__52770","jasminegui.tables/round2pc","x__4217__auto__","y__4218__auto__","jasminegui.riskviews/trade-history","p1__52771#","p1__52772#","p1__52773#","p1__52774#","G__52775","performance","G__52776","s__52778","b__52780","i__52779","iter__52777","G__52781","G__52782","G__52783","G__52784","re-com.core/datepicker-dropdown","jasminegui.tools/int-to-gdate","cljs-time.core/today","G__52786","G__52787","G__52788","G__52789","G__52790","cljs.core/chunk-first"],"sourcesContent":["(ns jasminegui.riskviews\r\n  (:require\r\n    ; [oz.core :as oz]\r\n    [re-frame.core :as rf]\r\n    [reagent.core :as r]\r\n    [goog.string :as gstring]\r\n    [goog.string.format]\r\n    [re-com.core :refer [p p-span h-box v-box box gap line scroller border label title button close-button checkbox hyperlink-href slider horizontal-bar-tabs radio-button info-button\r\n                         single-dropdown hyperlink modal-panel alert-box throbber input-password selection-list md-circle-icon-button\r\n                         input-text input-textarea popover-anchor-wrapper popover-content-wrapper popover-tooltip datepicker-dropdown] :refer-macros [handler-fn]]\r\n    [re-com.box :refer [h-box-args-desc v-box-args-desc box-args-desc gap-args-desc line-args-desc scroller-args-desc border-args-desc flex-child-style]]\r\n    [re-com.util :refer [px]]\r\n    [\"react-table\" :as rt :default ReactTable]\r\n    [jasminegui.mount :as mount]\r\n    [jasminegui.static :as static]\r\n    [jasminegui.tools :as tools]\r\n    [jasminegui.tables :as tables]\r\n    [re-com.validate :refer [string-or-hiccup? alert-type? vector-of-maps?]]\r\n    [cljs-time.core :refer [today]]\r\n    )\r\n  (:import (goog.i18n NumberFormat)\r\n           (goog.i18n.NumberFormat Format))\r\n  )\r\n\r\n;;;;;;;;;;;;\r\n;; EVENTS ;;\r\n;;;;;;;;;;;;\r\n\r\n(rf/reg-event-fx\r\n  :get-single-bond-history\r\n  (fn [{:keys [db]} [_ name bond-sedol portfolios start-date end-date]]\r\n    {:db (assoc db :single-bond-trade-history/bond name\r\n                   :single-bond-trade-history/show-modal true\r\n                   :single-bond-trade-history/show-throbber true)\r\n     :http-get-dispatch {:url          (str static/server-address \"single-bond-history?id=\" bond-sedol \"&portfolios=\" portfolios \"&start-date=\" start-date \"&end-date=\" end-date)\r\n                         :dispatch-key [:single-bond-trade-history/data]\r\n                         :kwk          true}}))\r\n\r\n(rf/reg-event-fx\r\n  :get-bond-price-history\r\n  (fn [{:keys [db]} [_ name start-date end-date]]\r\n    {:db (assoc db :bond-price-history/name name)\r\n     :http-get-dispatch {:url          (str static/server-address \"bond-price-history?name=\" name \"&start-date=\" start-date \"&end-date=\" end-date)\r\n                         :dispatch-key [:bond-price-history/price]\r\n                         :kwk          true}}))\r\n\r\n(rf/reg-event-fx\r\n  :get-single-bond-flat-history\r\n  (fn [{:keys [db]} [_ name bond-sedol portfolios start-date end-date]]\r\n    {:db (assoc db :single-bond-trade-history/bond name\r\n                   :single-bond-trade-history/show-flat-modal true\r\n                   :single-bond-trade-history/show-throbber true)\r\n     :http-get-dispatch {:url          (str static/server-address \"flat-bond-history?id=\" bond-sedol \"&portfolios=\" portfolios \"&start-date=\" start-date \"&end-date=\" end-date)\r\n                         :dispatch-key [:single-bond-trade-history/flat-data]\r\n                         :kwk          true}}))\r\n\r\n(rf/reg-event-fx\r\n  :get-portfolio-trade-history\r\n  (fn [{:keys [db]} [_ portfolio start-date end-date]]\r\n    {:db (assoc db :portfolio-trade-history/data nil\r\n                   :single-bond-trade-history/show-throbber true\r\n                   :single-bond-trade-history/show-throbber true)\r\n     :http-get-dispatch {:url          (str static/server-address \"portfolio-trade-history?portfolio=\" portfolio \"&start-date=\" (tools/gdate-to-yyyymmdd start-date) \"&end-date=\" (tools/gdate-to-yyyymmdd end-date))\r\n                         :dispatch-key [:portfolio-trade-history/data]\r\n                         :kwk          true}}))\r\n\r\n(rf/reg-event-db\r\n  :single-bond-trade-history/data\r\n  (fn [db [_ data]]\r\n    (assoc db :single-bond-trade-history/data data\r\n              :single-bond-trade-history/show-throbber false)))\r\n\r\n(rf/reg-event-db\r\n  :single-bond-trade-history/flat-data\r\n  (fn [db [_ data]]\r\n    (assoc db :single-bond-trade-history/flat-data data\r\n              :single-bond-trade-history/show-throbber false)))\r\n\r\n(rf/reg-event-db\r\n  :portfolio-trade-history/data\r\n  (fn [db [_ data]]\r\n    (assoc db :portfolio-trade-history/data data\r\n              :single-bond-trade-history/show-throbber false)))\r\n\r\n;;;;;;;;;;;;;;;;;;;;\r\n;; SUCBSCRIPTIONS ;;\r\n;;;;;;;;;;;;;;;;;;;;\r\n\r\n(defn first-level-sort [x]\r\n  (case x\r\n    \"Cash\"        \"AAA\"\r\n    \"Collateral\"  \"ZZZ\"\r\n    \"Forwards\"    \"ZZZ\"\r\n    \"Equities\"    \"ZZZ\"\r\n    x))\r\n\r\n(defn add-total-line-to-pivot [pivoted-table kportfolios]\r\n  (let [total-line (merge\r\n                     {:jpm-region           \"Total\"\r\n                      :qt-jpm-sector        \"Total\"\r\n                      :qt-risk-country-name \"Total\"\r\n                      :TICKER               \"Total\"\r\n                      :NAME                 \"Total\"\r\n                      :description          \"Total\"\r\n                      :isin                 \"Total\"\r\n                      :qt-iam-int-lt-median-rating-score \"Total\"\r\n                      :qt-final-maturity-band \"Total\"}\r\n                     (into {} (for [p kportfolios] [p (reduce + (map p pivoted-table))])))]\r\n    (conj pivoted-table total-line)))\r\n\r\n(defn add-total-line-to-attribution-pivot [pivoted-table kportfolios]\r\n  (let [template (into {} (for [[k v] (first pivoted-table)] [k \"Total\"]))\r\n        total-line (merge\r\n                     template\r\n                     (into {} (for [p kportfolios] [p (reduce + (map p pivoted-table))])))]\r\n    (conj pivoted-table total-line)))\r\n\r\n\r\n(rf/reg-sub\r\n  :single-portfolio-risk/table\r\n  (fn [db]\r\n    (let [positions (:positions db)\r\n          portfolio (:single-portfolio-risk/portfolio db)\r\n          portfolio-total-line (assoc ((:total-positions db) (keyword portfolio)) :qt-iam-int-lt-median-rating \"Total\" :qt-iam-int-lt-median-rating-score \"00 Total\")\r\n          is-tree (= (:single-portfolio-risk/display-style db) \"Tree\")\r\n          portfolio-positions (filter #(= (:portfolio %) portfolio) positions)\r\n          viewable-positions (if (and (not is-tree) (:single-portfolio-risk/hide-zero-holdings db)) (filter #(not= (:weight %) 0) portfolio-positions) portfolio-positions)\r\n          risk-choices (let [rfil @(rf/subscribe [:single-portfolio-risk/filter])] (mapv #(if (not= \"None\" (rfil %)) (rfil %)) (range 1 4)))\r\n          grouping-columns (into [] (for [r (remove nil? (conj risk-choices :name))] (tables/risk-table-columns r)))\r\n          accessors-k (mapv keyword (mapv :accessor grouping-columns))]\r\n      (conj (sort-by (apply juxt (concat [(comp first-level-sort (first accessors-k))] (rest accessors-k))) viewable-positions) portfolio-total-line))))\r\n\r\n(rf/reg-sub\r\n  :single-portfolio-attribution/clean-table\r\n  (fn [db]\r\n    (let [data (:single-portfolio-attribution/table db)\r\n          template (into {} (for [[k v] (first data)] [k \"Total\"]))\r\n          portfolio-total-line (assoc template\r\n                                 :Total-Effect (reduce + (map :Total-Effect data))\r\n                                 :Average-Excess-Weight (reduce + (map :Average-Excess-Weight data))\r\n                                 :Average-Fund-Weight (reduce + (map :Average-Fund-Weight data))\r\n                                 :Average-Index-Weight (reduce + (map :Average-Index-Weight data))\r\n                                 :Fund-Contribution (reduce + (map :Fund-Contribution data))\r\n                                 :Index-Contribution (reduce + (map :Index-Contribution data)))\r\n          risk-choices (let [rfil (:single-portfolio-attribution/filter db)] (mapv #(if (not= \"None\" (rfil %)) (rfil %)) (range 1 4)))\r\n          grouping-columns (into [] (for [r (remove nil? (conj risk-choices :security))] (tables/attribution-table-columns r)))\r\n          accessors-k (mapv keyword (mapv :accessor grouping-columns))]\r\n      (conj (sort-by (apply juxt (concat [(comp first-level-sort (first accessors-k))] (rest accessors-k))) data) portfolio-total-line))))\r\n\r\n\r\n(rf/reg-sub\r\n  :multiple-portfolio-risk/table\r\n  (fn [db]\r\n    (let [pivoted-positions (:pivoted-positions db)\r\n          kselected-portfolios (mapv keyword (:multiple-portfolio-risk/selected-portfolios db))\r\n          hide-zero-risk (:multiple-portfolio-risk/hide-zero-holdings db)\r\n          display-key-one (:multiple-portfolio-risk/field-one db)\r\n          is-tree (= (:multiple-portfolio-risk/display-style db) \"Tree\")\r\n          risk-choices (let [rfil @(rf/subscribe [:multiple-portfolio-risk/filter])] (mapv #(if (not= \"None\" (rfil %)) (rfil %)) (range 1 4)))\r\n          grouping-columns (into [] (for [r (remove nil? (conj risk-choices :name))] (tables/risk-table-columns r)))\r\n          accessors-k (mapv keyword (mapv :accessor grouping-columns))\r\n          pivoted-data (map #(merge % ((keyword (get-in tables/risk-table-columns [display-key-one :accessor])) %)) pivoted-positions)\r\n          thfil (fn [line] (not (every? zero? (map line kselected-portfolios))))\r\n          pivoted-data-hide-zero (if (and (not is-tree) hide-zero-risk) (filter thfil pivoted-data) pivoted-data)]\r\n      (add-total-line-to-pivot (sort-by (apply juxt (concat [(comp first-level-sort (first accessors-k))] (rest accessors-k))) pivoted-data-hide-zero) (map keyword (:portfolios db))))))\r\n\r\n(rf/reg-sub\r\n  :multiple-portfolio-attribution/clean-table\r\n  (fn [db]\r\n    (let [pivoted-positions (:multiple-portfolio-attribution/table db)\r\n          display-key-one (:multiple-portfolio-attribution/field-one db)\r\n          attribution-choices (let [rfil @(rf/subscribe [:multiple-portfolio-attribution/filter])] (mapv #(if (not= \"None\" (rfil %)) (rfil %)) (range 1 4)))\r\n          grouping-columns (into [] (for [r (remove nil? (conj attribution-choices :security))] (tables/attribution-table-columns r)))\r\n          accessors-k (mapv keyword (mapv :accessor grouping-columns))\r\n          pivoted-data (map #(merge % ((keyword (get-in tables/attribution-table-columns [display-key-one :accessor])) %)) pivoted-positions)]\r\n      (add-total-line-to-attribution-pivot (sort-by (apply juxt (concat [(comp first-level-sort (first accessors-k))] (rest accessors-k))) pivoted-data) (map keyword (:portfolios db))))))\r\n\r\n(rf/reg-sub\r\n  :portfolio-alignment/table\r\n  (fn [db]\r\n    (let [group (map keyword (:portfolios (first (filter #(= (:id %) (:portfolio-alignment/group db)) static/portfolio-alignment-groups))))\r\n          pivoted-positions (:pivoted-positions db)\r\n          base-kportfolio (first group)\r\n          kportfolios (rest group)\r\n          risk-choices (let [rfil @(rf/subscribe [:portfolio-alignment/filter])] (mapv #(if (not= \"None\" (rfil %)) (rfil %)) (range 1 4)))\r\n          grouping-columns (into [] (for [r (remove nil? (conj risk-choices :name))] (tables/risk-table-columns r)))\r\n          accessors-k (mapv keyword (mapv :accessor grouping-columns))\r\n          pivoted-data (map #(merge % ((keyword (get-in tables/risk-table-columns [(:portfolio-alignment/field db) :accessor])) %)) pivoted-positions)\r\n          differentiate (fn [line] (reduce\r\n                                     (fn [temp-line p] (assoc temp-line p (- (p temp-line) (base-kportfolio temp-line))))\r\n                                     line\r\n                                     kportfolios))\r\n          pivoted-data-diff (map differentiate pivoted-data)\r\n          threshold (* 0.01 (cljs.reader/read-string (:label (first (filter #(= (:id %) (:portfolio-alignment/threshold db)) static/threshold-choices-alignment)))))\r\n          thfil (fn [line] (some (fn [x] (or (< x (- threshold)) (> x threshold))) (map line kportfolios)))\r\n          pivoted-data-diff-post-th (filter thfil pivoted-data-diff)]\r\n      (add-total-line-to-pivot (sort-by (apply juxt (concat [(comp first-level-sort (first accessors-k))] (rest accessors-k))) pivoted-data-diff-post-th) kportfolios))))\r\n\r\n(rf/reg-sub\r\n  :summary-display/table\r\n  (fn [db]\r\n    (into [] (for [p (:portfolios db)]\r\n               (merge\r\n                 {:portfolio       p}\r\n                 (into {} (for [k [:cash-pct :base-value :contrib-yield :contrib-zspread :contrib-gspread :contrib-mdur :qt-iam-int-lt-median-rating :qt-iam-int-lt-median-rating-score :contrib-beta-1y-daily]] [k (get-in (:total-positions db) [(keyword p) k])]))\r\n                 {:contrib-bond-yield (- (get-in (:total-positions db) [(keyword p) :contrib-yield]) (reduce + (map :contrib-yield (filter #(and (= (:portfolio %) p) (not= (:asset-class %) \"BONDS\")) (:positions db)))))})))))\r\n\r\n;;;;;;;;;\r\n;; GUI ;;\r\n;;;;;;;;;\r\n\r\n(def dropdown-width \"150px\")\r\n(def mini-dropdown-width \"75px\")\r\n\r\n(defn single-bond-trade-history [state rowInfo instance]\r\n  (clj->js {:onClick #(do (rf/dispatch [:get-single-bond-history\r\n                                        (aget rowInfo \"row\" \"_original\" \"NAME\")\r\n                                        (aget rowInfo \"row\" \"_original\" \"id\")\r\n                                        [@(rf/subscribe [:single-portfolio-risk/portfolio])]\r\n                                        \"01Jan2019\"\r\n                                        @(rf/subscribe [:qt-date])])\r\n                          (rf/dispatch [:get-bond-price-history\r\n                                        (aget rowInfo \"row\" \"_original\" \"NAME\")\r\n                                        \"01Jan19\"\r\n                                        @(rf/subscribe [:qt-date])])\r\n                          )\r\n                          :style {:cursor \"pointer\"}}))\r\n\r\n(defn single-portfolio-risk-display []\r\n  (let [positions @(rf/subscribe [:positions])\r\n        portfolio @(rf/subscribe [:single-portfolio-risk/portfolio])\r\n        is-tree (= @(rf/subscribe [:single-portfolio-risk/display-style]) \"Tree\")\r\n        portfolio-positions (filter #(= (:portfolio %) portfolio) positions)\r\n        risk-choices (let [rfil @(rf/subscribe [:single-portfolio-risk/filter])] (mapv #(if (not= \"None\" (rfil %)) (rfil %)) (range 1 4)))\r\n        grouping-columns (into [] (for [r (remove nil? (conj risk-choices :name))] (tables/risk-table-columns r)))\r\n        additional-des-cols (remove (set (conj risk-choices \"None\")) (map :id static/risk-choice-map))\r\n        accessors (mapv :accessor grouping-columns)\r\n        display @(rf/subscribe [:single-portfolio-risk/table])]\r\n    [:> ReactTable\r\n     {:data                display\r\n      :defaultFilterMethod tables/case-insensitive-filter\r\n      :columns             [{:Header \"Groups\" :columns grouping-columns}\r\n                            {:Header \"NAV\" :columns (mapv tables/risk-table-columns [:nav :bm-weight :weight-delta])}\r\n                            {:Header \"Duration\" :columns (mapv tables/risk-table-columns [:contrib-mdur :bm-contrib-eir-duration :mdur-delta])}\r\n                            {:Header \"Yield\" :columns (mapv tables/risk-table-columns [:contrib-yield :bm-contrib-yield])}\r\n                            {:Header \"Z-spread\" :columns (mapv tables/risk-table-columns [:contrib-zspread])}\r\n                            {:Header \"Beta\"  :columns (mapv tables/risk-table-columns [:contrib-beta])}\r\n                            {:Header \"Position\" :columns (mapv tables/risk-table-columns [:value :nominal])}\r\n                            ;{:Header \"Index contribution\" :columns (mapv tables/table-columns [:bm-contrib-yield :bm-contrib-eir-duration])}\r\n                            {:Header (if is-tree \"Bond analytics (median)\" \"Bond analytics\") :columns (mapv tables/risk-table-columns [:yield :z-spread :g-spread :duration :total-return-ytd :cembi-beta-last-year :cembi-beta-previous-year :jensen-ytd])}\r\n                            {:Header \"Description\" :columns (mapv tables/risk-table-columns (into [] (concat [:rating :isin] additional-des-cols [:description])))}]\r\n      :showPagination      (not is-tree)\r\n      :sortable            (not is-tree)\r\n      :filterable          (not is-tree)\r\n      :pageSize            (if is-tree (inc (count (distinct (map (keyword (first accessors)) portfolio-positions)))) 25) ;(inc (count display))\r\n      :showPageSizeOptions false\r\n      :className           \"-striped -highlight\"\r\n      :pivotBy             (if is-tree accessors [])\r\n      :getTrProps          single-bond-trade-history\r\n      :defaultFiltered     (if is-tree [] @(rf/subscribe [:single-portfolio-risk/table-filter])) ; [{:id \"analyst\" :value \"Tammy\"}]\r\n      :onFilteredChange    #(rf/dispatch [:single-portfolio-risk/table-filter %])}]))\r\n\r\n(defn single-bond-trade-flat-history [state rowInfo instance]\r\n  (clj->js {:onClick #(rf/dispatch [:get-single-bond-flat-history\r\n                                   (aget rowInfo \"row\" \"_original\" \"NAME\")\r\n                                   (aget rowInfo \"row\" \"_original\" \"id\")\r\n                                   @(rf/subscribe [:portfolios])\r\n                                   \"01Jan2019\"\r\n                                   @(rf/subscribe [:qt-date])])\r\n            :style {:cursor \"pointer\"}}))\r\n\r\n(defn multiple-portfolio-risk-display []\r\n  (let [display-key-one @(rf/subscribe [:multiple-portfolio-risk/field-one])\r\n        width-one 100                                      ;(get-in tables/table-columns [display-key-one :width])\r\n        is-tree (= @(rf/subscribe [:multiple-portfolio-risk/display-style]) \"Tree\")\r\n        risk-choices (let [rfil @(rf/subscribe [:multiple-portfolio-risk/filter])] (mapv #(if (not= \"None\" (rfil %)) (rfil %)) (range 1 4)))\r\n        grouping-columns (into [] (for [r (remove nil? (conj risk-choices :name))] (tables/risk-table-columns r)))\r\n        accessors (mapv :accessor grouping-columns)\r\n        display-one @(rf/subscribe [:multiple-portfolio-risk/table])\r\n        cols (into [] (for [p @(rf/subscribe [:portfolios]) :when (some #{p} @(rf/subscribe [:multiple-portfolio-risk/selected-portfolios]))]\r\n                        {:Header p\r\n                         :accessor p\r\n                         :width width-one\r\n                         :style {:textAlign \"right\"}\r\n                         :aggregate tables/sum-rows\r\n                         :Cell (get-in tables/risk-table-columns [display-key-one :Cell])\r\n                         :filterable false}))]\r\n    [:> ReactTable\r\n     {:data                display-one\r\n      :defaultFilterMethod tables/case-insensitive-filter\r\n      :columns             [{:Header \"Groups\" :columns grouping-columns}\r\n                            {:Header  (str \"Portfolio \" (name display-key-one)) :columns cols}\r\n                            {:Header  \"Description\" :columns (mapv tables/risk-table-columns [:rating :isin :description])}]\r\n      :showPagination      (not is-tree)\r\n      :sortable            (not is-tree)\r\n      :filterable          (not is-tree)\r\n      :pageSize            (if is-tree (inc (count (distinct (map (keyword (first accessors)) display-one)))) 25)\r\n      :showPageSizeOptions false\r\n      :className           \"-striped -highlight\"\r\n      :pivotBy             (if is-tree accessors [])\r\n      :getTrProps          single-bond-trade-flat-history\r\n      :defaultFiltered     (if is-tree [] @(rf/subscribe [:multiple-portfolio-risk/table-filter])) ; [{:id \"analyst\" :value \"Tammy\"}]\r\n      :onFilteredChange    #(rf/dispatch [:multiple-portfolio-risk/table-filter %])}]))\r\n\r\n(defn portfolio-alignment-risk-display []\r\n  (let [\r\n        group (:portfolios (first (filter #(= (:id %) @(rf/subscribe [:portfolio-alignment/group])) static/portfolio-alignment-groups)))\r\n        base-portfolio (first group)\r\n        portfolios (rest group)\r\n        display-key @(rf/subscribe [:portfolio-alignment/field])\r\n        cell-one (get-in tables/risk-table-columns [display-key :Cell])\r\n        width-one 100\r\n        is-tree (= @(rf/subscribe [:portfolio-alignment/display-style]) \"Tree\")\r\n        risk-choices (let [rfil @(rf/subscribe [:portfolio-alignment/filter])] (mapv #(if (not= \"None\" (rfil %)) (rfil %)) (range 1 4)))\r\n        grouping-columns (into [] (for [r (remove nil? (conj risk-choices :name))] (tables/risk-table-columns r)))\r\n        accessors (mapv :accessor grouping-columns)\r\n        display @(rf/subscribe [:portfolio-alignment/table])]\r\n    [:> ReactTable\r\n     {:data                display\r\n      :defaultFilterMethod tables/case-insensitive-filter\r\n      :columns\r\n                           [{:Header \"Groups\" :columns grouping-columns}\r\n                            {:Header  (str \"Portfolio \" (name display-key) \" vs \" base-portfolio)\r\n                             :columns (into [] (for [p portfolios] {:Header p :accessor p :width width-one :style {:textAlign \"right\"} :aggregate tables/sum-rows :Cell cell-one :filterable false}))}\r\n                            {:Header  \"Description\"\r\n                             :columns [{:Header \"thinkFolio ID\" :accessor \"description\" :width 500} (tables/risk-table-columns :rating)]}]\r\n      :showPagination      (not is-tree)\r\n      :sortable            (not is-tree)\r\n      :filterable          (not is-tree)\r\n      :pageSize            (if is-tree (inc (count (distinct (map (keyword (first accessors)) display)))) 25)\r\n      :showPageSizeOptions false\r\n      :className           \"-striped -highlight\"\r\n      :pivotBy             (if is-tree accessors [])\r\n      :defaultFiltered     (if is-tree [] @(rf/subscribe [:portfolio-alignment/table-filter])) ; [{:id \"analyst\" :value \"Tammy\"}]\r\n      :onFilteredChange    #(rf/dispatch [:portfolio-alignment/table-filter %])}]))\r\n\r\n(defn shortcut-row [key]\r\n  (let [shortcut (rf/subscribe [key])]\r\n    (into [] (concat [[title :label \"Shortcuts:\" :level :level3]]\r\n               (into [] (for [i (range 1 5)]\r\n                          [md-circle-icon-button\r\n                           :md-icon-name (str \"zmdi-collection-item-\" i)\r\n                           :class (if (= @shortcut i) \"active\" \"default\")\r\n                           :on-click #(rf/dispatch [key i])]))))))\r\n\r\n(defn filtering-row [key]\r\n  (let [risk-filter (rf/subscribe [key])]\r\n    (into [] (for [i (range 1 4)]\r\n               [single-dropdown\r\n                :width dropdown-width\r\n                :model (r/cursor risk-filter [i])\r\n                :choices static/risk-choice-map\r\n                :on-change #(rf/dispatch [key i %])]))))\r\n\r\n(defn single-portfolio-risk-controller []\r\n  (let [portfolio-map (into [] (for [p @(rf/subscribe [:portfolios])] {:id p :label p}))\r\n        display-style (rf/subscribe [:single-portfolio-risk/display-style])\r\n        portfolio (rf/subscribe [:single-portfolio-risk/portfolio])\r\n        hide-zero-risk (rf/subscribe [:single-portfolio-risk/hide-zero-holdings])]\r\n    [box :class \"subbody rightelement\" :child\r\n     [v-box :class \"element\" :align-self :center :justify :center :gap \"20px\"\r\n      :children [[title :label (str \"Portfolio drill-down \" @(rf/subscribe [:qt-date])) :level :level1]\r\n                 [h-box :gap \"50px\"\r\n                  :children [\r\n                             [v-box :gap \"15px\"\r\n                              :children [\r\n                                         [h-box\r\n                                          :gap \"10px\"\r\n                                          :children [\r\n                                                     [title :label \"Display type:\" :level :level3]\r\n                                                     [single-dropdown :width dropdown-width :model display-style :choices static/tree-table-choices :on-change #(rf/dispatch [:single-portfolio-risk/display-style %])]]]\r\n                                         [checkbox :model hide-zero-risk :label \"Hide zero positions in table view\" :disabled? (= @display-style \"Tree\") :on-change #(rf/dispatch [:single-portfolio-risk/hide-zero-holdings %])]]]\r\n                             [v-box :gap \"10px\" :children [\r\n                                                           [h-box :gap \"10px\" :children\r\n                                                            (into [] (concat [[title :label \"Filtering:\" :level :level3]\r\n                                                                              [single-dropdown :width dropdown-width :model portfolio :choices portfolio-map :on-change #(rf/dispatch [:single-portfolio-risk/portfolio %])]]\r\n                                                                             (filtering-row :single-portfolio-risk/filter)))]\r\n                                                           [h-box :gap \"20px\" :children (into [] (concat\r\n                                                                                                   (shortcut-row :single-portfolio-risk/shortcut)\r\n                                                                                                   [[gap :size \"50px\"]\r\n                                                                                                    [title :label \"Download:\" :level :level3]\r\n                                                                                                     [md-circle-icon-button :md-icon-name \"zmdi-download\" :on-click #(tools/csv-link @(rf/subscribe [:single-portfolio-risk/table]) @portfolio)]]))]]]]]\r\n                 [single-portfolio-risk-display]]]]))\r\n\r\n(defn multiple-portfolio-risk-controller []\r\n  (let [portfolio-map (into [] (for [p  @(rf/subscribe [:portfolios])] {:id p :label p}))\r\n        display-style (rf/subscribe [:multiple-portfolio-risk/display-style])\r\n        portfolios @(rf/subscribe [:portfolios])\r\n        selected-portfolios (rf/subscribe [:multiple-portfolio-risk/selected-portfolios])\r\n        number-of-fields (rf/subscribe [:multiple-portfolio-risk/field-number])\r\n        field-one (rf/subscribe [:multiple-portfolio-risk/field-one])\r\n        field-two (rf/subscribe [:multiple-portfolio-risk/field-two])\r\n        hide-zero-risk (rf/subscribe [:multiple-portfolio-risk/hide-zero-holdings])\r\n        ]\r\n    [box :class \"subbody rightelement\" :child\r\n     [v-box :class \"element\" :align-self :center :justify :center :gap \"20px\"\r\n      :children [[title :label (str \"Portfolio drill-down \" @(rf/subscribe [:qt-date])) :level :level1]\r\n                 [h-box :gap \"50px\"\r\n                  :children\r\n                             [\r\n                              [v-box :gap \"20px\"\r\n                               :children [\r\n                                          [h-box :gap \"10px\" :children [[title :label \"Display type:\" :level :level3] [gap :size \"1\"] [single-dropdown :width dropdown-width :model display-style :choices static/tree-table-choices :on-change #(rf/dispatch [:multiple-portfolio-risk/display-style %])]]]\r\n                                          [checkbox :model hide-zero-risk :label \"Hide zero positions in table view\" :disabled? (= @display-style \"Tree\") :on-change #(rf/dispatch [:multiple-portfolio-risk/hide-zero-holdings %])]\r\n                                          [h-box :gap \"10px\" :children [[title :label \"Field:\" :level :level3] [gap :size \"1\"] [single-dropdown :width dropdown-width :model field-one :choices static/risk-field-choices :on-change #(rf/dispatch [:multiple-portfolio-risk/field-one %])]]]]]\r\n                              [v-box :gap \"10px\"\r\n                               :children [[title :label \"Portfolios:\" :level :level3]\r\n                                          [button :style {:width \"100%\"} :label \"All\"      :on-click #(rf/dispatch [:multiple-portfolio-risk/selected-portfolios (set portfolios)])]\r\n                                          [button :style {:width \"100%\"} :label \"None\"     :on-click #(rf/dispatch [:multiple-portfolio-risk/selected-portfolios #{}])]\r\n                                          [button :style {:width \"100%\"} :label \"CEMBI\"    :on-click #(rf/dispatch [:multiple-portfolio-risk/selected-portfolios (set (:portfolios (first (filter (fn [x] (= (:id x) :cembi)) static/portfolio-alignment-groups))))])]\r\n                                          [button :style {:width \"100%\"} :label \"Allianz\"  :on-click #(rf/dispatch [:multiple-portfolio-risk/selected-portfolios (set (:portfolios (first (filter (fn [x] (= (:id x) :allianz)) static/portfolio-alignment-groups))))])]\r\n                                          [button :style {:width \"100%\"} :label \"IG\"       :on-click #(rf/dispatch [:multiple-portfolio-risk/selected-portfolios (set (:portfolios (first (filter (fn [x] (= (:id x) :ig)) static/portfolio-alignment-groups))))])]\r\n                                          [button :style {:width \"100%\"} :label \"Talanx\"   :on-click #(rf/dispatch [:multiple-portfolio-risk/selected-portfolios (set (:portfolios (first (filter (fn [x] (= (:id x) :talanx)) static/portfolio-alignment-groups))))])]]]\r\n                              [selection-list :width dropdown-width :model selected-portfolios :choices portfolio-map :on-change #(rf/dispatch [:multiple-portfolio-risk/selected-portfolios %])]\r\n                              [v-box :gap \"20px\"\r\n                               :children [[h-box :gap \"10px\" :children (into [] (concat [[title :label \"Filtering:\" :level :level3]] (filtering-row :multiple-portfolio-risk/filter)))]\r\n                                          [h-box :gap \"10px\" :children (shortcut-row :multiple-portfolio-risk/shortcut)]\r\n                                          [h-box :gap \"10px\" :children [ [title :label \"Download:\" :level :level3]\r\n                                                                        [md-circle-icon-button :md-icon-name \"zmdi-download\" :on-click #(tools/csv-link @(rf/subscribe [:multiple-portfolio-risk/table]) \"pivot\")]]]]]]]\r\n                 [multiple-portfolio-risk-display]]]]))\r\n\r\n(defn portfolio-alignment-risk-controller []\r\n  (let [display-style (rf/subscribe [:portfolio-alignment/display-style])\r\n        ;risk-filter (rf/subscribe [:portfolio-alignment/filter])\r\n        portfolio-alignment-group (rf/subscribe [:portfolio-alignment/group])\r\n        field (rf/subscribe [:portfolio-alignment/field])\r\n        threshold (rf/subscribe [:portfolio-alignment/threshold])]\r\n    [box :class \"subbody rightelement\" :child\r\n     [v-box :class \"element\" :align-self :center :justify :center :gap \"20px\"\r\n      :children [[title :label (str \"Portfolio alignment \" @(rf/subscribe [:qt-date])) :level :level1]\r\n                 [h-box :gap \"50px\"\r\n                  :children\r\n                  [[v-box :gap \"20px\"\r\n                    :children [[h-box :gap \"10px\" :children [[title :label \"Display type:\" :level :level3] [gap :size \"1\"] [single-dropdown :width dropdown-width :model display-style :choices static/tree-table-choices :on-change #(rf/dispatch [:portfolio-alignment/display-style %])]]]\r\n                               [h-box :gap \"10px\" :children [[title :label \"Field:\" :level :level3] [gap :size \"1\"] [single-dropdown :width dropdown-width :model field :choices static/risk-field-choices :on-change #(rf/dispatch [:portfolio-alignment/field %])]]]\r\n                               [h-box :gap \"10px\" :children [[title :label \"Threshold:\" :level :level3] [gap :size \"1\"] [single-dropdown :width dropdown-width :model threshold :choices static/threshold-choices-alignment :on-change #(rf/dispatch [:portfolio-alignment/threshold %])]]]]]\r\n                   [v-box :gap \"20px\"\r\n                     :children [[h-box :gap \"10px\" :children [[title :label \"Portfolios:\" :level :level3] [gap :size \"1\"]\r\n                                                              [single-dropdown :width dropdown-width :model portfolio-alignment-group :choices static/portfolio-alignment-groups :on-change #(rf/dispatch [:portfolio-alignment/group %])]]]]]\r\n\r\n                   [v-box :gap \"20px\"\r\n                    :children [[h-box :gap \"10px\" :children (into [] (concat [[title :label \"Filtering:\" :level :level3]] (filtering-row :portfolio-alignment/filter)))]\r\n                               [h-box :gap \"10px\" :children (shortcut-row :portfolio-alignment/shortcut)]\r\n                               [h-box :gap \"10px\" :children [ [title :label \"Download:\" :level :level3]\r\n                                                             [md-circle-icon-button :md-icon-name \"zmdi-download\" :on-click #(tools/csv-link @(rf/subscribe [:portfolio-alignment/table]) \"alignment\")]]]]]]]\r\n                 [portfolio-alignment-risk-display]]]]))\r\n\r\n\r\n(defn go-to-portfolio-risk [state rowInfo instance] (clj->js {:onClick #(do (rf/dispatch-sync [:navigation/active-home :single-portfolio]) (rf/dispatch [:single-portfolio-risk/portfolio (aget rowInfo \"row\" \"portfolio\")])) :style {:cursor \"pointer\"}}))\r\n\r\n(defn summary-display []\r\n   [box :class \"subbody rightelement\" :child\r\n     [v-box :class \"element\" :align-self :center :justify :center :gap \"20px\"\r\n      :children [[h-box :align :center :children [[title :label (str \"Summary \" @(rf/subscribe [:qt-date])) :level :level1]\r\n                                                  [gap :size \"1\"]\r\n                                                  [md-circle-icon-button :md-icon-name \"zmdi-download\" :on-click #(tools/csv-link @(rf/subscribe [:summary-display/table]) \"summary\")]]]\r\n    [:> ReactTable\r\n     {:data           @(rf/subscribe [:summary-display/table])\r\n      :columns        [{:Header \"Portfolio\" :accessor \"portfolio\" :width 120}\r\n                       {:Header \"Balance\" :columns (mapv tables/risk-table-columns [:value :cash-pct])}\r\n                       {:Header \"Value\" :columns [(assoc (tables/risk-table-columns :contrib-yield) :Header \"Yield\")\r\n                                                  (tables/risk-table-columns :contrib-bond-yield)\r\n                                                  (assoc (tables/risk-table-columns :contrib-mdur) :Header \"M Dur\")\r\n                                                  (tables/risk-table-columns :rating)\r\n                                                  (assoc (tables/risk-table-columns :rating-score) :width 60)\r\n                                                  (assoc (tables/risk-table-columns :contrib-zspread) :Header \"Z-spread\")\r\n                                                  (assoc (tables/risk-table-columns :contrib-gspread) :Header \"G-spread\")\r\n                                                  (assoc (tables/risk-table-columns :contrib-beta) :Header \"Beta\")\r\n                                                  ]}]\r\n      :showPagination false\r\n      :pageSize       (count @(rf/subscribe [:portfolios]))\r\n      :getTrProps     go-to-portfolio-risk\r\n      :className      \"-striped -highlight\"}]]]])\r\n\r\n(defn portfolio-history-table []\r\n  (let [data @(rf/subscribe [:portfolio-trade-history/data])]\r\n    (if @(rf/subscribe [:single-bond-trade-history/show-throbber])\r\n      [box :align :center :child [throbber :size :large]]\r\n      [box :align :center\r\n       :child [:> ReactTable\r\n                {:data           data\r\n                 :columns        (concat [{:Header \"Date\" :accessor \"TradeDate\" :width 100 :Cell jasminegui.tradehistory/subs10}\r\n                                          {:Header \"Type\" :accessor \"TransactionTypeName\" :width 100}\r\n                                          ;{:Header \"Instrument\" :accessor \"IssueName\" :width 400}\r\n                                          {:Header \"Instrument\" :accessor \"NAME\" :width 200}\r\n                                          {:Header \"SEDOL\" :accessor \"SEDOL\" :width 100}\r\n                                          {:Header \"CCY\" :accessor \"LocalCcy\" :width 60}\r\n                                          {:Header \"Notional\" :accessor \"Quantity\" :width 100 :style {:textAlign \"right\"} :Cell jasminegui.tradehistory/nfh} ;\r\n                                          {:Header \"Price\" :accessor \"PriceLcl\" :width 75 :style {:textAlign \"right\"} :Cell tables/round2}\r\n                                          {:Header \"Counterparty\" :accessor \"counterparty_code\" :width 100}]\r\n                                         (if (= @(rf/subscribe [:portfolio-trade-history/performance]) \"Yes\")\r\n                                           [{:Header \"Last price\" :accessor \"last-price\" :width 75 :style {:textAlign \"right\"} :Cell tables/round2}\r\n                                            {:Header \"Total return\" :accessor \"total-return\" :width 100 :style {:textAlign \"right\"} :Cell tables/round2pc}\r\n                                            {:Header \"TR vs CEMBI\" :accessor \"tr-vs-cembi\" :width 100 :style {:textAlign \"right\"} :Cell tables/round2pc}]))\r\n                 :showPagination  (> (count data) 50)\r\n                 :defaultPageSize (min 50 (count data))\r\n                 :filterable      true\r\n                 :defaultFilterMethod tables/case-insensitive-filter\r\n                 :className      \"-striped -highlight\"}]])))\r\n\r\n(defn trade-history []\r\n  (let [portfolio (rf/subscribe [:portfolio-trade-history/portfolio])\r\n        performance (rf/subscribe [:portfolio-trade-history/performance])\r\n        portfolio-map (into [] (for [p @(rf/subscribe [:portfolios])] {:id p :label p}))\r\n        start-date (rf/subscribe [:portfolio-trade-history/start-date])\r\n        end-date (rf/subscribe [:portfolio-trade-history/end-date])]\r\n    [box :class \"subbody rightelement\" :child\r\n     [v-box :class \"element\" :gap \"20px\"\r\n      :children [[title :label (str \"Trade history for \" @portfolio) :level :level1]\r\n                 [h-box :gap \"50px\"\r\n                  :children [[v-box :gap \"15px\"\r\n                              :children [[h-box\r\n                                          :width \"1200px\"\r\n                                          :gap \"10px\"\r\n                                          :children [[title :label \"Portfolio:\" :level :level3]\r\n                                                     [single-dropdown :width dropdown-width :model portfolio :choices portfolio-map :on-change #(rf/dispatch [:portfolio-trade-history/portfolio %])]\r\n                                                     [gap :size \"20px\"]\r\n                                                     [title :label \"Start:\" :level :level3]\r\n                                                     [datepicker-dropdown\r\n                                                      :model start-date\r\n                                                      :minimum (tools/int-to-gdate 20120101)\r\n                                                      :maximum (today)\r\n                                                      :format \"dd/MM/yyyy\" :show-today? true :on-change #(rf/dispatch [:portfolio-trade-history/start-date %])]\r\n                                                     [gap :size \"20px\"]\r\n                                                     [title :label \"End:\" :level :level3]\r\n                                                     [datepicker-dropdown\r\n                                                      :model end-date\r\n                                                      :minimum (tools/int-to-gdate 20120101)\r\n                                                      :maximum (today)\r\n                                                      :format \"dd/MM/yyyy\" :show-today? false :on-change #(rf/dispatch [:portfolio-trade-history/end-date %])]\r\n                                                     [gap :size \"20px\"]\r\n                                                     [title :label \"Get performance?\" :level :level3]\r\n                                                     [single-dropdown :width mini-dropdown-width :model performance :choices [{:id \"No\" :label \"No\"} {:id \"Yes\" :label \"Yes\"}] :on-change #(rf/dispatch [:portfolio-trade-history/performance %])]\r\n                                                     [gap :size \"20px\"]\r\n                                                     [button :label \"Fetch\" :class \"btn btn-primary btn-block\" :on-click #(rf/dispatch [:get-portfolio-trade-history @portfolio @start-date @end-date])]\r\n                                                     [gap :size \"20px\"]\r\n                                                     [md-circle-icon-button :md-icon-name \"zmdi-download\" :on-click #(tools/csv-link @(rf/subscribe [:portfolio-trade-history/data]) @portfolio)]]]]]]]\r\n                 [portfolio-history-table]]]]))"]}