{"version":3,"sources":["jasminegui/riskviews.cljs"],"mappings":"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","names":["jasminegui.riskviews/round0pc-trigger","this","reagent.core/as-element","temp__5733__auto__","x","c","v","G__43289","G__43290","goog.string/format","colorize","jasminegui.riskviews/strategy-pop-up","jasminegui.riskviews/last-price-props","status","prefix","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","G__43293","G__43294","cljs.core/clj->js","jasminegui.riskviews/dropdown-width","jasminegui.riskviews/single-portfolio-risk-display","cljs.core/deref","p1__43297#","positions","G__43298","re-frame.core/subscribe","portfolio","G__43299","portfolio-total-line","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","G__43302","fexpr__43301","G__43303","cljs.core.keyword.cljs$core$IFn$_invoke$arity$1","is-tree","G__43304","portfolio-positions","p1__43295#","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","viewable-positions","G__43306","p1__43296#","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","risk-filter","G__43307","risk-choice-1","risk-choice-2","risk-choice-3","additional-des-cols","cljs.core.remove.cljs$core$IFn$_invoke$arity$2","cljs.core.map.cljs$core$IFn$_invoke$arity$2","jasminegui.static/risk-choice-map","grouping-columns","cljs.core.into.cljs$core$IFn$_invoke$arity$2","iter__4529__auto__","s__43309","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","cljs.core/count","b__43311","cljs.core/chunk-buffer","i__43310","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__43308","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","r","cljs.core/nil?","jasminegui.tables/table-columns","accessors","cljs.core.mapv.cljs$core$IFn$_invoke$arity$2","accessors-k","cljs.core/keyword","display","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","cljs.core.sort_by.cljs$core$IFn$_invoke$arity$2","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/juxt","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","cljs.core.comp.cljs$core$IFn$_invoke$arity$2","jasminegui.mount/first-level-sort","js/module$node_modules$react_table$lib$index.default","jasminegui.tables/case-insensitive-filter","cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic","cljs.core.distinct.cljs$core$IFn$_invoke$arity$1","G__43313","G__43312","re-frame.core/dispatch","jasminegui.riskviews/multiple-portfolio-risk-display","p1__43314#","selected-portfolios","G__43315","portfolios","G__43316","display-key-one","G__43317","cell-one","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","width-one","G__43318","G__43319","s__43321","b__43323","i__43322","iter__43320","display-one","G__43324","cljs.core/name","s__43327","b__43329","i__43328","iter__43326","p","cljs.core/some","jasminegui.tables/sum-rows","G__43330","G__43325","jasminegui.riskviews/multiple-portfolio-risk-display-old","p1__43332#","pivoted-positions","G__43333","G__43334","kselected-portfolios","G__43335","hide-zero-risk","G__43336","number-of-fields","G__43337","G__43338","display-key-two","G__43339","cell-two","G__43340","G__43341","s__43343","b__43345","i__43344","iter__43342","pivoted-data","p1__43331#","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","fexpr__43346","thfil","line","cljs.core/every?","cljs.core/zero?","pivoted-data-hide-zero","jasminegui.mount/add-total-line-to-pivot","s__43349","b__43351","i__43350","iter__43348","G__43352","G__43347","jasminegui.riskviews/multiple-portfolio-alignment-risk-display","group","p1__43353#","G__43356","jasminegui.static/portfolio-alignment-groups","G__43357","base-portfolio","kportfolios","display-key","G__43358","G__43359","G__43360","s__43362","b__43364","i__43363","iter__43361","p1__43354#","fexpr__43365","differentiate","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","temp-line","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","fexpr__43366","pivoted-data-diff","threshold","cljs.reader.read_string.cljs$core$IFn$_invoke$arity$1","p1__43355#","G__43367","jasminegui.static/threshold-choices-alignment","pivoted-data-diff-post-th","cljs.core.println.cljs$core$IFn$_invoke$arity$variadic","s__43369","b__43371","i__43370","iter__43368","G__43372","jasminegui.riskviews/shortcut-row","key","shortcut","G__43373","re-com.core/title","s__43375","b__43377","i__43376","iter__43374","i","cljs.core.range.cljs$core$IFn$_invoke$arity$2","re-com.core/md-circle-icon-button","G__43378","G__43379","jasminegui.riskviews/filtering-row","G__43381","s__43383","b__43385","i__43384","p1__43380#","iter__43382","re-com.core/single-dropdown","reagent.core/cursor","G__43386","G__43387","jasminegui.riskviews/csv-link-single-portfolio","G__43389","jasminegui.tools/download-object-as-csv","jasminegui.tools/vector-of-maps->csv","p1__43388#","G__43390","jasminegui.riskviews/single-portfolio-risk-controller","p1__43391#","p1__43392#","portfolio-map","s__43395","b__43397","i__43396","iter__43394","G__43398","display-style","G__43399","G__43400","G__43401","re-com.core/box","re-com.core/v-box","G__43403","re-com.core/h-box","G__43404","re-com.core/checkbox","G__43405","p1__43393#","G__43406","re-com.core/gap","jasminegui.riskviews/csv-link-multiple-portfolio","G__43407","jasminegui.riskviews/multiple-portfolio-risk-controller","p1__43408#","p1__43409#","p1__43410#","p1__43411#","s__43413","b__43415","i__43414","iter__43412","G__43416","G__43417","G__43418","G__43419","G__43420","G__43421","field-one","G__43422","field-two","G__43423","G__43424","G__43426","G__43427","G__43428","jasminegui.static/field-choices","G__43429","re-com.core/button","G__43430","cljs.core/set","G__43431","G__43432","G__43433","G__43434","G__43435","re-com.core/selection-list","G__43436","jasminegui.riskviews/portfolio-alignment-risk-controller","G__43442","G__43443","portfolio-alignment-group","G__43444","field","G__43445","G__43446","G__43448","p1__43437#","p1__43438#","p1__43439#","p1__43440#","G__43449","jasminegui.static/field-choices-alignment","G__43450","G__43451","G__43452","s__43454","b__43456","i__43455","p1__43441#","iter__43453","G__43457","G__43458","jasminegui.riskviews/go-to-portfolio-risk","state","rowInfo","instance","G__43459","re-frame.core/dispatch-sync","G__43460","jasminegui.riskviews/summary-display","G__43462","G__43463","totals","G__43464","s__43466","b__43468","i__43467","iter__43465","s__43470","b__43472","i__43471","iter__43469","s__43474","b__43476","i__43475","iter__43473","k","cljs.core.reduce.cljs$core$IFn$_invoke$arity$2","cljs.core/+","p1__43461#","G__43478","G__43479","G__43480","G__43481","G__43482","G__43483","G__43484","G__43485","cljs.core/chunk-first"],"sourcesContent":["(ns jasminegui.riskviews\r\n  (:require\r\n    ; [oz.core :as oz]\r\n    [re-frame.core :as rf]\r\n    [reagent.core :as r]\r\n    [goog.string :as gstring]\r\n    [goog.string.format]\r\n    [re-com.core :refer [p p-span h-box v-box box gap line scroller border label title button close-button checkbox hyperlink-href slider horizontal-bar-tabs radio-button info-button\r\n                         single-dropdown hyperlink modal-panel alert-box throbber input-password selection-list md-circle-icon-button\r\n                         input-text input-textarea popover-anchor-wrapper popover-content-wrapper popover-tooltip datepicker-dropdown] :refer-macros [handler-fn]]\r\n    [re-com.box :refer [h-box-args-desc v-box-args-desc box-args-desc gap-args-desc line-args-desc scroller-args-desc border-args-desc flex-child-style]]\r\n    [re-com.util :refer [px]]\r\n    [\"react-table\" :as rt :default ReactTable]\r\n    [jasminegui.mount :as mount]\r\n    [jasminegui.static :as static]\r\n    [jasminegui.tools :as tools]\r\n    [jasminegui.tables :as tables]\r\n\r\n    [re-com.validate :refer [string-or-hiccup? alert-type? vector-of-maps?]])\r\n  (:import (goog.i18n NumberFormat)\r\n           (goog.i18n.NumberFormat Format))\r\n  )\r\n\r\n\r\n\r\n(defn round0pc-trigger  [this]\r\n  (r/as-element\r\n    (if-let [x (aget this \"value\")]\r\n      (letfn [(colorize [c v] [:div {:style {:color c}} (gstring/format \"%.0f%\" (* 100 v))])]\r\n        (cond\r\n          (>= x 1.0) (colorize \"red\" x)\r\n          (>= x 0.5) (colorize \"orange\" x)\r\n          (>= x 0.0) (colorize \"black\" x)\r\n          (< x 0.0) \"<0%\"\r\n          :else \"-\"))\r\n      \"-\")))\r\n\r\n(defn strategy-pop-up [this]\r\n  (r/as-element [:div [:span {:title (aget this \"row\" \"strategy\")} (aget this \"row\" \"strategy-shortcut\")]]))\r\n\r\n(defn last-price-props [this]\r\n  (if-not (nil? this)\r\n    (let [status (aget this \"row\" \"status\")\r\n          prefix (if (= status \"CLOSED\") \"(c) \" \"\")]\r\n      (r/as-element (str prefix (gstring/format \"%.2f\" (aget this \"value\")))))\r\n    (clj->js {:style nil})))\r\n\r\n;(defn format-date-from-int-rt [this] (tools/format-date-from-int (aget this \"value\")))\r\n;\r\n;(defn status-props [this]\r\n;  (if-not (nil? this)\r\n;    (let [status (aget this \"row\" \"status\")]\r\n;      (r/as-element (if (= status \"CLOSED\") (tools/format-date-from-int (aget this \"row\" \"exit-date\")) status)))\r\n;    (clj->js {:style nil})))\r\n;\r\n;(defn exit-date-props [this]\r\n;  (if-not (nil? this)\r\n;    (let [status (aget this \"row\" \"status\")]\r\n;      (r/as-element (if (= status \"CLOSED\") (tools/format-date-from-int (aget this \"row\" \"exit-date\")) status)))\r\n;    (clj->js {:style nil})))\r\n\r\n;(defn case-insensitive-filter [filterfn row]\r\n;  \"filterfn is {id: column_name value: text_in_filter_box\"\r\n;  (.includes  (.toLowerCase (str (aget row (aget filterfn \"id\"))))  (.toLowerCase (aget filterfn \"value\"))))\r\n;\r\n;(defn exit-date-filter [filterfn row]\r\n;  \"if user types LIVE, filters by today's exit date\"\r\n;  (if (.includes \"live\" (.toLowerCase (aget filterfn \"value\")))\r\n;    (.includes (.toLowerCase (str (aget row (aget filterfn \"id\")))) (tools/gdate-to-yyyymmdd static/gtoday))\r\n;    (.includes (.toLowerCase (str (aget row (aget filterfn \"id\")))) (.toLowerCase (aget filterfn \"value\")))))\r\n;\r\n\r\n\r\n;(defn sum-rows [vals] (reduce + vals))\r\n\r\n\r\n(def dropdown-width \"150px\")\r\n\r\n(defn single-portfolio-risk-display []\r\n  (let [positions @(rf/subscribe [:positions])\r\n        portfolio @(rf/subscribe [:single-portfolio-risk/portfolio])\r\n        portfolio-total-line (assoc (@(rf/subscribe [:total-positions]) (keyword portfolio)) :qt-iam-int-lt-median-rating \"Total\" :qt-iam-int-lt-median-rating-score \"00 Total\")\r\n        is-tree (= @(rf/subscribe [:single-portfolio-risk/display-style]) \"Tree\")\r\n        portfolio-positions (filter #(= (:portfolio %) portfolio) positions)\r\n        viewable-positions (if (and (not is-tree) @(rf/subscribe [:single-portfolio-risk/hide-zero-holdings])) (filter #(not= (:weight %) 0) portfolio-positions) portfolio-positions)\r\n        risk-filter @(rf/subscribe [:single-portfolio-risk/filter])\r\n        risk-choice-1 (if (not= \"None\" (risk-filter 1)) (risk-filter 1))\r\n        risk-choice-2 (if (not= \"None\" (risk-filter 2)) (risk-filter 2))\r\n        risk-choice-3 (if (not= \"None\" (risk-filter 3)) (risk-filter 3))\r\n        additional-des-cols (remove #{\"None\" risk-choice-1 risk-choice-2 risk-choice-3} (map :id static/risk-choice-map))\r\n        grouping-columns (into [] (for [r (remove nil? [risk-choice-1 risk-choice-2 risk-choice-3 :name])] (tables/table-columns r)))\r\n        accessors (mapv :accessor grouping-columns)\r\n        accessors-k (mapv keyword accessors)\r\n        display (conj (sort-by (apply juxt (concat [(comp mount/first-level-sort (first accessors-k))] (rest accessors-k))) viewable-positions) portfolio-total-line)\r\n        ]\r\n    ;(println @(rf/subscribe [:single-portfolio-risk/table-filter]))\r\n    [:> ReactTable\r\n     {:data                display\r\n      :defaultFilterMethod tables/case-insensitive-filter\r\n      :columns             [{:Header \"Groups\" :columns grouping-columns}\r\n                            {:Header \"NAV\" :columns (mapv tables/table-columns [:nav :bm-weight :weight-delta])}\r\n                            {:Header \"Duration\" :columns (mapv tables/table-columns [:contrib-mdur :bm-contrib-eir-duration :mdur-delta])}\r\n                            {:Header \"Yield\" :columns (mapv tables/table-columns [:contrib-yield :bm-contrib-yield])}\r\n                            {:Header \"Z-spread\" :columns (mapv tables/table-columns [:contrib-zspread ])}\r\n                            {:Header \"Position\" :columns (mapv tables/table-columns [:value :nominal])}\r\n                            ;{:Header \"Index contribution\" :columns (mapv tables/table-columns [:bm-contrib-yield :bm-contrib-eir-duration])}\r\n                            {:Header (if is-tree \"Bond analytics (median)\" \"Bond analytics\") :columns (mapv tables/table-columns [:yield :z-spread :g-spread :duration])}\r\n                            {:Header \"Description\" :columns (mapv tables/table-columns (into [] (concat [:rating :isin] additional-des-cols [:description])))}]\r\n      :showPagination      (not is-tree)\r\n      :sortable            (not is-tree)\r\n      :filterable          (not is-tree)\r\n      :pageSize            (if is-tree (inc (count (distinct (map (first accessors-k) portfolio-positions)))) 25) ;(inc (count display))\r\n      :className           \"-striped -highlight\"\r\n      :pivotBy             (if is-tree accessors [])\r\n      :defaultFiltered     (if is-tree [] @(rf/subscribe [:single-portfolio-risk/table-filter])) ; [{:id \"analyst\" :value \"Tammy\"}]\r\n      :onFilteredChange    #(rf/dispatch [:single-portfolio-risk/table-filter %])\r\n      }]\r\n\r\n        ))\r\n\r\n\r\n(defn multiple-portfolio-risk-display []\r\n  (let [\r\n        selected-portfolios @(rf/subscribe [:multiple-portfolio-risk/selected-portfolios])\r\n        portfolios  @(rf/subscribe [:portfolios])\r\n        display-key-one @(rf/subscribe [:multiple-portfolio-risk/field-one])\r\n        cell-one (get-in tables/table-columns [display-key-one :Cell])\r\n        width-one 100                                      ;(get-in tables/table-columns [display-key-one :width])\r\n        is-tree (= @(rf/subscribe [:multiple-portfolio-risk/display-style]) \"Tree\")\r\n        risk-filter @(rf/subscribe [:multiple-portfolio-risk/filter])\r\n        risk-choice-1 (if (not= \"None\" (risk-filter 1)) (risk-filter 1))\r\n        risk-choice-2 (if (not= \"None\" (risk-filter 2)) (risk-filter 2))\r\n        risk-choice-3 (if (not= \"None\" (risk-filter 3)) (risk-filter 3))\r\n        grouping-columns (into [] (for [r (remove nil? [risk-choice-1 risk-choice-2 risk-choice-3 :name])] (tables/table-columns r)))\r\n        accessors (mapv :accessor grouping-columns)\r\n        accessors-k (mapv keyword accessors)\r\n        display-one @(rf/subscribe [:multiple-portfolio-risk/table])\r\n        ]\r\n    [:> ReactTable\r\n     {:data                display-one\r\n      :defaultFilterMethod tables/case-insensitive-filter\r\n      :columns               [{:Header \"Groups\" :columns grouping-columns}\r\n                              {:Header  (str \"Portfolio \" (name display-key-one))\r\n                               :columns (into [] (for [p portfolios :when (some #{p} selected-portfolios)] {:Header p :accessor p :width width-one :style {:textAlign \"right\"} :aggregate tables/sum-rows :Cell cell-one :filterable false}))}\r\n                              {:Header  \"Description\"\r\n                               :columns (mapv tables/table-columns [:rating :isin :description])}]\r\n\r\n\r\n      :showPagination      (not is-tree)\r\n      :sortable            (not is-tree)\r\n      :filterable          (not is-tree)\r\n      :pageSize            (if is-tree (inc (count (distinct (map (first accessors-k) display-one)))) 25)\r\n      :className           \"-striped -highlight\"\r\n      :pivotBy             (if is-tree accessors [])\r\n      :defaultFiltered     (if is-tree [] @(rf/subscribe [:single-portfolio-risk/table-filter])) ; [{:id \"analyst\" :value \"Tammy\"}]\r\n      :onFilteredChange    #(rf/dispatch [:single-portfolio-risk/table-filter %])\r\n\r\n      }]\r\n\r\n    ))\r\n\r\n(defn multiple-portfolio-risk-display-old []\r\n  (let [\r\n        pivoted-positions @(rf/subscribe [:pivoted-positions])\r\n        selected-portfolios @(rf/subscribe [:multiple-portfolio-risk/selected-portfolios])\r\n        kselected-portfolios (mapv keyword selected-portfolios)\r\n        portfolios  @(rf/subscribe [:portfolios])\r\n        hide-zero-risk @(rf/subscribe [:multiple-portfolio-risk/hide-zero-holdings])\r\n        number-of-fields @(rf/subscribe [:multiple-portfolio-risk/field-number])\r\n        display-key-one @(rf/subscribe [:multiple-portfolio-risk/field-one])\r\n        cell-one (get-in tables/table-columns [display-key-one :Cell])\r\n        display-key-two @(rf/subscribe [:multiple-portfolio-risk/field-two])\r\n        cell-two (get-in tables/table-columns [display-key-two :Cell])\r\n        width-one 100                                      ;(get-in tables/table-columns [display-key-one :width])\r\n        is-tree (= @(rf/subscribe [:multiple-portfolio-risk/display-style]) \"Tree\")\r\n        risk-filter @(rf/subscribe [:multiple-portfolio-risk/filter])\r\n        risk-choice-1 (if (not= \"None\" (risk-filter 1)) (risk-filter 1))\r\n        risk-choice-2 (if (not= \"None\" (risk-filter 2)) (risk-filter 2))\r\n        risk-choice-3 (if (not= \"None\" (risk-filter 3)) (risk-filter 3))\r\n        grouping-columns (into [] (for [r (remove nil? [risk-choice-1 risk-choice-2 risk-choice-3 :name])] (tables/table-columns r)))\r\n        accessors (mapv :accessor grouping-columns)\r\n        accessors-k (mapv keyword accessors)\r\n        pivoted-data (map #(merge % ((keyword (get-in tables/table-columns [display-key-one :accessor])) %)) pivoted-positions)\r\n        thfil (fn [line] (not (every? zero? (map line kselected-portfolios))))\r\n        pivoted-data-hide-zero (if (and (not is-tree) hide-zero-risk) (filter thfil pivoted-data) pivoted-data)\r\n        display-one (mount/add-total-line-to-pivot (sort-by\r\n                                               (apply juxt (concat [(comp mount/first-level-sort (first accessors-k))] (rest accessors-k)))\r\n                                               pivoted-data-hide-zero) portfolios)\r\n        ]\r\n    [:> ReactTable\r\n     {:data                display-one\r\n      :defaultFilterMethod tables/case-insensitive-filter\r\n      :columns             (if (= number-of-fields \"One\")\r\n\r\n                             [{:Header \"Groups\" :columns grouping-columns}\r\n                              {:Header  (str \"Portfolio \" (name display-key-one))\r\n                               :columns (into [] (for [p portfolios :when (some #{p} selected-portfolios)] {:Header p :accessor p :width width-one :style {:textAlign \"right\"} :aggregate tables/sum-rows :Cell cell-one :filterable false}))}\r\n                              {:Header  \"Description\"\r\n                               :columns (mapv tables/table-columns [:rating :isin :description])}]\r\n\r\n                             )\r\n      :showPagination      (not is-tree)\r\n      :sortable            (not is-tree)\r\n      :filterable          (not is-tree)\r\n      :pageSize            (if is-tree (inc (count (distinct (map (first accessors-k) display-one)))) 25)\r\n      :className           \"-striped -highlight\"\r\n      :pivotBy             (if is-tree accessors [])\r\n      :defaultFiltered     (if is-tree [] @(rf/subscribe [:single-portfolio-risk/table-filter])) ; [{:id \"analyst\" :value \"Tammy\"}]\r\n      :onFilteredChange    #(rf/dispatch [:single-portfolio-risk/table-filter %])\r\n\r\n      }]\r\n\r\n    ))\r\n\r\n(defn multiple-portfolio-alignment-risk-display []\r\n  (let [\r\n        group (:portfolios (first (filter #(= (:id %) @(rf/subscribe [:portfolio-alignment/group])) static/portfolio-alignment-groups)))\r\n        pivoted-positions @(rf/subscribe [:pivoted-positions])\r\n        base-portfolio (first group)\r\n        portfolios (rest group)\r\n        kportfolios (mapv keyword portfolios)\r\n        display-key @(rf/subscribe [:portfolio-alignment/field])\r\n        cell-one (get-in tables/table-columns [display-key :Cell])\r\n        width-one 100\r\n        is-tree (= @(rf/subscribe [:portfolio-alignment/display-style]) \"Tree\")\r\n        risk-filter @(rf/subscribe [:portfolio-alignment/filter])\r\n        risk-choice-1 (if (not= \"None\" (risk-filter 1)) (risk-filter 1))\r\n        risk-choice-2 (if (not= \"None\" (risk-filter 2)) (risk-filter 2))\r\n        risk-choice-3 (if (not= \"None\" (risk-filter 3)) (risk-filter 3))\r\n        grouping-columns (into [] (for [r (remove nil? [risk-choice-1 risk-choice-2 risk-choice-3 :name])] (tables/table-columns r)))\r\n        accessors (mapv :accessor grouping-columns)\r\n        accessors-k (mapv keyword accessors)\r\n        pivoted-data (map #(merge % ((keyword (get-in tables/table-columns [display-key :accessor])) %)) pivoted-positions)\r\n        differentiate (fn [line] (reduce\r\n                                   (fn [temp-line p] (assoc temp-line p (- (p temp-line) ((keyword base-portfolio) temp-line))))\r\n                                   line\r\n                                   kportfolios))\r\n        pivoted-data-diff (map differentiate pivoted-data)\r\n        threshold (cljs.reader/read-string (:label (first (filter #(= (:id %) @(rf/subscribe [:portfolio-alignment/threshold])) static/threshold-choices-alignment))))\r\n        thfil (fn [line] (some (fn [x] (or (< x (- threshold)) (> x threshold))) (map line kportfolios)))\r\n        pivoted-data-diff-post-th (filter thfil pivoted-data-diff)\r\n        display (mount/add-total-line-to-pivot (sort-by\r\n                                               (apply juxt (concat [(comp mount/first-level-sort (first accessors-k))] (rest accessors-k)))\r\n                                               pivoted-data-diff-post-th) portfolios)\r\n        ]\r\n    (println kportfolios)\r\n    [:> ReactTable\r\n     {:data                display\r\n      :defaultFilterMethod tables/case-insensitive-filter\r\n      :columns\r\n\r\n                             [{:Header \"Groups\" :columns grouping-columns}\r\n                              {:Header  (str \"Portfolio \" (name display-key) \" vs \" base-portfolio)\r\n                               :columns (into [] (for [p portfolios] {:Header p :accessor p :width width-one :style {:textAlign \"right\"} :aggregate tables/sum-rows :Cell cell-one :filterable false}))}\r\n                              {:Header  \"Description\"\r\n                               :columns [{:Header \"thinkFolio ID\" :accessor \"description\" :width 500} (tables/table-columns :rating)]}]\r\n\r\n      :showPagination      (not is-tree)\r\n      :sortable            (not is-tree)\r\n      :filterable          (not is-tree)\r\n      :pageSize            (if is-tree (inc (count (distinct (map (first accessors-k) display)))) 25)\r\n      :className           \"-striped -highlight\"\r\n      :pivotBy             (if is-tree accessors [])}]\r\n\r\n    ))\r\n\r\n(defn shortcut-row [key]\r\n  (let [shortcut (rf/subscribe [key])]\r\n    (into [] (concat [[title :label \"Shortcuts:\" :level :level3]]\r\n               (into [] (for [i (range 1 5)]\r\n                          [md-circle-icon-button\r\n                           :md-icon-name (str \"zmdi-collection-item-\" i)\r\n                           :class (if (= @shortcut i) \"active\" \"default\")\r\n                           :on-click #(rf/dispatch [key i])]))))))\r\n\r\n(defn filtering-row [key]\r\n  (let [risk-filter (rf/subscribe [key])]\r\n    (into [] (for [i (range 1 4)]\r\n               [single-dropdown\r\n                :width dropdown-width\r\n                :model (r/cursor risk-filter [i])\r\n                :choices static/risk-choice-map\r\n                :on-change #(rf/dispatch [key i %])]))))\r\n\r\n(defn csv-link-single-portfolio []\r\n  (let [portfolio @(rf/subscribe [:single-portfolio-risk/portfolio])]\r\n    (tools/download-object-as-csv\r\n      (clj->js (tools/vector-of-maps->csv (filter #(= (:portfolio %) portfolio) @(rf/subscribe [:positions]))))\r\n      (str portfolio \".csv\"))))\r\n\r\n(defn single-portfolio-risk-controller []\r\n  (let [portfolio-map (into [] (for [p @(rf/subscribe [:portfolios])] {:id p :label p}))\r\n        display-style (rf/subscribe [:single-portfolio-risk/display-style])\r\n        portfolio (rf/subscribe [:single-portfolio-risk/portfolio])\r\n        hide-zero-risk (rf/subscribe [:single-portfolio-risk/hide-zero-holdings])]\r\n    [box :class \"subbody rightelement\" :child\r\n     [v-box :class \"element\" :align-self :center :justify :center :gap \"20px\"\r\n      :children [[title :label (str \"Portfolio drill-down \" @(rf/subscribe [:qt-date])) :level :level1]\r\n                 [h-box\r\n                  :gap \"50px\"\r\n                  :children [\r\n                             [v-box\r\n                              :gap \"15px\"\r\n                              :children [\r\n                                         [h-box\r\n                                          :gap \"10px\"\r\n                                          :children [\r\n                                                     [title :label \"Display type:\" :level :level3]\r\n                                                     [single-dropdown :width dropdown-width :model display-style :choices [{:id \"Table\" :label \"Table\"} {:id \"Tree\" :label \"Tree\"}] :on-change #(rf/dispatch [:single-portfolio-risk/display-style %])]]]\r\n                                         [checkbox :model hide-zero-risk :label \"Hide zero positions in table view\" :disabled? (= @display-style \"Tree\") :on-change #(rf/dispatch [:single-portfolio-risk/hide-zero-holdings %])]]]\r\n                             [v-box :gap \"10px\" :children [\r\n                                                           [h-box :gap \"10px\" :children\r\n                                                            (into [] (concat [[title :label \"Filtering:\" :level :level3]\r\n                                                                              [single-dropdown :width dropdown-width :model portfolio :choices portfolio-map :on-change #(rf/dispatch [:single-portfolio-risk/portfolio %])]]\r\n                                                                             (filtering-row :single-portfolio-risk/filter)))]\r\n                                                           [h-box :gap \"20px\" :children (into [] (concat\r\n                                                                                                   (shortcut-row :single-portfolio-risk/shortcut)\r\n                                                                                                   [[gap :size \"50px\"]\r\n                                                                                                    [title :label \"Download:\" :level :level3]\r\n                                                                                                     [md-circle-icon-button :md-icon-name \"zmdi-download\" :on-click #(csv-link-single-portfolio)]\r\n                                                                                                    ]))\r\n                                                            ]\r\n                                                           ]]\r\n                             ]\r\n\r\n\r\n\r\n\r\n                             ]\r\n                 ;[h-box :gap \"10px\" :children [[title :label \"Shortcuts:\"]]]\r\n                 [single-portfolio-risk-display]]]])\r\n  )\r\n;\r\n\r\n(defn csv-link-multiple-portfolio []\r\n  (tools/download-object-as-csv\r\n    (clj->js (tools/vector-of-maps->csv @(rf/subscribe [:multiple-portfolio-risk/table])))\r\n    \"pivot.csv\"))\r\n\r\n(defn multiple-portfolio-risk-controller []\r\n  (let [\r\n        portfolio-map (into [] (for [p  @(rf/subscribe [:portfolios])] {:id p :label p}))\r\n        display-style (rf/subscribe [:multiple-portfolio-risk/display-style])\r\n        risk-filter (rf/subscribe [:multiple-portfolio-risk/filter])\r\n        portfolios @(rf/subscribe [:portfolios])\r\n        selected-portfolios (rf/subscribe [:multiple-portfolio-risk/selected-portfolios])\r\n        number-of-fields (rf/subscribe [:multiple-portfolio-risk/field-number])\r\n        field-one (rf/subscribe [:multiple-portfolio-risk/field-one])\r\n        field-two (rf/subscribe [:multiple-portfolio-risk/field-two])\r\n        hide-zero-risk (rf/subscribe [:multiple-portfolio-risk/hide-zero-holdings])\r\n        ]\r\n    [box :class \"subbody rightelement\" :child\r\n     [v-box :class \"element\" :align-self :center :justify :center :gap \"20px\"\r\n      :children [[title :label (str \"Portfolio drill-down \" @(rf/subscribe [:qt-date])) :level :level1]\r\n                 [h-box :gap \"50px\"\r\n                  :children\r\n                             [\r\n                              [v-box\r\n                               :gap \"20px\"\r\n                               :children [\r\n                                          [h-box :gap \"10px\" :children [[title :label \"Display type:\" :level :level3] [gap :size \"1\"] [single-dropdown :width dropdown-width :model display-style :choices [{:id \"Table\" :label \"Table\"} {:id \"Tree\" :label \"Tree\"}] :on-change #(rf/dispatch [:multiple-portfolio-risk/display-style %])]]]\r\n                                          [checkbox :model hide-zero-risk :label \"Hide zero positions in table view\" :disabled? (= @display-style \"Tree\") :on-change #(rf/dispatch [:multiple-portfolio-risk/hide-zero-holdings %])]\r\n                                          [h-box :gap \"10px\" :children [[title :label \"Field:\" :level :level3] [gap :size \"1\"] [single-dropdown :width dropdown-width :model field-one :choices static/field-choices :on-change #(rf/dispatch [:multiple-portfolio-risk/field-one %])]]]\r\n                                          ]]\r\n                              [v-box\r\n                               :gap \"10px\"\r\n                               :children [[title :label \"Portfolios:\" :level :level3]\r\n                                          [button :style {:width \"100%\"} :label \"All\"      :on-click #(rf/dispatch [:multiple-portfolio-risk/selected-portfolios (set portfolios)])]\r\n                                          [button :style {:width \"100%\"} :label \"None\"     :on-click #(rf/dispatch [:multiple-portfolio-risk/selected-portfolios #{}])]\r\n                                          [button :style {:width \"100%\"} :label \"CEMBI\"    :on-click #(rf/dispatch [:multiple-portfolio-risk/selected-portfolios (set (:portfolios (first (filter (fn [x] (= (:id x) :cembi)) static/portfolio-alignment-groups))))])]\r\n                                          [button :style {:width \"100%\"} :label \"Allianz\"  :on-click #(rf/dispatch [:multiple-portfolio-risk/selected-portfolios (set (:portfolios (first (filter (fn [x] (= (:id x) :allianz)) static/portfolio-alignment-groups))))])]\r\n                                          [button :style {:width \"100%\"} :label \"IG\"       :on-click #(rf/dispatch [:multiple-portfolio-risk/selected-portfolios (set (:portfolios (first (filter (fn [x] (= (:id x) :ig)) static/portfolio-alignment-groups))))])]\r\n                                          [button :style {:width \"100%\"} :label \"Talanx\"   :on-click #(rf/dispatch [:multiple-portfolio-risk/selected-portfolios (set (:portfolios (first (filter (fn [x] (= (:id x) :talanx)) static/portfolio-alignment-groups))))])]]\r\n                               ]\r\n                              [selection-list :width dropdown-width :model selected-portfolios :choices portfolio-map :on-change #(rf/dispatch [:multiple-portfolio-risk/selected-portfolios %])]\r\n                              [v-box\r\n                               :gap \"20px\"\r\n                               :children [\r\n                                          [h-box :gap \"10px\" :children (into [] (concat [[title :label \"Filtering:\" :level :level3]] (filtering-row :multiple-portfolio-risk/filter)))]\r\n                                          [h-box :gap \"10px\" :children (shortcut-row :multiple-portfolio-risk/shortcut)]\r\n                                          [h-box :gap \"10px\" :children [ [title :label \"Download:\" :level :level3]\r\n                                                                        [md-circle-icon-button :md-icon-name \"zmdi-download\" :on-click #(csv-link-multiple-portfolio)]]]\r\n                                          ]\r\n                               ]\r\n\r\n\r\n                              ]\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n                  ;(into [] (concat [\r\n                  ;                            [v-box :gap \"15px\" :children [[title :label \"Display type:\" :level :level3] ;[title :label \"Fields:\" :level :level3]\r\n                  ;                                                          [title :label \"Field:\" :level :level3] ;[title :label \"Field two:\" :level :level3]\r\n                  ;                                                          ]]\r\n                  ;                            [v-box :gap \"10px\" :children [[single-dropdown :width dropdown-width :model display-style :choices [{:id \"Table\" :label \"Table\"} {:id \"Tree\" :label \"Tree\"}] :on-change #(rf/dispatch [:multiple-portfolio-risk/display-style %])]\r\n                  ;                                                          ;[single-dropdown :width dropdown-width :model number-of-fields :choices [{:id \"One\" :label \"One\"} {:id \"Two\" :label \"Two\"}] :on-change #(rf/dispatch [:multiple-portfolio-risk/field-number %])]\r\n                  ;                                                          [single-dropdown :width dropdown-width :model field-one :choices static/field-choices :on-change #(rf/dispatch [:multiple-portfolio-risk/field-one %])]\r\n                  ;                                                          ;[single-dropdown :width dropdown-width :model field-two :choices static/field-choices :on-change #(rf/dispatch [:multiple-portfolio-risk/field-two %])]\r\n                  ;                                                          ]]\r\n                  ;                            [gap :size \"50px\"]\r\n                  ;                            [title :label \"Filtering:\" :level :level3]\r\n                  ;                            [selection-list :width dropdown-width :height \"250px\" :model selected-portfolios :choices portfolio-map :on-change #(rf/dispatch [:multiple-portfolio-risk/selected-portfolios %])]]\r\n                  ;                           (into [] (for [i (range 1 4)] [single-dropdown :width dropdown-width :model (r/cursor risk-filter [i]) :choices static/risk-choice-map :on-change #(rf/dispatch [:multiple-portfolio-risk/filter i %])]))\r\n                  ;                           [[gap :size \"50px\"]\r\n                  ;                            [checkbox :model hide-zero-risk :label \"Hide zero positions in table view\" :disabled? (= @display-style \"Tree\") :on-change #(rf/dispatch [:multiple-portfolio-risk/hide-zero-holdings %])]]))\r\n\r\n                  ]\r\n                 ;[h-box :gap \"10px\" :children [[title :label \"Shortcuts:\"]]]\r\n                 [multiple-portfolio-risk-display]]]])\r\n  )\r\n\r\n(defn portfolio-alignment-risk-controller []\r\n  (let [\r\n        display-style (rf/subscribe [:portfolio-alignment/display-style])\r\n        risk-filter (rf/subscribe [:portfolio-alignment/filter])\r\n        portfolio-alignment-group (rf/subscribe [:portfolio-alignment/group])\r\n        field (rf/subscribe [:portfolio-alignment/field])\r\n        threshold (rf/subscribe [:portfolio-alignment/threshold])\r\n        ]\r\n    [box :class \"subbody rightelement\" :child\r\n     [v-box :class \"element\" :align-self :center :justify :center :gap \"20px\"\r\n      :children [[title :label (str \"Portfolio drill-down \" @(rf/subscribe [:qt-date])) :level :level1]\r\n                 [h-box :gap \"10px\"\r\n                  :children (into [] (concat [\r\n                                              [v-box :gap \"15px\" :children [[title :label \"Display type:\" :level :level3] [title :label \"Field:\" :level :level3] [title :label \"Threshold:\" :level :level3]]]\r\n                                              [v-box :gap \"10px\" :children [[single-dropdown :width dropdown-width :model display-style :choices [{:id \"Table\" :label \"Table\"} {:id \"Tree\" :label \"Tree\"}] :on-change #(rf/dispatch [:portfolio-alignment/display-style %])]\r\n                                                                            [single-dropdown :width dropdown-width :model field :choices static/field-choices-alignment :on-change #(rf/dispatch [:portfolio-alignment/field %])]\r\n                                                                            [single-dropdown :width dropdown-width :model threshold :choices static/threshold-choices-alignment :on-change #(rf/dispatch [:portfolio-alignment/threshold %])]\r\n                                                                            ]]\r\n                                              [gap :size \"50px\"]\r\n                                              [title :label \"Filtering:\" :level :level3]\r\n                                              [single-dropdown :width dropdown-width :model portfolio-alignment-group :choices static/portfolio-alignment-groups :on-change #(rf/dispatch [:portfolio-alignment/group %])]]\r\n                                             (into [] (for [i (range 1 4)] [single-dropdown :width dropdown-width :model (r/cursor risk-filter [i]) :choices static/risk-choice-map :on-change #(rf/dispatch [:portfolio-alignment/filter i %])]))))]\r\n                 ;[h-box :gap \"10px\" :children [[title :label \"Shortcuts:\"]]]\r\n                 [multiple-portfolio-alignment-risk-display]\r\n\r\n                 ]]])\r\n  )\r\n\r\n\r\n(defn go-to-portfolio-risk [state rowInfo instance] (clj->js {:onClick #(do (rf/dispatch-sync [:active-home :single-portfolio]) (rf/dispatch [:single-portfolio-risk/portfolio (aget rowInfo \"row\" \"portfolio\")])) :style {:cursor \"pointer\"}}))\r\n\r\n\r\n(defn summary-display []\r\n  (let [positions @(rf/subscribe [:positions])\r\n        portfolios @(rf/subscribe [:portfolios])\r\n        totals @(rf/subscribe [:total-positions])\r\n        display (into [] (for [p portfolios]\r\n                           (merge\r\n                             {:portfolio       p}\r\n                             (into {} (for [k [:cash-pct :base-value :contrib-yield :contrib-zspread :contrib-gspread :contrib-mdur :qt-iam-int-lt-median-rating :qt-iam-int-lt-median-rating-score]] [k (get-in totals [(keyword p) k])]))\r\n                             {\r\n                              ;:cash-pct (reduce + (map :weight (filter #(and (= (:portfolio %) p) (= (:jpm-region %) \"Cash\")) positions)))\r\n                              :contrib-bond-yield (- (get-in totals [(keyword p) :contrib-yield]) (reduce + (map :contrib-yield (filter #(and (= (:portfolio %) p) (not= (:asset-class %) \"BONDS\")) positions))))\r\n                              })))]\r\n    [box :class \"subbody rightelement\" :child\r\n     [v-box :class \"element\" :align-self :center :justify :center :gap \"20px\"\r\n      :children [[title :label (str \"Summary \" @(rf/subscribe [:qt-date])) :level :level1]\r\n    [:> ReactTable\r\n     {:data           display\r\n      :columns        [{:Header \"Portfolio\" :accessor \"portfolio\" :width 120}\r\n                       {:Header \"Balance\" :columns (mapv tables/table-columns [:value :cash-pct])}\r\n                       {:Header \"Value\" :columns [(assoc (tables/table-columns :contrib-yield) :Header \"Yield\")\r\n                                                  (tables/table-columns :contrib-bond-yield)\r\n                                                  (assoc (tables/table-columns :contrib-mdur) :Header \"M Dur\")\r\n                                                  (tables/table-columns :rating)\r\n                                                  (assoc (tables/table-columns :rating-score) :width 60  )\r\n                                                  (assoc (tables/table-columns :contrib-zspread) :Header \"Z-spread\")\r\n                                                  (assoc (tables/table-columns :contrib-gspread) :Header \"G-spread\")]}\r\n                       ]\r\n      :showPagination false\r\n      :pageSize       (count portfolios)\r\n      :getTrProps     go-to-portfolio-risk\r\n      :className      \"-striped -highlight\"}]]]]))\r\n"]}