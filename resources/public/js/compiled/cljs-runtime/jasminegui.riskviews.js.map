{"version":3,"sources":["jasminegui/riskviews.cljs"],"mappings":"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","names":["re_frame.core.reg_event_fx.cljs$core$IFn$_invoke$arity$2","p__44408","p__44409","map__44410","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","vec__44411","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","db","_","name","bond-sedol","portfolios","start-date","end-date","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","jasminegui.static/server-address","p__44419","p__44420","map__44421","vec__44422","re_frame.core.reg_event_db.cljs$core$IFn$_invoke$arity$2","p__44428","vec__44429","data","p__44434","vec__44435","jasminegui.riskviews/first-level-sort","x","G__44440","jasminegui.riskviews/add-total-line-to-pivot","pivoted-table","kportfolios","total-line","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","cljs.core.into.cljs$core$IFn$_invoke$arity$2","iter__4529__auto__","s__44445","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","cljs.core/count","b__44447","cljs.core/chunk-buffer","i__44446","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__44444","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","p","cljs.core.reduce.cljs$core$IFn$_invoke$arity$2","cljs.core/+","cljs.core.map.cljs$core$IFn$_invoke$arity$2","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","jasminegui.riskviews/add-total-line-to-attribution-pivot","template","s__44459","b__44461","i__44460","vec__44463","iter__44458","vec__44466","k","v","s__44471","b__44473","i__44472","iter__44470","G__44492","G__44493","re-frame.core/reg-sub","positions","portfolio","portfolio-total-line","G__44495","fexpr__44494","cljs.core.keyword.cljs$core$IFn$_invoke$arity$1","is-tree","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","portfolio-positions","p1__44488#","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","viewable-positions","p1__44489#","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","risk-choices","cljs.core/deref","rfil","G__44496","re-frame.core/subscribe","p1__44491#","cljs.core.mapv.cljs$core$IFn$_invoke$arity$2","cljs.core.range.cljs$core$IFn$_invoke$arity$2","grouping-columns","s__44502","b__44504","i__44503","iter__44501","r","cljs.core.remove.cljs$core$IFn$_invoke$arity$2","cljs.core/nil?","jasminegui.tables/risk-table-columns","accessors-k","cljs.core/keyword","cljs.core.sort_by.cljs$core$IFn$_invoke$arity$2","cljs.core/juxt","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","cljs.core.comp.cljs$core$IFn$_invoke$arity$2","G__44511","G__44512","s__44515","b__44517","i__44516","vec__44521","iter__44514","vec__44525","p1__44510#","s__44534","b__44536","i__44535","iter__44533","jasminegui.tables/attribution-table-columns","G__44540","G__44541","pivoted-positions","kselected-portfolios","hide-zero-risk","display-key-one","G__44544","p1__44538#","s__44547","b__44549","i__44548","iter__44546","pivoted-data","p1__44539#","fexpr__44557","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","thfil","line","cljs.core/every?","cljs.core/zero?","pivoted-data-hide-zero","G__44563","G__44564","attribution-choices","G__44569","p1__44561#","s__44571","b__44573","i__44572","iter__44570","p1__44562#","fexpr__44578","G__44583","G__44584","group","p1__44579#","jasminegui.static/portfolio-alignment-groups","base-kportfolio","G__44585","p1__44580#","s__44587","b__44589","i__44588","iter__44586","p1__44581#","fexpr__44599","differentiate","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","temp-line","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","pivoted-data-diff","threshold","cljs.reader.read_string.cljs$core$IFn$_invoke$arity$1","p1__44582#","jasminegui.static/threshold-choices-alignment","cljs.core/some","pivoted-data-diff-post-th","G__44606","G__44607","s__44609","b__44611","i__44610","iter__44608","s__44621","b__44623","i__44622","iter__44620","s__44636","b__44638","i__44637","iter__44635","p1__44605#","jasminegui.riskviews/dropdown-width","jasminegui.riskviews/single-bond-trade-history","state","rowInfo","instance","cljs.core/clj->js","G__44648","re-frame.core/dispatch","G__44649","G__44660","jasminegui.riskviews/single-portfolio-risk-display","p1__44676#","G__44677","G__44681","G__44682","p1__44667#","G__44684","p1__44668#","s__44691","b__44693","i__44692","iter__44690","additional-des-cols","cljs.core/set","jasminegui.static/risk-choice-map","accessors","display","G__44696","js/module$node_modules$react_table$lib$index.default","jasminegui.tables/case-insensitive-filter","cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic","cljs.core.distinct.cljs$core$IFn$_invoke$arity$1","G__44699","G__44697","jasminegui.riskviews/single-bond-trade-flat-history","G__44701","G__44702","G__44703","jasminegui.riskviews/multiple-portfolio-risk-display","p1__44705#","G__44706","width-one","G__44707","G__44708","p1__44704#","s__44710","b__44712","i__44711","iter__44709","display-one","G__44714","cols","s__44716","b__44718","i__44717","iter__44715","G__44721","G__44719","G__44720","jasminegui.tables/sum-rows","cljs.core/name","G__44723","G__44722","jasminegui.riskviews/portfolio-alignment-risk-display","p1__44727#","p1__44724#","G__44731","base-portfolio","display-key","G__44732","cell-one","G__44733","G__44734","p1__44726#","s__44736","b__44738","i__44737","iter__44735","G__44739","s__44742","b__44744","i__44743","iter__44741","G__44746","G__44747","G__44740","jasminegui.riskviews/shortcut-row","key","shortcut","G__44749","re-com.core/title","s__44751","b__44753","i__44752","iter__44750","i","re-com.core/md-circle-icon-button","G__44754","G__44755","jasminegui.riskviews/filtering-row","risk-filter","G__44757","s__44759","b__44761","i__44760","p1__44756#","iter__44758","re-com.core/single-dropdown","reagent.core/cursor","G__44763","G__44764","jasminegui.riskviews/single-portfolio-risk-controller","p1__44765#","p1__44766#","portfolio-map","s__44769","b__44771","i__44770","iter__44768","G__44772","display-style","G__44773","G__44774","G__44775","re-com.core/box","re-com.core/v-box","G__44777","re-com.core/h-box","jasminegui.static/tree-table-choices","G__44778","re-com.core/checkbox","G__44779","p1__44767#","G__44781","re-com.core/gap","jasminegui.tools/csv-link","G__44782","jasminegui.riskviews/multiple-portfolio-risk-controller","p1__44783#","p1__44784#","p1__44785#","p1__44786#","s__44788","b__44790","i__44789","iter__44787","G__44791","G__44792","G__44793","selected-portfolios","G__44794","number-of-fields","G__44795","field-one","G__44796","field-two","G__44797","G__44798","G__44800","G__44801","G__44802","jasminegui.static/risk-field-choices","G__44803","re-com.core/button","G__44804","G__44805","G__44806","G__44807","G__44808","G__44809","re-com.core/selection-list","G__44811","G__44812","jasminegui.riskviews/portfolio-alignment-risk-controller","p1__44813#","p1__44814#","p1__44815#","p1__44816#","G__44817","portfolio-alignment-group","G__44818","field","G__44819","G__44820","G__44822","G__44823","G__44824","G__44826","G__44828","G__44829","jasminegui.riskviews/go-to-portfolio-risk","G__44830","re-frame.core/dispatch-sync","G__44831","jasminegui.riskviews/summary-display","G__44834","G__44835","G__44836","G__44837","G__44838","G__44840","G__44841","G__44842","G__44843","G__44844","G__44845","cljs.core/chunk-first"],"sourcesContent":["(ns jasminegui.riskviews\r\n  (:require\r\n    ; [oz.core :as oz]\r\n    [re-frame.core :as rf]\r\n    [reagent.core :as r]\r\n    [goog.string :as gstring]\r\n    [goog.string.format]\r\n    [re-com.core :refer [p p-span h-box v-box box gap line scroller border label title button close-button checkbox hyperlink-href slider horizontal-bar-tabs radio-button info-button\r\n                         single-dropdown hyperlink modal-panel alert-box throbber input-password selection-list md-circle-icon-button\r\n                         input-text input-textarea popover-anchor-wrapper popover-content-wrapper popover-tooltip datepicker-dropdown] :refer-macros [handler-fn]]\r\n    [re-com.box :refer [h-box-args-desc v-box-args-desc box-args-desc gap-args-desc line-args-desc scroller-args-desc border-args-desc flex-child-style]]\r\n    [re-com.util :refer [px]]\r\n    [\"react-table\" :as rt :default ReactTable]\r\n    [jasminegui.mount :as mount]\r\n    [jasminegui.static :as static]\r\n    [jasminegui.tools :as tools]\r\n    [jasminegui.tables :as tables]\r\n    [re-com.validate :refer [string-or-hiccup? alert-type? vector-of-maps?]])\r\n  (:import (goog.i18n NumberFormat)\r\n           (goog.i18n.NumberFormat Format))\r\n  )\r\n\r\n;;;;;;;;;;;;\r\n;; EVENTS ;;\r\n;;;;;;;;;;;;\r\n\r\n(rf/reg-event-fx\r\n  :get-single-bond-history\r\n  (fn [{:keys [db]} [_ name bond-sedol portfolios start-date end-date]]\r\n    {:db (assoc db :single-bond-trade-history/bond name :single-bond-trade-history/show-modal true)\r\n     :http-get-dispatch {:url          (str static/server-address \"single-bond-history?id=\" bond-sedol \"&portfolios=\" portfolios \"&start-date=\" start-date \"&end-date=\" end-date)\r\n                         :dispatch-key [:single-bond-trade-history/data]\r\n                         :kwk          true}}))\r\n\r\n(rf/reg-event-fx\r\n  :get-single-bond-flat-history\r\n  (fn [{:keys [db]} [_ name bond-sedol portfolios start-date end-date]]\r\n    {:db (assoc db :single-bond-trade-history/bond name :single-bond-trade-history/show-flat-modal true)\r\n     :http-get-dispatch {:url          (str static/server-address \"flat-bond-history?id=\" bond-sedol \"&portfolios=\" portfolios \"&start-date=\" start-date \"&end-date=\" end-date)\r\n                         :dispatch-key [:single-bond-trade-history/flat-data]\r\n                         :kwk          true}}))\r\n\r\n(rf/reg-event-db\r\n  :single-bond-trade-history/data\r\n  (fn [db [_ data]]\r\n    (assoc db :single-bond-trade-history/data data\r\n              :single-bond-trade-history/show-throbber false)))\r\n\r\n(rf/reg-event-db\r\n  :single-bond-trade-history/flat-data\r\n  (fn [db [_ data]]\r\n    (assoc db :single-bond-trade-history/flat-data data\r\n              :single-bond-trade-history/show-throbber false)))\r\n\r\n\r\n;;;;;;;;;;;;;;;;;;;;\r\n;; SUCBSCRIPTIONS ;;\r\n;;;;;;;;;;;;;;;;;;;;\r\n\r\n(defn first-level-sort [x]\r\n  (case x\r\n    \"Cash\"        \"AAA\"\r\n    \"Collateral\"  \"ZZZ\"\r\n    \"Forwards\"    \"ZZZ\"\r\n    \"Equities\"    \"ZZZ\"\r\n    x))\r\n\r\n(defn add-total-line-to-pivot [pivoted-table kportfolios]\r\n  (let [total-line (merge\r\n                     {:jpm-region           \"Total\"\r\n                      :qt-jpm-sector        \"Total\"\r\n                      :qt-risk-country-name \"Total\"\r\n                      :TICKER               \"Total\"\r\n                      :NAME                 \"Total\"\r\n                      :description          \"Total\"\r\n                      :isin                 \"Total\"\r\n                      :qt-iam-int-lt-median-rating-score \"Total\"\r\n                      :qt-final-maturity-band \"Total\"}\r\n                     (into {} (for [p kportfolios] [p (reduce + (map p pivoted-table))])))]\r\n    (conj pivoted-table total-line)))\r\n\r\n(defn add-total-line-to-attribution-pivot [pivoted-table kportfolios]\r\n  (let [template (into {} (for [[k v] (first pivoted-table)] [k \"Total\"]))\r\n        total-line (merge\r\n                     template\r\n                     (into {} (for [p kportfolios] [p (reduce + (map p pivoted-table))])))]\r\n    (conj pivoted-table total-line)))\r\n\r\n\r\n(rf/reg-sub\r\n  :single-portfolio-risk/table\r\n  (fn [db]\r\n    (let [positions (:positions db)\r\n          portfolio (:single-portfolio-risk/portfolio db)\r\n          portfolio-total-line (assoc ((:total-positions db) (keyword portfolio)) :qt-iam-int-lt-median-rating \"Total\" :qt-iam-int-lt-median-rating-score \"00 Total\")\r\n          is-tree (= (:single-portfolio-risk/display-style db) \"Tree\")\r\n          portfolio-positions (filter #(= (:portfolio %) portfolio) positions)\r\n          viewable-positions (if (and (not is-tree) (:single-portfolio-risk/hide-zero-holdings db)) (filter #(not= (:weight %) 0) portfolio-positions) portfolio-positions)\r\n          risk-choices (let [rfil @(rf/subscribe [:single-portfolio-risk/filter])] (mapv #(if (not= \"None\" (rfil %)) (rfil %)) (range 1 4)))\r\n          grouping-columns (into [] (for [r (remove nil? (conj risk-choices :name))] (tables/risk-table-columns r)))\r\n          accessors-k (mapv keyword (mapv :accessor grouping-columns))]\r\n      (conj (sort-by (apply juxt (concat [(comp first-level-sort (first accessors-k))] (rest accessors-k))) viewable-positions) portfolio-total-line))))\r\n\r\n(rf/reg-sub\r\n  :single-portfolio-attribution/clean-table\r\n  (fn [db]\r\n    (let [data (:single-portfolio-attribution/table db)\r\n          template (into {} (for [[k v] (first data)] [k \"Total\"]))\r\n          portfolio-total-line (assoc template\r\n                                 :Total-Effect (reduce + (map :Total-Effect data))\r\n                                 :Average-Excess-Weight (reduce + (map :Average-Excess-Weight data))\r\n                                 :Average-Fund-Weight (reduce + (map :Average-Fund-Weight data))\r\n                                 :Average-Index-Weight (reduce + (map :Average-Index-Weight data))\r\n                                 :Fund-Contribution (reduce + (map :Fund-Contribution data))\r\n                                 :Index-Contribution (reduce + (map :Index-Contribution data)))\r\n          risk-choices (let [rfil (:single-portfolio-attribution/filter db)] (mapv #(if (not= \"None\" (rfil %)) (rfil %)) (range 1 4)))\r\n          grouping-columns (into [] (for [r (remove nil? (conj risk-choices :security))] (tables/attribution-table-columns r)))\r\n          accessors-k (mapv keyword (mapv :accessor grouping-columns))]\r\n      (conj (sort-by (apply juxt (concat [(comp first-level-sort (first accessors-k))] (rest accessors-k))) data) portfolio-total-line))))\r\n\r\n\r\n(rf/reg-sub\r\n  :multiple-portfolio-risk/table\r\n  (fn [db]\r\n    (let [pivoted-positions (:pivoted-positions db)\r\n          kselected-portfolios (mapv keyword (:multiple-portfolio-risk/selected-portfolios db))\r\n          hide-zero-risk (:multiple-portfolio-risk/hide-zero-holdings db)\r\n          display-key-one (:multiple-portfolio-risk/field-one db)\r\n          is-tree (= (:multiple-portfolio-risk/display-style db) \"Tree\")\r\n          risk-choices (let [rfil @(rf/subscribe [:multiple-portfolio-risk/filter])] (mapv #(if (not= \"None\" (rfil %)) (rfil %)) (range 1 4)))\r\n          grouping-columns (into [] (for [r (remove nil? (conj risk-choices :name))] (tables/risk-table-columns r)))\r\n          accessors-k (mapv keyword (mapv :accessor grouping-columns))\r\n          pivoted-data (map #(merge % ((keyword (get-in tables/risk-table-columns [display-key-one :accessor])) %)) pivoted-positions)\r\n          thfil (fn [line] (not (every? zero? (map line kselected-portfolios))))\r\n          pivoted-data-hide-zero (if (and (not is-tree) hide-zero-risk) (filter thfil pivoted-data) pivoted-data)]\r\n      (add-total-line-to-pivot (sort-by (apply juxt (concat [(comp first-level-sort (first accessors-k))] (rest accessors-k))) pivoted-data-hide-zero) (map keyword (:portfolios db))))))\r\n\r\n(rf/reg-sub\r\n  :multiple-portfolio-attribution/clean-table\r\n  (fn [db]\r\n    (let [pivoted-positions (:multiple-portfolio-attribution/table db)\r\n          display-key-one (:multiple-portfolio-attribution/field-one db)\r\n          attribution-choices (let [rfil @(rf/subscribe [:multiple-portfolio-attribution/filter])] (mapv #(if (not= \"None\" (rfil %)) (rfil %)) (range 1 4)))\r\n          grouping-columns (into [] (for [r (remove nil? (conj attribution-choices :security))] (tables/attribution-table-columns r)))\r\n          accessors-k (mapv keyword (mapv :accessor grouping-columns))\r\n          pivoted-data (map #(merge % ((keyword (get-in tables/attribution-table-columns [display-key-one :accessor])) %)) pivoted-positions)]\r\n      (add-total-line-to-attribution-pivot (sort-by (apply juxt (concat [(comp first-level-sort (first accessors-k))] (rest accessors-k))) pivoted-data) (map keyword (:portfolios db))))))\r\n\r\n(rf/reg-sub\r\n  :portfolio-alignment/table\r\n  (fn [db]\r\n    (let [group (map keyword (:portfolios (first (filter #(= (:id %) (:portfolio-alignment/group db)) static/portfolio-alignment-groups))))\r\n          pivoted-positions (:pivoted-positions db)\r\n          base-kportfolio (first group)\r\n          kportfolios (rest group)\r\n          risk-choices (let [rfil @(rf/subscribe [:portfolio-alignment/filter])] (mapv #(if (not= \"None\" (rfil %)) (rfil %)) (range 1 4)))\r\n          grouping-columns (into [] (for [r (remove nil? (conj risk-choices :name))] (tables/risk-table-columns r)))\r\n          accessors-k (mapv keyword (mapv :accessor grouping-columns))\r\n          pivoted-data (map #(merge % ((keyword (get-in tables/risk-table-columns [(:portfolio-alignment/field db) :accessor])) %)) pivoted-positions)\r\n          differentiate (fn [line] (reduce\r\n                                     (fn [temp-line p] (assoc temp-line p (- (p temp-line) (base-kportfolio temp-line))))\r\n                                     line\r\n                                     kportfolios))\r\n          pivoted-data-diff (map differentiate pivoted-data)\r\n          threshold (* 0.01 (cljs.reader/read-string (:label (first (filter #(= (:id %) (:portfolio-alignment/threshold db)) static/threshold-choices-alignment)))))\r\n          thfil (fn [line] (some (fn [x] (or (< x (- threshold)) (> x threshold))) (map line kportfolios)))\r\n          pivoted-data-diff-post-th (filter thfil pivoted-data-diff)]\r\n      (add-total-line-to-pivot (sort-by (apply juxt (concat [(comp first-level-sort (first accessors-k))] (rest accessors-k))) pivoted-data-diff-post-th) kportfolios))))\r\n\r\n(rf/reg-sub\r\n  :summary-display/table\r\n  (fn [db]\r\n    (into [] (for [p (:portfolios db)]\r\n               (merge\r\n                 {:portfolio       p}\r\n                 (into {} (for [k [:cash-pct :base-value :contrib-yield :contrib-zspread :contrib-gspread :contrib-mdur :qt-iam-int-lt-median-rating :qt-iam-int-lt-median-rating-score :contrib-beta-1y-daily]] [k (get-in (:total-positions db) [(keyword p) k])]))\r\n                 {:contrib-bond-yield (- (get-in (:total-positions db) [(keyword p) :contrib-yield]) (reduce + (map :contrib-yield (filter #(and (= (:portfolio %) p) (not= (:asset-class %) \"BONDS\")) (:positions db)))))})))))\r\n\r\n;;;;;;;;;\r\n;; GUI ;;\r\n;;;;;;;;;\r\n\r\n(def dropdown-width \"150px\")\r\n\r\n(defn single-bond-trade-history [state rowInfo instance]\r\n  (clj->js {:onClick #(rf/dispatch [:get-single-bond-history\r\n                                    (aget rowInfo \"row\" \"_original\" \"NAME\")\r\n                                    (aget rowInfo \"row\" \"_original\" \"id\")\r\n                                    [@(rf/subscribe [:single-portfolio-risk/portfolio])]\r\n                                    \"01Jan2019\"\r\n                                    @(rf/subscribe [:qt-date])])\r\n            :style {:cursor \"pointer\"}}))\r\n\r\n(defn single-portfolio-risk-display []\r\n  (let [positions @(rf/subscribe [:positions])\r\n        portfolio @(rf/subscribe [:single-portfolio-risk/portfolio])\r\n        is-tree (= @(rf/subscribe [:single-portfolio-risk/display-style]) \"Tree\")\r\n        portfolio-positions (filter #(= (:portfolio %) portfolio) positions)\r\n        risk-choices (let [rfil @(rf/subscribe [:single-portfolio-risk/filter])] (mapv #(if (not= \"None\" (rfil %)) (rfil %)) (range 1 4)))\r\n        grouping-columns (into [] (for [r (remove nil? (conj risk-choices :name))] (tables/risk-table-columns r)))\r\n        additional-des-cols (remove (set (conj risk-choices \"None\")) (map :id static/risk-choice-map))\r\n        accessors (mapv :accessor grouping-columns)\r\n        display @(rf/subscribe [:single-portfolio-risk/table])]\r\n    [:> ReactTable\r\n     {:data                display\r\n      :defaultFilterMethod tables/case-insensitive-filter\r\n      :columns             [{:Header \"Groups\" :columns grouping-columns}\r\n                            {:Header \"NAV\" :columns (mapv tables/risk-table-columns [:nav :bm-weight :weight-delta])}\r\n                            {:Header \"Duration\" :columns (mapv tables/risk-table-columns [:contrib-mdur :bm-contrib-eir-duration :mdur-delta])}\r\n                            {:Header \"Yield\" :columns (mapv tables/risk-table-columns [:contrib-yield :bm-contrib-yield])}\r\n                            {:Header \"Z-spread\" :columns (mapv tables/risk-table-columns [:contrib-zspread])}\r\n                            {:Header \"Beta\"  :columns (mapv tables/risk-table-columns [:contrib-beta])}\r\n                            {:Header \"Position\" :columns (mapv tables/risk-table-columns [:value :nominal])}\r\n                            ;{:Header \"Index contribution\" :columns (mapv tables/table-columns [:bm-contrib-yield :bm-contrib-eir-duration])}\r\n                            {:Header (if is-tree \"Bond analytics (median)\" \"Bond analytics\") :columns (mapv tables/risk-table-columns [:yield :z-spread :g-spread :duration :total-return-ytd :cembi-beta-last-year :cembi-beta-previous-year :jensen-ytd])}\r\n                            {:Header \"Description\" :columns (mapv tables/risk-table-columns (into [] (concat [:rating :isin] additional-des-cols [:description])))}]\r\n      :showPagination      (not is-tree)\r\n      :sortable            (not is-tree)\r\n      :filterable          (not is-tree)\r\n      :pageSize            (if is-tree (inc (count (distinct (map (keyword (first accessors)) portfolio-positions)))) 25) ;(inc (count display))\r\n      :className           \"-striped -highlight\"\r\n      :pivotBy             (if is-tree accessors [])\r\n      :getTrProps          single-bond-trade-history\r\n      :defaultFiltered     (if is-tree [] @(rf/subscribe [:single-portfolio-risk/table-filter])) ; [{:id \"analyst\" :value \"Tammy\"}]\r\n      :onFilteredChange    #(rf/dispatch [:single-portfolio-risk/table-filter %])}]))\r\n\r\n(defn single-bond-trade-flat-history [state rowInfo instance]\r\n  (clj->js {:onClick #(rf/dispatch [:get-single-bond-flat-history\r\n                                   (aget rowInfo \"row\" \"_original\" \"NAME\")\r\n                                   (aget rowInfo \"row\" \"_original\" \"id\")\r\n                                   @(rf/subscribe [:portfolios])\r\n                                   \"01Jan2019\"\r\n                                   @(rf/subscribe [:qt-date])])\r\n            :style {:cursor \"pointer\"}}))\r\n\r\n(defn multiple-portfolio-risk-display []\r\n  (let [display-key-one @(rf/subscribe [:multiple-portfolio-risk/field-one])\r\n        width-one 100                                      ;(get-in tables/table-columns [display-key-one :width])\r\n        is-tree (= @(rf/subscribe [:multiple-portfolio-risk/display-style]) \"Tree\")\r\n        risk-choices (let [rfil @(rf/subscribe [:multiple-portfolio-risk/filter])] (mapv #(if (not= \"None\" (rfil %)) (rfil %)) (range 1 4)))\r\n        grouping-columns (into [] (for [r (remove nil? (conj risk-choices :name))] (tables/risk-table-columns r)))\r\n        accessors (mapv :accessor grouping-columns)\r\n        display-one @(rf/subscribe [:multiple-portfolio-risk/table])\r\n        cols (into [] (for [p @(rf/subscribe [:portfolios]) :when (some #{p} @(rf/subscribe [:multiple-portfolio-risk/selected-portfolios]))]\r\n                        {:Header p\r\n                         :accessor p\r\n                         :width width-one\r\n                         :style {:textAlign \"right\"}\r\n                         :aggregate tables/sum-rows\r\n                         :Cell (get-in tables/risk-table-columns [display-key-one :Cell])\r\n                         :filterable false}))]\r\n    [:> ReactTable\r\n     {:data                display-one\r\n      :defaultFilterMethod tables/case-insensitive-filter\r\n      :columns             [{:Header \"Groups\" :columns grouping-columns}\r\n                            {:Header  (str \"Portfolio \" (name display-key-one)) :columns cols}\r\n                            {:Header  \"Description\" :columns (mapv tables/risk-table-columns [:rating :isin :description])}]\r\n      :showPagination      (not is-tree)\r\n      :sortable            (not is-tree)\r\n      :filterable          (not is-tree)\r\n      :pageSize            (if is-tree (inc (count (distinct (map (keyword (first accessors)) display-one)))) 25)\r\n      :className           \"-striped -highlight\"\r\n      :pivotBy             (if is-tree accessors [])\r\n      :getTrProps          single-bond-trade-flat-history\r\n      :defaultFiltered     (if is-tree [] @(rf/subscribe [:multiple-portfolio-risk/table-filter])) ; [{:id \"analyst\" :value \"Tammy\"}]\r\n      :onFilteredChange    #(rf/dispatch [:multiple-portfolio-risk/table-filter %])}]))\r\n\r\n(defn portfolio-alignment-risk-display []\r\n  (let [\r\n        group (:portfolios (first (filter #(= (:id %) @(rf/subscribe [:portfolio-alignment/group])) static/portfolio-alignment-groups)))\r\n        base-portfolio (first group)\r\n        portfolios (rest group)\r\n        display-key @(rf/subscribe [:portfolio-alignment/field])\r\n        cell-one (get-in tables/risk-table-columns [display-key :Cell])\r\n        width-one 100\r\n        is-tree (= @(rf/subscribe [:portfolio-alignment/display-style]) \"Tree\")\r\n        risk-choices (let [rfil @(rf/subscribe [:portfolio-alignment/filter])] (mapv #(if (not= \"None\" (rfil %)) (rfil %)) (range 1 4)))\r\n        grouping-columns (into [] (for [r (remove nil? (conj risk-choices :name))] (tables/risk-table-columns r)))\r\n        accessors (mapv :accessor grouping-columns)\r\n        display @(rf/subscribe [:portfolio-alignment/table])]\r\n    [:> ReactTable\r\n     {:data                display\r\n      :defaultFilterMethod tables/case-insensitive-filter\r\n      :columns\r\n                           [{:Header \"Groups\" :columns grouping-columns}\r\n                            {:Header  (str \"Portfolio \" (name display-key) \" vs \" base-portfolio)\r\n                             :columns (into [] (for [p portfolios] {:Header p :accessor p :width width-one :style {:textAlign \"right\"} :aggregate tables/sum-rows :Cell cell-one :filterable false}))}\r\n                            {:Header  \"Description\"\r\n                             :columns [{:Header \"thinkFolio ID\" :accessor \"description\" :width 500} (tables/risk-table-columns :rating)]}]\r\n      :showPagination      (not is-tree)\r\n      :sortable            (not is-tree)\r\n      :filterable          (not is-tree)\r\n      :pageSize            (if is-tree (inc (count (distinct (map (keyword (first accessors)) display)))) 25)\r\n      :className           \"-striped -highlight\"\r\n      :pivotBy             (if is-tree accessors [])\r\n      :defaultFiltered     (if is-tree [] @(rf/subscribe [:portfolio-alignment/table-filter])) ; [{:id \"analyst\" :value \"Tammy\"}]\r\n      :onFilteredChange    #(rf/dispatch [:portfolio-alignment/table-filter %])}]))\r\n\r\n(defn shortcut-row [key]\r\n  (let [shortcut (rf/subscribe [key])]\r\n    (into [] (concat [[title :label \"Shortcuts:\" :level :level3]]\r\n               (into [] (for [i (range 1 5)]\r\n                          [md-circle-icon-button\r\n                           :md-icon-name (str \"zmdi-collection-item-\" i)\r\n                           :class (if (= @shortcut i) \"active\" \"default\")\r\n                           :on-click #(rf/dispatch [key i])]))))))\r\n\r\n(defn filtering-row [key]\r\n  (let [risk-filter (rf/subscribe [key])]\r\n    (into [] (for [i (range 1 4)]\r\n               [single-dropdown\r\n                :width dropdown-width\r\n                :model (r/cursor risk-filter [i])\r\n                :choices static/risk-choice-map\r\n                :on-change #(rf/dispatch [key i %])]))))\r\n\r\n(defn single-portfolio-risk-controller []\r\n  (let [portfolio-map (into [] (for [p @(rf/subscribe [:portfolios])] {:id p :label p}))\r\n        display-style (rf/subscribe [:single-portfolio-risk/display-style])\r\n        portfolio (rf/subscribe [:single-portfolio-risk/portfolio])\r\n        hide-zero-risk (rf/subscribe [:single-portfolio-risk/hide-zero-holdings])]\r\n    [box :class \"subbody rightelement\" :child\r\n     [v-box :class \"element\" :align-self :center :justify :center :gap \"20px\"\r\n      :children [[title :label (str \"Portfolio drill-down \" @(rf/subscribe [:qt-date])) :level :level1]\r\n                 [h-box :gap \"50px\"\r\n                  :children [\r\n                             [v-box :gap \"15px\"\r\n                              :children [\r\n                                         [h-box\r\n                                          :gap \"10px\"\r\n                                          :children [\r\n                                                     [title :label \"Display type:\" :level :level3]\r\n                                                     [single-dropdown :width dropdown-width :model display-style :choices static/tree-table-choices :on-change #(rf/dispatch [:single-portfolio-risk/display-style %])]]]\r\n                                         [checkbox :model hide-zero-risk :label \"Hide zero positions in table view\" :disabled? (= @display-style \"Tree\") :on-change #(rf/dispatch [:single-portfolio-risk/hide-zero-holdings %])]]]\r\n                             [v-box :gap \"10px\" :children [\r\n                                                           [h-box :gap \"10px\" :children\r\n                                                            (into [] (concat [[title :label \"Filtering:\" :level :level3]\r\n                                                                              [single-dropdown :width dropdown-width :model portfolio :choices portfolio-map :on-change #(rf/dispatch [:single-portfolio-risk/portfolio %])]]\r\n                                                                             (filtering-row :single-portfolio-risk/filter)))]\r\n                                                           [h-box :gap \"20px\" :children (into [] (concat\r\n                                                                                                   (shortcut-row :single-portfolio-risk/shortcut)\r\n                                                                                                   [[gap :size \"50px\"]\r\n                                                                                                    [title :label \"Download:\" :level :level3]\r\n                                                                                                     [md-circle-icon-button :md-icon-name \"zmdi-download\" :on-click #(tools/csv-link @(rf/subscribe [:single-portfolio-risk/table]) @portfolio)]]))]]]]]\r\n                 [single-portfolio-risk-display]]]]))\r\n\r\n(defn multiple-portfolio-risk-controller []\r\n  (let [portfolio-map (into [] (for [p  @(rf/subscribe [:portfolios])] {:id p :label p}))\r\n        display-style (rf/subscribe [:multiple-portfolio-risk/display-style])\r\n        portfolios @(rf/subscribe [:portfolios])\r\n        selected-portfolios (rf/subscribe [:multiple-portfolio-risk/selected-portfolios])\r\n        number-of-fields (rf/subscribe [:multiple-portfolio-risk/field-number])\r\n        field-one (rf/subscribe [:multiple-portfolio-risk/field-one])\r\n        field-two (rf/subscribe [:multiple-portfolio-risk/field-two])\r\n        hide-zero-risk (rf/subscribe [:multiple-portfolio-risk/hide-zero-holdings])\r\n        ]\r\n    [box :class \"subbody rightelement\" :child\r\n     [v-box :class \"element\" :align-self :center :justify :center :gap \"20px\"\r\n      :children [[title :label (str \"Portfolio drill-down \" @(rf/subscribe [:qt-date])) :level :level1]\r\n                 [h-box :gap \"50px\"\r\n                  :children\r\n                             [\r\n                              [v-box :gap \"20px\"\r\n                               :children [\r\n                                          [h-box :gap \"10px\" :children [[title :label \"Display type:\" :level :level3] [gap :size \"1\"] [single-dropdown :width dropdown-width :model display-style :choices static/tree-table-choices :on-change #(rf/dispatch [:multiple-portfolio-risk/display-style %])]]]\r\n                                          [checkbox :model hide-zero-risk :label \"Hide zero positions in table view\" :disabled? (= @display-style \"Tree\") :on-change #(rf/dispatch [:multiple-portfolio-risk/hide-zero-holdings %])]\r\n                                          [h-box :gap \"10px\" :children [[title :label \"Field:\" :level :level3] [gap :size \"1\"] [single-dropdown :width dropdown-width :model field-one :choices static/risk-field-choices :on-change #(rf/dispatch [:multiple-portfolio-risk/field-one %])]]]]]\r\n                              [v-box :gap \"10px\"\r\n                               :children [[title :label \"Portfolios:\" :level :level3]\r\n                                          [button :style {:width \"100%\"} :label \"All\"      :on-click #(rf/dispatch [:multiple-portfolio-risk/selected-portfolios (set portfolios)])]\r\n                                          [button :style {:width \"100%\"} :label \"None\"     :on-click #(rf/dispatch [:multiple-portfolio-risk/selected-portfolios #{}])]\r\n                                          [button :style {:width \"100%\"} :label \"CEMBI\"    :on-click #(rf/dispatch [:multiple-portfolio-risk/selected-portfolios (set (:portfolios (first (filter (fn [x] (= (:id x) :cembi)) static/portfolio-alignment-groups))))])]\r\n                                          [button :style {:width \"100%\"} :label \"Allianz\"  :on-click #(rf/dispatch [:multiple-portfolio-risk/selected-portfolios (set (:portfolios (first (filter (fn [x] (= (:id x) :allianz)) static/portfolio-alignment-groups))))])]\r\n                                          [button :style {:width \"100%\"} :label \"IG\"       :on-click #(rf/dispatch [:multiple-portfolio-risk/selected-portfolios (set (:portfolios (first (filter (fn [x] (= (:id x) :ig)) static/portfolio-alignment-groups))))])]\r\n                                          [button :style {:width \"100%\"} :label \"Talanx\"   :on-click #(rf/dispatch [:multiple-portfolio-risk/selected-portfolios (set (:portfolios (first (filter (fn [x] (= (:id x) :talanx)) static/portfolio-alignment-groups))))])]]]\r\n                              [selection-list :width dropdown-width :model selected-portfolios :choices portfolio-map :on-change #(rf/dispatch [:multiple-portfolio-risk/selected-portfolios %])]\r\n                              [v-box :gap \"20px\"\r\n                               :children [[h-box :gap \"10px\" :children (into [] (concat [[title :label \"Filtering:\" :level :level3]] (filtering-row :multiple-portfolio-risk/filter)))]\r\n                                          [h-box :gap \"10px\" :children (shortcut-row :multiple-portfolio-risk/shortcut)]\r\n                                          [h-box :gap \"10px\" :children [ [title :label \"Download:\" :level :level3]\r\n                                                                        [md-circle-icon-button :md-icon-name \"zmdi-download\" :on-click #(tools/csv-link @(rf/subscribe [:multiple-portfolio-risk/table]) \"pivot\")]]]]]]]\r\n                 [multiple-portfolio-risk-display]]]]))\r\n\r\n(defn portfolio-alignment-risk-controller []\r\n  (let [display-style (rf/subscribe [:portfolio-alignment/display-style])\r\n        ;risk-filter (rf/subscribe [:portfolio-alignment/filter])\r\n        portfolio-alignment-group (rf/subscribe [:portfolio-alignment/group])\r\n        field (rf/subscribe [:portfolio-alignment/field])\r\n        threshold (rf/subscribe [:portfolio-alignment/threshold])]\r\n    [box :class \"subbody rightelement\" :child\r\n     [v-box :class \"element\" :align-self :center :justify :center :gap \"20px\"\r\n      :children [[title :label (str \"Portfolio alignment \" @(rf/subscribe [:qt-date])) :level :level1]\r\n                 [h-box :gap \"50px\"\r\n                  :children\r\n                  [[v-box :gap \"20px\"\r\n                    :children [[h-box :gap \"10px\" :children [[title :label \"Display type:\" :level :level3] [gap :size \"1\"] [single-dropdown :width dropdown-width :model display-style :choices static/tree-table-choices :on-change #(rf/dispatch [:portfolio-alignment/display-style %])]]]\r\n                               [h-box :gap \"10px\" :children [[title :label \"Field:\" :level :level3] [gap :size \"1\"] [single-dropdown :width dropdown-width :model field :choices static/risk-field-choices :on-change #(rf/dispatch [:portfolio-alignment/field %])]]]\r\n                               [h-box :gap \"10px\" :children [[title :label \"Threshold:\" :level :level3] [gap :size \"1\"] [single-dropdown :width dropdown-width :model threshold :choices static/threshold-choices-alignment :on-change #(rf/dispatch [:portfolio-alignment/threshold %])]]]]]\r\n                   [v-box :gap \"20px\"\r\n                     :children [[h-box :gap \"10px\" :children [[title :label \"Portfolios:\" :level :level3] [gap :size \"1\"]\r\n                                                              [single-dropdown :width dropdown-width :model portfolio-alignment-group :choices static/portfolio-alignment-groups :on-change #(rf/dispatch [:portfolio-alignment/group %])]]]]]\r\n\r\n                   [v-box :gap \"20px\"\r\n                    :children [[h-box :gap \"10px\" :children (into [] (concat [[title :label \"Filtering:\" :level :level3]] (filtering-row :portfolio-alignment/filter)))]\r\n                               [h-box :gap \"10px\" :children (shortcut-row :portfolio-alignment/shortcut)]\r\n                               [h-box :gap \"10px\" :children [ [title :label \"Download:\" :level :level3]\r\n                                                             [md-circle-icon-button :md-icon-name \"zmdi-download\" :on-click #(tools/csv-link @(rf/subscribe [:portfolio-alignment/table]) \"alignment\")]]]]]]]\r\n                 [portfolio-alignment-risk-display]]]]))\r\n\r\n\r\n(defn go-to-portfolio-risk [state rowInfo instance] (clj->js {:onClick #(do (rf/dispatch-sync [:navigation/active-home :single-portfolio]) (rf/dispatch [:single-portfolio-risk/portfolio (aget rowInfo \"row\" \"portfolio\")])) :style {:cursor \"pointer\"}}))\r\n\r\n(defn summary-display []\r\n   [box :class \"subbody rightelement\" :child\r\n     [v-box :class \"element\" :align-self :center :justify :center :gap \"20px\"\r\n      :children [[title :label (str \"Summary \" @(rf/subscribe [:qt-date])) :level :level1]\r\n    [:> ReactTable\r\n     {:data           @(rf/subscribe [:summary-display/table])\r\n      :columns        [{:Header \"Portfolio\" :accessor \"portfolio\" :width 120}\r\n                       {:Header \"Balance\" :columns (mapv tables/risk-table-columns [:value :cash-pct])}\r\n                       {:Header \"Value\" :columns [(assoc (tables/risk-table-columns :contrib-yield) :Header \"Yield\")\r\n                                                  (tables/risk-table-columns :contrib-bond-yield)\r\n                                                  (assoc (tables/risk-table-columns :contrib-mdur) :Header \"M Dur\")\r\n                                                  (tables/risk-table-columns :rating)\r\n                                                  (assoc (tables/risk-table-columns :rating-score) :width 60)\r\n                                                  (assoc (tables/risk-table-columns :contrib-zspread) :Header \"Z-spread\")\r\n                                                  (assoc (tables/risk-table-columns :contrib-gspread) :Header \"G-spread\")\r\n                                                  (assoc (tables/risk-table-columns :contrib-beta) :Header \"Beta\")\r\n                                                  ]}]\r\n      :showPagination false\r\n      :pageSize       (count @(rf/subscribe [:portfolios]))\r\n      :getTrProps     go-to-portfolio-risk\r\n      :className      \"-striped -highlight\"}]]]])\r\n"]}