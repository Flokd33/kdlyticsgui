{"version":3,"sources":["jasminegui/riskviews.cljs"],"mappings":"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","names":["re_frame.core.reg_event_fx.cljs$core$IFn$_invoke$arity$2","p__48601","p__48602","map__48603","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","vec__48604","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","db","_","name","bond-sedol","portfolios","start-date","end-date","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","jasminegui.static/server-address","p__48608","p__48609","map__48610","vec__48611","p__48615","p__48616","map__48617","vec__48618","portfolio","jasminegui.tools/gdate-to-yyyymmdd","re_frame.core.reg_event_db.cljs$core$IFn$_invoke$arity$2","p__48622","vec__48623","data","p__48630","vec__48631","p__48634","vec__48635","jasminegui.riskviews/first-level-sort","x","G__48639","jasminegui.riskviews/add-total-line-to-pivot","pivoted-table","kportfolios","total-line","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","cljs.core.into.cljs$core$IFn$_invoke$arity$2","iter__4529__auto__","s__48644","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","cljs.core/count","b__48646","cljs.core/chunk-buffer","i__48645","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__48643","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","p","cljs.core.reduce.cljs$core$IFn$_invoke$arity$2","cljs.core/+","cljs.core.map.cljs$core$IFn$_invoke$arity$2","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","jasminegui.riskviews/add-total-line-to-attribution-pivot","template","s__48672","b__48674","i__48673","vec__48680","iter__48671","vec__48683","k","v","s__48696","b__48698","i__48697","iter__48695","G__48712","G__48713","re-frame.core/reg-sub","positions","portfolio-total-line","G__48715","fexpr__48714","cljs.core.keyword.cljs$core$IFn$_invoke$arity$1","is-tree","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","portfolio-positions","p1__48709#","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","viewable-positions","p1__48710#","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","risk-choices","cljs.core/deref","rfil","G__48723","re-frame.core/subscribe","p1__48711#","cljs.core.mapv.cljs$core$IFn$_invoke$arity$2","cljs.core.range.cljs$core$IFn$_invoke$arity$2","grouping-columns","s__48726","b__48728","i__48727","iter__48725","r","cljs.core.remove.cljs$core$IFn$_invoke$arity$2","cljs.core/nil?","jasminegui.tables/risk-table-columns","accessors-k","cljs.core/keyword","cljs.core.sort_by.cljs$core$IFn$_invoke$arity$2","cljs.core/juxt","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","cljs.core.comp.cljs$core$IFn$_invoke$arity$2","G__48743","G__48744","s__48746","b__48748","i__48747","vec__48753","iter__48745","vec__48760","p1__48742#","s__48765","b__48767","i__48766","iter__48764","jasminegui.tables/attribution-table-columns","G__48783","G__48784","pivoted-positions","kselected-portfolios","hide-zero-risk","display-key-one","G__48786","p1__48780#","s__48790","b__48792","i__48791","iter__48789","pivoted-data","p1__48781#","fexpr__48797","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","thfil","line","cljs.core/every?","cljs.core/zero?","pivoted-data-hide-zero","G__48801","G__48802","attribution-choices","G__48804","p1__48799#","s__48807","b__48809","i__48808","iter__48806","p1__48800#","fexpr__48820","G__48827","G__48828","group","p1__48822#","jasminegui.static/portfolio-alignment-groups","base-kportfolio","G__48831","p1__48823#","s__48833","b__48835","i__48834","iter__48832","p1__48824#","fexpr__48843","differentiate","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","temp-line","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","pivoted-data-diff","threshold","cljs.reader.read_string.cljs$core$IFn$_invoke$arity$1","p1__48825#","jasminegui.static/threshold-choices-alignment","cljs.core/some","pivoted-data-diff-post-th","G__48846","G__48847","s__48852","b__48854","i__48853","iter__48851","s__48863","b__48865","i__48864","iter__48862","s__48868","b__48870","i__48869","iter__48867","p1__48845#","jasminegui.riskviews/dropdown-width","jasminegui.riskviews/mini-dropdown-width","jasminegui.riskviews/single-bond-trade-history","state","rowInfo","instance","cljs.core/clj->js","G__48892","re-frame.core/dispatch","G__48893","G__48894","jasminegui.riskviews/single-portfolio-risk-display","p1__48897#","G__48898","G__48899","G__48900","p1__48895#","G__48901","p1__48896#","s__48905","b__48907","i__48906","iter__48904","additional-des-cols","cljs.core/set","jasminegui.static/risk-choice-map","accessors","display","G__48914","js/module$node_modules$react_table$lib$index.default","jasminegui.tables/case-insensitive-filter","cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic","cljs.core.distinct.cljs$core$IFn$_invoke$arity$1","G__48916","G__48915","jasminegui.riskviews/single-bond-trade-flat-history","G__48917","G__48918","G__48919","jasminegui.riskviews/multiple-portfolio-risk-display","p1__48921#","G__48922","width-one","G__48923","G__48924","p1__48920#","s__48928","b__48930","i__48929","iter__48927","display-one","G__48931","cols","s__48933","b__48935","i__48934","iter__48932","G__48938","G__48936","G__48937","jasminegui.tables/sum-rows","cljs.core/name","G__48946","G__48945","jasminegui.riskviews/portfolio-alignment-risk-display","p1__48953#","p1__48947#","G__48956","base-portfolio","display-key","G__48957","cell-one","G__48958","G__48959","p1__48948#","s__48961","b__48963","i__48962","iter__48960","G__48967","s__48971","b__48973","i__48972","iter__48970","G__48978","G__48979","G__48969","jasminegui.riskviews/shortcut-row","key","shortcut","G__48980","re-com.core/title","s__48982","b__48984","i__48983","iter__48981","i","re-com.core/md-circle-icon-button","G__48986","G__48987","jasminegui.riskviews/filtering-row","risk-filter","G__48992","s__48996","b__48998","i__48997","p1__48990#","iter__48995","re-com.core/single-dropdown","reagent.core/cursor","G__49000","G__49001","jasminegui.riskviews/single-portfolio-risk-controller","p1__49002#","p1__49003#","portfolio-map","s__49010","b__49012","i__49011","iter__49009","G__49020","display-style","G__49021","G__49023","G__49024","re-com.core/box","re-com.core/v-box","G__49027","re-com.core/h-box","jasminegui.static/tree-table-choices","G__49031","re-com.core/checkbox","G__49032","p1__49005#","G__49034","re-com.core/gap","jasminegui.tools/csv-link","G__49036","jasminegui.riskviews/multiple-portfolio-risk-controller","p1__49041#","p1__49042#","p1__49043#","p1__49047#","s__49051","b__49053","i__49052","iter__49050","G__49061","G__49063","G__49066","selected-portfolios","G__49070","number-of-fields","G__49074","field-one","G__49075","field-two","G__49076","G__49077","G__49081","G__49083","G__49085","jasminegui.static/risk-field-choices","G__49089","re-com.core/button","G__49090","G__49091","G__49095","G__49096","G__49097","G__49098","re-com.core/selection-list","G__49102","G__49103","jasminegui.riskviews/portfolio-alignment-risk-controller","p1__49104#","p1__49105#","p1__49106#","p1__49107#","G__49108","portfolio-alignment-group","G__49109","field","G__49110","G__49111","G__49113","G__49114","G__49116","G__49117","G__49118","G__49119","jasminegui.riskviews/go-to-portfolio-risk","G__49122","re-frame.core/dispatch-sync","G__49123","jasminegui.riskviews/summary-display","G__49127","G__49129","G__49130","G__49131","G__49132","G__49133","G__49134","G__49135","G__49136","G__49137","G__49138","jasminegui.riskviews/portfolio-history-table","G__49149","G__49150","re-com.core/throbber","jasminegui.tradehistory/subs10","jasminegui.tradehistory/nfh","jasminegui.tables/round2","G__49166","jasminegui.tables/round2pc","x__4217__auto__","y__4218__auto__","jasminegui.riskviews/trade-history","p1__49168#","p1__49169#","p1__49170#","p1__49171#","G__49173","performance","G__49174","s__49176","b__49178","i__49177","iter__49175","G__49179","G__49180","G__49181","G__49182","re-com.core/datepicker-dropdown","jasminegui.tools/int-to-gdate","cljs-time.core/today","G__49183","G__49186","G__49189","G__49191","G__49192","cljs.core/chunk-first"],"sourcesContent":["(ns jasminegui.riskviews\r\n  (:require\r\n    ; [oz.core :as oz]\r\n    [re-frame.core :as rf]\r\n    [reagent.core :as r]\r\n    [goog.string :as gstring]\r\n    [goog.string.format]\r\n    [re-com.core :refer [p p-span h-box v-box box gap line scroller border label title button close-button checkbox hyperlink-href slider horizontal-bar-tabs radio-button info-button\r\n                         single-dropdown hyperlink modal-panel alert-box throbber input-password selection-list md-circle-icon-button\r\n                         input-text input-textarea popover-anchor-wrapper popover-content-wrapper popover-tooltip datepicker-dropdown] :refer-macros [handler-fn]]\r\n    [re-com.box :refer [h-box-args-desc v-box-args-desc box-args-desc gap-args-desc line-args-desc scroller-args-desc border-args-desc flex-child-style]]\r\n    [re-com.util :refer [px]]\r\n    [\"react-table\" :as rt :default ReactTable]\r\n    [jasminegui.mount :as mount]\r\n    [jasminegui.static :as static]\r\n    [jasminegui.tools :as tools]\r\n    [jasminegui.tables :as tables]\r\n    [re-com.validate :refer [string-or-hiccup? alert-type? vector-of-maps?]]\r\n    [cljs-time.core :refer [today]]\r\n    )\r\n  (:import (goog.i18n NumberFormat)\r\n           (goog.i18n.NumberFormat Format))\r\n  )\r\n\r\n;;;;;;;;;;;;\r\n;; EVENTS ;;\r\n;;;;;;;;;;;;\r\n\r\n(rf/reg-event-fx\r\n  :get-single-bond-history\r\n  (fn [{:keys [db]} [_ name bond-sedol portfolios start-date end-date]]\r\n    {:db (assoc db :single-bond-trade-history/bond name\r\n                   :single-bond-trade-history/show-modal true\r\n                   :single-bond-trade-history/show-throbber true)\r\n     :http-get-dispatch {:url          (str static/server-address \"single-bond-history?id=\" bond-sedol \"&portfolios=\" portfolios \"&start-date=\" start-date \"&end-date=\" end-date)\r\n                         :dispatch-key [:single-bond-trade-history/data]\r\n                         :kwk          true}}))\r\n\r\n(rf/reg-event-fx\r\n  :get-single-bond-flat-history\r\n  (fn [{:keys [db]} [_ name bond-sedol portfolios start-date end-date]]\r\n    {:db (assoc db :single-bond-trade-history/bond name\r\n                   :single-bond-trade-history/show-flat-modal true\r\n                   :single-bond-trade-history/show-throbber true)\r\n     :http-get-dispatch {:url          (str static/server-address \"flat-bond-history?id=\" bond-sedol \"&portfolios=\" portfolios \"&start-date=\" start-date \"&end-date=\" end-date)\r\n                         :dispatch-key [:single-bond-trade-history/flat-data]\r\n                         :kwk          true}}))\r\n\r\n(rf/reg-event-fx\r\n  :get-portfolio-trade-history\r\n  (fn [{:keys [db]} [_ portfolio start-date end-date]]\r\n    {:db (assoc db :portfolio-trade-history/data nil\r\n                   :single-bond-trade-history/show-throbber true\r\n                   :single-bond-trade-history/show-throbber true)\r\n     :http-get-dispatch {:url          (str static/server-address \"portfolio-trade-history?portfolio=\" portfolio \"&start-date=\" (tools/gdate-to-yyyymmdd start-date) \"&end-date=\" (tools/gdate-to-yyyymmdd end-date))\r\n                         :dispatch-key [:portfolio-trade-history/data]\r\n                         :kwk          true}}))\r\n\r\n(rf/reg-event-db\r\n  :single-bond-trade-history/data\r\n  (fn [db [_ data]]\r\n    (assoc db :single-bond-trade-history/data data\r\n              :single-bond-trade-history/show-throbber false)))\r\n\r\n(rf/reg-event-db\r\n  :single-bond-trade-history/flat-data\r\n  (fn [db [_ data]]\r\n    (assoc db :single-bond-trade-history/flat-data data\r\n              :single-bond-trade-history/show-throbber false)))\r\n\r\n(rf/reg-event-db\r\n  :portfolio-trade-history/data\r\n  (fn [db [_ data]]\r\n    (assoc db :portfolio-trade-history/data data\r\n              :single-bond-trade-history/show-throbber false)))\r\n\r\n;;;;;;;;;;;;;;;;;;;;\r\n;; SUCBSCRIPTIONS ;;\r\n;;;;;;;;;;;;;;;;;;;;\r\n\r\n(defn first-level-sort [x]\r\n  (case x\r\n    \"Cash\"        \"AAA\"\r\n    \"Collateral\"  \"ZZZ\"\r\n    \"Forwards\"    \"ZZZ\"\r\n    \"Equities\"    \"ZZZ\"\r\n    x))\r\n\r\n(defn add-total-line-to-pivot [pivoted-table kportfolios]\r\n  (let [total-line (merge\r\n                     {:jpm-region           \"Total\"\r\n                      :qt-jpm-sector        \"Total\"\r\n                      :qt-risk-country-name \"Total\"\r\n                      :TICKER               \"Total\"\r\n                      :NAME                 \"Total\"\r\n                      :description          \"Total\"\r\n                      :isin                 \"Total\"\r\n                      :qt-iam-int-lt-median-rating-score \"Total\"\r\n                      :qt-final-maturity-band \"Total\"}\r\n                     (into {} (for [p kportfolios] [p (reduce + (map p pivoted-table))])))]\r\n    (conj pivoted-table total-line)))\r\n\r\n(defn add-total-line-to-attribution-pivot [pivoted-table kportfolios]\r\n  (let [template (into {} (for [[k v] (first pivoted-table)] [k \"Total\"]))\r\n        total-line (merge\r\n                     template\r\n                     (into {} (for [p kportfolios] [p (reduce + (map p pivoted-table))])))]\r\n    (conj pivoted-table total-line)))\r\n\r\n\r\n(rf/reg-sub\r\n  :single-portfolio-risk/table\r\n  (fn [db]\r\n    (let [positions (:positions db)\r\n          portfolio (:single-portfolio-risk/portfolio db)\r\n          portfolio-total-line (assoc ((:total-positions db) (keyword portfolio)) :qt-iam-int-lt-median-rating \"Total\" :qt-iam-int-lt-median-rating-score \"00 Total\")\r\n          is-tree (= (:single-portfolio-risk/display-style db) \"Tree\")\r\n          portfolio-positions (filter #(= (:portfolio %) portfolio) positions)\r\n          viewable-positions (if (and (not is-tree) (:single-portfolio-risk/hide-zero-holdings db)) (filter #(not= (:weight %) 0) portfolio-positions) portfolio-positions)\r\n          risk-choices (let [rfil @(rf/subscribe [:single-portfolio-risk/filter])] (mapv #(if (not= \"None\" (rfil %)) (rfil %)) (range 1 4)))\r\n          grouping-columns (into [] (for [r (remove nil? (conj risk-choices :name))] (tables/risk-table-columns r)))\r\n          accessors-k (mapv keyword (mapv :accessor grouping-columns))]\r\n      (conj (sort-by (apply juxt (concat [(comp first-level-sort (first accessors-k))] (rest accessors-k))) viewable-positions) portfolio-total-line))))\r\n\r\n(rf/reg-sub\r\n  :single-portfolio-attribution/clean-table\r\n  (fn [db]\r\n    (let [data (:single-portfolio-attribution/table db)\r\n          template (into {} (for [[k v] (first data)] [k \"Total\"]))\r\n          portfolio-total-line (assoc template\r\n                                 :Total-Effect (reduce + (map :Total-Effect data))\r\n                                 :Average-Excess-Weight (reduce + (map :Average-Excess-Weight data))\r\n                                 :Average-Fund-Weight (reduce + (map :Average-Fund-Weight data))\r\n                                 :Average-Index-Weight (reduce + (map :Average-Index-Weight data))\r\n                                 :Fund-Contribution (reduce + (map :Fund-Contribution data))\r\n                                 :Index-Contribution (reduce + (map :Index-Contribution data)))\r\n          risk-choices (let [rfil (:single-portfolio-attribution/filter db)] (mapv #(if (not= \"None\" (rfil %)) (rfil %)) (range 1 4)))\r\n          grouping-columns (into [] (for [r (remove nil? (conj risk-choices :security))] (tables/attribution-table-columns r)))\r\n          accessors-k (mapv keyword (mapv :accessor grouping-columns))]\r\n      (conj (sort-by (apply juxt (concat [(comp first-level-sort (first accessors-k))] (rest accessors-k))) data) portfolio-total-line))))\r\n\r\n\r\n(rf/reg-sub\r\n  :multiple-portfolio-risk/table\r\n  (fn [db]\r\n    (let [pivoted-positions (:pivoted-positions db)\r\n          kselected-portfolios (mapv keyword (:multiple-portfolio-risk/selected-portfolios db))\r\n          hide-zero-risk (:multiple-portfolio-risk/hide-zero-holdings db)\r\n          display-key-one (:multiple-portfolio-risk/field-one db)\r\n          is-tree (= (:multiple-portfolio-risk/display-style db) \"Tree\")\r\n          risk-choices (let [rfil @(rf/subscribe [:multiple-portfolio-risk/filter])] (mapv #(if (not= \"None\" (rfil %)) (rfil %)) (range 1 4)))\r\n          grouping-columns (into [] (for [r (remove nil? (conj risk-choices :name))] (tables/risk-table-columns r)))\r\n          accessors-k (mapv keyword (mapv :accessor grouping-columns))\r\n          pivoted-data (map #(merge % ((keyword (get-in tables/risk-table-columns [display-key-one :accessor])) %)) pivoted-positions)\r\n          thfil (fn [line] (not (every? zero? (map line kselected-portfolios))))\r\n          pivoted-data-hide-zero (if (and (not is-tree) hide-zero-risk) (filter thfil pivoted-data) pivoted-data)]\r\n      (add-total-line-to-pivot (sort-by (apply juxt (concat [(comp first-level-sort (first accessors-k))] (rest accessors-k))) pivoted-data-hide-zero) (map keyword (:portfolios db))))))\r\n\r\n(rf/reg-sub\r\n  :multiple-portfolio-attribution/clean-table\r\n  (fn [db]\r\n    (let [pivoted-positions (:multiple-portfolio-attribution/table db)\r\n          display-key-one (:multiple-portfolio-attribution/field-one db)\r\n          attribution-choices (let [rfil @(rf/subscribe [:multiple-portfolio-attribution/filter])] (mapv #(if (not= \"None\" (rfil %)) (rfil %)) (range 1 4)))\r\n          grouping-columns (into [] (for [r (remove nil? (conj attribution-choices :security))] (tables/attribution-table-columns r)))\r\n          accessors-k (mapv keyword (mapv :accessor grouping-columns))\r\n          pivoted-data (map #(merge % ((keyword (get-in tables/attribution-table-columns [display-key-one :accessor])) %)) pivoted-positions)]\r\n      (add-total-line-to-attribution-pivot (sort-by (apply juxt (concat [(comp first-level-sort (first accessors-k))] (rest accessors-k))) pivoted-data) (map keyword (:portfolios db))))))\r\n\r\n(rf/reg-sub\r\n  :portfolio-alignment/table\r\n  (fn [db]\r\n    (let [group (map keyword (:portfolios (first (filter #(= (:id %) (:portfolio-alignment/group db)) static/portfolio-alignment-groups))))\r\n          pivoted-positions (:pivoted-positions db)\r\n          base-kportfolio (first group)\r\n          kportfolios (rest group)\r\n          risk-choices (let [rfil @(rf/subscribe [:portfolio-alignment/filter])] (mapv #(if (not= \"None\" (rfil %)) (rfil %)) (range 1 4)))\r\n          grouping-columns (into [] (for [r (remove nil? (conj risk-choices :name))] (tables/risk-table-columns r)))\r\n          accessors-k (mapv keyword (mapv :accessor grouping-columns))\r\n          pivoted-data (map #(merge % ((keyword (get-in tables/risk-table-columns [(:portfolio-alignment/field db) :accessor])) %)) pivoted-positions)\r\n          differentiate (fn [line] (reduce\r\n                                     (fn [temp-line p] (assoc temp-line p (- (p temp-line) (base-kportfolio temp-line))))\r\n                                     line\r\n                                     kportfolios))\r\n          pivoted-data-diff (map differentiate pivoted-data)\r\n          threshold (* 0.01 (cljs.reader/read-string (:label (first (filter #(= (:id %) (:portfolio-alignment/threshold db)) static/threshold-choices-alignment)))))\r\n          thfil (fn [line] (some (fn [x] (or (< x (- threshold)) (> x threshold))) (map line kportfolios)))\r\n          pivoted-data-diff-post-th (filter thfil pivoted-data-diff)]\r\n      (add-total-line-to-pivot (sort-by (apply juxt (concat [(comp first-level-sort (first accessors-k))] (rest accessors-k))) pivoted-data-diff-post-th) kportfolios))))\r\n\r\n(rf/reg-sub\r\n  :summary-display/table\r\n  (fn [db]\r\n    (into [] (for [p (:portfolios db)]\r\n               (merge\r\n                 {:portfolio       p}\r\n                 (into {} (for [k [:cash-pct :base-value :contrib-yield :contrib-zspread :contrib-gspread :contrib-mdur :qt-iam-int-lt-median-rating :qt-iam-int-lt-median-rating-score :contrib-beta-1y-daily]] [k (get-in (:total-positions db) [(keyword p) k])]))\r\n                 {:contrib-bond-yield (- (get-in (:total-positions db) [(keyword p) :contrib-yield]) (reduce + (map :contrib-yield (filter #(and (= (:portfolio %) p) (not= (:asset-class %) \"BONDS\")) (:positions db)))))})))))\r\n\r\n;;;;;;;;;\r\n;; GUI ;;\r\n;;;;;;;;;\r\n\r\n(def dropdown-width \"150px\")\r\n(def mini-dropdown-width \"75px\")\r\n\r\n(defn single-bond-trade-history [state rowInfo instance]\r\n  (clj->js {:onClick #(rf/dispatch [:get-single-bond-history\r\n                                    (aget rowInfo \"row\" \"_original\" \"NAME\")\r\n                                    (aget rowInfo \"row\" \"_original\" \"id\")\r\n                                    [@(rf/subscribe [:single-portfolio-risk/portfolio])]\r\n                                    \"01Jan2019\"\r\n                                    @(rf/subscribe [:qt-date])])\r\n            :style {:cursor \"pointer\"}}))\r\n\r\n(defn single-portfolio-risk-display []\r\n  (let [positions @(rf/subscribe [:positions])\r\n        portfolio @(rf/subscribe [:single-portfolio-risk/portfolio])\r\n        is-tree (= @(rf/subscribe [:single-portfolio-risk/display-style]) \"Tree\")\r\n        portfolio-positions (filter #(= (:portfolio %) portfolio) positions)\r\n        risk-choices (let [rfil @(rf/subscribe [:single-portfolio-risk/filter])] (mapv #(if (not= \"None\" (rfil %)) (rfil %)) (range 1 4)))\r\n        grouping-columns (into [] (for [r (remove nil? (conj risk-choices :name))] (tables/risk-table-columns r)))\r\n        additional-des-cols (remove (set (conj risk-choices \"None\")) (map :id static/risk-choice-map))\r\n        accessors (mapv :accessor grouping-columns)\r\n        display @(rf/subscribe [:single-portfolio-risk/table])]\r\n    [:> ReactTable\r\n     {:data                display\r\n      :defaultFilterMethod tables/case-insensitive-filter\r\n      :columns             [{:Header \"Groups\" :columns grouping-columns}\r\n                            {:Header \"NAV\" :columns (mapv tables/risk-table-columns [:nav :bm-weight :weight-delta])}\r\n                            {:Header \"Duration\" :columns (mapv tables/risk-table-columns [:contrib-mdur :bm-contrib-eir-duration :mdur-delta])}\r\n                            {:Header \"Yield\" :columns (mapv tables/risk-table-columns [:contrib-yield :bm-contrib-yield])}\r\n                            {:Header \"Z-spread\" :columns (mapv tables/risk-table-columns [:contrib-zspread])}\r\n                            {:Header \"Beta\"  :columns (mapv tables/risk-table-columns [:contrib-beta])}\r\n                            {:Header \"Position\" :columns (mapv tables/risk-table-columns [:value :nominal])}\r\n                            ;{:Header \"Index contribution\" :columns (mapv tables/table-columns [:bm-contrib-yield :bm-contrib-eir-duration])}\r\n                            {:Header (if is-tree \"Bond analytics (median)\" \"Bond analytics\") :columns (mapv tables/risk-table-columns [:yield :z-spread :g-spread :duration :total-return-ytd :cembi-beta-last-year :cembi-beta-previous-year :jensen-ytd])}\r\n                            {:Header \"Description\" :columns (mapv tables/risk-table-columns (into [] (concat [:rating :isin] additional-des-cols [:description])))}]\r\n      :showPagination      (not is-tree)\r\n      :sortable            (not is-tree)\r\n      :filterable          (not is-tree)\r\n      :pageSize            (if is-tree (inc (count (distinct (map (keyword (first accessors)) portfolio-positions)))) 25) ;(inc (count display))\r\n      :showPageSizeOptions false\r\n      :className           \"-striped -highlight\"\r\n      :pivotBy             (if is-tree accessors [])\r\n      :getTrProps          single-bond-trade-history\r\n      :defaultFiltered     (if is-tree [] @(rf/subscribe [:single-portfolio-risk/table-filter])) ; [{:id \"analyst\" :value \"Tammy\"}]\r\n      :onFilteredChange    #(rf/dispatch [:single-portfolio-risk/table-filter %])}]))\r\n\r\n(defn single-bond-trade-flat-history [state rowInfo instance]\r\n  (clj->js {:onClick #(rf/dispatch [:get-single-bond-flat-history\r\n                                   (aget rowInfo \"row\" \"_original\" \"NAME\")\r\n                                   (aget rowInfo \"row\" \"_original\" \"id\")\r\n                                   @(rf/subscribe [:portfolios])\r\n                                   \"01Jan2019\"\r\n                                   @(rf/subscribe [:qt-date])])\r\n            :style {:cursor \"pointer\"}}))\r\n\r\n(defn multiple-portfolio-risk-display []\r\n  (let [display-key-one @(rf/subscribe [:multiple-portfolio-risk/field-one])\r\n        width-one 100                                      ;(get-in tables/table-columns [display-key-one :width])\r\n        is-tree (= @(rf/subscribe [:multiple-portfolio-risk/display-style]) \"Tree\")\r\n        risk-choices (let [rfil @(rf/subscribe [:multiple-portfolio-risk/filter])] (mapv #(if (not= \"None\" (rfil %)) (rfil %)) (range 1 4)))\r\n        grouping-columns (into [] (for [r (remove nil? (conj risk-choices :name))] (tables/risk-table-columns r)))\r\n        accessors (mapv :accessor grouping-columns)\r\n        display-one @(rf/subscribe [:multiple-portfolio-risk/table])\r\n        cols (into [] (for [p @(rf/subscribe [:portfolios]) :when (some #{p} @(rf/subscribe [:multiple-portfolio-risk/selected-portfolios]))]\r\n                        {:Header p\r\n                         :accessor p\r\n                         :width width-one\r\n                         :style {:textAlign \"right\"}\r\n                         :aggregate tables/sum-rows\r\n                         :Cell (get-in tables/risk-table-columns [display-key-one :Cell])\r\n                         :filterable false}))]\r\n    [:> ReactTable\r\n     {:data                display-one\r\n      :defaultFilterMethod tables/case-insensitive-filter\r\n      :columns             [{:Header \"Groups\" :columns grouping-columns}\r\n                            {:Header  (str \"Portfolio \" (name display-key-one)) :columns cols}\r\n                            {:Header  \"Description\" :columns (mapv tables/risk-table-columns [:rating :isin :description])}]\r\n      :showPagination      (not is-tree)\r\n      :sortable            (not is-tree)\r\n      :filterable          (not is-tree)\r\n      :pageSize            (if is-tree (inc (count (distinct (map (keyword (first accessors)) display-one)))) 25)\r\n      :showPageSizeOptions false\r\n      :className           \"-striped -highlight\"\r\n      :pivotBy             (if is-tree accessors [])\r\n      :getTrProps          single-bond-trade-flat-history\r\n      :defaultFiltered     (if is-tree [] @(rf/subscribe [:multiple-portfolio-risk/table-filter])) ; [{:id \"analyst\" :value \"Tammy\"}]\r\n      :onFilteredChange    #(rf/dispatch [:multiple-portfolio-risk/table-filter %])}]))\r\n\r\n(defn portfolio-alignment-risk-display []\r\n  (let [\r\n        group (:portfolios (first (filter #(= (:id %) @(rf/subscribe [:portfolio-alignment/group])) static/portfolio-alignment-groups)))\r\n        base-portfolio (first group)\r\n        portfolios (rest group)\r\n        display-key @(rf/subscribe [:portfolio-alignment/field])\r\n        cell-one (get-in tables/risk-table-columns [display-key :Cell])\r\n        width-one 100\r\n        is-tree (= @(rf/subscribe [:portfolio-alignment/display-style]) \"Tree\")\r\n        risk-choices (let [rfil @(rf/subscribe [:portfolio-alignment/filter])] (mapv #(if (not= \"None\" (rfil %)) (rfil %)) (range 1 4)))\r\n        grouping-columns (into [] (for [r (remove nil? (conj risk-choices :name))] (tables/risk-table-columns r)))\r\n        accessors (mapv :accessor grouping-columns)\r\n        display @(rf/subscribe [:portfolio-alignment/table])]\r\n    [:> ReactTable\r\n     {:data                display\r\n      :defaultFilterMethod tables/case-insensitive-filter\r\n      :columns\r\n                           [{:Header \"Groups\" :columns grouping-columns}\r\n                            {:Header  (str \"Portfolio \" (name display-key) \" vs \" base-portfolio)\r\n                             :columns (into [] (for [p portfolios] {:Header p :accessor p :width width-one :style {:textAlign \"right\"} :aggregate tables/sum-rows :Cell cell-one :filterable false}))}\r\n                            {:Header  \"Description\"\r\n                             :columns [{:Header \"thinkFolio ID\" :accessor \"description\" :width 500} (tables/risk-table-columns :rating)]}]\r\n      :showPagination      (not is-tree)\r\n      :sortable            (not is-tree)\r\n      :filterable          (not is-tree)\r\n      :pageSize            (if is-tree (inc (count (distinct (map (keyword (first accessors)) display)))) 25)\r\n      :showPageSizeOptions false\r\n      :className           \"-striped -highlight\"\r\n      :pivotBy             (if is-tree accessors [])\r\n      :defaultFiltered     (if is-tree [] @(rf/subscribe [:portfolio-alignment/table-filter])) ; [{:id \"analyst\" :value \"Tammy\"}]\r\n      :onFilteredChange    #(rf/dispatch [:portfolio-alignment/table-filter %])}]))\r\n\r\n(defn shortcut-row [key]\r\n  (let [shortcut (rf/subscribe [key])]\r\n    (into [] (concat [[title :label \"Shortcuts:\" :level :level3]]\r\n               (into [] (for [i (range 1 5)]\r\n                          [md-circle-icon-button\r\n                           :md-icon-name (str \"zmdi-collection-item-\" i)\r\n                           :class (if (= @shortcut i) \"active\" \"default\")\r\n                           :on-click #(rf/dispatch [key i])]))))))\r\n\r\n(defn filtering-row [key]\r\n  (let [risk-filter (rf/subscribe [key])]\r\n    (into [] (for [i (range 1 4)]\r\n               [single-dropdown\r\n                :width dropdown-width\r\n                :model (r/cursor risk-filter [i])\r\n                :choices static/risk-choice-map\r\n                :on-change #(rf/dispatch [key i %])]))))\r\n\r\n(defn single-portfolio-risk-controller []\r\n  (let [portfolio-map (into [] (for [p @(rf/subscribe [:portfolios])] {:id p :label p}))\r\n        display-style (rf/subscribe [:single-portfolio-risk/display-style])\r\n        portfolio (rf/subscribe [:single-portfolio-risk/portfolio])\r\n        hide-zero-risk (rf/subscribe [:single-portfolio-risk/hide-zero-holdings])]\r\n    [box :class \"subbody rightelement\" :child\r\n     [v-box :class \"element\" :align-self :center :justify :center :gap \"20px\"\r\n      :children [[title :label (str \"Portfolio drill-down \" @(rf/subscribe [:qt-date])) :level :level1]\r\n                 [h-box :gap \"50px\"\r\n                  :children [\r\n                             [v-box :gap \"15px\"\r\n                              :children [\r\n                                         [h-box\r\n                                          :gap \"10px\"\r\n                                          :children [\r\n                                                     [title :label \"Display type:\" :level :level3]\r\n                                                     [single-dropdown :width dropdown-width :model display-style :choices static/tree-table-choices :on-change #(rf/dispatch [:single-portfolio-risk/display-style %])]]]\r\n                                         [checkbox :model hide-zero-risk :label \"Hide zero positions in table view\" :disabled? (= @display-style \"Tree\") :on-change #(rf/dispatch [:single-portfolio-risk/hide-zero-holdings %])]]]\r\n                             [v-box :gap \"10px\" :children [\r\n                                                           [h-box :gap \"10px\" :children\r\n                                                            (into [] (concat [[title :label \"Filtering:\" :level :level3]\r\n                                                                              [single-dropdown :width dropdown-width :model portfolio :choices portfolio-map :on-change #(rf/dispatch [:single-portfolio-risk/portfolio %])]]\r\n                                                                             (filtering-row :single-portfolio-risk/filter)))]\r\n                                                           [h-box :gap \"20px\" :children (into [] (concat\r\n                                                                                                   (shortcut-row :single-portfolio-risk/shortcut)\r\n                                                                                                   [[gap :size \"50px\"]\r\n                                                                                                    [title :label \"Download:\" :level :level3]\r\n                                                                                                     [md-circle-icon-button :md-icon-name \"zmdi-download\" :on-click #(tools/csv-link @(rf/subscribe [:single-portfolio-risk/table]) @portfolio)]]))]]]]]\r\n                 [single-portfolio-risk-display]]]]))\r\n\r\n(defn multiple-portfolio-risk-controller []\r\n  (let [portfolio-map (into [] (for [p  @(rf/subscribe [:portfolios])] {:id p :label p}))\r\n        display-style (rf/subscribe [:multiple-portfolio-risk/display-style])\r\n        portfolios @(rf/subscribe [:portfolios])\r\n        selected-portfolios (rf/subscribe [:multiple-portfolio-risk/selected-portfolios])\r\n        number-of-fields (rf/subscribe [:multiple-portfolio-risk/field-number])\r\n        field-one (rf/subscribe [:multiple-portfolio-risk/field-one])\r\n        field-two (rf/subscribe [:multiple-portfolio-risk/field-two])\r\n        hide-zero-risk (rf/subscribe [:multiple-portfolio-risk/hide-zero-holdings])\r\n        ]\r\n    [box :class \"subbody rightelement\" :child\r\n     [v-box :class \"element\" :align-self :center :justify :center :gap \"20px\"\r\n      :children [[title :label (str \"Portfolio drill-down \" @(rf/subscribe [:qt-date])) :level :level1]\r\n                 [h-box :gap \"50px\"\r\n                  :children\r\n                             [\r\n                              [v-box :gap \"20px\"\r\n                               :children [\r\n                                          [h-box :gap \"10px\" :children [[title :label \"Display type:\" :level :level3] [gap :size \"1\"] [single-dropdown :width dropdown-width :model display-style :choices static/tree-table-choices :on-change #(rf/dispatch [:multiple-portfolio-risk/display-style %])]]]\r\n                                          [checkbox :model hide-zero-risk :label \"Hide zero positions in table view\" :disabled? (= @display-style \"Tree\") :on-change #(rf/dispatch [:multiple-portfolio-risk/hide-zero-holdings %])]\r\n                                          [h-box :gap \"10px\" :children [[title :label \"Field:\" :level :level3] [gap :size \"1\"] [single-dropdown :width dropdown-width :model field-one :choices static/risk-field-choices :on-change #(rf/dispatch [:multiple-portfolio-risk/field-one %])]]]]]\r\n                              [v-box :gap \"10px\"\r\n                               :children [[title :label \"Portfolios:\" :level :level3]\r\n                                          [button :style {:width \"100%\"} :label \"All\"      :on-click #(rf/dispatch [:multiple-portfolio-risk/selected-portfolios (set portfolios)])]\r\n                                          [button :style {:width \"100%\"} :label \"None\"     :on-click #(rf/dispatch [:multiple-portfolio-risk/selected-portfolios #{}])]\r\n                                          [button :style {:width \"100%\"} :label \"CEMBI\"    :on-click #(rf/dispatch [:multiple-portfolio-risk/selected-portfolios (set (:portfolios (first (filter (fn [x] (= (:id x) :cembi)) static/portfolio-alignment-groups))))])]\r\n                                          [button :style {:width \"100%\"} :label \"Allianz\"  :on-click #(rf/dispatch [:multiple-portfolio-risk/selected-portfolios (set (:portfolios (first (filter (fn [x] (= (:id x) :allianz)) static/portfolio-alignment-groups))))])]\r\n                                          [button :style {:width \"100%\"} :label \"IG\"       :on-click #(rf/dispatch [:multiple-portfolio-risk/selected-portfolios (set (:portfolios (first (filter (fn [x] (= (:id x) :ig)) static/portfolio-alignment-groups))))])]\r\n                                          [button :style {:width \"100%\"} :label \"Talanx\"   :on-click #(rf/dispatch [:multiple-portfolio-risk/selected-portfolios (set (:portfolios (first (filter (fn [x] (= (:id x) :talanx)) static/portfolio-alignment-groups))))])]]]\r\n                              [selection-list :width dropdown-width :model selected-portfolios :choices portfolio-map :on-change #(rf/dispatch [:multiple-portfolio-risk/selected-portfolios %])]\r\n                              [v-box :gap \"20px\"\r\n                               :children [[h-box :gap \"10px\" :children (into [] (concat [[title :label \"Filtering:\" :level :level3]] (filtering-row :multiple-portfolio-risk/filter)))]\r\n                                          [h-box :gap \"10px\" :children (shortcut-row :multiple-portfolio-risk/shortcut)]\r\n                                          [h-box :gap \"10px\" :children [ [title :label \"Download:\" :level :level3]\r\n                                                                        [md-circle-icon-button :md-icon-name \"zmdi-download\" :on-click #(tools/csv-link @(rf/subscribe [:multiple-portfolio-risk/table]) \"pivot\")]]]]]]]\r\n                 [multiple-portfolio-risk-display]]]]))\r\n\r\n(defn portfolio-alignment-risk-controller []\r\n  (let [display-style (rf/subscribe [:portfolio-alignment/display-style])\r\n        ;risk-filter (rf/subscribe [:portfolio-alignment/filter])\r\n        portfolio-alignment-group (rf/subscribe [:portfolio-alignment/group])\r\n        field (rf/subscribe [:portfolio-alignment/field])\r\n        threshold (rf/subscribe [:portfolio-alignment/threshold])]\r\n    [box :class \"subbody rightelement\" :child\r\n     [v-box :class \"element\" :align-self :center :justify :center :gap \"20px\"\r\n      :children [[title :label (str \"Portfolio alignment \" @(rf/subscribe [:qt-date])) :level :level1]\r\n                 [h-box :gap \"50px\"\r\n                  :children\r\n                  [[v-box :gap \"20px\"\r\n                    :children [[h-box :gap \"10px\" :children [[title :label \"Display type:\" :level :level3] [gap :size \"1\"] [single-dropdown :width dropdown-width :model display-style :choices static/tree-table-choices :on-change #(rf/dispatch [:portfolio-alignment/display-style %])]]]\r\n                               [h-box :gap \"10px\" :children [[title :label \"Field:\" :level :level3] [gap :size \"1\"] [single-dropdown :width dropdown-width :model field :choices static/risk-field-choices :on-change #(rf/dispatch [:portfolio-alignment/field %])]]]\r\n                               [h-box :gap \"10px\" :children [[title :label \"Threshold:\" :level :level3] [gap :size \"1\"] [single-dropdown :width dropdown-width :model threshold :choices static/threshold-choices-alignment :on-change #(rf/dispatch [:portfolio-alignment/threshold %])]]]]]\r\n                   [v-box :gap \"20px\"\r\n                     :children [[h-box :gap \"10px\" :children [[title :label \"Portfolios:\" :level :level3] [gap :size \"1\"]\r\n                                                              [single-dropdown :width dropdown-width :model portfolio-alignment-group :choices static/portfolio-alignment-groups :on-change #(rf/dispatch [:portfolio-alignment/group %])]]]]]\r\n\r\n                   [v-box :gap \"20px\"\r\n                    :children [[h-box :gap \"10px\" :children (into [] (concat [[title :label \"Filtering:\" :level :level3]] (filtering-row :portfolio-alignment/filter)))]\r\n                               [h-box :gap \"10px\" :children (shortcut-row :portfolio-alignment/shortcut)]\r\n                               [h-box :gap \"10px\" :children [ [title :label \"Download:\" :level :level3]\r\n                                                             [md-circle-icon-button :md-icon-name \"zmdi-download\" :on-click #(tools/csv-link @(rf/subscribe [:portfolio-alignment/table]) \"alignment\")]]]]]]]\r\n                 [portfolio-alignment-risk-display]]]]))\r\n\r\n\r\n(defn go-to-portfolio-risk [state rowInfo instance] (clj->js {:onClick #(do (rf/dispatch-sync [:navigation/active-home :single-portfolio]) (rf/dispatch [:single-portfolio-risk/portfolio (aget rowInfo \"row\" \"portfolio\")])) :style {:cursor \"pointer\"}}))\r\n\r\n(defn summary-display []\r\n   [box :class \"subbody rightelement\" :child\r\n     [v-box :class \"element\" :align-self :center :justify :center :gap \"20px\"\r\n      :children [[title :label (str \"Summary \" @(rf/subscribe [:qt-date])) :level :level1]\r\n    [:> ReactTable\r\n     {:data           @(rf/subscribe [:summary-display/table])\r\n      :columns        [{:Header \"Portfolio\" :accessor \"portfolio\" :width 120}\r\n                       {:Header \"Balance\" :columns (mapv tables/risk-table-columns [:value :cash-pct])}\r\n                       {:Header \"Value\" :columns [(assoc (tables/risk-table-columns :contrib-yield) :Header \"Yield\")\r\n                                                  (tables/risk-table-columns :contrib-bond-yield)\r\n                                                  (assoc (tables/risk-table-columns :contrib-mdur) :Header \"M Dur\")\r\n                                                  (tables/risk-table-columns :rating)\r\n                                                  (assoc (tables/risk-table-columns :rating-score) :width 60)\r\n                                                  (assoc (tables/risk-table-columns :contrib-zspread) :Header \"Z-spread\")\r\n                                                  (assoc (tables/risk-table-columns :contrib-gspread) :Header \"G-spread\")\r\n                                                  (assoc (tables/risk-table-columns :contrib-beta) :Header \"Beta\")\r\n                                                  ]}]\r\n      :showPagination false\r\n      :pageSize       (count @(rf/subscribe [:portfolios]))\r\n      :getTrProps     go-to-portfolio-risk\r\n      :className      \"-striped -highlight\"}]]]])\r\n\r\n(defn portfolio-history-table []\r\n  (let [data @(rf/subscribe [:portfolio-trade-history/data])]\r\n    (if @(rf/subscribe [:single-bond-trade-history/show-throbber])\r\n      [box :align :center :child [throbber :size :large]]\r\n      [box :align :center\r\n       :child\r\n               [:> ReactTable\r\n                {:data           data\r\n                 :columns        (concat [{:Header \"Date\" :accessor \"TradeDate\" :width 100 :Cell jasminegui.tradehistory/subs10}\r\n                                          {:Header \"Type\" :accessor \"TransactionTypeName\" :width 100}\r\n                                          ;{:Header \"Instrument\" :accessor \"IssueName\" :width 400}\r\n                                          {:Header \"Instrument\" :accessor \"NAME\" :width 200}\r\n                                          {:Header \"SEDOL\" :accessor \"SEDOL\" :width 100}\r\n                                          {:Header \"CCY\" :accessor \"LocalCcy\" :width 60}\r\n                                          {:Header \"Notional\" :accessor \"Quantity\" :width 100 :style {:textAlign \"right\"} :Cell jasminegui.tradehistory/nfh} ;\r\n                                          {:Header \"Price\" :accessor \"PriceLcl\" :width 75 :style {:textAlign \"right\"} :Cell tables/round2}\r\n                                          {:Header \"Counterparty\" :accessor \"counterparty_code\" :width 100}]\r\n                                         (if (= @(rf/subscribe [:portfolio-trade-history/performance]) \"Yes\")\r\n                                           [{:Header \"Last price\" :accessor \"last-price\" :width 75 :style {:textAlign \"right\"} :Cell tables/round2}\r\n                                            {:Header \"Total return\" :accessor \"total-return\" :width 100 :style {:textAlign \"right\"} :Cell tables/round2pc}\r\n                                            {:Header \"TR vs CEMBI\" :accessor \"tr-vs-cembi\" :width 100 :style {:textAlign \"right\"} :Cell tables/round2pc}]))\r\n                 :showPagination (> (count data) 50)\r\n                 :pageSize       (min 50 (count data))\r\n                 :filterable     true\r\n                 :className      \"-striped -highlight\"}]])))\r\n\r\n(defn trade-history []\r\n  (let [portfolio (rf/subscribe [:portfolio-trade-history/portfolio])\r\n        performance (rf/subscribe [:portfolio-trade-history/performance])\r\n        portfolio-map (into [] (for [p @(rf/subscribe [:portfolios])] {:id p :label p}))\r\n        start-date (rf/subscribe [:portfolio-trade-history/start-date])\r\n        end-date (rf/subscribe [:portfolio-trade-history/end-date])]\r\n    [box :class \"subbody rightelement\" :child\r\n     [v-box :class \"element\" :gap \"20px\"\r\n      :children [[title :label (str \"Trade history for \" @portfolio) :level :level1]\r\n                 [h-box :gap \"50px\"\r\n                  :children [\r\n                             [v-box :gap \"15px\"\r\n                              :children [\r\n                                         [h-box\r\n                                          :width \"1200px\"\r\n                                          :gap \"10px\"\r\n                                          :children [[title :label \"Portfolio:\" :level :level3]\r\n                                                     [single-dropdown :width dropdown-width :model portfolio :choices portfolio-map :on-change #(rf/dispatch [:portfolio-trade-history/portfolio %])]\r\n                                                     [gap :size \"20px\"]\r\n                                                     [title :label \"Start:\" :level :level3]\r\n                                                     [datepicker-dropdown\r\n                                                      :model start-date\r\n                                                      :minimum (tools/int-to-gdate 20200101)\r\n                                                      :maximum (today)\r\n                                                      :format \"dd/MM/yyyy\" :show-today? true :on-change #(rf/dispatch [:portfolio-trade-history/start-date %])]\r\n                                                     [gap :size \"20px\"]\r\n                                                     [title :label \"End:\" :level :level3]\r\n                                                     [datepicker-dropdown\r\n                                                      :model end-date\r\n                                                      :minimum (tools/int-to-gdate 20200101)\r\n                                                      :maximum (today)\r\n                                                      :format \"dd/MM/yyyy\" :show-today? false :on-change #(rf/dispatch [:portfolio-trade-history/end-date %])]\r\n                                                     [gap :size \"20px\"]\r\n                                                     [title :label \"Get performance?\" :level :level3]\r\n                                                     [single-dropdown :width mini-dropdown-width :model performance :choices [{:id \"No\" :label \"No\"} {:id \"Yes\" :label \"Yes\"}] :on-change #(rf/dispatch [:portfolio-trade-history/performance %])]\r\n                                                     [gap :size \"20px\"]\r\n                                                     [button :label \"Fetch\" :class \"btn btn-primary btn-block\" :on-click #(rf/dispatch [:get-portfolio-trade-history @portfolio @start-date @end-date])]\r\n                                                     [gap :size \"20px\"]\r\n                                                     [md-circle-icon-button :md-icon-name \"zmdi-download\" :on-click #(tools/csv-link @(rf/subscribe [:portfolio-trade-history/data]) @portfolio)]\r\n                                                     ]]\r\n\r\n                                         ]\r\n\r\n\r\n                              ]]]\r\n                 [portfolio-history-table]]]])\r\n\r\n  )"]}