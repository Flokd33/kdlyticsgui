{"version":3,"sources":["jasminegui/riskviews.cljs"],"mappings":";;;;;;;;;;;;;;;;AAwBA,AAAKA,AAAI,AAAAC,AAAeC;AACxB,AAAA,AAAMC,AAAIC;AAAV,AAAa,AAASJ,AAAI,AAAKI;;AAC/B,AAAA,AAAMC,AAAmBD;AAAzB,AAA4B,AAAA,AAAQ,AAAA,AAAK,AAAA,AAAGA;;AAC5C,AAAKE,AAAM,AAACC,AAAKJ,AAAGE;AAGpB,AAAA,AAAMG,AAAQC;AAAd,AACE,AAACC,AACC,AAAAC,AAAW,AAAA,AAAMF;AAAjB,AAAA,AAAAE;AAAA,AAAAA,AAASP;AAAT,AAAA,AAAA,AACS,AAACD,AAAG,AAAA,AAAKC;;AADlB;;;;AAKJ,AAAA,AAAMQ,AAAyBC,AAASC;AAAxC,AAAA;AAGE,AAAW,AAAc,AAAK,AAAMA,AAAI,AAAA,AAAMD,AAAkB,AAAc,AAAA,AAAMA;;AAStF,AAAA,AAAME,AAAYC,AAAIP;AAAtB,AAA+B,AAACC,AAAa,AAAAC,AAAW,AAAA,AAAMF;AAAjB,AAAA,AAAAE;AAAA,AAAAA,AAASP;AAAT,AAAgC,AAACa,AAAeD,AAAIZ;;AAApD;;;;AAC7C,AAAKc,AAAe,AAAA,AAACC,AAAQJ;AAC7B,AAAKK,AAAe,AAAA,AAACD,AAAQJ;AAC7B,AAAKM,AAAe,AAAA,AAACF,AAAQJ;AAC7B,AAAKO,AAAe,AAAA,AAACH,AAAQJ;AAC7B,AAAKQ,AAAe,AAAA,AAACJ,AAAQJ;AAE7B,AAAA,AAAMS,AAAaC,AAAEC;AAArB,AACE,AAAA,AAAAC,AAAMC,AAAG,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAACC,AAAAA,AAAAA;;AAAV,AAA4C,AAAI,AAAAC,AAAG,AAACC,AAAQP;AAAZ,AAAA,AAAAM,AAAAA,AAACH,AAAAA,AAAAA;AAAe,AAAAK,AAAG,AAACD,AAAQN;AAAZ,AAAA,AAAAO,AAAAA,AAACL,AAAAA,AAAAA;;;AAEnE,AAAA,AAAMM,AAAUC;AAAhB,AAAsB,AAACC,AAAOC,AAAEF;;AAEhC,AAAA,AAAMG,AAAQC;AAAd,AACE,AAAMC,AAAO,AAACC,AAAK,AAACC,AAAOC,AAAKJ;AAC1BK,AAAI,AAACC,AAAML;AACXM,AAAQ,AAAA,AAACC,AAAKH;AAFpB,AAGE,AACE,AAAA,AAAOA;AADT;;AAAA,AAEE,AAACI,AAAKJ;AAAK,AAACK,AAAIT,AAAOM;;AAFzB,AAGQ,AAAMI,AAAO,AAAA,AAAKJ;AAASK,AAAW,AAACF,AAAIT,AAAOU;AAAQE,AAAQ,AAACH,AAAIT,AAAOM;AAA9E,AAAwF,AAAA,AAAO,AAAGK,AAAWC;;;;;AAGzH,AAAA,AAAMC,AAASrC,AAAIP;AAAnB,AACE,AAACC,AACC,AAAAC,AAAW,AAAA,AAAMF;AAAjB,AAAA,AAAAE;AAAA,AAAAA,AAASP;AAAT,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACwB,AAAA,AAAA,AAAI,AAAA,AAAMA,AAAoB,AAAAkD,AAAgBtC;AAAhBuC,AAAoB,AAAA,AAAOnD;AAA3B,AAAA,AAAAkD,AAAAC,AAACtC;;;AADvD;;;;AAIJ,AAAKuC,AAAS,AAAA,AAACrC,AAAQkC;AACvB,AAAKI,AAAS,AAAA,AAACtC,AAAQkC;AAEvB,AAAA,AAAMK,AAAcjD;AAApB,AACE,AAACC,AACC,AAAAC,AAAW,AAAA,AAAMF;AAAjB,AAAA,AAAAE;AAAA,AAAAA,AAASP;AAAT,AACE,AAAMuD,AAAM,AAACC,AAAM,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAI,AAAA,AAAMxD,AACV,AAAA,AAAA,AAAA,AAAA,AAAI,AAAA,AAAA,AAAMK;AAD7B,AAAA,AAAA,AAAA,AAAA,AAEgBkD,AAAO,AAAAE,AAAA;AAAAC,AAAwB,AAAA,AAAO1D;AAA/B,AAAA,AAAAyD,AAAAC,AAAC7C;;;AAH1B;;;;AAMJ,AAAA,AAAM8C,AAAmBtD;AAAzB,AACE,AAACC,AACC,AAAAC,AAAW,AAAA,AAAMF;AAAjB,AAAA,AAAAE;AAAA,AAAAA,AAASP;AAAT,AACE,AAAA;AAAmB4D,AAAEC;AAArB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAA8CD,AAAI,AAAAE,AAAA;AAAAC,AAAwB,AAAA,AAAOF;AAA/B,AAAA,AAAAC,AAAAC,AAAClD;;;;AAAnD,AACE,AACE,AAAA,AAAIb;AAAO,AAAA,AAACgE,AAAehE;;AAD7B,AAEE,AAAA,AAAIA;AAAO,AAAA,AAACgE,AAAkBhE;;AAFhC,AAGE,AAAA,AAAIA;AAAO,AAAA,AAACgE,AAAiBhE;;AAH/B,AAIE,AAAA,AAAGA;AAJL;;AAAA,AAAA;;;;;;;AAFJ;;;;AAUJ,AAAA,AAAMiE,AAAiB5D;AAAvB,AACE,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACC,AAAkC,AAAA,AAAA,AAAMD,AAAwB,AAAA,AAAA,AAAMA;;AAEzE,AAAA,AAAM6D,AAAkB7D;AAAxB,AACE,AAAA,AAAQ,AAAA,AAAMA;AACZ,AAAM8D,AAAO,AAAA,AAAA,AAAM9D;AACb+D,AAAO,AAAA,AAAA,AAAI,AAAA,AAACC,AAAEF;AADpB,AAEE,AAAC7D,AAAa,AAAK8D,AAAO,AAAAE,AAAA;AAAAC,AAAuB,AAAA,AAAMlE;AAA7B,AAAA,AAAAiE,AAAAC,AAAC1D;;;AAC7B,AAAA,AAAA,AAAA,AAAC2D;;;AA2BL,AAAA,AAAMC,AAAahE,AAASC;AAA5B,AAAA;AAEE,AAAI,AAAA,AAAMA,AAAe,AAAA,AAAMD;;AAIjC,AAAA,AAAMiE,AAAwBrE;AAA9B,AAAosE,AASiGD,AAAkCE,AAIpB9C,AAAed,AAAsCyD,AAC3C3C,AAAed,AACVc,AAAe1B,AAAsCqE,AACvDvC,AAAa9B,AACd8B,AAAa9B,AACV8B,AAAalB,AACzBkB,AAAamB,AACVvB,AAAe1B,AAAsCqE,AAC9C3C,AAAeb,AACPa,AAAeb,AACnBa,AAAeuB,AACjBvB,AAAed,AACNc,AAAeuB,AACDvB,AAAed,AACnDE,AAC0BmC,AACZvB,AAAed,AACnBc,AAAed;AAO/I,AAAA,AAAM6D,AAAkB7E;AAAxB,AACE,AAAA8E,AAAM9E;AAAN,AAAA,AAAA8E;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;;AAKE9E;;;;AAEJ,AAAA,AAAM+E,AAAyBC,AAAcC;AAA7C,AACE,AAAMC,AAAW,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAC1B,AAQC,AAAA,AAAC2B,AAAQ,AAAAC,AAAA,AAAAC;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAD,AAAAA;;AAAA,AAAA,AAAAE,AAAA,AAAAC,AAAAH;AAAA,AAAA,AAAAE;AAAA,AAAA,AAAAF,AAAAE;AAAA,AAAA,AAAA,AAAAE,AAAAJ;AAAA,AAAAK,AA6tEqB,AAAA0Q,AAAA/Q;AA7tErBM,AAAA,AAAAlD,AAAAiD;AAAAE,AAAA,AAAAC,AAAAF;AAAA,AAAA,AAAA,AAAA,AAAAG,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAH;AAAA,AAAA,AAAAI,AAAAL,AAAAI,AAAMS;AAAN,AAAA,AAAA,AAAAP,AAAAJ,AAAA,AAAqB,AAAChE,AAAQ2E,AAAG,AAACvE,AAAOC,AAAE,AAACuE,AAAI,AAAC5E,AAAQ2E,AAAGvB;;AAA5D,AAAA,AAAAc,AAAA;;;;AAAA;;;;;AAAA,AAAAG,AAAA,AAAAC,AAAAN,AAAA,AAAAO,AAAA,AAAAC,AAAAf;;AAAA,AAAAY,AAAA,AAAAC,AAAAN,AAAA;;;AAAA,AAAA,AAAAhB,AAAAS,AAAMkB;AAAN,AAAA,AAAAF,AAAA,AAAA,AAAAF,AAAA,AAAAG,AAAAjB,AAAqB,AAACzD,AAAQ2E,AAAG,AAACvE,AAAOC,AAAE,AAACuE,AAAI,AAAC5E,AAAQ2E,AAAGvB;;;AAA5D;;;;AAAA,AAAA;;AAAA,AAAA,AAAAI,AAAQH;;AARpC,AASE,AAACwB,AAAKzB,AAAcE;;AAGxB,AAAA,AAAKwB;AAEL,AAAA,AAAMC;AAAN,AACE,AAAA,AAAApF,AAAMsF,AAAW,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAACpF,AAAAA,AAAAA;;AAAlB,AAAAH,AACMwF,AAAW,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAACtF,AAAAA,AAAAA;;AACZuF,AAAqB,AAACC,AAAM,AAAAC,AAAoC,AAACvF,AAAQmF;AAA7CK,AAAA,AAAA7F,AAAE,AAAA8F,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAAC3F,AAAAA,AAAAA;;AAAH,AAAA,AAAA0F,AAAAA,AAAAD,AAAAC,AAAAD;AAAP,AAAA,AAAA,AAAA;AACrBG,AAAQ,AAAA,AAAA/F,AAAC8C,AAAG,AAAAkD,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAAC7F,AAAAA,AAAAA;AAAL;AACR8F,AAAoB,AAAA,AAACE;AAADD;AAAA,AAAS,AAACpD,AAAE,AAAA,AAAAoD,AAAeV;;AAAWF;AAE1Dc,AAAmB,AAAI,AAAAC,AAAK,AAAKN;AAAV,AAAA,AAAAM;AAAA,AAAArG,AAAoB,AAAAsG,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAACnG,AAAAA,AAAAA;;;AAArBkG;;AAAgF,AAAA,AAACF;AAADI;AAAA,AAAS,AAAA,AAACC,AAAK,AAAA,AAAAD;;AAAeN,AAAqBA;AANhK,AAAAjG,AAOMyG,AAAa,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAACvG,AAAAA,AAAAA;;AACdwG,AAAc,AAAA,AAAI,AAAA,AAACH,AAAY,AAAA,AAAA,AAACC,AAAAA,AAAAA,AAAgB,AAAA,AAAA,AAACA,AAAAA,AAAAA;AACjDG,AAAc,AAAA,AAAI,AAAA,AAACJ,AAAY,AAAA,AAAA,AAACC,AAAAA,AAAAA,AAAgB,AAAA,AAAA,AAACA,AAAAA,AAAAA;AACjDI,AAAc,AAAA,AAAI,AAAA,AAACL,AAAY,AAAA,AAAA,AAACC,AAAAA,AAAAA,AAAgB,AAAA,AAAA,AAACA,AAAAA,AAAAA;AACjDK,AAAoB,AAAA,AAAA,AAAC/F,AAAgB4F,AAAcC,AAAcC,AAAe,AAAA,AAAC5B,AAAQ8B;AACzFC,AAAiB,AAAA,AAACpD,AAAQ,AAAAC,AAAA;AAAAoD;AAAA,AAAA,AAAAlD,AAAA,AAAA;;AAAA,AAAA,AAAAkD,AAAAA;;AAAA,AAAA,AAAAjD,AAAA,AAAAC,AAAAgD;AAAA,AAAA,AAAAjD;AAAA,AAAA,AAAAiD,AAAAjD;AAAA,AAAA,AAAA,AAAAE,AAAA+C;AAAA,AAAA9C,AA0sEiB,AAAA0Q,AAAA5N;AA1sEjB7C,AAAA,AAAAlD,AAAAiD;AAAA+C,AAAA,AAAA5C,AAAAF;AAAA,AAAA,AAAA,AAAA,AAAA+C,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAA/C;AAAA,AAAA,AAAAI,AAAAL,AAAAgD,AAAME;AAAN,AAAA,AAAA,AAAA5C,AAAAyC,AAAyE,AAAC9D,AAAAA,AAAAA,AAAciE,AAAAA;;AAAxF,AAAA,AAAAF,AAAA;;;;AAAA;;;;;AAAA,AAAAzC,AAAA,AAAAC,AAAAuC,AAAA,AAAAE,AAAA,AAAAvC,AAAAoC;;AAAA,AAAAvC,AAAA,AAAAC,AAAAuC,AAAA;;;AAAA,AAAA,AAAA7D,AAAA4D,AAAMI;AAAN,AAAA,AAAAvC,AAAA,AAAAsC,AAAA,AAAArC,AAAAkC,AAAyE,AAAC7D,AAAAA,AAAAA,AAAciE,AAAAA;;;AAAxF;;;;;AAAA,AAAA;;;AAAA,AAAA,AAAAxD,AAAQ,AAAA,AAAA,AAAC9C,AAAOC,AAAM2F,AAAcC,AAAcC;;AAC5ES,AAAU,AAAA,AAACC,AAAeP;AAC1BQ,AAAY,AAACD,AAAKE,AAAQH;AAC1BI,AAAQ,AAACxC,AAAK,AAACyC,AAAQ,AAACC,AAAMC,AAAK,AAAA,AAACC,AAAQ,AAAClJ,AAAK0E,AAAiB,AAACD,AAAMmE,AAAe,AAACzC,AAAKyC,AAAepB,AAAoBV;AAfxI,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAkBMqC;AAlBN1C;AAAA,AAqC0B,AAAA8C,AAAA,AAAA,AAAA9C;AAAA,AAAA,AAAA8C,AAAAA,AAACC,AAAAA,AAAAA;;AArC3B,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAoByBnJ,AAC4B+H,AACH,AAAA,AAAA,AAAA,AAAA,AAACO,AAAKnE,AACD,AAAA,AAAA,AAAA,AAAA,AAACmE,AAAKnE,AACT,AAAA,AAAA,AAAA,AAACmE,AAAKnE,AACH,AAAA,AAAA,AAACmE,AAAKnE,AACN,AAAA,AAAA,AAAA,AAACmE,AAAKnE,AAE1B,AAAA,AAAA,AAAI2C,AAA6D,AAAA,AAAA,AAAA,AAAA,AAAA,AAACwB,AAAKnE,AAChD,AAACmE,AAAKnE,AAAc,AAAA,AAACQ,AAAQ,AAAA,AAAA,AAAA,AAAA,AAAA,AAACoE,AAAuBlB,AACtF,AAAKf,AACL,AAAKA,AACL,AAAKA,AACL,AAAA,AAAIA,AAAQ,AAAA,AAAK,AAAC7E,AAAM,AAAC+G,AAAS,AAAChD,AAAI,AAAC5B,AAAMmE,AAAavB,AAG3D,AAAA,AAAA,AAAAjG,AAAI+F,AAAY,AAAAmC,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAAC/H,AAAAA,AAAAA;AAjBjBuH,AAgBA,AAAA,AAAI3B,AAAQuB;;AAQvC,AAAA,AAAMe;AAAN,AACE,AAAA,AAAArI,AACMuI,AAAmB,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAACrI,AAAAA,AAAAA;;AAD1B,AAAAH,AAEMyI,AAAqB,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAACvI,AAAAA,AAAAA;;AACtBwI,AAAqB,AAACpB,AAAKE,AAAQgB;AAHzC,AAAAzI,AAIM0D,AAAa,AAAAkF,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAACzI,AAAAA,AAAAA;;AAJpB,AAAAH,AAKM6I,AAAgB,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAAC3I,AAAAA,AAAAA;;AALvB,AAAAH,AAMM+I,AAAkB,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAAC7I,AAAAA,AAAAA;;AANzB,AAAAH,AAOMiJ,AAAiB,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAAC/I,AAAAA,AAAAA;;AAClBgJ,AAAS,AAAA,AAAA,AAACC,AAAOhG,AAAe6F;AARtC,AAAAjJ,AASMqJ,AAAiB,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAACnJ,AAAAA,AAAAA;;AAClBoJ,AAAS,AAAA,AAAA,AAACH,AAAOhG,AAAeiG;AAVtC,AAWMG;AACAzD,AAAQ,AAAA,AAAA/F,AAAC8C,AAAG,AAAA2G,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAACtJ,AAAAA,AAAAA;AAAL;AAZd,AAAAH,AAaMyG,AAAa,AAAAiD,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAACvJ,AAAAA,AAAAA;;AACdwG,AAAc,AAAA,AAAI,AAAA,AAACH,AAAY,AAAA,AAAA,AAACC,AAAAA,AAAAA,AAAgB,AAAA,AAAA,AAACA,AAAAA,AAAAA;AACjDG,AAAc,AAAA,AAAI,AAAA,AAACJ,AAAY,AAAA,AAAA,AAACC,AAAAA,AAAAA,AAAgB,AAAA,AAAA,AAACA,AAAAA,AAAAA;AACjDI,AAAc,AAAA,AAAI,AAAA,AAACL,AAAY,AAAA,AAAA,AAACC,AAAAA,AAAAA,AAAgB,AAAA,AAAA,AAACA,AAAAA,AAAAA;AACjDO,AAAiB,AAAA,AAACpD,AAAQ,AAAAC,AAAA;AAAA8F;AAAA,AAAA,AAAA5F,AAAA,AAAA;;AAAA,AAAA,AAAA4F,AAAAA;;AAAA,AAAA,AAAA3F,AAAA,AAAAC,AAAA0F;AAAA,AAAA,AAAA3F;AAAA,AAAA,AAAA2F,AAAA3F;AAAA,AAAA,AAAA,AAAAE,AAAAyF;AAAA,AAAAxF,AAypEiB,AAAA0Q,AAAAlL;AAzpEjBvF,AAAA,AAAAlD,AAAAiD;AAAAyF,AAAA,AAAAtF,AAAAF;AAAA,AAAA,AAAA,AAAA,AAAAyF,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAzF;AAAA,AAAA,AAAAI,AAAAL,AAAA0F,AAAMxC;AAAN,AAAA,AAAA,AAAA5C,AAAAmF,AAAyE,AAACxG,AAAAA,AAAAA,AAAciE,AAAAA;;AAAxF,AAAA,AAAAwC,AAAA;;;;AAAA;;;;;AAAA,AAAAnF,AAAA,AAAAC,AAAAiF,AAAA,AAAAE,AAAA,AAAAjF,AAAA8E;;AAAA,AAAAjF,AAAA,AAAAC,AAAAiF,AAAA;;;AAAA,AAAA,AAAAvG,AAAAsG,AAAMtC;AAAN,AAAA,AAAAvC,AAAA,AAAAgF,AAAA,AAAA/E,AAAA4E,AAAyE,AAACvG,AAAAA,AAAAA,AAAciE,AAAAA;;;AAAxF;;;;;AAAA,AAAA;;;AAAA,AAAA,AAAAxD,AAAQ,AAAA,AAAA,AAAC9C,AAAOC,AAAM2F,AAAcC,AAAcC;;AAC5ES,AAAU,AAAA,AAACC,AAAeP;AAC1BQ,AAAY,AAACD,AAAKE,AAAQH;AAC1ByC,AAAa,AAAA,AAAC9E;AAAD+E;AAAA,AAAM,AAAAA,AAAC/H,AAAQ,AAAAgI,AAAC,AAAC5J,AAAQ,AAAA,AAAA,AAAC+I,AAAOhG,AAAe6F;AAAjC,AAAA,AAAAgB,AAAAA,AAAAD,AAAAC,AAAAD;;;AAAkEzB;AAC9F2B,AAAM;AAAKC;AAAL,AAAW,AAAK,AAACC,AAAOC,AAAM,AAACpF,AAAIkF,AAAKxB;;;AAC9C2B,AAAuB,AAAI,AAAAjE,AAAK,AAAKN;AAAV,AAAA,AAAAM;AAAmBwC;;AAAnBxC;;AAAmC,AAACF,AAAO+D,AAAMH,AAAcA;AAC1FQ,AAAY,AAAC/G,AAAwB,AAACmE,AACxB,AAACC,AAAMC,AAAK,AAAA,AAACC,AAAQ,AAAClJ,AAAK0E,AAAiB,AAACD,AAAMmE,AAAe,AAACzC,AAAKyC,AACxE8C,AAAwB5G;AAzB5C,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AA2BMqE;AA3BNO;AAAA,AA8C0B,AAAAyC,AAAA,AAAA,AAAAzC;AAAA,AAAA,AAAAyC,AAAAA,AAAC3C,AAAAA,AAAAA;;AAhBF,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAI,AAAA,AAACtF,AAAEiG,AAEuB/B,AACjB,AAAA,AAAkB,AAACwD,AAAKvB,AACxB,AAAA,AAACrF,AAAQ,AAAAC,AAAA,AAKtB,AAAKkC;AALiB0E;AAAA,AAAA,AAAA1G,AAAA,AAAA;;AAAA,AAAA,AAAA0G,AAAAA;;AAAA,AAAA,AAAAzG,AAAA,AAAAC,AAAAwG;AAAA,AAAA,AAAAzG;AAAA,AAAA,AAAAyG,AAAAzG;AAAA,AAAA,AAAA,AAAAE,AAAAuG;AAAA,AAAAtG,AAwoEE,AAAA0Q,AAAApK;AAxoEFrG,AAAA,AAAAlD,AAAAiD;AAAAuG,AAAA,AAAApG,AAAAF;AAAA,AAAA,AAAA,AAAA,AAAAuG,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAvG;AAAA,AAAA,AAAAI,AAAAL,AAAAwG,AAAM3F;AAAN,AAAA,AAAyB,AAAA,AAAC6F,AAAO7F,AAAGyD;AAApC,AAAA,AAAAhE,AAAAiG,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAmE1F,AAAYA,AAASwE,AAAiDjJ,AAAe4I;;AAAxJ,AAAA,AAAAwB,AAAA;;;;AAAA,AAAA,AAAAA,AAAA;;;;;AAAA;;;;;AAAA,AAAAjG,AAAA,AAAAC,AAAA+F,AAAA,AAAAE,AAAA,AAAA/F,AAAA4F;;AAAA,AAAA/F,AAAA,AAAAC,AAAA+F,AAAA;;;AAAA,AAAA,AAAArH,AAAAoH,AAAMzF;AAAN,AAAA,AAAyB,AAAA,AAAC6F,AAAO7F,AAAGyD;AAApC,AAAA3D,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA8F,AAAA,AAAA7F,AAAA0F,AAAmEzF,AAAYA,AAASwE,AAAiDjJ,AAAe4I;;AAAxJ,AAAA,AAAApE,AAAA0F;;;;;;AAAA;;;;;AAAA,AAAA;;;AAAA,AAAA,AAAA5G,AAAQH;AAlCvD,AA6ByBzE,AACA,AAAA,AAAA,AAAA,AAAA,AAMa,AAAA,AAAA,AAAA,AAAA,AAACsI,AAAKnE,AAInB,AAAK2C,AACL,AAAKA,AACL,AAAA,AAAIA,AAAQ,AAAA,AAAK,AAAC7E,AAAM,AAAC+G,AAAS,AAAChD,AAAI,AAAC5B,AAAMmE,AAAa+C,AAG3D,AAAA,AAAA,AAAAvK,AAAI+F,AAAY,AAAA+E,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAAC3K,AAAAA,AAAAA;AAjBjBoK,AAgBA,AAAA,AAAIxE,AAAQuB;;AAoBvC,AAAA,AAAM0D;AAAN,AACE,AACMC,AAAM,AAAA,AAAa,AAAC5H,AAAM,AAAA,AAAA6H,AAAC/E;AAAD,AAAS,AAAA,AAAAnG,AAAC8C,AAAE,AAAA,AAAAoI,AAAS,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAAChL,AAAAA,AAAAA;;AAA4CiL;AADlG,AAAApL,AAEMuI,AAAmB,AAAA8C,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAAClL,AAAAA,AAAAA;;AACpBmL,AAAe,AAACjI,AAAM4H;AACtBvH,AAAW,AAACqB,AAAKkG;AACjBM,AAAY,AAAChE,AAAKE,AAAQ/D;AALhC,AAAA1D,AAMMwL,AAAa,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAACtL,AAAAA,AAAAA;;AACdgJ,AAAS,AAAA,AAAA,AAACC,AAAOhG,AAAeoI;AAPtC,AAQMhC;AACAzD,AAAQ,AAAA,AAAA/F,AAAC8C,AAAG,AAAA4I,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAACvL,AAAAA,AAAAA;AAAL;AATd,AAAAH,AAUMyG,AAAa,AAAAkF,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAACxL,AAAAA,AAAAA;;AACdwG,AAAc,AAAA,AAAI,AAAA,AAACH,AAAY,AAAA,AAAA,AAACC,AAAAA,AAAAA,AAAgB,AAAA,AAAA,AAACA,AAAAA,AAAAA;AACjDG,AAAc,AAAA,AAAI,AAAA,AAACJ,AAAY,AAAA,AAAA,AAACC,AAAAA,AAAAA,AAAgB,AAAA,AAAA,AAACA,AAAAA,AAAAA;AACjDI,AAAc,AAAA,AAAI,AAAA,AAACL,AAAY,AAAA,AAAA,AAACC,AAAAA,AAAAA,AAAgB,AAAA,AAAA,AAACA,AAAAA,AAAAA;AACjDO,AAAiB,AAAA,AAACpD,AAAQ,AAAAC,AAAA;AAAA+H;AAAA,AAAA,AAAA7H,AAAA,AAAA;;AAAA,AAAA,AAAA6H,AAAAA;;AAAA,AAAA,AAAA5H,AAAA,AAAAC,AAAA2H;AAAA,AAAA,AAAA5H;AAAA,AAAA,AAAA4H,AAAA5H;AAAA,AAAA,AAAA,AAAAE,AAAA0H;AAAA,AAAAzH,AA2lEiB,AAAA0Q,AAAAjJ;AA3lEjBxH,AAAA,AAAAlD,AAAAiD;AAAA0H,AAAA,AAAAvH,AAAAF;AAAA,AAAA,AAAA,AAAA,AAAA0H,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAA1H;AAAA,AAAA,AAAAI,AAAAL,AAAA2H,AAAMzE;AAAN,AAAA,AAAA,AAAA5C,AAAAoH,AAAyE,AAACzI,AAAAA,AAAAA,AAAciE,AAAAA;;AAAxF,AAAA,AAAAyE,AAAA;;;;AAAA;;;;;AAAA,AAAApH,AAAA,AAAAC,AAAAkH,AAAA,AAAAE,AAAA,AAAAlH,AAAA+G;;AAAA,AAAAlH,AAAA,AAAAC,AAAAkH,AAAA;;;AAAA,AAAA,AAAAxI,AAAAuI,AAAMvE;AAAN,AAAA,AAAAvC,AAAA,AAAAiH,AAAA,AAAAhH,AAAA6G,AAAyE,AAACxI,AAAAA,AAAAA,AAAciE,AAAAA;;;AAAxF;;;;;AAAA,AAAA;;;AAAA,AAAA,AAAAxD,AAAQ,AAAA,AAAA,AAAC9C,AAAOC,AAAM2F,AAAcC,AAAcC;;AAC5ES,AAAU,AAAA,AAACC,AAAeP;AAC1BQ,AAAY,AAACD,AAAKE,AAAQH;AAC1ByC,AAAa,AAAA,AAAC9E;AAAD+G;AAAA,AAAM,AAAAA,AAAC/J,AAAQ,AAAAgK,AAAC,AAAC5L,AAAQ,AAAA,AAAA,AAAC+I,AAAOhG,AAAeoI;AAAjC,AAAA,AAAAS,AAAAA,AAAAD,AAAAC,AAAAD;;;AAA8DzD;AAC1F2D,AAAc;AAAK/B;AAAL,AAAW,AAACgC,AACC;AAAKC,AAAUpH;AAAf,AAAkB,AAACqH,AAAMD,AAAUpH,AAAE,AAAG,AAACA,AAAAA,AAAAA,AAAEoH,AAAAA,AAAW,AAAAE,AAAC,AAACjM,AAAQiL;AAAV,AAAA,AAAAgB,AAAAA,AAAAA,AAA0BF,AAAAA;;;AAChFjC,AACAoB;;;AAC3BgB,AAAkB,AAACtH,AAAIiH,AAAcnC;AACrCyC,AAAU,AAACC,AAAwB,AAAA,AAAQ,AAACpJ,AAAM,AAAA,AAAC8C;AAADuG;AAAA,AAAS,AAAA,AAAA1M,AAAC8C,AAAE,AAAA,AAAA4J,AAAS,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAACxM,AAAAA,AAAAA;;;AAAgDyM;AACxH1C,AAAM;AAAKC;AAAL,AAAW,AAACU,AAAK;AAAKpM;AAAL,AAAQ,AAAI,AAAGA,AAAE,AAAG+N,AAAY,AAAG/N,AAAE+N;;AAAa,AAACvH,AAAIkF,AAAKoB;;;AACnFsB,AAA0B,AAAC1G,AAAO+D,AAAMqC;AACxC7E,AAAQ,AAAClE,AAAwB,AAACmE,AACK,AAACC,AAAMC,AAAK,AAAA,AAACC,AAAQ,AAAClJ,AAAK0E,AAAiB,AAACD,AAAMmE,AAAe,AAACzC,AAAKyC,AACxEqF,AAA2BnJ;AA5BxE,AA8BE,AAACoJ,AAAQvB;;AA9BX,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AA+BMxD,AAKiDf,AACjB,AAAA,AAAA,AAAkB,AAACwD,AAAKgB,AAAoBF,AAC5C,AAAA,AAAC1H,AAAQ,AAAAC,AAAA,AAItB,AAAKkC;AAJiBgH;AAAA,AAAA,AAAAhJ,AAAA,AAAA;;AAAA,AAAA,AAAAgJ,AAAAA;;AAAA,AAAA,AAAA/I,AAAA,AAAAC,AAAA8I;AAAA,AAAA,AAAA/I;AAAA,AAAA,AAAA+I,AAAA/I;AAAA,AAAA,AAAA,AAAAE,AAAA6I;AAAA,AAAA5I,AAmkEE,AAAA0Q,AAAA9H;AAnkEF3I,AAAA,AAAAlD,AAAAiD;AAAA6I,AAAA,AAAA1I,AAAAF;AAAA,AAAA,AAAA,AAAA,AAAA6I,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAA7I;AAAA,AAAA,AAAAI,AAAAL,AAAA8I,AAAMjI;AAAN,AAAA,AAAA,AAAAP,AAAAuI,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAA6BhI,AAAYA,AAASwE,AAAiDjJ,AAAe4I;;AAAlH,AAAA,AAAA8D,AAAA;;;;AAAA;;;;;AAAA,AAAAvI,AAAA,AAAAC,AAAAqI,AAAA,AAAAE,AAAA,AAAArI,AAAAkI;;AAAA,AAAArI,AAAA,AAAAC,AAAAqI,AAAA;;;AAAA,AAAA,AAAA3J,AAAA0J,AAAM/H;AAAN,AAAA,AAAAF,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAoI,AAAA,AAAAnI,AAAAgI,AAA6B/H,AAAYA,AAASwE,AAAiDjJ,AAAe4I;;;AAAlH;;;;;AAAA,AAAA;;;AAAA,AAAA,AAAAtF,AAAQH;AAtCvD,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAwCoG,AAAAyJ,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAAC/J,AAAAA,AAAAA;AAxCrG,AAgCyBsE,AACAzI,AAUA,AAAK8G,AACL,AAAKA,AACL,AAAA,AAAIA,AAAQ,AAAA,AAAK,AAAC7E,AAAM,AAAC+G,AAAS,AAAChD,AAAI,AAAC5B,AAAMmE,AAAaE,AAE3D,AAAA,AAAI3B,AAAQuB;;AAIvC,AAAA,AAAM8F;AAAN,AACE,AACMC,AAAc,AAAA,AAACzJ,AAAQ,AAAAC,AAAA,AAAAyJ;AAAA,AAAA,AAAAvJ,AAAA,AAAA;AAAA,AAAA,AAAAuJ,AAAAA;;AAAA,AAAA,AAAAtJ,AAAA,AAAAC,AAAAqJ;AAAA,AAAA,AAAAtJ;AAAA,AAAA,AAAAsJ,AAAAtJ;AAAA,AAAA,AAAA,AAAAE,AAAAoJ;AAAA,AAAAnJ,AAojEoB,AAAA0Q,AAAAvH;AApjEpBlJ,AAAA,AAAAlD,AAAAiD;AAAAoJ,AAAA,AAAAjJ,AAAAF;AAAA,AAAA,AAAA,AAAA,AAAAoJ,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAApJ;AAAA,AAAA,AAAAI,AAAAL,AAAAqJ,AAAMxI;AAAN,AAAA,AAAA,AAAAP,AAAA8I,AAAA,AAAA,AAAA,AAA4CvI,AAASA;;AAArD,AAAA,AAAAwI,AAAA;;;;AAAA;;;;;AAAA,AAAA9I,AAAA,AAAAC,AAAA4I,AAAA,AAAAE,AAAA,AAAA5I,AAAAyI;;AAAA,AAAA5I,AAAA,AAAAC,AAAA4I,AAAA;;;AAAA,AAAA,AAAAlK,AAAAiK,AAAMtI;AAAN,AAAA,AAAAF,AAAA,AAAA,AAAA,AAAA,AAAA2I,AAAA,AAAA1I,AAAAuI,AAA4CtI,AAASA;;;AAArD;;;;AAAA,AAAA;;AAAA,AAAA,AAAAnB,AAAA,AAAA7D,AAAS,AAAA0N,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAACvN,AAAAA,AAAAA;;;AACjCwN,AAAc,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAACzN,AAAAA,AAAAA;;AACfqF,AAAU,AAAAqI,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAAC1N,AAAAA,AAAAA;;AACXsG,AAAY,AAAAqH,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAAC3N,AAAAA,AAAAA;;AACb0I,AAAe,AAAAkF,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAAC5N,AAAAA,AAAAA;;AALtB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAOG6N,AACCC,AACYC,AAAa,AAAA,AAAA,AAAAlO,AAA8B,AAAAmO,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAAChO,AAAAA,AAAAA;AAT5D,AAAA,AAAA,AAAA,AAAA,AAAA,AAUgBiO,AACU,AAAA,AAACxK,AAAQ,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACoE,AACUkG,AACAM,AAAuBrJ,AAAsBwI;AAFxDU;AAAA,AAEqJ,AAAAI,AAAA,AAAA,AAAAJ;AAAA,AAAA,AAAAI,AAAAA,AAACrG,AAAAA,AAAAA;;AAFtJ,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAGWsG,AACAR,AACAM,AAAuBrJ,AAAsBK,AAAmB6H;AAL3EiB;AAAA,AAKqG,AAAAK,AAAA,AAAA,AAAAL;AAAA,AAAA,AAAAK,AAAAA,AAACvG,AAAAA,AAAAA;;AAC7F,AAAA,AAACxE,AAAQ,AAAAC,AAAA;AAAA+K;AAAA,AAAA,AAAA7K,AAAA,AAAA;;AAAA,AAAA,AAAA6K,AAAAA;;AAAA,AAAA,AAAA5K,AAAA,AAAAC,AAAA2K;AAAA,AAAA,AAAA5K;AAAA,AAAA,AAAA4K,AAAA5K;AAAA,AAAA,AAAA,AAAAE,AAAA0K;AAAA,AAAAzK,AAoiEJ,AAAA0Q,AAAAjG;AApiEIxK,AAAA,AAAAlD,AAAAiD;AAAA0K,AAAA,AAAAvK,AAAAF;AAAA,AAAA,AAAA,AAAA,AAAA0K,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAA1K;AAAA,AAAA,AAAAI,AAAAL,AAAA2K,AAAMG;AAAN,AAAA,AAAA,AAAAxK,AAAAoK,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAsBL,AAAuBrJ,AAAsB,AAAA,AAACgK,AAAS1I,AAAawI,AAAalI;AAAvGgI;AAAA,AAA0I,AAAAK,AAAA,AAAA,AAAAL,AAA4CE;AAA5C,AAAA,AAAAG,AAAAA,AAAChH,AAAAA,AAAAA;;;;AAA3I,AAAA,AAAA0G,AAAA;;;;AAAA;;;;;AAAA,AAAApK,AAAA,AAAAC,AAAAkK,AAAA,AAAAG,AAAA,AAAAnK,AAAA+J;;AAAA,AAAAlK,AAAA,AAAAC,AAAAkK,AAAA;;;AAAA,AAAA,AAAAxL,AAAAuL,AAAMK;AAAN,AAAA,AAAAnK,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAsB0J,AAAuBrJ,AAAsB,AAAA,AAACgK,AAAS1I,AAAawI,AAAalI;AAAvGgI;AAAA,AAA0I,AAAAM,AAAA,AAAA,AAAAN,AAA4CE;AAA5C,AAAA,AAAAI,AAAAA,AAACjH,AAAAA,AAAAA;;AAA3I,AAAA4G,AAAA,AAAAjK,AAAA6J;;;AAAA;;;;;AAAA,AAAA;;;AAAA,AAAA,AAAA/K,AAAQ,AAAA,AAAA,AAACqL;AAN3B,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAOWR,AACAY,AAAgBzG,AAAqE,AAAA,AAAA7I,AAAA,AAAC8C,AAAG6K;AARpGY;AAAA,AAQsI,AAAAgB,AAAA,AAAA,AAAAhB;AAAA,AAAA,AAAAgB,AAAAA,AAACnH,AAAAA,AAAAA;;AAnB1K,AAwBgBhD;;AAIlB,AAAA,AAAMoK;AAAN,AACE,AACMnC,AAAc,AAAA,AAACzJ,AAAQ,AAAAC,AAAA,AAAA4L;AAAA,AAAA,AAAA1L,AAAA,AAAA;AAAA,AAAA,AAAA0L,AAAAA;;AAAA,AAAA,AAAAzL,AAAA,AAAAC,AAAAwL;AAAA,AAAA,AAAAzL;AAAA,AAAA,AAAAyL,AAAAzL;AAAA,AAAA,AAAA,AAAAE,AAAAuL;AAAA,AAAAtL,AAuhEoB,AAAA0Q,AAAApF;AAvhEpBrL,AAAA,AAAAlD,AAAAiD;AAAAuL,AAAA,AAAApL,AAAAF;AAAA,AAAA,AAAA,AAAA,AAAAuL,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAvL;AAAA,AAAA,AAAAI,AAAAL,AAAAwL,AAAM3K;AAAN,AAAA,AAAA,AAAAP,AAAAiL,AAAA,AAAA,AAAA,AAA6C1K,AAASA;;AAAtD,AAAA,AAAA2K,AAAA;;;;AAAA;;;;;AAAA,AAAAjL,AAAA,AAAAC,AAAA+K,AAAA,AAAAE,AAAA,AAAA/K,AAAA4K;;AAAA,AAAA/K,AAAA,AAAAC,AAAA+K,AAAA;;;AAAA,AAAA,AAAArM,AAAAoM,AAAMzK;AAAN,AAAA,AAAAF,AAAA,AAAA,AAAA,AAAA,AAAA8K,AAAA,AAAA7K,AAAA0K,AAA6CzK,AAASA;;;AAAtD;;;;AAAA,AAAA;;AAAA,AAAA,AAAAnB,AAAA,AAAA7D,AAAU,AAAA6P,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAAC1P,AAAAA,AAAAA;;;AAClCwN,AAAc,AAAAmC,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAAC3P,AAAAA,AAAAA;;AACfsG,AAAY,AAAAsJ,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAAC5P,AAAAA,AAAAA;;AACbsI,AAAoB,AAAAuH,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAAC7P,AAAAA,AAAAA;;AACrB4I,AAAiB,AAAAkH,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAAC9P,AAAAA,AAAAA;;AAClB+P,AAAU,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAAChQ,AAAAA,AAAAA;;AACXiQ,AAAU,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAAClQ,AAAAA,AAAAA;;AACX0I,AAAe,AAAAyH,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAACnQ,AAAAA,AAAAA;;AARtB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAUG6N,AACCC,AACYC,AAAa,AAAA,AAAA,AAAAlO,AAA8B,AAAAuQ,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAACpQ,AAAAA,AAAAA;AAZ5D,AAAA,AAAA,AAAA,AAAA,AAAA,AAagBiO,AACU,AAAA,AAACxK,AAAQ,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACoE,AACSiG,AAA8BC,AACAA,AAE9BD,AAA8BO,AAAuBrJ,AAAsBwI;AAJrF6C;AAAA,AAIkL,AAAAI,AAAA,AAAA,AAAAJ;AAAA,AAAA,AAAAI,AAAAA,AAACxI,AAAAA,AAAAA;;AAJnL,AAAA,AAAA,AAAA,AAAA,AAAA,AAMwCoG,AAAuBrJ,AAAsB+K,AAAmBW;AANxGJ;AAAA,AAMyI,AAAAK,AAAA,AAAA,AAAAL;AAAA,AAAA,AAAAK,AAAAA,AAAC1I,AAAAA,AAAAA;;AAN1I,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AASUsG,AACAR,AACA6C,AAAsB5L,AAAsCsD,AAA6B4E;AAXnGqD;AAAA,AAW6H,AAAAM,AAAA,AAAA,AAAAN;AAAA,AAAA,AAAAM,AAAAA,AAAC5I,AAAAA,AAAAA;;AACtH,AAAA,AAACxE,AAAQ,AAAAC,AAAA;AAAAoN;AAAA,AAAA,AAAAlN,AAAA,AAAA;;AAAA,AAAA,AAAAkN,AAAAA;;AAAA,AAAA,AAAAjN,AAAA,AAAAC,AAAAgN;AAAA,AAAA,AAAAjN;AAAA,AAAA,AAAAiN,AAAAjN;AAAA,AAAA,AAAA,AAAAE,AAAA+M;AAAA,AAAA9M,AA8/DH,AAAA0Q,AAAA5D;AA9/DG7M,AAAA,AAAAlD,AAAAiD;AAAA+M,AAAA,AAAA5M,AAAAF;AAAA,AAAA,AAAA,AAAA,AAAA+M,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAA/M;AAAA,AAAA,AAAAI,AAAAL,AAAAgN,AAAMlC;AAAN,AAAA,AAAA,AAAAxK,AAAAyM,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAsB1C,AAAuBrJ,AAAsB,AAAA,AAACgK,AAAS1I,AAAawI,AAAalI;AAAvGqK;AAAA,AAA0I,AAAAE,AAAA,AAAA,AAAAF,AAA8CnC;AAA9C,AAAA,AAAAqC,AAAAA,AAAClJ,AAAAA,AAAAA;;;;AAA3I,AAAA,AAAA+I,AAAA;;;;AAAA;;;;;AAAA,AAAAzM,AAAA,AAAAC,AAAAuM,AAAA,AAAAG,AAAA,AAAAxM,AAAAoM;;AAAA,AAAAvM,AAAA,AAAAC,AAAAuM,AAAA;;;AAAA,AAAA,AAAA7N,AAAA4N,AAAMhC;AAAN,AAAA,AAAAnK,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAsB0J,AAAuBrJ,AAAsB,AAAA,AAACgK,AAAS1I,AAAawI,AAAalI;AAAvGqK;AAAA,AAA0I,AAAAG,AAAA,AAAA,AAAAH,AAA8CnC;AAA9C,AAAA,AAAAsC,AAAAA,AAACnJ,AAAAA,AAAAA;;AAA3I,AAAAiJ,AAAA,AAAAtM,AAAAkM;;;AAAA;;;;;AAAA,AAAA;;;AAAA,AAAA,AAAApN,AAAQ,AAAA,AAAA,AAACqL;AAZ1B,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAaUR,AACAY,AAAgBzG,AAAqE,AAAA,AAAA7I,AAAA,AAAC8C,AAAG6K;AAdnGgD;AAAA,AAcqI,AAAAa,AAAA,AAAA,AAAAb;AAAA,AAAA,AAAAa,AAAAA,AAACpJ,AAAAA,AAAAA;;AA5BzK,AAgCgBC;;AAGlB,AAAA,AAAMoJ;AAAN,AACE,AACM9D,AAAc,AAAA+D,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAACvR,AAAAA,AAAAA;;AACfsG,AAAY,AAAAkL,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAACxR,AAAAA,AAAAA;;AACbyR,AAA0B,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAAC1R,AAAAA,AAAAA;;AAC3B2R,AAAM,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAAC5R,AAAAA,AAAAA;;AACPqM,AAAU,AAAAwF,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAAC7R,AAAAA,AAAAA;;AALjB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAOG6N,AACCC,AACYC,AAAa,AAAA,AAAA,AAAAlO,AAA8B,AAAAiS,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAAC9R,AAAAA,AAAAA;AAT5D,AAAA,AAAA,AAAA,AAAA,AAAA,AAUgBiO,AACU,AAAA,AAACxK,AAAQ,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACkE,AACSmG,AAA8BC,AAA8CA,AAAuCA,AACnHD,AAA8BO,AAAuBrJ,AAAsBwI;AAFrFuE;AAAA,AAEkL,AAAAI,AAAA,AAAA,AAAAJ;AAAA,AAAA,AAAAI,AAAAA,AAAClK,AAAAA,AAAAA;;AAFnL,AAAA,AAAA,AAAA,AAAA,AAAA,AAGwCoG,AAAuBrJ,AAAsB2M,AAAeS;AAHpGJ;AAAA,AAG+I,AAAAK,AAAA,AAAA,AAAAL;AAAA,AAAA,AAAAK,AAAAA,AAACpK,AAAAA,AAAAA;;AAHhJ,AAAA,AAAA,AAAA,AAAA,AAAA,AAIwCoG,AAAuBrJ,AAAsBqH,AAAmBI;AAJxGwF;AAAA,AAIuJ,AAAAK,AAAA,AAAA,AAAAL;AAAA,AAAA,AAAAK,AAAAA,AAACrK,AAAAA,AAAAA;;AAJxJ,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAMUsG,AACAR,AACAM,AAAuBrJ,AAAsByM,AAAmCxG;AAR1FiH;AAAA,AAQwI,AAAAK,AAAA,AAAA,AAAAL;AAAA,AAAA,AAAAK,AAAAA,AAACtK,AAAAA,AAAAA;;AACjI,AAAA,AAACxE,AAAQ,AAAAC,AAAA;AAAA8O;AAAA,AAAA,AAAA5O,AAAA,AAAA;;AAAA,AAAA,AAAA4O,AAAAA;;AAAA,AAAA,AAAA3O,AAAA,AAAAC,AAAA0O;AAAA,AAAA,AAAA3O;AAAA,AAAA,AAAA2O,AAAA3O;AAAA,AAAA,AAAA,AAAAE,AAAAyO;AAAA,AAAAxO,AAg+DH,AAAA0Q,AAAAlC;AAh+DGvO,AAAA,AAAAlD,AAAAiD;AAAAyO,AAAA,AAAAtO,AAAAF;AAAA,AAAA,AAAA,AAAA,AAAAyO,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAzO;AAAA,AAAA,AAAAI,AAAAL,AAAA0O,AAAM5D;AAAN,AAAA,AAAA,AAAAxK,AAAAmO,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAsBpE,AAAuBrJ,AAAsB,AAAA,AAACgK,AAAS1I,AAAawI,AAAalI;AAAvG+L;AAAA,AAA0I,AAAAE,AAAA,AAAA,AAAAF,AAA0C7D;AAA1C,AAAA,AAAA+D,AAAAA,AAAC5K,AAAAA,AAAAA;;;;AAA3I,AAAA,AAAAyK,AAAA;;;;AAAA;;;;;AAAA,AAAAnO,AAAA,AAAAC,AAAAiO,AAAA,AAAAG,AAAA,AAAAlO,AAAA8N;;AAAA,AAAAjO,AAAA,AAAAC,AAAAiO,AAAA;;;AAAA,AAAA,AAAAvP,AAAAsP,AAAM1D;AAAN,AAAA,AAAAnK,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAsB0J,AAAuBrJ,AAAsB,AAAA,AAACgK,AAAS1I,AAAawI,AAAalI;AAAvG+L;AAAA,AAA0I,AAAAG,AAAA,AAAA,AAAAH,AAA0C7D;AAA1C,AAAA,AAAAgE,AAAAA,AAAC7K,AAAAA,AAAAA;;AAA3I,AAAA2K,AAAA,AAAAhO,AAAA4N;;;AAAA;;;;;AAAA,AAAA;;;AAAA,AAAA,AAAA9O,AAAQ,AAAA,AAAA,AAACqL;AApB7D,AAsBgBlE;;AAOlB,AAAA,AAAMkI;AAAN,AACE,AAAA,AAAAlT,AAAMsF,AAAW,AAAA6N,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAAChT,AAAAA,AAAAA;;AAAlB,AAAAH,AACM0D,AAAY,AAAA0P,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAACjT,AAAAA,AAAAA;;AADnB,AAAAH,AAEMqT,AAAQ,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAACnT,AAAAA,AAAAA;;AACTuH,AAAQ,AAAA,AAAC9D,AAAQ,AAAAC,AAAA;AAAA0P;AAAA,AAAA,AAAAxP,AAAA,AAAA;;AAAA,AAAA,AAAAwP,AAAAA;;AAAA,AAAA,AAAAvP,AAAA,AAAAC,AAAAsP;AAAA,AAAA,AAAAvP;AAAA,AAAA,AAAAuP,AAAAvP;AAAA,AAAA,AAAA,AAAAE,AAAAqP;AAAA,AAAApP,AAm9D0B,AAAA0Q,AAAAtB;AAn9D1BnP,AAAA,AAAAlD,AAAAiD;AAAAqP,AAAA,AAAAlP,AAAAF;AAAA,AAAA,AAAA,AAAA,AAAAqP,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAArP;AAAA,AAAA,AAAAI,AAAAL,AAAAsP,AAAMzO;AAAN,AAAA,AAAA,AAAAP,AAAA+O,AACE,AAAA,AAAA,AAACvR,AACmB+C,AAClB,AAAA,AAACpB,AAAQ,AAAAC,AAAA;AAAA8P;AAAA,AAAA,AAAA5P,AAAA,AAAA;;AAAA,AAAA,AAAA4P,AAAAA;;AAAA,AAAA,AAAA3P,AAAA,AAAAC,AAAA0P;AAAA,AAAA,AAAA3P;AAAA,AAAA,AAAA2P,AAAA3P;AAAA,AAAA,AAAA,AAAAE,AAAAyP;AAAA,AAAAxP,AAg9Da,AAAA0Q,AAAAlB;AAh9DbvP,AAAA,AAAAlD,AAAAiD;AAAAyP,AAAA,AAAAtP,AAAAF;AAAA,AAAA,AAAA,AAAA,AAAAyP,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAzP;AAAA,AAAA,AAAAI,AAAAL,AAAA0P,AAAMM;AAAN,AAAA,AAAA,AAAA1P,AAAAmP,AAAA,AAAiKO,AAAE,AAAA,AAAC/K,AAAOiK,AAAQ,AAAChT,AAAQ2E,AAAGmP;;AAA/L,AAAA,AAAAN,AAAA;;;;AAAA;;;;;AAAA,AAAAnP,AAAA,AAAAC,AAAAiP,AAAA,AAAAE,AAAA,AAAAjP,AAAA8O;;AAAA,AAAAjP,AAAA,AAAAC,AAAAiP,AAAA;;;AAAA,AAAA,AAAAvQ,AAAAsQ,AAAMQ;AAAN,AAAA,AAAArP,AAAA,AAAA,AAAAgP,AAAA,AAAA/O,AAAA4O,AAAiKQ,AAAE,AAAA,AAAC/K,AAAOiK,AAAQ,AAAChT,AAAQ2E,AAAGmP;;;AAA/L;;;;;AAAA,AAAA;;;AAAA,AAAA,AAAAtQ,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAFX,AAAA,AAKuB,AAAG,AAAA,AAAA,AAACuF,AAAOiK,AAAQ,AAAChT,AAAQ2E,AAAoB,AAACvE,AAAOC,AAAE,AAAA,AAACuE,AAAmB,AAAA,AAACkB;AAADiO;AAAA,AAAS,AAAK,AAACtR,AAAE,AAAA,AAAAsR,AAAepP,AAAG,AAAA,AAAClC,AAAE,AAAA,AAAAsR;;AAAyB9O;;AANtK,AAAA,AAAAmO,AAAA;;;;AAAA;;;;;AAAA,AAAA/O,AAAA,AAAAC,AAAA6O,AAAA,AAAAE,AAAA,AAAA7O,AAAA0O;;AAAA,AAAA7O,AAAA,AAAAC,AAAA6O,AAAA;;;AAAA,AAAA,AAAAnQ,AAAAkQ,AAAMvO;AAAN,AAAA,AAAAF,AACE,AAAA,AAAA,AAAC7C,AACmB+C,AAClB,AAAA,AAACpB,AAAQ,AAAAC,AAAA;AAAAkQ;AAAA,AAAA,AAAAhQ,AAAA,AAAA;;AAAA,AAAA,AAAAgQ,AAAAA;;AAAA,AAAA,AAAA/P,AAAA,AAAAC,AAAA8P;AAAA,AAAA,AAAA/P;AAAA,AAAA,AAAA+P,AAAA/P;AAAA,AAAA,AAAA,AAAAE,AAAA6P;AAAA,AAAA5P,AAg9Da,AAAA0Q,AAAAd;AAh9Db3P,AAAA,AAAAlD,AAAAiD;AAAA6P,AAAA,AAAA1P,AAAAF;AAAA,AAAA,AAAA,AAAA,AAAA6P,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAA7P;AAAA,AAAA,AAAAI,AAAAL,AAAA8P,AAAME;AAAN,AAAA,AAAA,AAAA1P,AAAAuP,AAAA,AAAiKG,AAAE,AAAA,AAAC/K,AAAOiK,AAAQ,AAAChT,AAAQ2E,AAAGmP;;AAA/L,AAAA,AAAAF,AAAA;;;;AAAA;;;;;AAAA,AAAAvP,AAAA,AAAAC,AAAAqP,AAAA,AAAAE,AAAA,AAAArP,AAAAkP;;AAAA,AAAArP,AAAA,AAAAC,AAAAqP,AAAA;;;AAAA,AAAA,AAAA3Q,AAAA0Q,AAAMI;AAAN,AAAA,AAAArP,AAAA,AAAA,AAAAoP,AAAA,AAAAnP,AAAAgP,AAAiKI,AAAE,AAAA,AAAC/K,AAAOiK,AAAQ,AAAChT,AAAQ2E,AAAGmP;;;AAA/L;;;;;AAAA,AAAA;;;AAAA,AAAA,AAAAtQ,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAFX,AAAA,AAKuB,AAAG,AAAA,AAAA,AAACuF,AAAOiK,AAAQ,AAAChT,AAAQ2E,AAAoB,AAACvE,AAAOC,AAAE,AAAA,AAACuE,AAAmB,AAAA,AAACkB;AAADiO;AAAA,AAAS,AAAK,AAACtR,AAAE,AAAA,AAAAsR,AAAepP,AAAG,AAAA,AAAClC,AAAE,AAAA,AAAAsR;;AAN7I,AAAAV,AAAA,AAAA3O,AAAAwO,AAMsKjO;;;AANtK;;;;;AAAA,AAAA;;;AAAA,AAAA,AAAAzB,AAAQH;;AAH/B,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAWGsK,AACCC,AACYC,AAAa,AAAA,AAAA,AAAAlO,AAAiB,AAAAqU,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAAClU,AAAAA,AAAAA;AAb/C,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAcM4H,AACcL,AAE6B,AAAA,AAAA,AAAA,AAACH,AAAKnE,AACP,AAACiJ,AAAM,AAAAiI,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAAClR,AAAAA,AAAAA;AAAR,AAAA,AACA,AAAAmR,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAACnR,AAAAA,AAAAA;AACD,AAACiJ,AAAM,AAAAmI,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAACpR,AAAAA,AAAAA;AAAR,AAAA,AACA,AAAAqR,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAACrR,AAAAA,AAAAA;AACD,AAACiJ,AAAM,AAAAqI,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAACtR,AAAAA,AAAAA;AAAR,AAAA,AACA,AAACiJ,AAAM,AAAAsI,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAACvR,AAAAA,AAAAA;AAAR,AAAA,AACA,AAACiJ,AAAM,AAAAuI,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAACxR,AAAAA,AAAAA;AAxBxD,AAAA,AAAA,AAAA,AAAA,AAwBgD,AAAA,AAG5B,AAAClC,AAAMwC","names":["jasminegui.riskviews/nff","js/goog.i18n.NumberFormat","goog.i18n.NumberFormat.Format/DECIMAL","jasminegui.riskviews/nf","x","jasminegui.riskviews/round-to-thousand","jasminegui.riskviews/tnfmt","cljs.core.comp.cljs$core$IFn$_invoke$arity$2","jasminegui.riskviews/nfcell","this","reagent.core/as-element","temp__5733__auto__","jasminegui.riskviews/case-insensitive-filter","filterfn","row","jasminegui.riskviews/txt-format","fmt","goog.string/format","jasminegui.riskviews/round3","cljs.core.partial.cljs$core$IFn$_invoke$arity$2","jasminegui.riskviews/round2","jasminegui.riskviews/round1","jasminegui.riskviews/yield-format","jasminegui.riskviews/zspread-format","jasminegui.riskviews/rating-sort","a","b","cljs.core/deref","t","G__45149","re-frame.core/subscribe","G__45150","cljs.core.keyword.cljs$core$IFn$_invoke$arity$1","G__45151","jasminegui.riskviews/sum-rows","vals","cljs.core.reduce.cljs$core$IFn$_invoke$arity$2","cljs.core/+","jasminegui.riskviews/median","coll","sorted","cljs.core.sort.cljs$core$IFn$_invoke$arity$1","cljs.core.remove.cljs$core$IFn$_invoke$arity$2","cljs.core/nil?","cnt","cljs.core/count","halfway","cljs.core/quot","cljs.core/odd?","cljs.core.nth.cljs$core$IFn$_invoke$arity$2","bottom","bottom-val","top-val","jasminegui.riskviews/roundpc","G__45152","G__45153","jasminegui.riskviews/round1pc","jasminegui.riskviews/round2pc","jasminegui.riskviews/round1pcytd","style","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","G__45154","G__45155","jasminegui.riskviews/round0pc-trigger","c","v","G__45158","G__45159","colorize","jasminegui.riskviews/strategy-pop-up","jasminegui.riskviews/last-price-props","status","prefix","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","G__45162","G__45163","cljs.core/clj->js","jasminegui.riskviews/bigger-than","jasminegui.riskviews/rating-score-to-string","jasminegui.riskviews/table-columns","cljs.core/first","jasminegui.riskviews/first-level-sort","G__45164","jasminegui.riskviews/add-total-line-to-pivot","pivoted-table","portfolios","total-line","cljs.core.into.cljs$core$IFn$_invoke$arity$2","iter__4523__auto__","s__45166","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4521__auto__","size__4522__auto__","b__45168","cljs.core/chunk-buffer","i__45167","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__45165","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","p","cljs.core.map.cljs$core$IFn$_invoke$arity$2","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","jasminegui.riskviews/dropdown-width","jasminegui.riskviews/single-portfolio-risk-display","p1__45171#","positions","G__45172","portfolio","G__45173","portfolio-total-line","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","G__45176","fexpr__45175","G__45177","is-tree","G__45178","portfolio-positions","p1__45169#","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","viewable-positions","and__4120__auto__","G__45180","p1__45170#","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","risk-filter","G__45181","risk-choice-1","risk-choice-2","risk-choice-3","additional-des-cols","jasminegui.static/risk-choice-map","grouping-columns","s__45183","b__45185","i__45184","iter__45182","r","accessors","cljs.core.mapv.cljs$core$IFn$_invoke$arity$2","accessors-k","cljs.core/keyword","display","cljs.core.sort_by.cljs$core$IFn$_invoke$arity$2","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/juxt","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","js/module$node_modules$react_table$lib$index.default","cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic","cljs.core.distinct.cljs$core$IFn$_invoke$arity$1","G__45187","G__45186","re-frame.core/dispatch","jasminegui.riskviews/multiple-portfolio-risk-display","p1__45189#","pivoted-positions","G__45190","selected-portfolios","G__45191","kselected-portfolios","G__45192","hide-zero-risk","G__45193","number-of-fields","G__45194","display-key-one","G__45195","cell-one","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","display-key-two","G__45196","cell-two","width-one","G__45197","G__45198","s__45200","b__45202","i__45201","iter__45199","pivoted-data","p1__45188#","fexpr__45203","thfil","line","cljs.core/every?","cljs.core/zero?","pivoted-data-hide-zero","display-one","cljs.core/name","s__45206","b__45208","i__45207","iter__45205","cljs.core/some","G__45209","G__45204","jasminegui.riskviews/multiple-portfolio-alignment-risk-display","group","p1__45210#","G__45213","jasminegui.static/portfolio-alignment-groups","G__45214","base-portfolio","kportfolios","display-key","G__45215","G__45216","G__45217","s__45219","b__45221","i__45220","iter__45218","p1__45211#","fexpr__45222","differentiate","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","temp-line","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","fexpr__45223","pivoted-data-diff","threshold","cljs.reader.read_string.cljs$core$IFn$_invoke$arity$1","p1__45212#","G__45224","jasminegui.static/threshold-choices-alignment","pivoted-data-diff-post-th","cljs.core.println.cljs$core$IFn$_invoke$arity$variadic","s__45226","b__45228","i__45227","iter__45225","G__45229","jasminegui.riskviews/single-portfolio-risk-controller","portfolio-map","s__45235","b__45237","i__45236","iter__45234","G__45238","display-style","G__45239","G__45240","G__45241","G__45242","re-com.core/box","re-com.core/v-box","re-com.core/title","G__45244","re-com.core/h-box","p1__45230#","p1__45231#","p1__45233#","re-com.core/single-dropdown","G__45245","re-com.core/gap","G__45246","s__45248","b__45250","i__45249","p1__45232#","iter__45247","i","cljs.core.range.cljs$core$IFn$_invoke$arity$2","reagent.core/cursor","G__45251","G__45252","re-com.core/checkbox","G__45253","jasminegui.riskviews/multiple-portfolio-risk-controller","s__45260","b__45262","i__45261","iter__45259","G__45263","G__45264","G__45265","G__45266","G__45267","field-one","G__45268","field-two","G__45269","G__45270","G__45272","p1__45254#","p1__45255#","p1__45256#","p1__45258#","G__45273","jasminegui.static/field-choices","G__45274","re-com.core/selection-list","G__45275","s__45277","b__45279","i__45278","p1__45257#","iter__45276","G__45280","G__45281","G__45282","jasminegui.riskviews/portfolio-alignment-risk-controller","G__45288","G__45289","portfolio-alignment-group","G__45290","field","G__45291","G__45292","G__45294","p1__45283#","p1__45284#","p1__45285#","p1__45286#","G__45295","jasminegui.static/field-choices-alignment","G__45296","G__45297","G__45298","s__45300","b__45302","i__45301","p1__45287#","iter__45299","G__45303","G__45304","jasminegui.riskviews/summary-display","G__45306","G__45307","totals","G__45308","s__45310","b__45312","i__45311","iter__45309","s__45314","b__45316","i__45315","iter__45313","s__45318","b__45320","i__45319","iter__45317","k","p1__45305#","G__45322","G__45323","G__45324","G__45325","G__45326","G__45327","G__45328","G__45329","cljs.core/chunk-first"],"sourcesContent":["(ns jasminegui.riskviews\r\n  (:require\r\n    [oz.core :as oz]\r\n    [re-frame.core :as rf]\r\n    [reagent.core :as r]\r\n    [goog.string :as gstring]\r\n    [goog.string.format]\r\n    [re-com.core :refer [p p-span h-box v-box box gap line scroller border label title button close-button checkbox hyperlink-href slider horizontal-bar-tabs radio-button info-button\r\n                         single-dropdown hyperlink modal-panel alert-box throbber input-password selection-list\r\n                         input-text input-textarea popover-anchor-wrapper popover-content-wrapper popover-tooltip datepicker-dropdown] :refer-macros [handler-fn]]\r\n    [re-com.box :refer [h-box-args-desc v-box-args-desc box-args-desc gap-args-desc line-args-desc scroller-args-desc border-args-desc flex-child-style]]\r\n    [re-com.util :refer [px]]\r\n    [\"react-table\" :as rt :default ReactTable]\r\n    [goog.string :as gstring]\r\n    [goog.string.format]\r\n    [jasminegui.mount :as mount]\r\n    [jasminegui.static :as static]\r\n\r\n    [re-com.validate :refer [string-or-hiccup? alert-type? vector-of-maps?]])\r\n  (:import (goog.i18n NumberFormat)\r\n           (goog.i18n.NumberFormat Format))\r\n  )\r\n\r\n\r\n(def nff (NumberFormat. Format/DECIMAL))\r\n(defn nf [x] (.format nff (str x)))\r\n(defn round-to-thousand [x] (* 1000 (int (/ x 1000.))))\r\n(def tnfmt (comp nf round-to-thousand))\r\n\r\n\r\n(defn nfcell [this]\r\n  (r/as-element\r\n    (if-let [x (aget this \"value\")]\r\n      [:div  (nf (int x))]\r\n      \"-\")))\r\n\r\n\r\n(defn case-insensitive-filter [filterfn row]\r\n  \"filterfn is {id: column_name value: text_in_filter_box\"\r\n  ;(println row)\r\n  (.includes (.toLowerCase (str (aget row (aget filterfn \"id\")))) (.toLowerCase (aget filterfn \"value\")))\r\n\r\n  ;(or\r\n  ;  (.includes (.toLowerCase (str (aget row (aget filterfn \"id\")))) (.toLowerCase (aget filterfn \"value\")))\r\n  ;  (.includes (.toLowerCase (str (aget row (aget filterfn \"_pivotId\")))) (.toLowerCase (aget filterfn \"value\")))\r\n  ;  )\r\n\r\n  )\r\n\r\n(defn txt-format [fmt this]    (r/as-element (if-let [x (aget this \"value\")] (gstring/format fmt x) \"-\")))\r\n(def round3         (partial txt-format \"%.3f\"))\r\n(def round2         (partial txt-format \"%.2f\"))\r\n(def round1         (partial txt-format \"%.1f\"))\r\n(def yield-format   (partial txt-format \"%.2f%\"))\r\n(def zspread-format (partial txt-format \"%.0fbps\"))\r\n\r\n(defn rating-sort [a b]\r\n  (let [t @(rf/subscribe [:rating-to-score])] (<= (t (keyword a)) (t (keyword b)))))\r\n\r\n(defn sum-rows [vals] (reduce + vals))\r\n\r\n(defn median [coll]\r\n  (let [sorted (sort (remove nil? coll))\r\n        cnt (count sorted)\r\n        halfway (quot cnt 2)]\r\n    (cond\r\n      (zero? cnt) nil\r\n      (odd? cnt) (nth sorted halfway)\r\n      :else (let [bottom (dec halfway) bottom-val (nth sorted bottom) top-val (nth sorted halfway)] (* 0.5 (+ bottom-val top-val))))))\r\n\r\n\r\n(defn roundpc [fmt this]\r\n  (r/as-element\r\n    (if-let [x (aget this \"value\")]\r\n      [:div {:style {:color (if (neg? x) \"red\" \"black\")}} (gstring/format fmt (* 100 x))]\r\n      \"-\")))\r\n\r\n(def round1pc (partial roundpc \"%.1f%\"))\r\n(def round2pc (partial roundpc \"%.2f%\"))\r\n\r\n(defn round1pcytd  [this]\r\n  (r/as-element\r\n    (if-let [x (aget this \"value\")]\r\n      (let [style (merge (if (neg? x) {:color \"red\"} {:color \"black\"})\r\n                         (if (aget this \"row\" \"thisyear\") {:font-style \"italic\"} {}))]\r\n        [:div {:style style} (gstring/format \"%.1f%\" (* 100 x))])\r\n      \"-\")))\r\n\r\n(defn round0pc-trigger  [this]\r\n  (r/as-element\r\n    (if-let [x (aget this \"value\")]\r\n      (letfn [(colorize [c v] [:div {:style {:color c}} (gstring/format \"%.0f%\" (* 100 v))])]\r\n        (cond\r\n          (>= x 1.0) (colorize \"red\" x)\r\n          (>= x 0.5) (colorize \"orange\" x)\r\n          (>= x 0.0) (colorize \"black\" x)\r\n          (< x 0.0) \"<0%\"\r\n          :else \"-\"))\r\n      \"-\")))\r\n\r\n(defn strategy-pop-up [this]\r\n  (r/as-element [:div [:span {:title (aget this \"row\" \"strategy\")} (aget this \"row\" \"strategy-shortcut\")]]))\r\n\r\n(defn last-price-props [this]\r\n  (if-not (nil? this)\r\n    (let [status (aget this \"row\" \"status\")\r\n          prefix (if (= status \"CLOSED\") \"(c) \" \"\")]\r\n      (r/as-element (str prefix (gstring/format \"%.2f\" (aget this \"value\")))))\r\n    (clj->js {:style nil})))\r\n\r\n;(defn format-date-from-int-rt [this] (tools/format-date-from-int (aget this \"value\")))\r\n;\r\n;(defn status-props [this]\r\n;  (if-not (nil? this)\r\n;    (let [status (aget this \"row\" \"status\")]\r\n;      (r/as-element (if (= status \"CLOSED\") (tools/format-date-from-int (aget this \"row\" \"exit-date\")) status)))\r\n;    (clj->js {:style nil})))\r\n;\r\n;(defn exit-date-props [this]\r\n;  (if-not (nil? this)\r\n;    (let [status (aget this \"row\" \"status\")]\r\n;      (r/as-element (if (= status \"CLOSED\") (tools/format-date-from-int (aget this \"row\" \"exit-date\")) status)))\r\n;    (clj->js {:style nil})))\r\n\r\n;(defn case-insensitive-filter [filterfn row]\r\n;  \"filterfn is {id: column_name value: text_in_filter_box\"\r\n;  (.includes  (.toLowerCase (str (aget row (aget filterfn \"id\"))))  (.toLowerCase (aget filterfn \"value\"))))\r\n;\r\n;(defn exit-date-filter [filterfn row]\r\n;  \"if user types LIVE, filters by today's exit date\"\r\n;  (if (.includes \"live\" (.toLowerCase (aget filterfn \"value\")))\r\n;    (.includes (.toLowerCase (str (aget row (aget filterfn \"id\")))) (tools/gdate-to-yyyymmdd static/gtoday))\r\n;    (.includes (.toLowerCase (str (aget row (aget filterfn \"id\")))) (.toLowerCase (aget filterfn \"value\")))))\r\n;\r\n\r\n(defn bigger-than [filterfn row]\r\n  \"filterfn is {id: column_name value: text_in_filter_box\"\r\n  (>  (aget row \"weight\")  (aget filterfn \"value\")))\r\n\r\n\r\n\r\n(defn rating-score-to-string [this] (aget this \"row\" \"qt-iam-int-lt-median-rating\"))\r\n\r\n\r\n(def table-columns\r\n  {:id                          {:Header \"ID\"             :accessor \"id\"                          :show false}\r\n   :id-show                     {:Header \"ID\"             :accessor \"id\"                          :width 75}\r\n   :region                      {:Header \"Region\" :accessor \"jpm-region\" :width 140 }\r\n   :country                     {:Header \"Country\" :accessor \"qt-risk-country-name\" :width 140}\r\n   :issuer                      {:Header \"Issuer\" :accessor \"TICKER\" :width 140 }\r\n   :sector                      {:Header \"Sector\" :accessor \"qt-jpm-sector\" :width 140}\r\n   :rating                      {:Header \"Rating\" :accessor \"qt-iam-int-lt-median-rating\" :show false}  ; :show false\r\n  ;  :rating                      {:Header \"Rating\" :accessor \"qt-iam-int-lt-median-rating\"  :show false} :sortMethod rating-sort} ; :show false\r\n   :rating-score                {:Header \"Rating\" :accessor \"qt-iam-int-lt-median-rating-score\" :Cell rating-score-to-string :aggregate first}\r\n   :name                        {:Header \"Name\" :accessor \"NAME\" :width 140} ;  :filterMethod case-insensitive-filter\r\n   :isin                        {:Header \"ISIN\"           :accessor \"isin\"                        :width 125 } ;:style {:textAlign \"center\"}\r\n   :description                 {:Header \"thinkFolio ID\" :accessor \"description\" :width 500}\r\n   :nav                         {:Header \"Fund\" :accessor \"weight\" :width 60 :style {:textAlign \"right\"} :aggregate sum-rows :Cell round2 :filterable true :filterMethod bigger-than}\r\n   :bm-weight                         {:Header \"Index\" :accessor \"bm-weight\" :width 60 :style {:textAlign \"right\"} :aggregate sum-rows :Cell round2 :filterable false}\r\n   :nominal                     {:Header \"Nominal\" :accessor \"original-quantity\" :width 120 :style {:textAlign \"right\"} :aggregate sum-rows :Cell nfcell :filterable true :filterMethod bigger-than}\r\n   :z-spread                    {:Header \"Z-spread\" :accessor \"qt-libor-spread\" :width 80 :style {:textAlign \"right\"} :aggregate median :Cell nfcell :filterable false}\r\n   :g-spread                    {:Header \"G-spread\" :accessor \"qt-govt-spread\" :width 80 :style {:textAlign \"right\"} :aggregate median :Cell nfcell :filterable false}\r\n   :duration                    {:Header \"M dur\" :accessor \"qt-modified-duration\" :width 60 :style {:textAlign \"right\"} :aggregate median :Cell round2 :filterable false}\r\n   :yield                       {:Header \"Yield\" :accessor \"qt-yield\" :width 60 :style {:textAlign \"right\"} :aggregate median :Cell round2pc :filterable false}\r\n   :value                       {:Header \"Value\" :accessor \"base-value\" :width 120 :style {:textAlign \"right\"} :aggregate sum-rows :Cell nfcell :filterable true :filterMethod bigger-than}\r\n   :contrib-gspread             {:Header \"G-spread\" :accessor \"contrib-gspread\" :width 80 :style {:textAlign \"right\"} :aggregate sum-rows :Cell round1 :filterable false}\r\n   :contrib-zspread                         {:Header \"Fund\" :accessor \"contrib-zspread\" :width 80 :style {:textAlign \"right\"} :aggregate sum-rows :Cell round1 :filterable false}\r\n   :contrib-yield                         {:Header \"Fund\" :accessor \"contrib-yield\" :width 60 :style {:textAlign \"right\"} :aggregate sum-rows :Cell round2pc :filterable false}\r\n   :contrib-mdur                         {:Header \"Fund\" :accessor \"contrib-mdur\" :width 60 :style {:textAlign \"right\"} :aggregate sum-rows :Cell round2 :filterable false}\r\n   :bm-contrib-yield                         {:Header \"Index\" :accessor \"bm-contrib-yield\" :width 60 :style {:textAlign \"right\"} :aggregate sum-rows :Cell round2pc :filterable false}\r\n   :bm-contrib-eir-duration                         {:Header \"Index\" :accessor \"bm-contrib-eir-duration\" :width 60 :style {:textAlign \"right\"} :aggregate sum-rows :Cell round2 :filterable false}\r\n   :cash-pct                         {:Header \"Cash\" :accessor \"cash-pct\" :width 60 :style {:textAlign \"right\"} :Cell yield-format :filterable false}\r\n   :contrib-bond-yield                         {:Header \"Bond yield\" :accessor \"contrib-bond-yield\" :width 80 :style {:textAlign \"right\"} :Cell round2pc :filterable false}\r\n   :weight-delta                         {:Header \"Delta\" :accessor \"weight-delta\" :width 60 :style {:textAlign \"right\"} :aggregate sum-rows :Cell round2 :filterable false}\r\n   :mdur-delta                         {:Header \"Delta\" :accessor \"mdur-delta\" :width 60 :style {:textAlign \"right\"} :aggregate sum-rows :Cell round2 :filterable false}\r\n\r\n   })\r\n\r\n\r\n;(defn sum-rows [vals] (reduce + vals))\r\n\r\n(defn first-level-sort [x]\r\n  (case x\r\n    \"Cash\"        \"AAA\"\r\n    \"Collateral\"  \"AAA\"\r\n    \"Forwards\"    \"AAA\"\r\n    \"Equities\"    \"AAA\"\r\n    x))\r\n\r\n(defn add-total-line-to-pivot [pivoted-table portfolios]\r\n  (let [total-line (merge\r\n                     {:jpm-region           \"Total\"\r\n                      :qt-jpm-sector        \"Total\"\r\n                      :qt-risk-country-name \"Total\"\r\n                      :TICKER               \"Total\"\r\n                      :NAME                 \"Total\"\r\n                      :description          \"Total\"\r\n                      :isin                 \"Total\"}\r\n                     (into {} (for [p portfolios] [(keyword p) (reduce + (map (keyword p) pivoted-table))])))]\r\n    (conj pivoted-table total-line)))\r\n\r\n\r\n(def dropdown-width \"150px\")\r\n\r\n(defn single-portfolio-risk-display []\r\n  (let [positions @(rf/subscribe [:positions])\r\n        portfolio @(rf/subscribe [:single-portfolio-risk/portfolio])\r\n        portfolio-total-line (assoc (@(rf/subscribe [:total-positions]) (keyword portfolio)) :qt-iam-int-lt-median-rating \"Total\" :qt-iam-int-lt-median-rating-score \"00 Total\")\r\n        is-tree (= @(rf/subscribe [:single-portfolio-risk/display-style]) \"Tree\")\r\n        portfolio-positions (filter #(= (:portfolio %) portfolio) positions)\r\n\r\n        viewable-positions (if (and (not is-tree) @(rf/subscribe [:single-portfolio-risk/hide-zero-holdings])) (filter #(not= (:weight %) 0) portfolio-positions) portfolio-positions)\r\n        risk-filter @(rf/subscribe [:single-portfolio-risk/filter])\r\n        risk-choice-1 (if (not= \"None\" (risk-filter 1)) (risk-filter 1))\r\n        risk-choice-2 (if (not= \"None\" (risk-filter 2)) (risk-filter 2))\r\n        risk-choice-3 (if (not= \"None\" (risk-filter 3)) (risk-filter 3))\r\n        additional-des-cols (remove #{\"None\" risk-choice-1 risk-choice-2 risk-choice-3} (map :id static/risk-choice-map))\r\n        grouping-columns (into [] (for [r (remove nil? [risk-choice-1 risk-choice-2 risk-choice-3 :name])] (table-columns r)))\r\n        accessors (mapv :accessor grouping-columns)\r\n        accessors-k (mapv keyword accessors)\r\n        display (conj (sort-by (apply juxt (concat [(comp first-level-sort (first accessors-k))] (rest accessors-k))) viewable-positions) portfolio-total-line)\r\n        ]\r\n    ;(println @(rf/subscribe [:single-portfolio-risk/table-filter]))\r\n    [:> ReactTable\r\n     {:data                display\r\n      :defaultFilterMethod case-insensitive-filter\r\n      :columns             [{:Header \"Groups\" :columns grouping-columns}\r\n                            {:Header \"NAV\" :columns (mapv table-columns [:nav :bm-weight :weight-delta])}\r\n                            {:Header \"Duration\" :columns (mapv table-columns [:contrib-mdur :bm-contrib-eir-duration :mdur-delta])}\r\n                            {:Header \"Yield\" :columns (mapv table-columns [:contrib-yield :bm-contrib-yield])}\r\n                            {:Header \"Z-spread\" :columns (mapv table-columns [:contrib-zspread ])}\r\n                            {:Header \"Position\" :columns (mapv table-columns [:value :nominal])}\r\n                            ;{:Header \"Index contribution\" :columns (mapv table-columns [:bm-contrib-yield :bm-contrib-eir-duration])}\r\n                            {:Header (if is-tree \"Bond analytics (median)\" \"Bond analytics\") :columns (mapv table-columns [:yield :z-spread :g-spread :duration])}\r\n                            {:Header \"Description\" :columns (mapv table-columns (into [] (concat [:rating :isin] additional-des-cols [:description])))}]\r\n      :showPagination      (not is-tree)\r\n      :sortable            (not is-tree)\r\n      :filterable          (not is-tree)\r\n      :pageSize            (if is-tree (inc (count (distinct (map (first accessors-k) portfolio-positions)))) 25) ;(inc (count display))\r\n      :className           \"-striped -highlight\"\r\n      :pivotBy             (if is-tree accessors [])\r\n      :defaultFiltered     (if is-tree [] @(rf/subscribe [:single-portfolio-risk/table-filter])) ; [{:id \"analyst\" :value \"Tammy\"}]\r\n      :onFilteredChange    #(rf/dispatch [:single-portfolio-risk/table-filter %])\r\n      }]\r\n\r\n        ))\r\n\r\n\r\n(defn multiple-portfolio-risk-display []\r\n  (let [\r\n        pivoted-positions @(rf/subscribe [:pivoted-positions])\r\n        selected-portfolios @(rf/subscribe [:multiple-portfolio-risk/selected-portfolios])\r\n        kselected-portfolios (mapv keyword selected-portfolios)\r\n        portfolios  @(rf/subscribe [:portfolios])\r\n        hide-zero-risk @(rf/subscribe [:multiple-portfolio-risk/hide-zero-holdings])\r\n        number-of-fields @(rf/subscribe [:multiple-portfolio-risk/field-number])\r\n        display-key-one @(rf/subscribe [:multiple-portfolio-risk/field-one])\r\n        cell-one (get-in table-columns [display-key-one :Cell])\r\n        display-key-two @(rf/subscribe [:multiple-portfolio-risk/field-two])\r\n        cell-two (get-in table-columns [display-key-two :Cell])\r\n        width-one 100                                      ;(get-in table-columns [display-key-one :width])\r\n        is-tree (= @(rf/subscribe [:multiple-portfolio-risk/display-style]) \"Tree\")\r\n        risk-filter @(rf/subscribe [:multiple-portfolio-risk/filter])\r\n        risk-choice-1 (if (not= \"None\" (risk-filter 1)) (risk-filter 1))\r\n        risk-choice-2 (if (not= \"None\" (risk-filter 2)) (risk-filter 2))\r\n        risk-choice-3 (if (not= \"None\" (risk-filter 3)) (risk-filter 3))\r\n        grouping-columns (into [] (for [r (remove nil? [risk-choice-1 risk-choice-2 risk-choice-3 :name])] (table-columns r)))\r\n        accessors (mapv :accessor grouping-columns)\r\n        accessors-k (mapv keyword accessors)\r\n        pivoted-data (map #(merge % ((keyword (get-in table-columns [display-key-one :accessor])) %)) pivoted-positions)\r\n        thfil (fn [line] (not (every? zero? (map line kselected-portfolios))))\r\n        pivoted-data-hide-zero (if (and (not is-tree) hide-zero-risk) (filter thfil pivoted-data) pivoted-data)\r\n        display-one (add-total-line-to-pivot (sort-by\r\n                      (apply juxt (concat [(comp first-level-sort (first accessors-k))] (rest accessors-k)))\r\n                      pivoted-data-hide-zero) portfolios)\r\n        ]\r\n    [:> ReactTable\r\n     {:data                display-one\r\n      :defaultFilterMethod case-insensitive-filter\r\n      :columns             (if (= number-of-fields \"One\")\r\n\r\n                             [{:Header \"Groups\" :columns grouping-columns}\r\n                              {:Header  (str \"Portfolio \" (name display-key-one))\r\n                               :columns (into [] (for [p portfolios :when (some #{p} selected-portfolios)] {:Header p :accessor p :width width-one :style {:textAlign \"right\"} :aggregate sum-rows :Cell cell-one :filterable false}))}\r\n                              {:Header  \"Description\"\r\n                               :columns (mapv table-columns [:rating :isin :description])}]\r\n\r\n                             )\r\n      :showPagination      (not is-tree)\r\n      :sortable            (not is-tree)\r\n      :filterable          (not is-tree)\r\n      :pageSize            (if is-tree (inc (count (distinct (map (first accessors-k) display-one)))) 25)\r\n      :className           \"-striped -highlight\"\r\n      :pivotBy             (if is-tree accessors [])\r\n      :defaultFiltered     (if is-tree [] @(rf/subscribe [:single-portfolio-risk/table-filter])) ; [{:id \"analyst\" :value \"Tammy\"}]\r\n      :onFilteredChange    #(rf/dispatch [:single-portfolio-risk/table-filter %])\r\n\r\n      }]\r\n\r\n    ))\r\n\r\n;(def differentiate-pivoted-positions [table base]\r\n;  (into []\r\n;        (for [line table]\r\n;          (for [key quantitative-fields]\r\n;\r\n;            )\r\n;          (for p portfolios)\r\n;\r\n;          )\r\n;        )\r\n;  )\r\n\r\n(defn multiple-portfolio-alignment-risk-display []\r\n  (let [\r\n        group (:portfolios (first (filter #(= (:id %) @(rf/subscribe [:portfolio-alignment/group])) static/portfolio-alignment-groups)))\r\n        pivoted-positions @(rf/subscribe [:pivoted-positions])\r\n        base-portfolio (first group)\r\n        portfolios (rest group)\r\n        kportfolios (mapv keyword portfolios)\r\n        display-key @(rf/subscribe [:portfolio-alignment/field])\r\n        cell-one (get-in table-columns [display-key :Cell])\r\n        width-one 100\r\n        is-tree (= @(rf/subscribe [:portfolio-alignment/display-style]) \"Tree\")\r\n        risk-filter @(rf/subscribe [:portfolio-alignment/filter])\r\n        risk-choice-1 (if (not= \"None\" (risk-filter 1)) (risk-filter 1))\r\n        risk-choice-2 (if (not= \"None\" (risk-filter 2)) (risk-filter 2))\r\n        risk-choice-3 (if (not= \"None\" (risk-filter 3)) (risk-filter 3))\r\n        grouping-columns (into [] (for [r (remove nil? [risk-choice-1 risk-choice-2 risk-choice-3 :name])] (table-columns r)))\r\n        accessors (mapv :accessor grouping-columns)\r\n        accessors-k (mapv keyword accessors)\r\n        pivoted-data (map #(merge % ((keyword (get-in table-columns [display-key :accessor])) %)) pivoted-positions)\r\n        differentiate (fn [line] (reduce\r\n                                   (fn [temp-line p] (assoc temp-line p (- (p temp-line) ((keyword base-portfolio) temp-line))))\r\n                                   line\r\n                                   kportfolios))\r\n        pivoted-data-diff (map differentiate pivoted-data)\r\n        threshold (cljs.reader/read-string (:label (first (filter #(= (:id %) @(rf/subscribe [:portfolio-alignment/threshold])) static/threshold-choices-alignment))))\r\n        thfil (fn [line] (some (fn [x] (or (< x (- threshold)) (> x threshold))) (map line kportfolios)))\r\n        pivoted-data-diff-post-th (filter thfil pivoted-data-diff)\r\n        display (add-total-line-to-pivot (sort-by\r\n                                               (apply juxt (concat [(comp first-level-sort (first accessors-k))] (rest accessors-k)))\r\n                                               pivoted-data-diff-post-th) portfolios)\r\n        ]\r\n    (println kportfolios)\r\n    [:> ReactTable\r\n     {:data                display\r\n      :defaultFilterMethod case-insensitive-filter\r\n      :columns\r\n\r\n                             [{:Header \"Groups\" :columns grouping-columns}\r\n                              {:Header  (str \"Portfolio \" (name display-key) \" vs \" base-portfolio)\r\n                               :columns (into [] (for [p portfolios] {:Header p :accessor p :width width-one :style {:textAlign \"right\"} :aggregate sum-rows :Cell cell-one :filterable false}))}\r\n                              {:Header  \"Description\"\r\n                               :columns [{:Header \"thinkFolio ID\" :accessor \"description\" :width 500} (table-columns :rating)]}]\r\n\r\n      :showPagination      (not is-tree)\r\n      :sortable            (not is-tree)\r\n      :filterable          (not is-tree)\r\n      :pageSize            (if is-tree (inc (count (distinct (map (first accessors-k) display)))) 25)\r\n      :className           \"-striped -highlight\"\r\n      :pivotBy             (if is-tree accessors [])}]\r\n\r\n    ))\r\n\r\n(defn single-portfolio-risk-controller []\r\n  (let [\r\n        portfolio-map (into [] (for [p @(rf/subscribe [:portfolios])] {:id p :label p}))\r\n        display-style (rf/subscribe [:single-portfolio-risk/display-style])\r\n        portfolio (rf/subscribe [:single-portfolio-risk/portfolio])\r\n        risk-filter (rf/subscribe [:single-portfolio-risk/filter])\r\n        hide-zero-risk (rf/subscribe [:single-portfolio-risk/hide-zero-holdings])\r\n        ]\r\n    [box :class \"subbody rightelement\" :child\r\n     [v-box :class \"element\" :align-self :center :justify :center :gap \"20px\"\r\n      :children [[title :label (str \"Portfolio drill-down \" @(rf/subscribe [:qt-date])) :level :level1]\r\n                 [h-box :gap \"10px\"\r\n                  :children (into [] (concat [\r\n                                               [title :label \"Display type:\" :level :level3]\r\n                                               [single-dropdown :width dropdown-width :model display-style :choices [{:id \"Table\" :label \"Table\"} {:id \"Tree\" :label \"Tree\"}] :on-change #(rf/dispatch [:single-portfolio-risk/display-style %])]\r\n                                               [gap :size \"50px\"]\r\n                                               [title :label \"Filtering:\" :level :level3]\r\n                                               [single-dropdown :width dropdown-width :model portfolio :choices portfolio-map :on-change #(rf/dispatch [:single-portfolio-risk/portfolio %])]]\r\n                                              (into [] (for [i (range 1 4)] [single-dropdown :width dropdown-width :model (r/cursor risk-filter [i]) :choices static/risk-choice-map :on-change #(rf/dispatch [:single-portfolio-risk/filter i %])]))\r\n                                              [[gap :size \"50px\"]\r\n                                               [checkbox :model hide-zero-risk :label \"Hide zero positions in table view\" :disabled? (= @display-style \"Tree\") :on-change #(rf/dispatch [:single-portfolio-risk/hide-zero-holdings %])]]\r\n                                              ))\r\n\r\n                             ]\r\n                 ;[h-box :gap \"10px\" :children [[title :label \"Shortcuts:\"]]]\r\n                 [single-portfolio-risk-display]]]])\r\n  )\r\n;\r\n\r\n(defn multiple-portfolio-risk-controller []\r\n  (let [\r\n        portfolio-map (into [] (for [p  @(rf/subscribe [:portfolios])] {:id p :label p}))\r\n        display-style (rf/subscribe [:multiple-portfolio-risk/display-style])\r\n        risk-filter (rf/subscribe [:multiple-portfolio-risk/filter])\r\n        selected-portfolios (rf/subscribe [:multiple-portfolio-risk/selected-portfolios])\r\n        number-of-fields (rf/subscribe [:multiple-portfolio-risk/field-number])\r\n        field-one (rf/subscribe [:multiple-portfolio-risk/field-one])\r\n        field-two (rf/subscribe [:multiple-portfolio-risk/field-two])\r\n        hide-zero-risk (rf/subscribe [:multiple-portfolio-risk/hide-zero-holdings])\r\n        ]\r\n    [box :class \"subbody rightelement\" :child\r\n     [v-box :class \"element\" :align-self :center :justify :center :gap \"20px\"\r\n      :children [[title :label (str \"Portfolio drill-down \" @(rf/subscribe [:qt-date])) :level :level1]\r\n                 [h-box :gap \"10px\"\r\n                  :children (into [] (concat [\r\n                                              [v-box :gap \"15px\" :children [[title :label \"Display type:\" :level :level3] ;[title :label \"Fields:\" :level :level3]\r\n                                                                            [title :label \"Field:\" :level :level3] ;[title :label \"Field two:\" :level :level3]\r\n                                                                            ]]\r\n                                              [v-box :gap \"10px\" :children [[single-dropdown :width dropdown-width :model display-style :choices [{:id \"Table\" :label \"Table\"} {:id \"Tree\" :label \"Tree\"}] :on-change #(rf/dispatch [:multiple-portfolio-risk/display-style %])]\r\n                                                                            ;[single-dropdown :width dropdown-width :model number-of-fields :choices [{:id \"One\" :label \"One\"} {:id \"Two\" :label \"Two\"}] :on-change #(rf/dispatch [:multiple-portfolio-risk/field-number %])]\r\n                                                                            [single-dropdown :width dropdown-width :model field-one :choices static/field-choices :on-change #(rf/dispatch [:multiple-portfolio-risk/field-one %])]\r\n                                                                            ;[single-dropdown :width dropdown-width :model field-two :choices static/field-choices :on-change #(rf/dispatch [:multiple-portfolio-risk/field-two %])]\r\n                                                                            ]]\r\n                                              [gap :size \"50px\"]\r\n                                              [title :label \"Filtering:\" :level :level3]\r\n                                              [selection-list :width dropdown-width :height \"250px\" :model selected-portfolios :choices portfolio-map :on-change #(rf/dispatch [:multiple-portfolio-risk/selected-portfolios %])]]\r\n                                             (into [] (for [i (range 1 4)] [single-dropdown :width dropdown-width :model (r/cursor risk-filter [i]) :choices static/risk-choice-map :on-change #(rf/dispatch [:multiple-portfolio-risk/filter i %])]))\r\n                                             [[gap :size \"50px\"]\r\n                                              [checkbox :model hide-zero-risk :label \"Hide zero positions in table view\" :disabled? (= @display-style \"Tree\") :on-change #(rf/dispatch [:multiple-portfolio-risk/hide-zero-holdings %])]]))\r\n\r\n                  ]\r\n                 ;[h-box :gap \"10px\" :children [[title :label \"Shortcuts:\"]]]\r\n                 [multiple-portfolio-risk-display]]]])\r\n  )\r\n\r\n(defn portfolio-alignment-risk-controller []\r\n  (let [\r\n        display-style (rf/subscribe [:portfolio-alignment/display-style])\r\n        risk-filter (rf/subscribe [:portfolio-alignment/filter])\r\n        portfolio-alignment-group (rf/subscribe [:portfolio-alignment/group])\r\n        field (rf/subscribe [:portfolio-alignment/field])\r\n        threshold (rf/subscribe [:portfolio-alignment/threshold])\r\n        ]\r\n    [box :class \"subbody rightelement\" :child\r\n     [v-box :class \"element\" :align-self :center :justify :center :gap \"20px\"\r\n      :children [[title :label (str \"Portfolio drill-down \" @(rf/subscribe [:qt-date])) :level :level1]\r\n                 [h-box :gap \"10px\"\r\n                  :children (into [] (concat [\r\n                                              [v-box :gap \"15px\" :children [[title :label \"Display type:\" :level :level3] [title :label \"Field:\" :level :level3] [title :label \"Threshold:\" :level :level3]]]\r\n                                              [v-box :gap \"10px\" :children [[single-dropdown :width dropdown-width :model display-style :choices [{:id \"Table\" :label \"Table\"} {:id \"Tree\" :label \"Tree\"}] :on-change #(rf/dispatch [:portfolio-alignment/display-style %])]\r\n                                                                            [single-dropdown :width dropdown-width :model field :choices static/field-choices-alignment :on-change #(rf/dispatch [:portfolio-alignment/field %])]\r\n                                                                            [single-dropdown :width dropdown-width :model threshold :choices static/threshold-choices-alignment :on-change #(rf/dispatch [:portfolio-alignment/threshold %])]\r\n                                                                            ]]\r\n                                              [gap :size \"50px\"]\r\n                                              [title :label \"Filtering:\" :level :level3]\r\n                                              [single-dropdown :width dropdown-width :model portfolio-alignment-group :choices static/portfolio-alignment-groups :on-change #(rf/dispatch [:portfolio-alignment/group %])]]\r\n                                             (into [] (for [i (range 1 4)] [single-dropdown :width dropdown-width :model (r/cursor risk-filter [i]) :choices static/risk-choice-map :on-change #(rf/dispatch [:portfolio-alignment/filter i %])]))))]\r\n                 ;[h-box :gap \"10px\" :children [[title :label \"Shortcuts:\"]]]\r\n                 [multiple-portfolio-alignment-risk-display]\r\n\r\n                 ]]])\r\n  )\r\n\r\n\r\n\r\n(defn summary-display []\r\n  (let [positions @(rf/subscribe [:positions])\r\n        portfolios @(rf/subscribe [:portfolios])\r\n        totals @(rf/subscribe [:total-positions])\r\n        display (into [] (for [p portfolios]\r\n                           (merge\r\n                             {:portfolio       p}\r\n                             (into {} (for [k [:cash-pct :base-value :contrib-yield :contrib-zspread :contrib-gspread :contrib-mdur :qt-iam-int-lt-median-rating :qt-iam-int-lt-median-rating-score]] [k (get-in totals [(keyword p) k])]))\r\n                             {\r\n                              ;:cash-pct (reduce + (map :weight (filter #(and (= (:portfolio %) p) (= (:jpm-region %) \"Cash\")) positions)))\r\n                              :contrib-bond-yield (- (get-in totals [(keyword p) :contrib-yield]) (reduce + (map :contrib-yield (filter #(and (= (:portfolio %) p) (= (:jpm-region %) \"Cash\")) positions))))\r\n                              })))]\r\n    [box :class \"subbody rightelement\" :child\r\n     [v-box :class \"element\" :align-self :center :justify :center :gap \"20px\"\r\n      :children [[title :label (str \"Summary \" @(rf/subscribe [:qt-date])) :level :level1]\r\n    [:> ReactTable\r\n     {:data           display\r\n      :columns        [{:Header \"Portfolio\" :accessor \"portfolio\" :width 120}\r\n                       {:Header \"Balance\" :columns (mapv table-columns [:value :cash-pct])}\r\n                       {:Header \"Value\" :columns [(assoc (table-columns :contrib-yield) :Header \"Yield\")\r\n                                                  (table-columns :contrib-bond-yield)\r\n                                                  (assoc (table-columns :contrib-mdur) :Header \"M Dur\")\r\n                                                  (table-columns :rating)\r\n                                                  (assoc (table-columns :rating-score) :width 60  )\r\n                                                  (assoc (table-columns :contrib-zspread) :Header \"Z-spread\")\r\n                                                  (assoc (table-columns :contrib-gspread) :Header \"G-spread\")]}\r\n                       ]\r\n      :showPagination false\r\n      :pageSize       (count portfolios)\r\n      :className      \"-striped -highlight\"}]]]]))\r\n"]}