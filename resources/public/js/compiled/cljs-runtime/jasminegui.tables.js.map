{"version":3,"sources":["jasminegui/tables.cljs"],"mappings":"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","names":["jasminegui.tables/sum-rows","vals","cljs.core.reduce.cljs$core$IFn$_invoke$arity$2","cljs.core/+","jasminegui.tables/median","coll","sorted","cljs.core.sort.cljs$core$IFn$_invoke$arity$1","cljs.core.remove.cljs$core$IFn$_invoke$arity$2","cljs.core/nil?","cnt","cljs.core/count","halfway","cljs.core/quot","cljs.core/odd?","cljs.core.nth.cljs$core$IFn$_invoke$arity$2","bottom","bottom-val","top-val","jasminegui.tables/nff","js/goog.i18n.NumberFormat","goog.i18n.NumberFormat.Format/DECIMAL","jasminegui.tables/nf","x","jasminegui.tables/round-to-thousand","jasminegui.tables/tnfmt","cljs.core.comp.cljs$core$IFn$_invoke$arity$2","jasminegui.tables/nf2","jasminegui.tables/nfcell","this","reagent.core/as-element","temp__5733__auto__","jasminegui.tables/case-insensitive-filter","filterfn","row","jasminegui.tables/txt-format","fmt","m","G__111557","G__111558","goog.string/format","jasminegui.tables/round3","cljs.core.partial.cljs$core$IFn$_invoke$arity$3","jasminegui.tables/round2","jasminegui.tables/round1","jasminegui.tables/yield-format","jasminegui.tables/zspread-format","jasminegui.tables/round2*100","jasminegui.tables/rating-sort","a","b","cljs.core/deref","t","G__111564","re-frame.core/subscribe","G__111565","cljs.core.keyword.cljs$core$IFn$_invoke$arity$1","G__111566","jasminegui.tables/roundpc","G__111567","G__111568","jasminegui.tables/round0pc","cljs.core.partial.cljs$core$IFn$_invoke$arity$2","jasminegui.tables/round1pc","jasminegui.tables/round2pc","jasminegui.tables/round1pcytd","style","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","G__111569","G__111570","jasminegui.tables/compare-nb","input","rowval","G__111571","cljs.core.subs.cljs$core$IFn$_invoke$arity$3","cljs.reader.read_string.cljs$core$IFn$_invoke$arity$1","cljs.core.subs.cljs$core$IFn$_invoke$arity$2","jasminegui.tables/compare-nb-d100","G__111573","jasminegui.tables/round2colpct","c","v","colorize","jasminegui.tables/rating-score-to-string","jasminegui.tables/risk-table-columns","cljs.core/first","jasminegui.tables/invrtg-to-string","jasminegui.tables/attribution-table-columns"],"sourcesContent":["(ns jasminegui.tables\r\n  (:require\r\n    ; [oz.core :as oz]\r\n    [re-frame.core :as rf]\r\n    [reagent.core :as r]\r\n    [goog.string :as gstring]\r\n    [goog.string.format])\r\n  (:import (goog.i18n NumberFormat)\r\n           (goog.i18n.NumberFormat Format))\r\n\r\n    )\r\n\r\n;AGGREGATION\r\n(defn sum-rows [vals] (reduce + vals))\r\n\r\n(defn median [coll]\r\n  (let [sorted (sort (remove nil? coll))\r\n        cnt (count sorted)\r\n        halfway (quot cnt 2)]\r\n    (cond\r\n      (zero? cnt) nil\r\n      (odd? cnt) (nth sorted halfway)\r\n      :else (let [bottom (dec halfway) bottom-val (nth sorted bottom) top-val (nth sorted halfway)] (* 0.5 (+ bottom-val top-val))))))\r\n\r\n(def nff (NumberFormat. Format/DECIMAL))\r\n(defn nf [x] (.format nff (str x)))\r\n(defn round-to-thousand [x] (* 1000 (int (/ x 1000.))))\r\n(def tnfmt (comp nf round-to-thousand))\r\n\r\n(defn nf2 [x] (.format nff x))\r\n\r\n(defn nfcell [this]\r\n  (r/as-element\r\n    (if-let [x (aget this \"value\")]\r\n      [:div  (nf (int x))]\r\n      \"-\")))\r\n\r\n\r\n(defn case-insensitive-filter [filterfn row]\r\n  \"filterfn is {id: column_name value: text_in_filter_box\"\r\n  ;(println row)\r\n  (.includes (.toLowerCase (str (aget row (aget filterfn \"id\")))) (.toLowerCase (aget filterfn \"value\")))\r\n\r\n  ;(or\r\n  ;  (.includes (.toLowerCase (str (aget row (aget filterfn \"id\")))) (.toLowerCase (aget filterfn \"value\")))\r\n  ;  (.includes (.toLowerCase (str (aget row (aget filterfn \"_pivotId\")))) (.toLowerCase (aget filterfn \"value\")))\r\n  ;  )\r\n\r\n  )\r\n\r\n(defn txt-format [fmt m this]    (r/as-element (if-let [x (aget this \"value\")] (gstring/format fmt (* m x)) \"-\")))\r\n(def round3         (partial txt-format \"%.3f\" 1.))\r\n(def round2         (partial txt-format \"%.2f\" 1.))\r\n(def round1         (partial txt-format \"%.1f\" 1.))\r\n(def yield-format   (partial txt-format \"%.2f%\" 1.))\r\n(def zspread-format (partial txt-format \"%.0fbps\" 1.))\r\n(def round2*100     (partial txt-format \"%.2f\" 100.))\r\n\r\n(defn rating-sort [a b]\r\n  (let [t @(rf/subscribe [:rating-to-score])] (<= (t (keyword a)) (t (keyword b)))))\r\n\r\n\r\n\r\n(defn roundpc [fmt this]\r\n  (r/as-element\r\n    (if-let [x (aget this \"value\")]\r\n      [:div {:style {:color (if (neg? x) \"red\" \"black\")}} (gstring/format fmt (* 100 x))]\r\n      \"-\")))\r\n\r\n(def round0pc (partial roundpc \"%.0f%\"))\r\n(def round1pc (partial roundpc \"%.1f%\"))\r\n(def round2pc (partial roundpc \"%.2f%\"))\r\n\r\n(defn round1pcytd  [this]\r\n  (r/as-element\r\n    (if-let [x (aget this \"value\")]\r\n      (let [style (merge (if (neg? x) {:color \"red\"} {:color \"black\"})\r\n                         (if (aget this \"row\" \"thisyear\") {:font-style \"italic\"} {}))]\r\n        [:div {:style style} (gstring/format \"%.1f%\" (* 100 x))])\r\n      \"-\")))\r\n\r\n(defn compare-nb [filterfn row]\r\n  \"filterfn is {id: column_name value: text_in_filter_box\"\r\n  (let [input (aget filterfn \"value\")\r\n        rowval (aget row (aget filterfn \"id\"))]\r\n    (case (subs input 0 1)\r\n      \">\" (> rowval (cljs.reader/read-string (subs input 1)))\r\n      \"<\" (< rowval (cljs.reader/read-string (subs input 1)))\r\n      (> rowval (cljs.reader/read-string input)))))\r\n\r\n(defn compare-nb-d100 [filterfn row]\r\n  \"filterfn is {id: column_name value: text_in_filter_box\"\r\n  (let [input (aget filterfn \"value\")\r\n        rowval (aget row (aget filterfn \"id\"))]\r\n    (case (subs input 0 1)\r\n      \">\" (> rowval (* 0.01 (cljs.reader/read-string (subs input 1))))\r\n      \"<\" (< rowval (* 0.01 (cljs.reader/read-string (subs input 1))))\r\n      (> rowval (* 0.01 (cljs.reader/read-string input))))))\r\n\r\n(defn round2colpct  [this]\r\n  (r/as-element\r\n    (if-let [x (aget this \"value\")]\r\n      (letfn [(colorize [c v] [:div {:style {:color c}} (gstring/format \"%.2f%\" v)])]\r\n        (cond\r\n          (>= x 0.0) (colorize \"black\" x)\r\n          (< x 0.0) (colorize \"red\" x)\r\n          :else \"-\"))\r\n      \"-\")))\r\n\r\n\r\n(defn rating-score-to-string [this] (aget this \"row\" \"qt-iam-int-lt-median-rating\"))\r\n\r\n\r\n(def risk-table-columns\r\n  {:id                          {:Header \"ID\"             :accessor \"id\"                          :show false}\r\n   :id-show                     {:Header \"ID\"             :accessor \"id\"                          :width 75}\r\n   :region                      {:Header \"Region\"         :accessor \"jpm-region\" :width 140 }\r\n   :country                     {:Header \"Country\"        :accessor \"qt-risk-country-name\" :width 140}\r\n   :issuer                      {:Header \"Issuer\"         :accessor \"TICKER\" :width 140 }\r\n   :sector                      {:Header \"Sector\"         :accessor \"qt-jpm-sector\" :width 140}\r\n   :maturity-band               {:Header \"Maturity\"       :accessor \"qt-final-maturity-band\" :width 140}\r\n   :rating                      {:Header \"Rating\"         :accessor \"qt-iam-int-lt-median-rating\" :show false}  ; :show false\r\n   ;  :rating                      {:Header \"Rating\" :accessor \"qt-iam-int-lt-median-rating\"  :show false} :sortMethod rating-sort} ; :show false\r\n   :rating-score                {:Header \"Rating\"         :accessor \"qt-iam-int-lt-median-rating-score\" :Cell rating-score-to-string :aggregate first}\r\n   :name                        {:Header \"Name\"           :accessor \"NAME\" :width 140} ;  :filterMethod case-insensitive-filter\r\n   :isin                        {:Header \"ISIN\"           :accessor \"isin\"                        :width 125 } ;:style {:textAlign \"center\"}\r\n   :description                 {:Header \"thinkFolio ID\"  :accessor \"description\" :width 500}\r\n   :nav                         {:Header \"Fund\"           :accessor \"weight\" :width 60 :style {:textAlign \"right\"} :aggregate sum-rows :Cell round2*100 :filterable true :filterMethod compare-nb-d100}\r\n   :bm-weight                   {:Header \"Index\"          :accessor \"bm-weight\" :width 60 :style {:textAlign \"right\"} :aggregate sum-rows :Cell round2*100 :filterable true :filterMethod compare-nb-d100}\r\n   :nominal                     {:Header \"Nominal\"        :accessor \"original-quantity\" :width 120 :style {:textAlign \"right\"} :aggregate sum-rows :Cell nfcell :filterable true :filterMethod compare-nb}\r\n   :z-spread                    {:Header \"Z-spread\"       :accessor \"qt-libor-spread\" :width 80 :style {:textAlign \"right\"} :aggregate median :Cell nfcell :filterable true :filterMethod compare-nb}\r\n   :g-spread                    {:Header \"G-spread\"       :accessor \"qt-govt-spread\" :width 80 :style {:textAlign \"right\"} :aggregate median :Cell nfcell :filterable true :filterMethod compare-nb}\r\n   :duration                    {:Header \"M dur\"          :accessor \"qt-modified-duration\" :width 60 :style {:textAlign \"right\"} :aggregate median :Cell round2 :filterable true :filterMethod compare-nb}\r\n   :yield                       {:Header \"Yield\"          :accessor \"qt-yield\" :width 60 :style {:textAlign \"right\"} :aggregate median :Cell round2pc :filterable true :filterMethod compare-nb-d100}\r\n   :value                       {:Header \"Value\"          :accessor \"base-value\" :width 120 :style {:textAlign \"right\"} :aggregate sum-rows :Cell nfcell :filterable true :filterMethod compare-nb}\r\n   :contrib-gspread             {:Header \"G-spread\"       :accessor \"contrib-gspread\" :width 80 :style {:textAlign \"right\"} :aggregate sum-rows :Cell round1 :filterable false}\r\n   :contrib-zspread             {:Header \"Fund\"           :accessor \"contrib-zspread\" :width 80 :style {:textAlign \"right\"} :aggregate sum-rows :Cell round1 :filterable false}\r\n   :contrib-yield               {:Header \"Fund\"           :accessor \"contrib-yield\" :width 60 :style {:textAlign \"right\"} :aggregate sum-rows :Cell round2pc :filterable false}\r\n   :contrib-mdur                {:Header \"Fund\"           :accessor \"contrib-mdur\" :width 60 :style {:textAlign \"right\"} :aggregate sum-rows :Cell round2 :filterable false}\r\n   :bm-contrib-yield            {:Header \"Index\"          :accessor \"bm-contrib-yield\" :width 60 :style {:textAlign \"right\"} :aggregate sum-rows :Cell round2pc :filterable false}\r\n   :bm-contrib-eir-duration     {:Header \"Index\"          :accessor \"bm-contrib-eir-duration\" :width 60 :style {:textAlign \"right\"} :aggregate sum-rows :Cell round2 :filterable false}\r\n   :cash-pct                    {:Header \"Cash\"           :accessor \"cash-pct\" :width 60 :style {:textAlign \"right\"} :Cell round2pc :filterable false}\r\n   :contrib-bond-yield          {:Header \"Bond yield\"     :accessor \"contrib-bond-yield\" :width 80 :style {:textAlign \"right\"} :Cell round2pc :filterable false}\r\n   :weight-delta                {:Header \"Delta\"          :accessor \"weight-delta\" :width 60 :style {:textAlign \"right\"} :aggregate sum-rows :Cell round2*100 :filterable true :filterMethod compare-nb-d100}\r\n   :mdur-delta                  {:Header \"Delta\"          :accessor \"mdur-delta\" :width 60 :style {:textAlign \"right\"} :aggregate sum-rows :Cell round2 :filterable false}\r\n   :contrib-beta                {:Header \"Fund\"           :accessor \"contrib-beta-1y-daily\" :width 60 :style {:textAlign \"right\"} :aggregate sum-rows :Cell round2 :filterable false}\r\n   :cembi-beta-last-year        {:Header \"1y beta\"        :accessor \"cembi-beta-last-year\" :width 60 :style {:textAlign \"right\"} :aggregate median :Cell round2 :filterable false}\r\n   :cembi-beta-previous-year    {:Header \"LY beta\"        :accessor \"cembi-beta-previous-year\" :width 60 :style {:textAlign \"right\"} :aggregate median :Cell round2 :filterable false}\r\n   :total-return-ytd            {:Header \"YTD TR\"         :accessor \"total-return-ytd\" :width 60 :style {:textAlign \"right\"} :aggregate median :Cell round2*100 :filterable false}\r\n   :jensen-ytd                  {:Header \"Jensen\"         :accessor \"jensen-ytd\" :width 60 :style {:textAlign \"right\"} :aggregate median :Cell round2*100 :filterable false}\r\n   })\r\n\r\n(defn invrtg-to-string [this] (aget this \"row\" \"Rating\"))\r\n\r\n(def attribution-table-columns\r\n  {:region                      {:Header \"Region\"         :accessor \"Region\" :width 140 }\r\n   :country                     {:Header \"Country\"        :accessor \"Country\" :width 140}\r\n   :issuer                      {:Header \"Issuer\"         :accessor \"Issuer\" :width 140 }\r\n   :sector                      {:Header \"Sector\"         :accessor \"Sector\" :width 140}\r\n   :maturity-band               {:Header \"Maturity\"       :accessor \"Duration-Bucket\" :width 140}\r\n   :portfolio                   {:Header \"Portfolio\"       :accessor \"Fund\" :width 140}\r\n   :total-effect                {:Header \"Fund\" :accessor \"Total-Effect\"  :width 70 :style {:textAlign \"right\"} :aggregate sum-rows :Cell round2colpct :filterable false}\r\n   :xs-weight                   {:Header \"Excess\"   :accessor \"Average-Excess-Weight\"  :width 70 :style {:textAlign \"right\"} :aggregate sum-rows :Cell round2colpct :filterable false}\r\n   :weight                      {:Header \"Fund\"   :accessor \"Average-Fund-Weight\" :width 70 :style {:textAlign \"right\"} :aggregate sum-rows :Cell round2colpct :filterable false}\r\n   :bm-weight                   {:Header \"Index\"   :accessor \"Average-Index-Weight\" :width 70 :style {:textAlign \"right\"} :aggregate sum-rows :Cell round2colpct :filterable false}\r\n   :contribution                {:Header \"Fund\"   :accessor \"Fund-Contribution\" :width 70 :style {:textAlign \"right\"} :aggregate sum-rows :Cell round2colpct :filterable false}\r\n   :bm-contribution             {:Header \"Index\"   :accessor \"Index-Contribution\" :width 70 :style {:textAlign \"right\"} :aggregate sum-rows :Cell round2colpct :filterable false}\r\n   :rating                      {:Header \"Rating\"   :accessor \"Rating\" :width 140 :show false}\r\n   :rating-group                {:Header \"Rating Group\"   :accessor \"RatingGroup\" :width 140}\r\n   :code                        {:Header \"Code\" :accessor \"Code\" :width 140}\r\n   :ighy                        {:Header \"IGHY\" :accessor \"IGHY\" :width 140}\r\n   :invrtg                      {:Header \"Rating\" :accessor \"INVRTG\" :width 140  :Cell invrtg-to-string :aggregate first}\r\n   :period                      {:Header \"Period\" :accessor \"Period\" :width 140}\r\n   :security                    {:Header \"Security\" :accessor \"Security\" :width 140}\r\n   })\r\n\r\n"]}