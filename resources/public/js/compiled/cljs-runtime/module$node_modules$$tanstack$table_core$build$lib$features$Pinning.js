shadow$provide.module$node_modules$$tanstack$table_core$build$lib$features$Pinning=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});var utils=require("module$node_modules$$tanstack$table_core$build$lib$utils");exports.Pinning={getInitialState:state=>Object.assign({},{columnPinning:{left:[],right:[]}},state),getDefaultOptions:table=>({onColumnPinningChange:utils.makeStateUpdater("columnPinning",table)}),createColumn:(column,table)=>({pin:position=>{const columnIds=
column.getLeafColumns().map(d=>d.id).filter(Boolean);table.setColumnPinning(old=>{var _old$left3,_old$right3;if("right"===position){var _old$left,_old$right;return{left:(null!=(_old$left=null==old?void 0:old.left)?_old$left:[]).filter(d=>!(null!=columnIds&&columnIds.includes(d))),right:[...(null!=(_old$right=null==old?void 0:old.right)?_old$right:[]).filter(d=>!(null!=columnIds&&columnIds.includes(d))),...columnIds]}}if("left"===position){var _old$left2,_old$right2;return{left:[...(null!=(_old$left2=
null==old?void 0:old.left)?_old$left2:[]).filter(d=>!(null!=columnIds&&columnIds.includes(d))),...columnIds],right:(null!=(_old$right2=null==old?void 0:old.right)?_old$right2:[]).filter(d=>!(null!=columnIds&&columnIds.includes(d)))}}return{left:(null!=(_old$left3=null==old?void 0:old.left)?_old$left3:[]).filter(d=>!(null!=columnIds&&columnIds.includes(d))),right:(null!=(_old$right3=null==old?void 0:old.right)?_old$right3:[]).filter(d=>!(null!=columnIds&&columnIds.includes(d)))}})},getCanPin:()=>column.getLeafColumns().some(d=>
{var _d$columnDef$enablePi,_table$options$enable;return(null!=(_d$columnDef$enablePi=d.columnDef.enablePinning)?_d$columnDef$enablePi:!0)&&(null!=(_table$options$enable=table.options.enablePinning)?_table$options$enable:!0)}),getIsPinned:()=>{var leafColumnIds=column.getLeafColumns().map(d=>d.id);const {left,right}=table.getState().columnPinning,isLeft=leafColumnIds.some(d=>null==left?void 0:left.includes(d));leafColumnIds=leafColumnIds.some(d=>null==right?void 0:right.includes(d));return isLeft?
"left":leafColumnIds?"right":!1},getPinnedIndex:()=>{var _table$getState$colum,_table$getState$colum2,_table$getState$colum3;const position=column.getIsPinned();return position?null!=(_table$getState$colum=null==(_table$getState$colum2=table.getState().columnPinning)?void 0:null==(_table$getState$colum3=_table$getState$colum2[position])?void 0:_table$getState$colum3.indexOf(column.id))?_table$getState$colum:-1:0}}),createRow:(row,table)=>({getCenterVisibleCells:utils.memo(()=>[row._getAllVisibleCells(),
table.getState().columnPinning.left,table.getState().columnPinning.right],(allCells,left,right)=>{const leftAndRight=[...(null!=left?left:[]),...(null!=right?right:[])];return allCells.filter(d=>!leftAndRight.includes(d.column.id))},{key:!1,debug:()=>{var _table$options$debugA;return null!=(_table$options$debugA=table.options.debugAll)?_table$options$debugA:table.options.debugRows}}),getLeftVisibleCells:utils.memo(()=>[row._getAllVisibleCells(),table.getState().columnPinning.left,,],(allCells,left)=>
(null!=left?left:[]).map(columnId=>allCells.find(cell=>cell.column.id===columnId)).filter(Boolean).map(d=>Object.assign({},d,{position:"left"})),{key:!1,debug:()=>{var _table$options$debugA2;return null!=(_table$options$debugA2=table.options.debugAll)?_table$options$debugA2:table.options.debugRows}}),getRightVisibleCells:utils.memo(()=>[row._getAllVisibleCells(),table.getState().columnPinning.right],(allCells,right)=>(null!=right?right:[]).map(columnId=>allCells.find(cell=>cell.column.id===columnId)).filter(Boolean).map(d=>
Object.assign({},d,{position:"right"})),{key:!1,debug:()=>{var _table$options$debugA3;return null!=(_table$options$debugA3=table.options.debugAll)?_table$options$debugA3:table.options.debugRows}})}),createTable:table=>({setColumnPinning:updater=>null==table.options.onColumnPinningChange?void 0:table.options.onColumnPinningChange(updater),resetColumnPinning:defaultState=>{var _table$initialState$c,_table$initialState;return table.setColumnPinning(defaultState?{left:[],right:[]}:null!=(_table$initialState$c=
null==(_table$initialState=table.initialState)?void 0:_table$initialState.columnPinning)?_table$initialState$c:{left:[],right:[]})},getIsSomeColumnsPinned:position=>{var _pinningState$positio;const pinningState=table.getState().columnPinning;if(!position){var _pinningState$left,_pinningState$right;return!!((null==(_pinningState$left=pinningState.left)?0:_pinningState$left.length)||(null==(_pinningState$right=pinningState.right)?0:_pinningState$right.length))}return!(null==(_pinningState$positio=pinningState[position])||
!_pinningState$positio.length)},getLeftLeafColumns:utils.memo(()=>[table.getAllLeafColumns(),table.getState().columnPinning.left],(allColumns,left)=>(null!=left?left:[]).map(columnId=>allColumns.find(column=>column.id===columnId)).filter(Boolean),{key:"getLeftLeafColumns",debug:()=>{var _table$options$debugA4;return null!=(_table$options$debugA4=table.options.debugAll)?_table$options$debugA4:table.options.debugColumns}}),getRightLeafColumns:utils.memo(()=>[table.getAllLeafColumns(),table.getState().columnPinning.right],
(allColumns,right)=>(null!=right?right:[]).map(columnId=>allColumns.find(column=>column.id===columnId)).filter(Boolean),{key:"getRightLeafColumns",debug:()=>{var _table$options$debugA5;return null!=(_table$options$debugA5=table.options.debugAll)?_table$options$debugA5:table.options.debugColumns}}),getCenterLeafColumns:utils.memo(()=>[table.getAllLeafColumns(),table.getState().columnPinning.left,table.getState().columnPinning.right],(allColumns,left,right)=>{const leftAndRight=[...(null!=left?left:
[]),...(null!=right?right:[])];return allColumns.filter(d=>!leftAndRight.includes(d.id))},{key:"getCenterLeafColumns",debug:()=>{var _table$options$debugA6;return null!=(_table$options$debugA6=table.options.debugAll)?_table$options$debugA6:table.options.debugColumns}})})}}
//# sourceMappingURL=module$node_modules$$tanstack$table_core$build$lib$features$Pinning.js.map
