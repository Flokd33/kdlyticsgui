{
"version":3,
"file":"module$node_modules$$tanstack$table_core$build$lib$utils$getExpandedRowModel.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,CAAA,4EAAA,CAAiG,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAmCzIC,QAASA,WAAU,CAACC,QAAD,CAAW,CAC5B,MAAMC,aAAe,EAArB,CACMC,UAAYC,GAAAD,EAAO,CACvB,IAAIE,YACJH,aAAaI,CAAAA,IAAb,CAAkBF,GAAlB,CACoC,KAApC,GAAKC,YAAL,CAAoBD,GAAIG,CAAAA,OAAxB,GAA4CF,YAAaG,CAAAA,MAAzD,EAAmEJ,GAAIK,CAAAA,aAAJ,EAAnE,EACEL,GAAIG,CAAAA,OAAQG,CAAAA,OAAZ,CAAoBP,SAApB,CAJqB,CAOzBF,SAASU,CAAAA,IAAKD,CAAAA,OAAd,CAAsBP,SAAtB,CACA,OAAO,CACLQ,KAAMT,YADD,CAELU,SAAUX,QAASW,CAAAA,QAFd,CAGLC,SAAUZ,QAASY,CAAAA,QAHd,CAVqB,CAtB9BC,MAAOC,CAAAA,cAAP,CAAsBhB,OAAtB,CAA+B,YAA/B;AAA6C,CAAEiB,MAAO,CAAA,CAAT,CAA7C,CAEA,KAAIC,MAAQpB,OAAA,CAAQ,0DAAR,CAqCZE,QAAQC,CAAAA,UAAR,CAAqBA,UACrBD,QAAQmB,CAAAA,mBAAR,CApCAA,QAA4B,EAAG,CAC7B,MAAOC,MAAA,EAASF,KAAMG,CAAAA,IAAN,CAAW,EAAA,EAAM,CAACD,KAAME,CAAAA,QAAN,EAAiBC,CAAAA,QAAlB,CAA4BH,KAAMI,CAAAA,sBAAN,EAA5B,CAA4DJ,KAAMK,CAAAA,OAAQC,CAAAA,oBAA1E,CAAjB,CAAkH,CAACH,QAAD,CAAWrB,QAAX,CAAqBwB,oBAArB,CAAA,EAC3HxB,QAASU,CAAAA,IAAKH,CAAAA,MAGnB,GAH0C,CAAA,CAG1C,GAH6Bc,QAG7B,EAHmDR,MAAOY,CAAAA,IAAP,CAAwB,IAAZ,EAAAJ,QAAA,CAAmBA,QAAnB,CAA8B,EAA1C,CAA8Cd,CAAAA,MAGjG,GAAKiB,oBAAL,CAIOzB,UAAA,CAAWC,QAAX,CAJP,CAESA,QANK,CASb,CACD0B,IAA+C,qBAD9C,CAEDC,MAAO,EAAAA,EAAM,CACX,IAAIC,qBACJ;MAA2D,KAApD,GAACA,qBAAD,CAAyBV,KAAMK,CAAAA,OAAQM,CAAAA,QAAvC,EAA2DD,qBAA3D,CAAmFV,KAAMK,CAAAA,OAAQO,CAAAA,UAF7F,CAFZ,CATa,CADa,CAjB0G;",
"sources":["node_modules/@tanstack/table-core/build/lib/utils/getExpandedRowModel.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$tanstack$table_core$build$lib$utils$getExpandedRowModel\"] = function(global,require,module,exports) {\n/**\n * table-core\n *\n * Copyright (c) TanStack\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar utils = require('../utils.js');\n\nfunction getExpandedRowModel() {\n  return table => utils.memo(() => [table.getState().expanded, table.getPreExpandedRowModel(), table.options.paginateExpandedRows], (expanded, rowModel, paginateExpandedRows) => {\n    if (!rowModel.rows.length || expanded !== true && !Object.keys(expanded != null ? expanded : {}).length) {\n      return rowModel;\n    }\n    if (!paginateExpandedRows) {\n      // Only expand rows at this point if they are being paginated\n      return rowModel;\n    }\n    return expandRows(rowModel);\n  }, {\n    key: process.env.NODE_ENV === 'development' && 'getExpandedRowModel',\n    debug: () => {\n      var _table$options$debugA;\n      return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugTable;\n    }\n  });\n}\nfunction expandRows(rowModel) {\n  const expandedRows = [];\n  const handleRow = row => {\n    var _row$subRows;\n    expandedRows.push(row);\n    if ((_row$subRows = row.subRows) != null && _row$subRows.length && row.getIsExpanded()) {\n      row.subRows.forEach(handleRow);\n    }\n  };\n  rowModel.rows.forEach(handleRow);\n  return {\n    rows: expandedRows,\n    flatRows: rowModel.flatRows,\n    rowsById: rowModel.rowsById\n  };\n}\n\nexports.expandRows = expandRows;\nexports.getExpandedRowModel = getExpandedRowModel;\n//# sourceMappingURL=getExpandedRowModel.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","expandRows","rowModel","expandedRows","handleRow","row","_row$subRows","push","subRows","length","getIsExpanded","forEach","rows","flatRows","rowsById","Object","defineProperty","value","utils","getExpandedRowModel","table","memo","getState","expanded","getPreExpandedRowModel","options","paginateExpandedRows","keys","key","debug","_table$options$debugA","debugAll","debugTable"]
}
