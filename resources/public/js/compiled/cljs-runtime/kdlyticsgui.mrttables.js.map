{"version":3,"sources":["kdlyticsgui/mrttables.cljs"],"mappings":"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","names":["kdlyticsgui.mrttables/get-js-row-key","row","key","kdlyticsgui.mrttables.goog$module$goog$object.getValueByKeys","kdlyticsgui.mrttables/held-formatting","temp__5802__auto__","x","pred__40005","expr__40006","cljs.core/=","cljs.core/odd?","helix.core/get-react","obj40058","obj40060","obj40076","obj40078","obj40080","obj40082","obj40084","obj40086","obj40088","obj40090","obj40092","obj40094","obj40096","obj40098","obj40100","obj40109","obj40111","obj40113","obj40115","obj40117","obj40119","obj40121","obj40123","obj40125","obj40127","obj40129","obj40131","obj40140","obj40142","obj40144","obj40146","obj40148","obj40150","obj40152","obj40154","obj40156","obj40158","obj40160","obj40162","obj40171","obj40173","obj40175","obj40177","obj40179","obj40181","obj40183","obj40185","obj40187","obj40189","obj40198","obj40200","obj40202","obj40204","obj40222","obj40224","obj40226","obj40228","obj40230","obj40232","obj40234","obj40236","obj40238","obj40240","obj40242","obj40244","obj40246","obj40249","obj40252","obj40277","helix.impl.props/merge-obj","helix.impl.props._props","obj40303","obj40331","obj40348","kdlyticsgui.mrttables/held-formatting-qs","this","r","G__40008","js/Error","kdlyticsgui.mrttables/median","coll","sorted","cljs.core.sort","cljs.core.remove","cljs.core/nil?","cnt","cljs.core/count","halfway","cljs.core/quot","cljs.core.nth","bottom","bottom-val","top-val","kdlyticsgui.mrttables/mrt-median","columnId","leafRows","childRows","p1__40009#","cljs.core.map","kdlyticsgui.mrttables/nff","js/goog.i18n.NumberFormat","goog.i18n.NumberFormat.Format/DECIMAL","kdlyticsgui.mrttables/cell-value","c","kdlyticsgui.mrttables/nb-cell-format","fmt","m","js/isNaN","goog.string/format","kdlyticsgui.mrttables/nb-cell-format-no0","or__5045__auto__","p1__40010#","kdlyticsgui.mrttables/round2","p1__40011#","kdlyticsgui.mrttables/round3","p1__40012#","kdlyticsgui.mrttables/round0","p1__40013#","kdlyticsgui.mrttables/round1","p1__40014#","kdlyticsgui.mrttables/round4","p1__40015#","kdlyticsgui.mrttables/round0pc","p1__40016#","kdlyticsgui.mrttables/round1pc","p1__40017#","kdlyticsgui.mrttables/round2pc","p1__40018#","kdlyticsgui.mrttables/round0*1000000","p1__40019#","kdlyticsgui.mrttables/round0pc100","p1__40020#","kdlyticsgui.mrttables/round1pc100","p1__40021#","kdlyticsgui.mrttables/round2pc100","p1__40022#","kdlyticsgui.mrttables/round2*100","p1__40023#","kdlyticsgui.mrttables/yield-format","p1__40024#","kdlyticsgui.mrttables/round2-no0","p1__40025#","kdlyticsgui.mrttables/round2pc-no0","p1__40026#","kdlyticsgui.mrttables/zspread-format","p1__40027#","kdlyticsgui.mrttables/performance-attributes-bps","p1__40028#","kdlyticsgui.mrttables/date-sc","kdlyticsgui.mrttables/nb-thousand-cell-format","js/Math.round","kdlyticsgui.mrttables/red-negatives","cell","kdlyticsgui.mrttables/red-negatives-pinned","kdlyticsgui.mrttables/this-year","cljs-time.core/today","kdlyticsgui.mrttables/ytd-ita","cljs.core._EQ_","cljs.core.subs","kdlyticsgui.mrttables/lower-case-s-in-value?","s","value","G__40029","js/parseFloat","cljs.core/not","kdlyticsgui.mrttables/ampersand-truth","id","line","p1__40030#","kdlyticsgui.mrttables/text-filter-OR","filterValue","p1__40031#","v","var_args","G__40033","kdlyticsgui.mrttables/comparator-read","rowval","input","mult","G__40034","G__40274","helix.hooks/wrap-fx","G__40275","helix.hooks/raw-use-effect","G__40300","G__40301","G__40328","G__40329","kdlyticsgui.mrttables.comparator_read","kdlyticsgui.mrttables/ampersand-comp","compread","kdlyticsgui.mrttables/nb-filter-OR-AND","p1__40035#","p1__40036#","p1__40037#","kdlyticsgui.mrttables/ds-text-col","header","accessor","width","cljs.core.println","cljs.core.get","G__40040","kdlyticsgui.mrttables/ds-nb-col","p1__40038#","aggregate","AggregatedCell","cljs.core.assoc","kdlyticsgui.mrttables.ds_nb_col","G__40042","kdlyticsgui.mrttables/text-col-pinned","kdlyticsgui.mrttables.text_col_pinned","G__40044","kdlyticsgui.mrttables/text-col","kdlyticsgui.mrttables.text_col","G__40046","kdlyticsgui.mrttables/text-col-multiline","kdlyticsgui.mrttables.text_col_multiline","G__40048","kdlyticsgui.mrttables/nb-col","kdlyticsgui.mrttables.nb_col","G__40050","kdlyticsgui.mrttables/nb-col-pinned","kdlyticsgui.mrttables.nb_col_pinned","G__40052","props__29990__auto__","maybe-ref__29991__auto__","vec__40053","helix.core/extract-cljs-props","map__40056","cljs.core/--destructure-map","goog/DEBUG","G__40061","kdlyticsgui.mrttables/icon-element-button-helix","icon","tooltip-text","on-click-fn","js/module$node_modules$$mui$material$node$index.Tooltip","js/module$node_modules$$mui$material$node$index.IconButton","kdlyticsgui.mrttables/photo-id->shortcut-key","kdlyticsgui.mrttables/get-pivoted-data","table","leaves","cljs.core.into","iter__5523__auto__","s__40063","cljs.core/LazySeq","temp__5804__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__5521__auto__","size__5522__auto__","b__40065","cljs.core/chunk-buffer","i__40064","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__40062","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","leaf","cljs.core.js__GT_clj","kdlyticsgui.mrttables/download-view","download-fn","photo-id","dw-cols","cljs.core.concat","p1__40067#","p1__40066#","kdlyticsgui.tools.csv_link","G__40068","G__40070","vec__40071","map__40074","G__40101","kdlyticsgui.mrttables/single-risk-table-toolbar","data","js/module$node_modules$$mui$icons_material$BarChart.default","re-frame.core/dispatch","js/module$node_modules$$mui$icons_material$PieChart.default","js/module$node_modules$$mui$material$node$index.Divider","js/module$node_modules$$mui$icons_material$Filter1.default","js/module$node_modules$$mui$icons_material$Filter2.default","js/module$node_modules$$mui$icons_material$Filter3.default","js/module$node_modules$$mui$icons_material$Filter4.default","js/module$node_modules$$mui$icons_material$Expand.default","js/module$node_modules$$mui$icons_material$FilterListOff.default","js/module$node_modules$material_react_table$dist$cjs$index.MRT_ShowHideColumnsButton","js/module$node_modules$$mui$icons_material$SystemUpdateAlt.default","js/module$node_modules$$mui$icons_material$Download.default","G__40103","vec__40104","map__40107","G__40132","kdlyticsgui.mrttables/ta-table-toolbar","G__40134","vec__40135","map__40138","G__40163","kdlyticsgui.mrttables/single-attribution-table-toolbar","G__40165","vec__40166","map__40169","G__40190","kdlyticsgui.mrttables/risk-table-toolbar","G__40192","vec__40193","map__40196","G__40205","kdlyticsgui.mrttables/mrt-table-toolbar","kdlyticsgui.mrttables/mrt-default-download-fn","clj-cols","nested?","cljs.core/contains?","cljs.core.apply","cljs.core/concat","cljs.core/keyword","js-data","kdlyticsgui.mrttables/mrt-th-download-fn","kdlyticsgui.mrttables/show-if-any-is-hidden","groupset","visible-ids","cljs.core/set","p1__40206#","group-visible?","clojure.set/subset?","seq__40207","chunk__40208","count__40209","i__40210","c__5568__auto__","cljs.core/chunk-first","cljs.core/next","seq__40211","chunk__40212","count__40213","i__40214","kdlyticsgui.mrttables/help-modal","re-com.core/p","kdlyticsgui.mrttables/mrt-ref->filtered-col-seq","ref","col","kdlyticsgui.mrttables/mrt-ref->filtered-rows-seq","G__40216","vec__40217","map__40220","G__40250","kdlyticsgui.mrttables/mrt-qs-table-toolbar","stars","js/module$node_modules$$mui$icons_material$HelpCenter.default","js/module$node_modules$$mui$icons_material$Flag.default","cljs.core/name","js/module$node_modules$$mui$icons_material$Workspaces.default","js/module$node_modules$$mui$icons_material$CallEnd.default","js/module$node_modules$$mui$icons_material$Star.default","cljs.core/deref","clojure.string.join","js/module$node_modules$$mui$icons_material$StarBorder.default","cljs.core/reset!","G__40247","kdlyticsgui.mrttables/advanced-spot-chart-isins","reagent.core.atom","kdlyticsgui.mrttables/base-props","mdata","mcolumns","clj-option-map","js-initial-state","toolbar","cljs.core.merge","G__40256","vec__40257","map__40260","G__40280","kdlyticsgui.mrttables/material-react-table-template","clj-data","clj-columns","external-state-reference","initial-external-state","vec__40261","vec__40264","vec__40267","pinned-cols","cljs.core/clj->js","cljs.core.conj","cljs.core.mapv","ffilter","setFilter","helix.hooks/use-state","grouping","setGrouping","expanded","setExpanded","G__40270","G__40271","helix.hooks/raw-use-memo","cljs.core/array?","p1__40253#","p1__40254#","G__40272","G__40273","target","cljs.core/Keyword","props","js/module$node_modules$material_react_table$dist$cjs$index.default","G__40282","vec__40283","map__40286","G__40306","kdlyticsgui.mrttables/material-react-table-template-managed","vec__40287","vec__40290","vec__40293","G__40296","G__40297","G__40298","G__40299","G__40310","vec__40311","map__40314","G__40334","kdlyticsgui.mrttables/material-react-table-template-ta","vec__40315","vec__40318","vec__40321","G__40324","G__40325","p1__40307#","p1__40308#","G__40326","G__40327","G__40338","vec__40339","map__40342","G__40351","kdlyticsgui.mrttables/material-react-table-template-fast","G__40343","G__40344","p1__40335#","p1__40336#","G__40345","G__40346","G__40354","vec__40355","G__40360","kdlyticsgui.mrttables/material-react-table-template-basic","argument-map","p1__40352#","cljs.core.update","kdlyticsgui.mrttables/risk-table-columns","goog.string/unescapeEntities","p1__40361#","p1__40362#","kdlyticsgui.mrttables/attribution-table-columns","kdlyticsgui.mrttables/sub-low-level-rating-score-to-string","i","js/parseInt","kdlyticsgui.mrttables/low-level-rating-score-to-string","kdlyticsgui.mrttables/breach-status-color","G__40363","kdlyticsgui.mrttables/breach-status-color-rules","G__40364","kdlyticsgui.mrttables/breach-status-color-true-false","G__40365","kdlyticsgui.mrttables/breach-status-color-is-100","G__40366","kdlyticsgui.mrttables/breach-status-color-attribution-scale","pred__40367","expr__40368","cljs.core/>"],"sourcesContent":["(ns kdlyticsgui.mrttables\r\n  (:require [goog.object :as gobj]\r\n            [reagent.core :as r]\r\n            [goog.string :as gstring]\r\n            [goog.string.format]\r\n            [re-com.core :refer [p]]\r\n            [re-frame.core :as rf]\r\n            [kdlyticsgui.tools :as t]\r\n            [helix.core :refer [defnc $]]\r\n            [helix.dom :as hd]\r\n            [cljs-time.core :refer [today]]\r\n            [helix.hooks :refer [use-state use-effect use-memo]]\r\n            [\"material-react-table\" :as rt :default MaterialReactTable :refer ( MRT_ShowHideColumnsButton MRT_ToggleDensePaddingButton MRT_FullScreenToggleButton )] ;<MRT_FullScreenToggleButton table={table} />\r\n            [\"@mui/material\" :as mm :refer ( Button IconButton Tooltip Box Divider)]\r\n            [\"@mui/icons-material/PhotoCamera\" :default PhotoCameraIcon]\r\n            [\"@mui/icons-material/Download\" :default DownloadIcon]\r\n            [\"@mui/icons-material/SystemUpdateAlt\" :default SystemUpdateAltIcon]\r\n            [\"@mui/icons-material/Star\" :default StarIcon]\r\n            [\"@mui/icons-material/StarBorder\" :default StarBorderIcon]\r\n            [\"@mui/icons-material/FilterListOff\" :default FilterListOffIcon]\r\n            [\"@mui/icons-material/Filter1\" :default Filter1Icon]\r\n            [\"@mui/icons-material/Filter2\" :default Filter2Icon]\r\n            [\"@mui/icons-material/Filter3\" :default Filter3Icon]\r\n            [\"@mui/icons-material/Filter4\" :default Filter4Icon]\r\n            [\"@mui/icons-material/HelpCenter\" :default HelpCenterIcon]\r\n            [\"@mui/icons-material/CallEnd\" :default CallEndIcon]\r\n            [\"@mui/icons-material/Flag\" :default FlagIcon]\r\n            [\"@mui/icons-material/Workspaces\" :default WorkspacesIcon]\r\n            [\"@mui/icons-material/BarChart\" :default BarChartIcon]\r\n            [\"@mui/icons-material/PieChart\" :default PieChartIcon]\r\n            [\"@mui/icons-material/Expand\" :default ExpandIcon]\r\n            [\"react\" :as react :refer (useMemo useState)]\r\n            [clojure.set]\r\n\r\n\r\n            )\r\n  (:import (goog.i18n NumberFormat)\r\n           (goog.i18n.NumberFormat Format))\r\n  )\r\n\r\n(defn get-js-row-key [row key] (gobj/getValueByKeys row \"row\" \"original\" key))\r\n\r\n(defn held-formatting [row]\r\n  (if-let [x (get-js-row-key row \"held\")]\r\n    (condp = x\r\n      1   #js {:sx #js {\"cursor\" \"pointer\" \"backgroundColor\" \"#9CD7AB\"}}\r\n      0 (if (odd? (.-index (.-row row)))\r\n          #js {:sx #js {\"cursor\" \"pointer\" \"backgroundColor\" \"#F5F5F5\"}}\r\n          #js {:sx #js {\"cursor\" \"pointer\"}})\r\n      #js{}\r\n      )\r\n    #js{}))\r\n\r\n\r\n(defn held-formatting-qs [this]\r\n  (let [r (.-row this)]\r\n    (case (.-n91held ^js/Object (.-original r))\r\n      1 #js {:sx #js {\"cursor\" \"pointer\" \"backgroundColor\" \"#9CD7AB\"}} ;DOES NOT WORK! [#js {\"cursor\" \"pointer\" :backgroundColor \"#9CD7AB\"} #js {\"&:hover\" #js {\"cursor\" \"pointer\" :backgroundColor \"#7CAC88\"}}]\r\n      0 (if (odd? (.-index r))\r\n          #js {:sx #js {\"cursor\" \"pointer\" \"backgroundColor\" \"#F5F5F5\"}}\r\n          #js {:sx #js {\"cursor\" \"pointer\"}}))))\r\n\r\n\r\n(defn median [coll]\r\n  (let [sorted (sort (remove nil? coll))     ;(remove zero? (remove nil? coll))\r\n        cnt (count sorted)\r\n        halfway (quot cnt 2)]\r\n    (cond\r\n      (zero? cnt) nil\r\n      (odd? cnt) (nth sorted halfway)\r\n      :else (let [bottom (dec halfway) bottom-val (nth sorted bottom) top-val (nth sorted halfway)] (* 0.5 (+ bottom-val top-val))))))\r\n\r\n(defn mrt-median [columnId leafRows childRows]\r\n  ;(println (map #(.getValue % columnId) leafRows))\r\n  (median (map #(.getValue % columnId) leafRows)))\r\n\r\n;(defn median [coll coll2]\r\n;  (println (clj->js coll2))\r\n;  (let [sorted (sort (remove nil? coll))     ;(remove zero? (remove nil? coll))\r\n;        cnt (count sorted)\r\n;        halfway (quot cnt 2)]\r\n;    (cond\r\n;      (zero? cnt) nil\r\n;      (odd? cnt) (nth sorted halfway)\r\n;      :else (let [bottom (dec halfway) bottom-val (nth sorted bottom) top-val (nth sorted halfway)] (* 0.5 (+ bottom-val top-val))))))\r\n\r\n(def nff (NumberFormat. Format/DECIMAL))\r\n\r\n(defn cell-value [c] (.getValue (.-cell c)))\r\n\r\n(defn nb-cell-format\r\n  \"This will write a single cell.\r\n  Note that [this] has access to the full row so conditional evaluation is possible (e.g. change column B based on values in column A)\r\n  Here we take the input value if it's there, scale it (useful for percentages) and format it.\"\r\n  [fmt m this]\r\n  (let [x (cell-value this)]\r\n    (if (js/isNaN x) \"-\" (gstring/format fmt (* m x)))))\r\n\r\n(defn nb-cell-format-no0\r\n  \"This will write a single cell.\r\n  Note that [this] has access to the full row so conditional evaluation is possible (e.g. change column B based on values in column A)\r\n  Here we take the input value if it's there, scale it (useful for percentages) and format it.\"\r\n  [fmt m this]\r\n  (let [x (cell-value this)]\r\n    (if (or (js/isNaN x) (zero? x) (nil? x)) \"-\" (gstring/format fmt (* m x)))))\r\n\r\n(def round2 #(nb-cell-format \"%.2f\" 1. %))\r\n(def round3 #(nb-cell-format \"%.3f\" 1. %))\r\n(def round0 #(nb-cell-format \"%.0f\" 1. %))\r\n(def round1 #(nb-cell-format \"%.1f\" 1. %))\r\n(def round4 #(nb-cell-format \"%.4f\" 1. %))\r\n(def round0pc #(nb-cell-format \"%.0f%\" 1. %))\r\n(def round1pc #(nb-cell-format \"%.1f%\" 1. %))\r\n(def round2pc #(nb-cell-format \"%.2f%\" 1. %))\r\n(def round0*1000000 #(nb-cell-format \"%.2f%\" 1000000. %))\r\n(def round0pc100 #(nb-cell-format \"%.0f%\" 100. %))\r\n(def round1pc100 #(nb-cell-format \"%.1f%\" 100. %))\r\n(def round2pc100 #(nb-cell-format \"%.2f%\" 100. %))\r\n(def round2*100 #(nb-cell-format \"%.2f\" 100. %))\r\n(def yield-format   #(nb-cell-format \"%.2f%\" 1. %))\r\n(def round2-no0 #(nb-cell-format-no0 \"%.2f\" 1. %))\r\n(def round2pc-no0 #(nb-cell-format-no0 \"%.2f%\" 1. %))\r\n(def zspread-format #(nb-cell-format \"%.0fbps\" 1. %))\r\n(def performance-attributes-bps #(nb-cell-format \"%.0fbps\" 100. %))\r\n(def date-sc #(nb-cell-format \"%0.0f\" 1. %))\r\n\r\n(defn nb-thousand-cell-format\r\n  \"This will write a single cell.\"\r\n  [this]\r\n  (let [x (cell-value this)]\r\n    (if (js/isNaN x) \"-\" (.format nff (str (js/Math.round x))))))\r\n\r\n(defn red-negatives\r\n  \"right align, with red text if negative\"\r\n  [cell]\r\n  (if (and (some? cell) (neg? (cell-value cell)))\r\n    #js {\"align\" \"right\" \"sx\" #js {\"color\" \"red\" \"borderRight\" \"1px solid rgba(224,224,224,1)\"}}\r\n    #js {\"align\" \"right\" \"sx\" #js {\"borderRight\" \"1px solid rgba(224,224,224,1)\"}}))\r\n\r\n(defn red-negatives-pinned\r\n  \"right align, with red text if negative\"\r\n  [cell]\r\n  (if (and (some? cell) (neg? (cell-value cell)))\r\n    #js {\"align\" \"right\" \"sx\" #js {\"backgroundColor\" \"inherit\" \"color\" \"red\" \"borderRight\" \"1px solid rgba(224,224,224,1)\" }}\r\n    #js {\"align\" \"right\" \"sx\" #js {\"backgroundColor\" \"inherit\" \"borderRight\" \"1px solid rgba(224,224,224,1)\" }}))\r\n\r\n(def this-year (str (.getYear (today))))\r\n\r\n(defn ytd-ita [cell]\r\n  (if-let [x (get-js-row-key cell \"FIRST_SETTLE_DT\")        ; (aget cell \"row\" \"original\" \"FIRST_SETTLE_DT\")\r\n           ]\r\n    (if (= (str (subs x 0 4)) this-year)\r\n      #js {\"align\" \"right\" \"sx\" #js {\"color\" (if (and (some? cell) (neg? (cell-value cell))) \"red\" \"black\") \"borderRight\" \"1px solid rgba(224,224,224,1)\" \"font-style\" \"italic\"}}\r\n      #js {\"align\" \"right\" \"sx\" #js {\"color\" (if (and (some? cell) (neg? (cell-value cell))) \"red\" \"black\") \"borderRight\" \"1px solid rgba(224,224,224,1)\" \"font-style\" \"normal\"}})))\r\n\r\n\r\n(defn lower-case-s-in-value?\r\n  \"Checks if s (already assumed lower case) is in value. If s starts by -, excludes it\"\r\n  ;removed the = path which isn't a good path\r\n  [^string s value]\r\n  (if value                                                 ;checks for nil\r\n    (case (.charAt s 0)\r\n      \">\" (> value (js/parseFloat (.substring s 1)))\r\n      \"<\" (< value (js/parseFloat (.substring s 1)))\r\n      \"-\" (not (.includes (.toLowerCase ^string value) (.substring s 1)))\r\n      (if (js/isNaN value) (.includes (.toLowerCase ^string value) s) (= (js/parseFloat s) value)))))\r\n\r\n;(defn text-filter-OR-old\r\n;  \"OR through comma separation, AND through &\"\r\n;  [row ^string id ^string filterValue]\r\n;  (let [id (.toLowerCase ^string (if-let [v (.getValue row id)] v \"\"))]\r\n;    (true?\r\n;      (some true?\r\n;            (map (fn [line] (every? true? (map #(lower-case-s-in-value? % id) (.split ^js/String line \"&\"))))\r\n;                 (.split ^js/String (.replaceAll (.toLowerCase ^string filterValue) \" \" \"\") \",\"))))))\r\n\r\n(defn ampersand-truth [id line] (.every (.split ^js/String line \"&\") #(lower-case-s-in-value? % id)))\r\n\r\n(defn text-filter-OR\r\n  \"OR through comma separation, AND through &\"\r\n  [row ^string id ^string filterValue]\r\n  (.some (.split ^js/String (.replaceAll (.toLowerCase ^string filterValue) \" \" \"\") \",\")\r\n         #(ampersand-truth (.toLowerCase ^string (if-let [v (.getValue row id)] v \"\")) %)))\r\n\r\n(defn comparator-read\r\n  ([rowval ^string input mult]\r\n   (case (.substring input 0 1)\r\n     \">\" (> rowval (* mult (js/parseFloat (.substring input 1))))\r\n     \"<\" (< rowval (* mult (js/parseFloat (.substring input 1))))\r\n     ;\"=\" (= rowval (* mult (cljs.reader/read-string (subs input 1))))\r\n     (= rowval (* mult (js/parseFloat input)))))\r\n  ([rowval ^string input] (comparator-read rowval input 1.)))\r\n\r\n;(defn nb-filter-OR-AND-old\r\n;  \"filterfn is {id: column_name value: text_in_filter_box\r\n;  comma separation is OR. Within comma separation, & is AND.\"\r\n;  [row ^string id ^string filterValue]\r\n;  (let [compread #(comparator-read (.getValue row id) %)]\r\n;    (true?                                                  ;required\r\n;      (some true?\r\n;            (map (fn [line] (every? true? (map compread (.split ^js/String line \"&\"))))\r\n;                 (.split (.toLowerCase ^string filterValue) \",\"))))))\r\n\r\n(defn ampersand-comp [compread line] (.every (.split ^js/String line \"&\") compread))\r\n\r\n(defn nb-filter-OR-AND\r\n  \"filterfn is {id: column_name value: text_in_filter_box\r\n  comma separation is OR. Within comma separation, & is AND.\"\r\n  [row ^string id ^string filterValue]\r\n  (let [compread #(comparator-read (.getValue row id) %)]\r\n    (.some (.split (.toLowerCase ^string filterValue) \",\")\r\n           #(ampersand-comp compread %))))\r\n\r\n(defn ds-text-col\r\n  \"Simple text column in MRT\"\r\n  [header accessor width]\r\n  {:header                               header\r\n   :id                                   accessor\r\n   :accessorFn                           #(do (println %) (get % accessor))\r\n   :size                                 width\r\n   :muiTableHeadCellFilterTextFieldProps {:placeholder \"\" :sx {:minWidth (str width \"px\")}}\r\n   :filterFn                             text-filter-OR})\r\n\r\n(defn ds-nb-col\r\n  \"Simple number column in MRT, by default aligned right with red negatives\"\r\n  ([header accessor width cell aggregate AggregatedCell]\r\n   (assoc (ds-nb-col header accessor width cell) :aggregate aggregate :AggregatedCell AggregatedCell))\r\n  ([header accessor width cell]\r\n   {:header header\r\n    :id accessor\r\n    :accessorFn #(get % accessor)\r\n    :size width\r\n    :muiTableBodyCellProps red-negatives\r\n    :Cell cell\r\n    :muiTableHeadCellFilterTextFieldProps {:placeholder \"\" :sx {:minWidth (str width \"px\")}}\r\n    :filterFn nb-filter-OR-AND}))\r\n\r\n(defn text-col-pinned\r\n  \"Simple text column in MRT\"\r\n  ([header accessor width]\r\n   {:header                               header\r\n    :accessorKey                          accessor\r\n    :size                                 width\r\n    :enablePinning                        false\r\n    :muiTableHeadCellFilterTextFieldProps {:placeholder \"\" :sx {:minWidth \"0px\"}}\r\n    :filterFn                             text-filter-OR\r\n    :muiTableBodyCellProps                #js {\"sx\" #js {\"borderRight\" \"1px solid rgba(224,224,224,1)\" \"backgroundColor\" \"inherit\"}}})\r\n  ([header accessor width cell]\r\n   (assoc (text-col-pinned header accessor width) :Cell cell))\r\n  )\r\n\r\n(defn text-col\r\n  \"Simple text column in MRT\"\r\n  ([header accessor width]\r\n   {:header                               header\r\n    :accessorKey                          accessor\r\n    :size                                 width\r\n    :enablePinning                        false\r\n    :muiTableHeadCellFilterTextFieldProps {:placeholder \"\" :sx {:minWidth \"0px\"}}\r\n    :filterFn                             text-filter-OR\r\n    :muiTableBodyCellProps                #js {\"sx\" #js {\"borderRight\" \"1px solid rgba(224,224,224,1)\" \"backgroundColor\" \"inherit\"}}})\r\n  ([header accessor width cell]\r\n   (assoc (text-col header accessor width) :Cell cell)))\r\n\r\n(defn text-col-multiline\r\n  \"Simple text column in MRT\"\r\n  ([header accessor width]\r\n   {:header                               header\r\n    :accessorKey                          accessor\r\n    :size                                 width\r\n    :enablePinning                        false\r\n    :muiTableHeadCellFilterTextFieldProps {:placeholder \"\" :sx {:minWidth \"0px\"}}\r\n    :filterFn                             text-filter-OR\r\n    :muiTableBodyCellProps                #js {\"sx\" #js {\"borderRight\" \"1px solid rgba(224,224,224,1)\" \"backgroundColor\" \"inherit\" \"wordWrap\" \"break-word\" \"whiteSpace\" \"pre-line\"}}})\r\n  ([header accessor width cell]\r\n   (assoc (text-col-multiline header accessor width) :Cell cell)))\r\n\r\n(defn nb-col\r\n  \"Simple number column in MRT, by default aligned right with red negatives\"\r\n  ([header accessor width cell aggregate AggregatedCell]\r\n   (assoc (nb-col header accessor width cell) :aggregationFn aggregate :AggregatedCell AggregatedCell))\r\n  ([header accessor width cell aggregate]\r\n   (assoc (nb-col header accessor width cell) :aggregationFn aggregate :AggregatedCell cell))\r\n  ([header accessor width cell]\r\n   {:header                               header\r\n    :accessorKey                          accessor\r\n    :size                                 width\r\n    :muiTableBodyCellProps                red-negatives\r\n    :Cell                                 cell\r\n    :enablePinning                        false\r\n    :muiTableHeadCellFilterTextFieldProps {:placeholder \"\" :sx {:minWidth \"0px\"}}\r\n    :filterFn                             nb-filter-OR-AND}))\r\n\r\n(defn nb-col-pinned\r\n  \"Simple number column in MRT, by default aligned right with red negatives\"\r\n  ([header accessor width cell aggregate AggregatedCell]\r\n   (assoc (nb-col-pinned header accessor width cell) :aggregationFn aggregate :AggregatedCell AggregatedCell))\r\n  ([header accessor width cell aggregate]\r\n   (assoc (nb-col-pinned header accessor width cell) :aggregationFn aggregate :AggregatedCell cell))\r\n  ([header accessor width cell]\r\n   {:header                               header\r\n    :accessorKey                          accessor\r\n    :size                                 width\r\n    :muiTableBodyCellProps                red-negatives-pinned\r\n    :Cell                                 cell\r\n    :enablePinning                        false\r\n    :muiTableHeadCellFilterTextFieldProps {:placeholder \"\" :sx {:minWidth \"0px\"}}\r\n    :filterFn                             nb-filter-OR-AND}))\r\n\r\n;;;;;; ACTUAL TABLE IMPLEMENTATION ;;;;;;\r\n\r\n;(defn icon-element-button\r\n;  [icon tooltip-text on-click-fn]\r\n;  (r/create-element\r\n;    Tooltip\r\n;    #js {\"arrow\" true \"title\" tooltip-text \"key\" tooltip-text}\r\n;    (r/create-element\r\n;      IconButton\r\n;      #js {\"onClick\" on-click-fn}\r\n;      (r/create-element icon))))\r\n\r\n(defnc icon-element-button-helix\r\n  [{:keys [icon tooltip-text on-click-fn]}]\r\n  ($ Tooltip {:arrow true :title tooltip-text :key tooltip-text}\r\n     ($ IconButton {:onClick on-click-fn} ($ icon))))\r\n\r\n\r\n(def photo-id->shortcut-key\r\n  {\"single-portfolio-risk-table\" :single-portfolio-risk/shortcut\r\n   \"multiple-portfolio-risk-table\" :multiple-portfolio-risk/shortcut\r\n   \"single-portfolio-trade-log-table\" :single-portfolio-trade-log/shortcut\r\n   \"single-portfolio-attribution\" :single-portfolio-attribution/shortcut})\r\n\r\n(defn get-pivoted-data\r\n  [table]\r\n  (let [leaves (.filter (.getLeafRows (aget (.-rows (.getGroupedRowModel table)) 0))\r\n                        (fn [line] (= (.-depth line) 1)))]\r\n    (into [] (for [leaf leaves] (assoc (js->clj (.-_groupingValuesCache leaf)) \"group\" (.-groupingValue leaf))))))\r\n\r\n\r\n(defn download-view\r\n  \"If the table is group, we get the pivoted data, otherwise we use the standard download function\"\r\n  [table download-fn photo-id]\r\n  (if (pos? (count (.-grouping (.getState table))))\r\n    (let [dw-cols (concat [\"group\"] (js->clj (.map (.filter (.getAllLeafColumns table) #(not (.getIsGrouped %))) #(.-id %))))]\r\n      (t/csv-link (js->clj (get-pivoted-data table) {:keywordize-keys true}) photo-id dw-cols))\r\n    (download-fn (.map (.-rows (.getPrePaginationRowModel table)) (fn [row] (.-original row))))))\r\n\r\n(defnc single-risk-table-toolbar\r\n  \"This returns the top right Toolbar function with the standard actions\"\r\n  [{:keys [table data download-fn photo-id]}]\r\n  [($ icon-element-button-helix {:key \"BarChart\" :icon BarChartIcon :tooltip-text \"Bar chart\" :on-click-fn (fn [] (rf/dispatch [:single-portfolio-risk/chart \"bar\"]))})\r\n   ($ icon-element-button-helix {:key \"PieChart\" :icon PieChartIcon :tooltip-text \"Pie chart\" :on-click-fn (fn [] (rf/dispatch [:single-portfolio-risk/chart \"pie\"]))})\r\n   ($ Divider {:key \"divider0\" :variant \"middle\" :orientation \"vertical\"})\r\n   ($ icon-element-button-helix {:key \"Filter1Icon\" :icon Filter1Icon :tooltip-text \"View 1\" :on-click-fn (fn [] (rf/dispatch [(photo-id->shortcut-key photo-id) 1 table]))})\r\n   ($ icon-element-button-helix {:key \"Filter2Icon\" :icon Filter2Icon :tooltip-text \"View 2\" :on-click-fn (fn [] (rf/dispatch [(photo-id->shortcut-key photo-id) 2 table]))})\r\n   ($ icon-element-button-helix {:key \"Filter3Icon\" :icon Filter3Icon :tooltip-text \"View 3\" :on-click-fn (fn [] (rf/dispatch [(photo-id->shortcut-key photo-id) 3 table]))})\r\n   ($ icon-element-button-helix {:key \"Filter4Icon\" :icon Filter4Icon :tooltip-text \"View 4\" :on-click-fn (fn [] (rf/dispatch [(photo-id->shortcut-key photo-id) 4 table]))})\r\n   ($ Divider {:key \"divider1\" :variant \"middle\" :orientation \"vertical\"})\r\n   ($ icon-element-button-helix {:key \"ExpandIcon\" :icon ExpandIcon :tooltip-text \"Show more rows\" :on-click-fn (fn [] (if (pos? (count (.-grouping (.getState table)))) (.setPageSize table 50) (.setPageSize table (if (= (.-pageSize (.-pagination (.getState table))) 200) 15 200))))})\r\n   ($ icon-element-button-helix {:key \"FilterListOffIcon\" :icon FilterListOffIcon :tooltip-text \"Clear filters\" :on-click-fn (fn [] (.resetColumnFilters table #js []))})\r\n   ($ MRT_ShowHideColumnsButton {:table table :key \"show-columns\"})\r\n   ;($ icon-element-button-helix {:key \"PhotoCameraIcon\" :icon PhotoCameraIcon :tooltip-text \"Open image\" :on-click-fn (fn [] (t/open-image-in-new-tab-mrt photo-id))})\r\n   ($ icon-element-button-helix {:key \"SystemUpdateAltIcon\" :icon SystemUpdateAltIcon :tooltip-text \"Download view\" :on-click-fn (fn [] (download-view table download-fn photo-id))})\r\n   ($ icon-element-button-helix {:key \"DownloadIcon\" :icon DownloadIcon :tooltip-text \"Full download\" :on-click-fn (fn [] (download-fn data))})])\r\n\r\n(defnc ta-table-toolbar\r\n  \"This returns the top right Toolbar function with the standard actions\"\r\n  [{:keys [table data download-fn photo-id]}]\r\n  [($ icon-element-button-helix {:key \"BarChart\" :icon BarChartIcon :tooltip-text \"Bar chart\" :on-click-fn (fn [] (rf/dispatch [:single-portfolio-risk/chart \"bar\"]))})\r\n   ($ Divider {:key \"divider0\" :variant \"middle\" :orientation \"vertical\"})\r\n   ($ icon-element-button-helix {:key \"Filter1Icon\" :icon Filter1Icon :tooltip-text \"View 1\" :on-click-fn (fn [] (rf/dispatch [(photo-id->shortcut-key photo-id) 1 table]))})\r\n   ($ icon-element-button-helix {:key \"Filter2Icon\" :icon Filter2Icon :tooltip-text \"View 2\" :on-click-fn (fn [] (rf/dispatch [(photo-id->shortcut-key photo-id) 2 table]))})\r\n   ($ icon-element-button-helix {:key \"Filter3Icon\" :icon Filter3Icon :tooltip-text \"View 3\" :on-click-fn (fn [] (rf/dispatch [(photo-id->shortcut-key photo-id) 3 table]))})\r\n   ($ icon-element-button-helix {:key \"Filter4Icon\" :icon Filter4Icon :tooltip-text \"View 4\" :on-click-fn (fn [] (rf/dispatch [(photo-id->shortcut-key photo-id) 4 table]))})\r\n   ($ Divider {:key \"divider1\" :variant \"middle\" :orientation \"vertical\"})\r\n   ($ icon-element-button-helix {:key \"ExpandIcon\" :icon ExpandIcon :tooltip-text \"Show more rows\" :on-click-fn (fn [] (if (pos? (count (.-grouping (.getState table)))) (.setPageSize table 50) (.setPageSize table (if (= (.-pageSize (.-pagination (.getState table))) 200) 15 200))))})\r\n   ($ icon-element-button-helix {:key \"FilterListOffIcon\" :icon FilterListOffIcon :tooltip-text \"Clear filters\" :on-click-fn (fn [] (.resetColumnFilters table #js []))})\r\n   ($ MRT_ShowHideColumnsButton {:table table :key \"show-columns\"})\r\n   ;($ icon-element-button-helix {:key \"PhotoCameraIcon\" :icon PhotoCameraIcon :tooltip-text \"Open image\" :on-click-fn (fn [] (t/open-image-in-new-tab-mrt photo-id))})\r\n   ($ icon-element-button-helix {:key \"SystemUpdateAltIcon\" :icon SystemUpdateAltIcon :tooltip-text \"Download view\" :on-click-fn (fn [] (download-view table download-fn photo-id))})\r\n   ($ icon-element-button-helix {:key \"DownloadIcon\" :icon DownloadIcon :tooltip-text \"Full download\" :on-click-fn (fn [] (download-fn data))})])\r\n\r\n(defnc single-attribution-table-toolbar\r\n  \"This returns the top right Toolbar function with the standard actions\"\r\n  [{:keys [table data download-fn photo-id]}]\r\n  [($ icon-element-button-helix {:key \"BarChart\" :icon BarChartIcon :tooltip-text \"Bar chart\" :on-click-fn (fn [] (rf/dispatch [:single-portfolio-attribution/modal \"bar\"]))})\r\n   ($ Divider {:key \"divider0\" :variant \"middle\" :orientation \"vertical\"})\r\n   ($ icon-element-button-helix {:key \"Filter1Icon\" :icon Filter1Icon :tooltip-text \"View 1\" :on-click-fn (fn [] (rf/dispatch [(photo-id->shortcut-key photo-id) 1 table]))})\r\n   ($ icon-element-button-helix {:key \"Filter2Icon\" :icon Filter2Icon :tooltip-text \"View 2\" :on-click-fn (fn [] (rf/dispatch [(photo-id->shortcut-key photo-id) 2 table]))})\r\n   ($ icon-element-button-helix {:key \"Filter3Icon\" :icon Filter3Icon :tooltip-text \"View 3\" :on-click-fn (fn [] (rf/dispatch [(photo-id->shortcut-key photo-id) 3 table]))})\r\n   ($ icon-element-button-helix {:key \"Filter4Icon\" :icon Filter4Icon :tooltip-text \"View 4\" :on-click-fn (fn [] (rf/dispatch [(photo-id->shortcut-key photo-id) 4 table]))})\r\n   ($ Divider {:key \"divider1\" :variant \"middle\" :orientation \"vertical\"})\r\n   ($ icon-element-button-helix {:key \"ExpandIcon\" :icon ExpandIcon :tooltip-text \"Show more rows\" :on-click-fn (fn [] (if (pos? (count (.-grouping (.getState table)))) (.setPageSize table 50) (.setPageSize table (if (= (.-pageSize (.-pagination (.getState table))) 200) 15 200))))})\r\n   ($ icon-element-button-helix {:key \"FilterListOffIcon\" :icon FilterListOffIcon :tooltip-text \"Clear filters\" :on-click-fn (fn [] (.resetColumnFilters table #js []))})\r\n   ($ MRT_ShowHideColumnsButton {:table table :key \"show-columns\"})\r\n   ;($ icon-element-button-helix {:key \"PhotoCameraIcon\" :icon PhotoCameraIcon :tooltip-text \"Open image\" :on-click-fn (fn [] (t/open-image-in-new-tab-mrt photo-id))})\r\n   ($ icon-element-button-helix {:key \"SystemUpdateAltIcon\" :icon SystemUpdateAltIcon :tooltip-text \"Download view\" :on-click-fn (fn [] (download-view table download-fn photo-id))})\r\n   ($ icon-element-button-helix {:key \"DownloadIcon\" :icon DownloadIcon :tooltip-text \"Full download\" :on-click-fn (fn [] (download-fn data))})])\r\n\r\n(defnc risk-table-toolbar\r\n  \"This returns the top right Toolbar function with the standard actions\"\r\n  [{:keys [table data download-fn photo-id]}]\r\n  [($ icon-element-button-helix {:key \"Filter1Icon\" :icon Filter1Icon :tooltip-text \"View 1\" :on-click-fn (fn [] (rf/dispatch [(photo-id->shortcut-key photo-id) 1 table]))})\r\n   ($ icon-element-button-helix {:key \"Filter2Icon\" :icon Filter2Icon :tooltip-text \"View 2\" :on-click-fn (fn [] (rf/dispatch [(photo-id->shortcut-key photo-id) 2 table]))})\r\n   ($ icon-element-button-helix {:key \"Filter3Icon\" :icon Filter3Icon :tooltip-text \"View 3\" :on-click-fn (fn [] (rf/dispatch [(photo-id->shortcut-key photo-id) 3 table]))})\r\n   ($ icon-element-button-helix {:key \"Filter4Icon\" :icon Filter4Icon :tooltip-text \"View 4\" :on-click-fn (fn [] (rf/dispatch [(photo-id->shortcut-key photo-id) 4 table]))})\r\n   ($ Divider {:key \"divider\" :variant \"middle\" :orientation \"vertical\"})\r\n   ($ icon-element-button-helix {:key \"ExpandIcon\" :icon ExpandIcon :tooltip-text \"Show more rows\" :on-click-fn (fn [] (if (pos? (count (.-grouping (.getState table)))) (.setPageSize table 50) (.setPageSize table (if (= (.-pageSize (.-pagination (.getState table))) 200) 15 200))))})\r\n   ($ icon-element-button-helix {:key \"FilterListOffIcon\" :icon FilterListOffIcon :tooltip-text \"Clear filters\" :on-click-fn (fn [] (.resetColumnFilters table #js []))})\r\n   ($ MRT_ShowHideColumnsButton {:table table :key \"show-columns\"})\r\n   ;($ icon-element-button-helix {:key \"PhotoCameraIcon\" :icon PhotoCameraIcon :tooltip-text \"Open image\" :on-click-fn (fn [] (t/open-image-in-new-tab-mrt photo-id))})\r\n   ($ icon-element-button-helix {:key \"SystemUpdateAltIcon\" :icon SystemUpdateAltIcon :tooltip-text \"Download view\" :on-click-fn (fn [] (download-view table download-fn photo-id))})\r\n   ($ icon-element-button-helix {:key \"DownloadIcon\" :icon DownloadIcon :tooltip-text \"Full download\" :on-click-fn (fn [] (download-fn data))})])\r\n\r\n(defnc mrt-table-toolbar\r\n  \"This returns the top right Toolbar function with the standard actions\"\r\n  [{:keys [table data download-fn photo-id]} ]\r\n  [($ icon-element-button-helix {:key \"FilterListOffIcon\" :icon FilterListOffIcon :tooltip-text \"Clear filters\" :on-click-fn (fn [] (.resetColumnFilters table #js []))})\r\n   ($ MRT_ShowHideColumnsButton {:table table :key \"show-columns\"})\r\n   ;($ icon-element-button-helix {:key \"PhotoCameraIcon\" :icon PhotoCameraIcon :tooltip-text \"Open image\" :on-click-fn (fn [] (t/open-image-in-new-tab-mrt photo-id))})\r\n   ($ icon-element-button-helix {:key \"SystemUpdateAltIcon\" :icon SystemUpdateAltIcon :tooltip-text \"Download view\" :on-click-fn (fn [] (download-view table download-fn photo-id))}) ;(t/csv-link (download-table-view table) filename)\r\n   ($ icon-element-button-helix {:key \"DownloadIcon\" :icon DownloadIcon :tooltip-text \"Full download\" :on-click-fn (fn [] (download-fn data))})]) ;(t/csv-link data filename)\r\n\r\n(defn mrt-default-download-fn [id clj-cols]\r\n  (let [nested? (contains? (first clj-cols) :columns)\r\n        dw-cols (->> (if nested? (apply concat (map :columns clj-cols)) clj-cols)\r\n                     (map :accessorKey)\r\n                     (map keyword))]\r\n    (fn [js-data] (t/csv-link (js->clj js-data {:keywordize-keys true}) id dw-cols))))\r\n\r\n(defn mrt-th-download-fn [id clj-cols]\r\n  (let [nested? (contains? (first clj-cols) :columns)\r\n        dw-cols (->> (if nested? (apply concat (map :columns clj-cols)) clj-cols)\r\n                     (map :accessorKey)\r\n                     (map keyword))]\r\n    (fn [js-data] (t/csv-link (js->clj js-data {:keywordize-keys true}) id dw-cols \"|\"))))\r\n\r\n(defn show-if-any-is-hidden [table groupset]\r\n  (let [visible-ids (set (.map (.getVisibleLeafColumns table) #(.-id %)))\r\n        group-visible? (clojure.set/subset? groupset visible-ids)]\r\n    (if group-visible?\r\n      (doseq [id groupset] (.toggleVisibility (.getColumn table id) false))\r\n      (doseq [id groupset] (.toggleVisibility (.getColumn table id) true)))))\r\n\r\n\r\n(def help-modal {:title \"Help\"\r\n                 :throbber false\r\n                 :content [p \"Use , for OR. Use & for AND. Use - to exclude. Examples: AR,BR for Argentina or Brazil. >200&<300 for spreads between 200bps and 300bps. >0 to only see bonds in an index. -Sov to exclude sovereigns, -CN&-HK to exclude both countries.\"]})\r\n\r\n(defn mrt-ref->filtered-col-seq\r\n  \"Takes a table ref and a column. Returns a cljs seq of the viewable (filtered and sorted) column values\"\r\n  [ref col]\r\n  (js->clj (.map (.-rows (.getPrePaginationRowModel (aget ref \"current\"))) (fn [row] (aget (.-original ^js/Object row) col)))))\r\n\r\n(defn mrt-ref->filtered-rows-seq [ref]\r\n  (js->clj (.map (.-rows (.getPrePaginationRowModel (aget ref \"current\"))) (fn [row] (.-original ^js/Object row))) {:keywordize-keys true}))\r\n\r\n(defnc mrt-qs-table-toolbar\r\n  \"This returns the top right Toolbar function with the standard actions\"\r\n  [{:keys [table data download-fn photo-id stars]}]\r\n  [($ icon-element-button-helix {:key \"HelpCenter\" :icon HelpCenterIcon :tooltip-text \"Help\" :on-click-fn #(rf/dispatch [:generic-modal help-modal])})\r\n   ($ Divider {:key \"divider1\" :variant \"middle\" :orientation \"vertical\"})\r\n   ($ icon-element-button-helix {:key \"Flag\" :icon FlagIcon :tooltip-text \"Show flags\" :on-click-fn (fn [] (show-if-any-is-hidden table (set (map name [:SENIOR-WIDE :BASEL_III_DESIGNATION :CAPITAL_TRIGGER_TYPE :HYBRID-WIDE :INTERNATIONAL_SUKUK :ESG :MSCI-SCORE :Transition_finance_universe]))))}) ;\r\n   ($ icon-element-button-helix {:key \"WorkSpaces\" :icon WorkspacesIcon :tooltip-text \"Show index membership\" :on-click-fn (fn [] (show-if-any-is-hidden table (set (map name [:cembi :cembi-ig :embi :embi-ig :us-agg :global-agg :jaci]))))})\r\n   ($ icon-element-button-helix {:key \"CallEnd\" :icon CallEndIcon :tooltip-text \"Show calls\" :on-click-fn (fn [] (show-if-any-is-hidden table (set (map name [:NXT_CALL_DT :NXT_CALL_PX :days-to-call :price-vs-call :MATURITY]))))})\r\n   ($ Divider {:key \"divider2\" :variant \"middle\" :orientation \"vertical\"})\r\n   ($ icon-element-button-helix {:key \"StarIcon\" :icon StarIcon :tooltip-text \"Filter stars\" :on-click-fn (fn [] (.setColumnFilters table #js [ #js {\"id\" \"star\" \"value\" (clojure.string/join \",\" @stars)}]))})\r\n   ($ icon-element-button-helix {:key \"FilterListOffIcon\" :icon FilterListOffIcon :tooltip-text \"Clear filters\" :on-click-fn (fn [] (.resetColumnFilters table #js []))})\r\n   ($ icon-element-button-helix {:key \"StarBorderIcon\" :icon StarBorderIcon :tooltip-text \"Clear stars\" :on-click-fn (fn [] (reset! stars (set nil)))})\r\n   ($ Divider {:key \"divider3\" :variant \"middle\" :orientation \"vertical\"})\r\n   ($ icon-element-button-helix {:key \"ExpandIcon\" :icon ExpandIcon :tooltip-text \"Show more rows\" :on-click-fn (fn [] (.setPageSize table (if (= (.-pageSize (.-pagination (.getState table))) 200) 15 200)))})\r\n   ($ MRT_ShowHideColumnsButton {:table table :key \"show-columns\"})\r\n   ;($ icon-element-button-helix {:key \"PhotoCameraIcon\" :icon PhotoCameraIcon :tooltip-text \"Open image\" :on-click-fn (fn [] (t/open-image-in-new-tab-mrt photo-id))})\r\n   ($ icon-element-button-helix {:key \"SystemUpdateAltIcon\" :icon SystemUpdateAltIcon :tooltip-text \"Download view\" :on-click-fn (fn [] (download-fn (.map (.-rows (.getPrePaginationRowModel table)) (fn [row] (.-original row)))))}) ;(t/csv-link (download-table-view table) filename)\r\n   ($ icon-element-button-helix {:key \"DownloadIcon\" :icon DownloadIcon :tooltip-text \"Full download\" :on-click-fn (fn [] (download-fn data))})])\r\n\r\n(def advanced-spot-chart-isins (r/atom []))\r\n\r\n(defn base-props\r\n  \"note use of or as subsitute for (if value-is-not-nil value default). This is to make the basic table subset of fast table\"\r\n  [mdata mcolumns clj-option-map js-initial-state toolbar download-fn photo-id]\r\n  (merge {:data                         mdata\r\n          :columns                      mcolumns\r\n          :enableColumnActions          false\r\n          :initialState                 (or js-initial-state #js {\"density\" \"compact\" \"showColumnFilters\" true \"columnFilters\" #js [] \"pagination\" #js {}})\r\n          :displayColumnDefOptions      #js {\"mrt-row-expand\" #js {\"size\" 75 \"muiTableBodyCellProps\" #js {\"sx\" #js {\"backgroundColor\" \"inherit\"}}}}\r\n          :muiTableHeadCellProps        #js {\"sx\" #js {\"borderRight\" \"1px solid rgba(224,224,224,1)\"}} ; \"flex\" \"0 0 auto\"\r\n          :muiTableBodyProps            #js {\"sx\" #js {\"& tr:nth-of-type(odd)\" #js {\"backgroundColor\" \"#f5f5f5\"}}}\r\n          :muiTableBodyCellProps        #js {\"sx\" #js {\"borderRight\" \"1px solid rgba(224,224,224,1)\"}} ; \"flex\" \"0 0 auto\"\r\n          :renderToolbarInternalActions (fn [x] ($ (or toolbar mrt-table-toolbar) {:table (.-table x) :data mdata :download-fn (or download-fn (mrt-default-download-fn photo-id (js->clj mcolumns {:keywordize-keys true}))) :photo-id photo-id}))}\r\n         clj-option-map))\r\n\r\n(defnc material-react-table-template\r\n  \"The magic is in useEffect which will communicate back and forth with reagent\r\n  Note you need to add extra key with a dummy value that changes every time you want full re-render!!!\r\n  \"\r\n  [{:keys [clj-data clj-columns clj-option-map js-initial-state external-state-reference initial-external-state toolbar download-fn photo-id]}]\r\n  (let [pinned-cols (clj->js (conj (mapv :accessorKey (:columns (first clj-columns))) \"mrt-row-expand\"))\r\n        [ffilter setFilter] (use-state (. initial-external-state -columnFilters))\r\n        [grouping setGrouping] (use-state (. initial-external-state -grouping))\r\n        [expanded setExpanded] (use-state (. initial-external-state -expanded))\r\n        mdata (use-memo [clj-data clj-option-map]\r\n                        (if (array? clj-data)\r\n                          (do (when (:enableGrouping clj-option-map) (.forEach clj-data #(aset % \"dummy\" \"\"))) clj-data)\r\n                          (clj->js (if (:enableGrouping clj-option-map) (map #(assoc % :dummy \"\") clj-data) clj-data))))\r\n        mcolumns (use-memo [clj-columns] (clj->js clj-columns))\r\n        x (use-effect\r\n            [ffilter grouping expanded]\r\n            ;(println \"DEBUG TABLE, DISABLE IN PROD!\" ffilter grouping expanded);TODO DEBUG TOGGLE\r\n            (let [target #js {\"columnFilters\" ffilter \"grouping\" grouping \"expanded\" expanded}]\r\n              (if (keyword? external-state-reference) (rf/dispatch [external-state-reference target]) (reset! external-state-reference target))))\r\n        props (merge\r\n                (base-props mdata mcolumns clj-option-map js-initial-state toolbar download-fn photo-id)\r\n                {:onGroupingChange      setGrouping\r\n                 :onColumnFiltersChange setFilter\r\n                 :onExpandedChange      setExpanded\r\n                 :state                 #js {\"columnFilters\" ffilter \"grouping\" grouping \"expanded\" expanded \"columnPinning\" #js {\"left\" pinned-cols \"right\" #js []}}\r\n                 })]\r\n    ($ \"div\" {:id photo-id} ($ MaterialReactTable {& props}))))\r\n\r\n(defnc material-react-table-template-managed\r\n  \"The magic is in useEffect which will communicate back and forth with reagent\r\n  Note you need to add extra key with a dummy value that changes every time you want full re-render!!!\r\n  \"\r\n  [{:keys [clj-data clj-columns clj-option-map js-initial-state external-state-reference toolbar download-fn photo-id]}]\r\n  ;None of the props should change, except js-initial-state, which is only used on first mount\r\n  (let [[ffilter setFilter] (use-state (. js-initial-state -columnFilters))\r\n        [grouping setGrouping] (use-state (. js-initial-state -grouping))\r\n        [expanded setExpanded] (use-state (. js-initial-state -expanded))\r\n        mdata (use-memo [clj-data] (if (array? clj-data) clj-data (clj->js clj-data)))\r\n        mcolumns (use-memo [clj-columns] (clj->js clj-columns))\r\n        x (use-effect\r\n            [ffilter grouping expanded]\r\n            ;(println \"DEBUG TABLE, DISABLE IN PROD!\" ffilter grouping expanded);TODO DEBUG TOGGLE\r\n            (let [target #js {\"columnFilters\" ffilter \"grouping\" grouping \"expanded\" expanded}]\r\n              (if (keyword? external-state-reference) (rf/dispatch [external-state-reference target]) (reset! external-state-reference target))))\r\n        props (merge\r\n                (base-props mdata mcolumns clj-option-map js-initial-state toolbar download-fn photo-id)\r\n                {:enableGrouping        true\r\n                 :enableExpanding       true\r\n                 :enablePinning         true\r\n                 :onGroupingChange      setGrouping\r\n                 :onColumnFiltersChange setFilter\r\n                 :onExpandedChange      setExpanded\r\n                 :state                 #js {\"columnFilters\" ffilter \"grouping\" grouping \"expanded\" expanded}})]\r\n    ($ \"div\" {:id photo-id} ($ MaterialReactTable {& props}))))\r\n\r\n(defnc material-react-table-template-ta\r\n  \"Same as material-react-table-template + only pin grouping\r\n  \"\r\n  [{:keys [clj-data clj-columns clj-option-map js-initial-state external-state-reference initial-external-state toolbar download-fn photo-id]}]\r\n  (let [pinned-cols (clj->js (conj (mapv :accessorKey (:columns (first clj-columns))) \"mrt-row-expand\"))\r\n        [ffilter setFilter] (use-state (. initial-external-state -columnFilters))\r\n        [grouping setGrouping] (use-state (. initial-external-state -grouping))\r\n        [expanded setExpanded] (use-state (. initial-external-state -expanded))\r\n        mdata (use-memo [clj-data clj-option-map]\r\n                        (if (array? clj-data)\r\n                          (do (when (:enableGrouping clj-option-map) (.forEach clj-data #(aset % \"dummy\" \"\"))) clj-data)\r\n                          (clj->js (if (:enableGrouping clj-option-map) (map #(assoc % :dummy \"\") clj-data) clj-data))))\r\n        mcolumns (use-memo [clj-columns] (clj->js clj-columns))\r\n        x (use-effect\r\n            [ffilter grouping expanded]\r\n            ;(println \"DEBUG TABLE, DISABLE IN PROD!\" ffilter grouping expanded);TODO DEBUG TOGGLE\r\n            (let [target #js {\"columnFilters\" ffilter \"grouping\" grouping \"expanded\" expanded}]\r\n              (if (keyword? external-state-reference) (rf/dispatch [external-state-reference target]) (reset! external-state-reference target))))\r\n        props (merge\r\n                (base-props mdata mcolumns clj-option-map js-initial-state toolbar download-fn photo-id)\r\n                {:onGroupingChange      setGrouping\r\n                 :onColumnFiltersChange setFilter\r\n                 :onExpandedChange      setExpanded\r\n                 ;:tableInstanceRef      jasminegui.ta2022.tradeview/ta-table-ref\r\n                 :state                 #js {\"columnFilters\" ffilter \"grouping\" grouping \"expanded\" expanded \"columnPinning\" #js {\"left\" grouping \"right\" #js []}}\r\n                 })]\r\n    ($ \"div\" {:id photo-id} ($ MaterialReactTable {& props}))))\r\n\r\n(defnc material-react-table-template-fast\r\n  \"No external state hence a lot faster\r\n  Note you need to add extra key with a dummy value that changes every time you want full re-render!!!\"\r\n  [{:keys [clj-data clj-columns clj-option-map js-initial-state toolbar download-fn photo-id]}]\r\n  (let [pinned-cols (mapv :accessorKey (:columns (first clj-columns)))\r\n        mdata (use-memo [clj-data clj-option-map]\r\n                        (if (array? clj-data)\r\n                          (do (when (:enableGrouping clj-option-map) (.forEach clj-data #(aset % \"dummy\" \"\"))) clj-data)\r\n                          (clj->js (if (:enableGrouping clj-option-map) (mapv #(assoc % :dummy \"\") clj-data) clj-data))))\r\n        mcolumns (use-memo [clj-columns] (clj->js clj-columns))\r\n        props (merge\r\n                (base-props mdata mcolumns clj-option-map js-initial-state toolbar download-fn photo-id)\r\n                (if (seq pinned-cols) {:state #js {\"columnPinning\" #js {\"left\" (clj->js pinned-cols) \"right\" #js []}}}))]\r\n    ($ \"div\" {:id photo-id} ($ MaterialReactTable {& props}))))\r\n\r\n(defnc material-react-table-template-basic\r\n  [argument-map]\r\n  ($ material-react-table-template-fast {& (update argument-map :clj-option-map #(merge {:enablePagination false :enableBottomToolbar false} %))}))\r\n\r\n(def risk-table-columns\r\n  {\r\n   :id-show                          (text-col \"ID\" \"id\" 65)\r\n   :region                           (text-col \"Region\" \"jpm-region\" 120)\r\n   :emd-region                       (text-col \"EMD region\" \"emd-region\" 120)\r\n   :country                          (text-col \"Country\" \"qt-risk-country-name\" 120)\r\n   :issuer                           (text-col \"Issuer\" \"TICKER\" 120)\r\n   :sector                           (text-col \"Sector\" \"qt-jpm-sector\" 120)\r\n   :sector-baml                      (text-col \"Sector BAML3\" \"qt-BAML-level-3\" 120)\r\n   :sector-gics                      (text-col \"Sector GICS\" \"qt-gics-sector\" 120)\r\n   :maturity-band                    (text-col \"Maturity\" \"qt-final-maturity-band\" 120)\r\n   :rating                           (text-col \"Rating\" \"qt-iam-int-lt-median-rating\" 60)\r\n   :rating-score                     (text-col \"Rating\" \"qt-iam-int-lt-median-rating-score\" 120) ;{:header \"Rating\" :size 120 :accessorKey \"qt-iam-int-lt-median-rating-score\" :aggregate first} ; :Cell rating-score-to-string\r\n   :financial-seniority              (text-col \"Style\" \"financial-seniority\" 120)\r\n   :name                             (text-col \"Name\" \"NAME\" 120)\r\n   :isin                             (text-col \"ISIN\" \"isin\" 110)\r\n   :dummy                            (text-col \"Total\" \"dummy\" 50)\r\n\r\n   :description                      (text-col \"thinkFolio ID\" \"description\" 400)\r\n   :nav                              (nb-col \"Fund\" \"weight\" 50 round2 \"sum\")\r\n   :bm-weight                        (nb-col \"Index\" \"bm-weight\" 50 round2 \"sum\")\r\n   :weight-delta                     (nb-col \"Delta\" \"weight-delta\" 50 round2 \"sum\")\r\n   :nominal                          (nb-col \"Nominal\" \"original-quantity\" 100 nb-thousand-cell-format \"sum\")\r\n   :value                            (nb-col \"Value\" \"base-value\" 100 nb-thousand-cell-format \"sum\")\r\n\r\n   :z-spread                         (nb-col \"Z\" \"qt-libor-spread\" 45 nb-thousand-cell-format median)\r\n   :g-spread                         (nb-col \"G\" \"qt-govt-spread\" 45 nb-thousand-cell-format median)\r\n   :duration                         (nb-col \"M dur\" \"qt-modified-duration\" 45 round1 median)\r\n   :yield                            (nb-col \"Yield\" \"qt-yield\" 45 round2*100 median)\r\n\r\n   :contrib-gspread                  (nb-col \"G-spread\" \"contrib-gspread\" 60 round0 \"sum\")\r\n   :contrib-zspread                  (nb-col \"Fund\" \"contrib-zspread\" 60 round0 \"sum\")\r\n   :contrib-yield                    (nb-col \"Fund\" \"contrib-yield\" 50 round2pc \"sum\")\r\n   :contrib-yield-summary            (nb-col \"Fund\" \"contrib-yield\" 50 round2pc100 \"sum\")\r\n   :contrib-mdur                     (nb-col \"Fund\" \"contrib-mdur\" 50 round2 \"sum\")\r\n   :bm-contrib-yield                 (nb-col \"Index\" \"bm-contrib-yield\" 50 round2pc \"sum\")\r\n   :bm-contrib-eir-duration          (nb-col \"Index\" \"bm-contrib-eir-duration\" 50 round2 \"sum\")\r\n   :duration-times-spread-weight     (nb-col \"DTS\" \"duration-times-spread-weight\" 45 round0 \"sum\")\r\n\r\n   :cash-pct                         (nb-col \"Cash\" \"cash-pct\" 50 round2pc100 \"sum\")\r\n   :contrib-bond-yield-summary       (nb-col \"Bond yield\" \"contrib-bond-yield\" 70 round2pc100 \"sum\")\r\n\r\n   :mdur-delta                       (nb-col \"Delta\" \"mdur-delta\" 50 round2 \"sum\")\r\n   :contrib-beta                     (nb-col \"EMCD\" \"contrib-beta-1y-daily\" 50 round2 \"sum\")\r\n   :cembi-beta-last-year             (nb-col (gstring/unescapeEntities \"&beta;\") \"cembi-beta-last-year\" 45 round1 median)\r\n   :cembi-beta-previous-year         (nb-col (gstring/unescapeEntities \"LY &beta;\") \"cembi-beta-previous-year\" 45 round1 median)\r\n\r\n   :contrib-BBG_CEMBI_D1Y_BETA       (nb-col \"Fund Bbg\" \"contrib-BBG_CEMBI_D1Y_BETA\" 65 round2 \"sum\")\r\n   :bm-contrib-BBG_CEMBI_D1Y_BETA    (nb-col \"Index Bbg\" \"bm-contrib-BBG_CEMBI_D1Y_BETA\" 65 round2 \"sum\")\r\n   :contrib-delta-BBG_CEMBI_D1Y_BETA (nb-col \"Delta Bbg\" \"contrib-delta-BBG_CEMBI_D1Y_BETA\" 65 round2 \"sum\")\r\n\r\n   :contrib-BBG_EMBI_D1Y_BETA       (nb-col \"Fund Bbg\" \"contrib-BBG_EMBI_D1Y_BETA\" 65 round2 \"sum\")\r\n   :bm-contrib-BBG_EMBI_D1Y_BETA    (nb-col \"Index Bbg\" \"bm-contrib-BBG_EMBI_D1Y_BETA\" 65 round2 \"sum\")\r\n   :contrib-delta-BBG_EMBI_D1Y_BETA (nb-col \"Delta Bbg\" \"contrib-delta-BBG_EMBI_D1Y_BETA\" 65 round2 \"sum\")\r\n   :contrib-BBG_CEMBIIG_D1Y_BETA       (nb-col \"Fund Bbg\" \"contrib-BBG_CEMBIIG_D1Y_BETA\" 65 round2 \"sum\")\r\n   :bm-contrib-BBG_CEMBIIG_D1Y_BETA    (nb-col \"Index Bbg\" \"bm-contrib-BBG_CEMBIIG_D1Y_BETA\" 65 round2 \"sum\")\r\n   :contrib-delta-BBG_CEMBIIG_D1Y_BETA (nb-col \"Delta Bbg\" \"contrib-delta-BBG_CEMBIIG_D1Y_BETA\" 65 round2 \"sum\")\r\n\r\n   :total-return-ytd                 (nb-col \"YTD TR\" \"total-return-ytd\" 50 #(nb-cell-format \"%.1f%\" 100. %) median)\r\n   :jensen-ytd                       (nb-col \"Jensen\" \"jensen-ytd\" 50 #(nb-cell-format \"%.1f%\" 100. %) median)\r\n\r\n   :quant-value-2d                   (nb-col \"2D\" \"quant-value-2d\" 50 round2 \"sum\")\r\n   :quant-value-4d                   (nb-col \"4D\" \"quant-value-4d\" 50 round2 \"sum\")\r\n   :msci-rating                      (assoc (text-col \"Rating\" \"msci-rating\" 75) :sortMethod nil ) ;:sortMethod sort-msci-rating\r\n   })\r\n\r\n\r\n\r\n(def attribution-table-columns\r\n  {:region           (text-col \"Region\" \"Region\" 140)\r\n   :country          (text-col \"Country\" \"Country\" 140)\r\n   :issuer           (text-col \"Issuer\" \"Issuer\" 140)\r\n   :sector           (text-col \"Sector\" \"Sector\" 140)\r\n   :maturity-band    (text-col \"Maturity\" \"Duration-Bucket\" 140)\r\n   :portfolio        (text-col \"Portfolio\" \"Fund\" 140)\r\n\r\n   :total-effect     (nb-col \"Fund\" \"Total-Effect\" 80 round2pc \"sum\")\r\n   :xs-weight        (nb-col \"Excess\" \"Average-Excess-Weight\" 70 round2pc \"sum\")\r\n   :weight           (nb-col \"Fund\" \"Average-Fund-Weight\" 70 round2pc \"sum\")\r\n   :bm-weight        (nb-col \"Index\" \"Average-Index-Weight\" 70 round2pc \"sum\")\r\n   :contribution     (nb-col \"Fund\" \"Fund-Contribution\" 70 round2pc \"sum\")\r\n   :bm-contribution  (nb-col \"Index\" \"Index-Contribution\" 70 round2pc \"sum\")\r\n\r\n   :index-return     (nb-col \"Index\" \"Index-Return\" 70 round2pc median)\r\n   :fund-return      (nb-col \"Fund\" \"Fund-Return\" 70 round2pc median)\r\n\r\n   :total-effect-wtd     (nb-col \"Effect\" \"Total-Effect-wtd\" 70 performance-attributes-bps \"sum\")\r\n   :xs-weight-wtd        (nb-col \"Excess\" \"Average-Excess-Weight-wtd\" 70 round2pc \"sum\")\r\n   :weight-wtd           (nb-col \"Fund\" \"Average-Fund-Weight-wtd\" 70 round2pc \"sum\")\r\n   :bm-weight-wtd        (nb-col \"Index\" \"Average-Index-Weight-wtd\" 70 round2pc \"sum\")\r\n   :contribution-wtd     (nb-col \"Fund cont.\" \"Fund-Contribution-wtd\" 70 performance-attributes-bps \"sum\")\r\n   :bm-contribution-wtd  (nb-col \"Index cont.\" \"Index-Contribution-wtd\" 70 performance-attributes-bps \"sum\")\r\n\r\n   :total-effect-ytd     (nb-col \"Effect\" \"Total-Effect-ytd\" 70 performance-attributes-bps\"sum\" )\r\n   :xs-weight-ytd        (nb-col \"Excess %\" \"Average-Excess-Weight-ytd\" 70 round2pc \"sum\")\r\n   :weight-ytd           (nb-col \"Fund %\" \"Average-Fund-Weight-ytd\" 70 round2pc \"sum\")\r\n   :bm-weight-ytd        (nb-col \"Index %\" \"Average-Index-Weight-ytd\" 70 round2pc \"sum\")\r\n   :contribution-ytd     (nb-col \"Fund cont.\" \"Fund-Contribution-ytd\" 70 performance-attributes-bps \"sum\")\r\n   :bm-contribution-ytd  (nb-col \"Index cont.\" \"Index-Contribution-ytd\" 70 performance-attributes-bps \"sum\")\r\n\r\n   :total-effect-pwtd     (nb-col \"Effect\" \"Total-Effect-pwtd\" 70 performance-attributes-bps \"sum\")\r\n   :xs-weight-pwtd        (nb-col \"Excess\" \"Average-Excess-Weight-pwtd\" 70 round2pc \"sum\")\r\n   :weight-pwtd           (nb-col \"Fund\" \"Average-Fund-Weight-pwtd\" 70 round2pc \"sum\")\r\n   :bm-weight-pwtd        (nb-col \"Index\" \"Average-Index-Weight-pwtd\" 70 round2pc \"sum\")\r\n   :contribution-pwtd     (nb-col \"Fund cont.\" \"Fund-Contribution-pwtd\" 70 performance-attributes-bps \"sum\")\r\n   :bm-contribution-pwtd  (nb-col \"Index cont.\" \"Index-Contribution-pwtd\" 70 performance-attributes-bps \"sum\")\r\n\r\n   :rating           (text-col \"Rating\" \"Rating\" 140)\r\n   :rating-group     (text-col \"Rating Group\" \"RatingGroup\" 140)\r\n   :code             (text-col \"Code\" \"Code\" 140)\r\n   :ighy             (text-col \"IGHY\" \"IGHY\" 140)\r\n   :invrtg           (text-col \"Rating\" \"INVRTG\" 140)\r\n   :period           (text-col \"Period\" \"Period\" 140)\r\n   :security         (text-col \"Security\" \"Security\" 140)\r\n   :dummy            (text-col \"Total\" \"dummy\" 50)})\r\n\r\n\r\n(defn sub-low-level-rating-score-to-string [x]\r\n  (let [i (dec (js/parseInt x))]\r\n    (if (<= 0 i 23)\r\n      (nth [\"AAA\" \"AA+\" \"AA\" \"AA-\" \"A+\" \"A\" \"A-\" \"BBB+\" \"BBB\" \"BBB-\" \"BB+\" \"BB\" \"BB-\" \"B+\" \"B\" \"B-\" \"CCC+\" \"CCC\" \"CCC-\" \"CC\" \"C\" \"D\" \"NM\" \"NR\"] i)\r\n      \"NA\")))\r\n\r\n(defn low-level-rating-score-to-string\r\n  [c]\r\n  (if-let [x (cell-value c)]\r\n    (sub-low-level-rating-score-to-string x)\r\n    \"NA\"))\r\n\r\n(defn breach-status-color\r\n  \"if status = 0 green background, if status = 1 orange (warning) background,if status = 2 (breach) red background,\"\r\n  [cell]\r\n  (case (cell-value cell) 0 #js {:sx #js {:color \"Chartreuse\" :backgroundColor \"Chartreuse\" :textAlign \"center\"}} 1 #js {:sx #js {:color \"DarkOrange\" :backgroundColor \"DarkOrange\" :textAlign \"center\"}} 2 #js {:sx #js {:color \"Crimson\" :backgroundColor \"Crimson\" :textAlign \"center\"}} #js {}))\r\n\r\n(defn breach-status-color-rules\r\n  \"if status = 0 green background, if status = 1 orange (warning) background,if status = 2 (breach) red background,\"\r\n  [cell]\r\n  (case (cell-value cell) \"Y\" #js {:sx #js {:color \"Chartreuse\" :backgroundColor \"Chartreuse\" :textAlign \"center\"}} \"N\" #js {:sx #js {:color \"Crimson\" :backgroundColor \"Crimson\" :textAlign \"center\"}} #js {}))\r\n\r\n\r\n(defn breach-status-color-true-false\r\n  \"\"\r\n  [cell]\r\n  (case (cell-value cell) true #js {:sx #js {:color \"Chartreuse\" :backgroundColor \"Chartreuse\" :textAlign \"center\"}} false #js {:sx #js {:color \"Crimson\" :backgroundColor \"Crimson\" :textAlign \"center\"}}  #js {}))\r\n\r\n(defn breach-status-color-is-100\r\n  \"\"\r\n  [cell]\r\n  (case (cell-value cell) 100.0000 #js {:sx #js {:color \"Chartreuse\" :backgroundColor \"Chartreuse\" :textAlign \"center\"}}  #js {:sx #js {:color \"Crimson\" :backgroundColor \"Crimson\" :textAlign \"center\"}}))\r\n\r\n(defn breach-status-color-attribution-scale\r\n  \"\"\r\n  [cell]\r\n  (condp > (cell-value cell)\r\n    1   #js {:sx #js {:color \"Chartreuse\" :backgroundColor \"Chartreuse\" :textAlign \"center\"}}\r\n    10  #js {:sx #js {:color \"DarkOrange\" :backgroundColor \"DarkOrange\" :textAlign \"center\"}}\r\n    999 #js {:sx #js {:color \"Crimson\" :backgroundColor \"Crimson\" :textAlign \"center\"}}\r\n    #js {:sx #js {:color \"darkmagenta\" :backgroundColor \"darkmagenta\" :textAlign \"center\"}})\r\n  )"]}