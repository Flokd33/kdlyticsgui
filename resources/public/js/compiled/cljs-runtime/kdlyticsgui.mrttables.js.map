{"version":3,"sources":["kdlyticsgui/mrttables.cljs"],"mappings":"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","names":["kdlyticsgui.mrttables/cell-value","c","kdlyticsgui.mrttables/get-js-row-key","row","key","kdlyticsgui.mrttables.goog$module$goog$object.getValueByKeys","kdlyticsgui.mrttables/red-negatives","cell","kdlyticsgui.mrttables/allocation-delta-formatting","helix.core/get-react","obj46472","obj46474","obj46490","obj46492","obj46494","obj46496","obj46498","obj46500","obj46502","obj46504","obj46506","obj46508","obj46510","obj46512","obj46514","obj46523","obj46525","obj46527","obj46529","obj46541","obj46566","helix.impl.props/merge-obj","helix.impl.props._props","obj46583","this","temp__5802__auto__","x","pred__46431","expr__46432","cljs.core/>","kdlyticsgui.mrttables/full-row-formatting","r","G__46434","kdlyticsgui.mrttables/breach-status-color-nb","G__46435","kdlyticsgui.mrttables/breach-status-color-txt","G__46436","kdlyticsgui.mrttables/breach-status-color-boolean","G__46437","cljs.core._EQ_","kdlyticsgui.mrttables/breach-status-color-scale","pred__46438","expr__46439","kdlyticsgui.mrttables/median","coll","sorted","cljs.core.sort","cljs.core.remove","cljs.core/nil?","cnt","cljs.core/count","halfway","cljs.core/quot","cljs.core/odd?","cljs.core.nth","bottom","bottom-val","top-val","kdlyticsgui.mrttables/mrt-median","columnId","leafRows","childRows","p1__46441#","cljs.core.map","kdlyticsgui.mrttables/nff","js/goog.i18n.NumberFormat","goog.i18n.NumberFormat.Format/DECIMAL","kdlyticsgui.mrttables/nb-thousand-cell-format","js/isNaN","js/Math.round","kdlyticsgui.mrttables/nb-cell-format","fmt","m","goog.string/format","p1__46442#","kdlyticsgui.mrttables/round0","p1__46443#","kdlyticsgui.mrttables/round1","p1__46444#","kdlyticsgui.mrttables/round2","p1__46445#","kdlyticsgui.mrttables/round0pc","p1__46446#","kdlyticsgui.mrttables/round1pc","p1__46447#","kdlyticsgui.mrttables/round2pc","p1__46448#","kdlyticsgui.mrttables/round0pc100","p1__46449#","kdlyticsgui.mrttables/round1pc100","p1__46450#","kdlyticsgui.mrttables/round2pc100","kdlyticsgui.mrttables/lower-case-s-in-value?","s","value","G__46451","js/parseFloat","cljs.core/not","kdlyticsgui.mrttables/ampersand-truth","id","line","p1__46452#","kdlyticsgui.mrttables/text-filter-OR","filterValue","p1__46453#","v","var_args","G__46455","kdlyticsgui.mrttables/comparator-read","js/Error","rowval","input","mult","G__46456","kdlyticsgui.mrttables.comparator_read","kdlyticsgui.mrttables/ampersand-comp","compread","kdlyticsgui.mrttables/nb-filter-OR-AND","p1__46457#","p1__46458#","G__46460","kdlyticsgui.mrttables/text-col","header","accessor","width","cljs.core.assoc","G__46563","helix.hooks/wrap-fx","G__46564","helix.hooks/raw-use-effect","kdlyticsgui.mrttables.text_col","G__46462","kdlyticsgui.mrttables/text-col-multiline","kdlyticsgui.mrttables.text_col_multiline","G__46464","kdlyticsgui.mrttables/nb-col","aggregate","AggregatedCell","kdlyticsgui.mrttables.nb_col","G__46466","props__29210__auto__","maybe-ref__29211__auto__","vec__46467","helix.core/extract-cljs-props","map__46470","cljs.core/--destructure-map","cljs.core.get","goog/DEBUG","G__46475","kdlyticsgui.mrttables/icon-element-button-helix","icon","tooltip-text","on-click-fn","js/module$node_modules$$mui$material$node$index.Tooltip","js/module$node_modules$$mui$material$node$index.IconButton","kdlyticsgui.mrttables/photo-id->shortcut-key","kdlyticsgui.mrttables/get-pivoted-data","table","leaves","cljs.core.into","iter__5523__auto__","s__46477","cljs.core/LazySeq","temp__5804__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__5521__auto__","size__5522__auto__","b__46479","cljs.core/chunk-buffer","i__46478","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__46476","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","leaf","cljs.core.js__GT_clj","kdlyticsgui.mrttables/download-view","download-fn","photo-id","dw-cols","cljs.core.concat","p1__46481#","p1__46480#","kdlyticsgui.tools.csv_link","G__46482","G__46484","vec__46485","map__46488","G__46515","kdlyticsgui.mrttables/single-risk-table-toolbar","data","js/module$node_modules$$mui$icons_material$BarChart.default","re-frame.core/dispatch","js/module$node_modules$$mui$icons_material$PieChart.default","js/module$node_modules$$mui$material$node$index.Divider","js/module$node_modules$$mui$icons_material$Filter1.default","js/module$node_modules$$mui$icons_material$Filter2.default","js/module$node_modules$$mui$icons_material$Filter3.default","js/module$node_modules$$mui$icons_material$Filter4.default","js/module$node_modules$$mui$icons_material$Expand.default","js/module$node_modules$$mui$icons_material$FilterListOff.default","js/module$node_modules$material_react_table$dist$cjs$index.MRT_ShowHideColumnsButton","js/module$node_modules$$mui$icons_material$SystemUpdateAlt.default","js/module$node_modules$$mui$icons_material$Download.default","G__46517","vec__46518","map__46521","G__46530","kdlyticsgui.mrttables/mrt-table-toolbar","kdlyticsgui.mrttables/mrt-default-download-fn","clj-cols","nested?","cljs.core/contains?","cljs.core.apply","cljs.core/concat","cljs.core/keyword","js-data","kdlyticsgui.mrttables/mrt-th-download-fn","kdlyticsgui.mrttables/show-if-any-is-hidden","groupset","visible-ids","cljs.core/set","p1__46531#","group-visible?","clojure.set/subset?","seq__46532","chunk__46533","count__46534","i__46535","c__5568__auto__","cljs.core/chunk-first","cljs.core/next","seq__46536","chunk__46537","count__46538","i__46539","kdlyticsgui.mrttables/help-modal","re-com.core/p","kdlyticsgui.mrttables/mrt-ref->filtered-col-seq","ref","col","kdlyticsgui.mrttables/mrt-ref->filtered-rows-seq","kdlyticsgui.mrttables/base-props","mdata","mcolumns","clj-option-map","js-initial-state","toolbar","cljs.core.merge","or__5045__auto__","G__46545","vec__46546","map__46549","G__46569","kdlyticsgui.mrttables/material-react-table-template","clj-data","clj-columns","external-state-reference","initial-external-state","vec__46550","vec__46553","vec__46556","pinned-cols","cljs.core/clj->js","cljs.core.conj","cljs.core.mapv","ffilter","setFilter","helix.hooks/use-state","grouping","setGrouping","expanded","setExpanded","G__46559","G__46560","helix.hooks/raw-use-memo","cljs.core/array?","p1__46542#","p1__46543#","G__46561","G__46562","target","cljs.core/Keyword","cljs.core/reset!","props","js/module$node_modules$material_react_table$dist$cjs$index.default","G__46573","vec__46574","map__46577","G__46586","kdlyticsgui.mrttables/material-react-table-template-fast","G__46578","G__46579","p1__46570#","p1__46571#","G__46580","G__46581","G__46589","vec__46590","G__46595","kdlyticsgui.mrttables/material-react-table-template-basic","argument-map","p1__46587#","cljs.core.update"],"sourcesContent":["(ns kdlyticsgui.mrttables\r\n  (:require [goog.object :as gobj]\r\n            [reagent.core :as r]\r\n            [goog.string :as gstring]\r\n            [goog.string.format]\r\n            [re-com.core :refer [p]]\r\n            [re-frame.core :as rf]\r\n            [kdlyticsgui.tools :as t]\r\n            [helix.core :refer [defnc $]]\r\n            [helix.dom :as hd]\r\n            [cljs-time.core :refer [today]]\r\n            [helix.hooks :refer [use-state use-effect use-memo]]\r\n            [\"material-react-table\" :as rt :default MaterialReactTable :refer ( MRT_ShowHideColumnsButton MRT_ToggleDensePaddingButton MRT_FullScreenToggleButton )] ;<MRT_FullScreenToggleButton table={table} />\r\n            [\"@mui/material\" :as mm :refer ( Button IconButton Tooltip Box Divider)]\r\n            [\"@mui/icons-material/PhotoCamera\" :default PhotoCameraIcon]\r\n            [\"@mui/icons-material/Download\" :default DownloadIcon]\r\n            [\"@mui/icons-material/SystemUpdateAlt\" :default SystemUpdateAltIcon]\r\n            [\"@mui/icons-material/Star\" :default StarIcon]\r\n            [\"@mui/icons-material/StarBorder\" :default StarBorderIcon]\r\n            [\"@mui/icons-material/FilterListOff\" :default FilterListOffIcon]\r\n            [\"@mui/icons-material/Filter1\" :default Filter1Icon]\r\n            [\"@mui/icons-material/Filter2\" :default Filter2Icon]\r\n            [\"@mui/icons-material/Filter3\" :default Filter3Icon]\r\n            [\"@mui/icons-material/Filter4\" :default Filter4Icon]\r\n            [\"@mui/icons-material/HelpCenter\" :default HelpCenterIcon]\r\n            [\"@mui/icons-material/CallEnd\" :default CallEndIcon]\r\n            [\"@mui/icons-material/Flag\" :default FlagIcon]\r\n            [\"@mui/icons-material/Workspaces\" :default WorkspacesIcon]\r\n            [\"@mui/icons-material/BarChart\" :default BarChartIcon]\r\n            [\"@mui/icons-material/PieChart\" :default PieChartIcon]\r\n            [\"@mui/icons-material/Expand\" :default ExpandIcon]\r\n            [\"react\" :as react :refer (useMemo useState)]\r\n            [clojure.set]\r\n            )\r\n  (:import (goog.i18n NumberFormat)\r\n           (goog.i18n.NumberFormat Format))\r\n  )\r\n\r\n;---------------------------------------------------CONDITIONAL FORMATTING----------------------------------------------\r\n(defn cell-value [c] (.getValue (.-cell c)))\r\n(defn get-js-row-key [row key] (gobj/getValueByKeys row \"row\" \"original\" key))\r\n\r\n(defn red-negatives\r\n  \"right align, with red text if negative\"\r\n  [cell]\r\n  (if (and (some? cell) (neg? (cell-value cell)))\r\n    #js {\"align\" \"right\" \"sx\" #js {\"color\" \"red\" \"borderRight\" \"1px solid rgba(224,224,224,1)\"}}\r\n    #js {\"align\" \"right\" \"sx\" #js {\"borderRight\" \"1px solid rgba(224,224,224,1)\"}}))\r\n\r\n(defn allocation-delta-formatting [this]\r\n  (if-let [x (get-js-row-key this \"alloc-strat-delta\")]\r\n    (condp > x\r\n      -500   #js {:sx #js {\"cursor\" \"pointer\" \"backgroundColor\" \"#f08080\"}}\r\n      500    #js{}\r\n      ;(if (odd? (.-index (.-row this)))\r\n      ;         #js {:sx #js {\"cursor\" \"pointer\" \"backgroundColor\" \"#F5F5F5\"}}\r\n      ;         #js {:sx #js {\"cursor\" \"pointer\"}})\r\n      #js {:sx #js {\"cursor\" \"pointer\" \"backgroundColor\" \"#9CD7AB\"}})\r\n    #js{}))\r\n\r\n(defn full-row-formatting [this]\r\n  (if-let [r (get-js-row-key this \"shortName\")]\r\n    (case (str r)\r\n      \"CASH\" #js {:sx #js {\"cursor\" \"pointer\" \"backgroundColor\" \"#e1ecf7\"}}\r\n      #js {}\r\n       ;(if (odd? (.-index (.-row this)))\r\n       ;   #js {:sx #js {\"cursor\" \"pointer\" \"backgroundColor\" \"#F5F5F5\"}}\r\n       ;   #js {:sx #js {\"cursor\" \"pointer\"}})\r\n       )\r\n    #js {}\r\n    ))\r\n\r\n(defn breach-status-color-nb\r\n  \"if status = 0 green background, if status = 1 orange (warning) background,if status = 2 (breach) red background,\"\r\n  [cell]\r\n  (case (cell-value cell) 0 #js {:sx #js {:color \"Chartreuse\" :backgroundColor \"Chartreuse\" :textAlign \"center\"}} 1 #js {:sx #js {:color \"DarkOrange\" :backgroundColor \"DarkOrange\" :textAlign \"center\"}} 2 #js {:sx #js {:color \"Crimson\" :backgroundColor \"Crimson\" :textAlign \"center\"}} #js {}))\r\n\r\n(defn breach-status-color-txt\r\n  [cell]\r\n  (case (cell-value cell) \"Y\" #js {:sx #js {:color \"Chartreuse\" :backgroundColor \"Chartreuse\" :textAlign \"center\"}} \"N\" #js {:sx #js {:color \"Crimson\" :backgroundColor \"Crimson\" :textAlign \"center\"}} #js {}))\r\n\r\n(defn breach-status-color-boolean\r\n  [cell]\r\n  (case (cell-value cell) true #js {:sx #js {:color \"Chartreuse\" :backgroundColor \"Chartreuse\" :textAlign \"center\"}} false #js {:sx #js {:color \"Crimson\" :backgroundColor \"Crimson\" :textAlign \"center\"}}  #js {}))\r\n\r\n(defn breach-status-color-scale\r\n  [cell]\r\n  (condp > (cell-value cell)\r\n    1   #js {:sx #js {:color \"Chartreuse\" :backgroundColor \"Chartreuse\" :textAlign \"center\"}}\r\n    10  #js {:sx #js {:color \"DarkOrange\" :backgroundColor \"DarkOrange\" :textAlign \"center\"}}\r\n    999 #js {:sx #js {:color \"Crimson\" :backgroundColor \"Crimson\" :textAlign \"center\"}}\r\n    #js {:sx #js {:color \"darkmagenta\" :backgroundColor \"darkmagenta\" :textAlign \"center\"}}))\r\n\r\n;------------------------------------------------------MEDIANS----------------------------------------------------------\r\n\r\n(defn median [coll]\r\n  (let [sorted (sort (remove nil? coll))     ;(remove zero? (remove nil? coll))\r\n        cnt (count sorted)\r\n        halfway (quot cnt 2)]\r\n    (cond\r\n      (zero? cnt) nil\r\n      (odd? cnt) (nth sorted halfway)\r\n      :else (let [bottom (dec halfway) bottom-val (nth sorted bottom) top-val (nth sorted halfway)] (* 0.5 (+ bottom-val top-val))))))\r\n\r\n(defn mrt-median [columnId leafRows childRows]\r\n  (median (map #(.getValue % columnId) leafRows)))\r\n\r\n;---------------------------------------------------CELL FORMATTING-----------------------------------------------------\r\n\r\n(def nff (NumberFormat. Format/DECIMAL))\r\n\r\n(defn nb-thousand-cell-format\r\n  \"This will write a single cell.\"\r\n  [this]\r\n  (let [x (cell-value this)]\r\n    (if (js/isNaN x) \"-\" (.format nff (str (js/Math.round x))))))\r\n\r\n(defn nb-cell-format\r\n  \"This will write a single cell.\r\n  Note that [this] has access to the full row so conditional evaluation is possible (e.g. change col B based on values in col A)\r\n  Here we take the input value if it's there, scale it (useful for percentages) and format it.\"\r\n  [fmt m this]\r\n  (let [x (cell-value this)]\r\n    (if (js/isNaN x) \"-\" (gstring/format fmt (* m x)))))\r\n\r\n(def round0 #(nb-cell-format \"%.0f\" 1. %))\r\n(def round1 #(nb-cell-format \"%.1f\" 1. %))\r\n(def round2 #(nb-cell-format \"%.2f\" 1. %))\r\n\r\n(def round0pc #(nb-cell-format \"%.0f%\" 1. %))\r\n(def round1pc #(nb-cell-format \"%.1f%\" 1. %))\r\n(def round2pc #(nb-cell-format \"%.2f%\" 1. %))\r\n\r\n(def round0pc100 #(nb-cell-format \"%.0f%\" 100. %))\r\n(def round1pc100 #(nb-cell-format \"%.1f%\" 100. %))\r\n(def round2pc100 #(nb-cell-format \"%.2f%\" 100. %))\r\n\r\n\r\n\r\n;------------------------------------------------FILTERS----------------------------------------------------------------\r\n(defn lower-case-s-in-value?\r\n  \"Checks if s (already assumed lower case) is in value. If s starts by -, excludes it\"\r\n  ;removed the = path which isn't a good path\r\n  [^string s value]\r\n  (if value                                                 ;checks for nil\r\n    (case (.charAt s 0)\r\n      \">\" (> value (js/parseFloat (.substring s 1)))\r\n      \"<\" (< value (js/parseFloat (.substring s 1)))\r\n      \"-\" (not (.includes (.toLowerCase ^string value) (.substring s 1)))\r\n      (if (js/isNaN value) (.includes (.toLowerCase ^string value) s) (= (js/parseFloat s) value)))))\r\n\r\n(defn ampersand-truth [id line] (.every (.split ^js/String line \"&\") #(lower-case-s-in-value? % id)))\r\n(defn text-filter-OR\r\n  \"OR through comma separation, AND through &\"\r\n  [row ^string id ^string filterValue]\r\n  (.some (.split ^js/String (.replaceAll (.toLowerCase ^string filterValue) \" \" \"\") \",\")\r\n         #(ampersand-truth (.toLowerCase ^string (if-let [v (.getValue row id)] v \"\")) %)))\r\n\r\n(defn comparator-read\r\n  ([rowval ^string input mult]\r\n   (case (.substring input 0 1)\r\n     \">\" (> rowval (* mult (js/parseFloat (.substring input 1))))\r\n     \"<\" (< rowval (* mult (js/parseFloat (.substring input 1))))\r\n     ;\"=\" (= rowval (* mult (cljs.reader/read-string (subs input 1))))\r\n     (= rowval (* mult (js/parseFloat input)))))\r\n  ([rowval ^string input] (comparator-read rowval input 1.)))\r\n\r\n\r\n(defn ampersand-comp [compread line] (.every (.split ^js/String line \"&\") compread))\r\n(defn nb-filter-OR-AND\r\n  \"filterfn is {id: column_name value: text_in_filter_box\r\n  comma separation is OR. Within comma separation, & is AND.\"\r\n  [row ^string id ^string filterValue]\r\n  (let [compread #(comparator-read (.getValue row id) %)]\r\n    (.some (.split (.toLowerCase ^string filterValue) \",\")\r\n           #(ampersand-comp compread %))))\r\n\r\n;-----------------------------------------------COLUMNS TEMPLATES-------------------------------------------------------\r\n\r\n(defn text-col\r\n  \"Simple text column in MRT\"\r\n  ([header accessor width]\r\n   {:header                               header\r\n    :accessorKey                          accessor\r\n    :size                                 width\r\n    :enablePinning                        false\r\n    :muiTableHeadCellFilterTextFieldProps {:placeholder \"\" :sx {:minWidth \"0px\"}}\r\n    :filterFn                             text-filter-OR\r\n    :muiTableBodyRowProps                 #js {\"sx\" #js {\"cursor\" \"pointer\" \"backgroundColor\" \"#9fc5e8\"}}\r\n    :muiTableBodyCellProps                #js {\"sx\" #js {\"borderRight\" \"1px solid rgba(224,224,224,1)\" \"backgroundColor\" \"inherit\"}}})\r\n  ([header accessor width cell]\r\n   (assoc (text-col header accessor width) :Cell cell)))\r\n\r\n(defn text-col-multiline\r\n  \"Simple text column in MRT\"\r\n  ([header accessor width]\r\n   {:header                               header\r\n    :accessorKey                          accessor\r\n    :size                                 width\r\n    :enablePinning                        false\r\n    :muiTableHeadCellFilterTextFieldProps {:placeholder \"\" :sx {:minWidth \"0px\"}}\r\n    :filterFn                             text-filter-OR\r\n    :muiTableBodyCellProps                #js {\"sx\" #js {\"borderRight\" \"1px solid rgba(224,224,224,1)\" \"backgroundColor\" \"inherit\" \"wordWrap\" \"break-word\" \"whiteSpace\" \"pre-line\"}}})\r\n  ([header accessor width cell]\r\n   (assoc (text-col-multiline header accessor width) :Cell cell)))\r\n\r\n(defn nb-col\r\n  \"Simple number column in MRT, by default aligned right with red negatives\"\r\n  ([header accessor width cell aggregate AggregatedCell]\r\n   (assoc (nb-col header accessor width cell) :aggregationFn aggregate :AggregatedCell AggregatedCell))\r\n  ([header accessor width cell aggregate]\r\n   (assoc (nb-col header accessor width cell) :aggregationFn aggregate :AggregatedCell cell))\r\n  ([header accessor width cell]\r\n   {:header                               header\r\n    :accessorKey                          accessor\r\n    :size                                 width\r\n    :muiTableBodyCellProps                red-negatives\r\n    :Cell                                 cell\r\n    :enablePinning                        false\r\n    :muiTableHeadCellFilterTextFieldProps {:placeholder \"\" :sx {:minWidth \"0px\"}}\r\n    :filterFn                             nb-filter-OR-AND}))\r\n\r\n;---------------------------------------------TABLE IMPLEMENTATION------------------------------------------------------\r\n\r\n(defnc icon-element-button-helix\r\n  [{:keys [icon tooltip-text on-click-fn]}]\r\n  ($ Tooltip {:arrow true :title tooltip-text :key tooltip-text}\r\n     ($ IconButton {:onClick on-click-fn} ($ icon))))\r\n\r\n(def photo-id->shortcut-key\r\n  {\"single-portfolio-risk-table\" :single-portfolio-risk/shortcut\r\n   \"multiple-portfolio-risk-table\" :multiple-portfolio-risk/shortcut\r\n   \"single-portfolio-trade-log-table\" :single-portfolio-trade-log/shortcut\r\n   \"single-portfolio-attribution\" :single-portfolio-attribution/shortcut})\r\n\r\n(defn get-pivoted-data\r\n  [table]\r\n  (let [leaves (.filter (.getLeafRows (aget (.-rows (.getGroupedRowModel table)) 0))\r\n                        (fn [line] (= (.-depth line) 1)))]\r\n    (into [] (for [leaf leaves] (assoc (js->clj (.-_groupingValuesCache leaf)) \"group\" (.-groupingValue leaf))))))\r\n\r\n(defn download-view\r\n  \"If the table is group, we get the pivoted data, otherwise we use the standard download function\"\r\n  [table download-fn photo-id]\r\n  (if (pos? (count (.-grouping (.getState table))))\r\n    (let [dw-cols (concat [\"group\"] (js->clj (.map (.filter (.getAllLeafColumns table) #(not (.getIsGrouped %))) #(.-id %))))]\r\n      (t/csv-link (js->clj (get-pivoted-data table) {:keywordize-keys true}) photo-id dw-cols))\r\n    (download-fn (.map (.-rows (.getPrePaginationRowModel table)) (fn [row] (.-original row))))))\r\n\r\n(defnc single-risk-table-toolbar\r\n  \"This returns the top right Toolbar function with the standard actions\"\r\n  [{:keys [table data download-fn photo-id]}]\r\n  [($ icon-element-button-helix {:key \"BarChart\" :icon BarChartIcon :tooltip-text \"Bar chart\" :on-click-fn (fn [] (rf/dispatch [:single-portfolio-risk/chart \"bar\"]))})\r\n   ($ icon-element-button-helix {:key \"PieChart\" :icon PieChartIcon :tooltip-text \"Pie chart\" :on-click-fn (fn [] (rf/dispatch [:single-portfolio-risk/chart \"pie\"]))})\r\n   ($ Divider {:key \"divider0\" :variant \"middle\" :orientation \"vertical\"})\r\n   ($ icon-element-button-helix {:key \"Filter1Icon\" :icon Filter1Icon :tooltip-text \"View 1\" :on-click-fn (fn [] (rf/dispatch [(photo-id->shortcut-key photo-id) 1 table]))})\r\n   ($ icon-element-button-helix {:key \"Filter2Icon\" :icon Filter2Icon :tooltip-text \"View 2\" :on-click-fn (fn [] (rf/dispatch [(photo-id->shortcut-key photo-id) 2 table]))})\r\n   ($ icon-element-button-helix {:key \"Filter3Icon\" :icon Filter3Icon :tooltip-text \"View 3\" :on-click-fn (fn [] (rf/dispatch [(photo-id->shortcut-key photo-id) 3 table]))})\r\n   ($ icon-element-button-helix {:key \"Filter4Icon\" :icon Filter4Icon :tooltip-text \"View 4\" :on-click-fn (fn [] (rf/dispatch [(photo-id->shortcut-key photo-id) 4 table]))})\r\n   ($ Divider {:key \"divider1\" :variant \"middle\" :orientation \"vertical\"})\r\n   ($ icon-element-button-helix {:key \"ExpandIcon\" :icon ExpandIcon :tooltip-text \"Show more rows\" :on-click-fn (fn [] (if (pos? (count (.-grouping (.getState table)))) (.setPageSize table 50) (.setPageSize table (if (= (.-pageSize (.-pagination (.getState table))) 200) 15 200))))})\r\n   ($ icon-element-button-helix {:key \"FilterListOffIcon\" :icon FilterListOffIcon :tooltip-text \"Clear filters\" :on-click-fn (fn [] (.resetColumnFilters table #js []))})\r\n   ($ MRT_ShowHideColumnsButton {:table table :key \"show-columns\"})\r\n   ;($ icon-element-button-helix {:key \"PhotoCameraIcon\" :icon PhotoCameraIcon :tooltip-text \"Open image\" :on-click-fn (fn [] (t/open-image-in-new-tab-mrt photo-id))})\r\n   ($ icon-element-button-helix {:key \"SystemUpdateAltIcon\" :icon SystemUpdateAltIcon :tooltip-text \"Download view\" :on-click-fn (fn [] (download-view table download-fn photo-id))})\r\n   ($ icon-element-button-helix {:key \"DownloadIcon\" :icon DownloadIcon :tooltip-text \"Full download\" :on-click-fn (fn [] (download-fn data))})])\r\n\r\n(defnc mrt-table-toolbar\r\n  \"This returns the top right Toolbar function with the standard actions\"\r\n  [{:keys [table data download-fn photo-id]} ]\r\n  [($ icon-element-button-helix {:key \"FilterListOffIcon\" :icon FilterListOffIcon :tooltip-text \"Clear filters\" :on-click-fn (fn [] (.resetColumnFilters table #js []))})\r\n   ($ MRT_ShowHideColumnsButton {:table table :key \"show-columns\"})\r\n   ;($ icon-element-button-helix {:key \"PhotoCameraIcon\" :icon PhotoCameraIcon :tooltip-text \"Open image\" :on-click-fn (fn [] (t/open-image-in-new-tab-mrt photo-id))})\r\n   ($ icon-element-button-helix {:key \"SystemUpdateAltIcon\" :icon SystemUpdateAltIcon :tooltip-text \"Download view\" :on-click-fn (fn [] (download-view table download-fn photo-id))}) ;(t/csv-link (download-table-view table) filename)\r\n   ($ icon-element-button-helix {:key \"DownloadIcon\" :icon DownloadIcon :tooltip-text \"Full download\" :on-click-fn (fn [] (download-fn data))})]) ;(t/csv-link data filename)\r\n\r\n(defn mrt-default-download-fn [id clj-cols]\r\n  (let [nested? (contains? (first clj-cols) :columns)\r\n        dw-cols (->> (if nested? (apply concat (map :columns clj-cols)) clj-cols)\r\n                     (map :accessorKey)\r\n                     (map keyword))]\r\n    (fn [js-data] (t/csv-link (js->clj js-data {:keywordize-keys true}) id dw-cols))))\r\n\r\n(defn mrt-th-download-fn [id clj-cols]\r\n  (let [nested? (contains? (first clj-cols) :columns)\r\n        dw-cols (->> (if nested? (apply concat (map :columns clj-cols)) clj-cols)\r\n                     (map :accessorKey)\r\n                     (map keyword))]\r\n    (fn [js-data] (t/csv-link (js->clj js-data {:keywordize-keys true}) id dw-cols \"|\"))))\r\n\r\n(defn show-if-any-is-hidden [table groupset]\r\n  (let [visible-ids (set (.map (.getVisibleLeafColumns table) #(.-id %)))\r\n        group-visible? (clojure.set/subset? groupset visible-ids)]\r\n    (if group-visible?\r\n      (doseq [id groupset] (.toggleVisibility (.getColumn table id) false))\r\n      (doseq [id groupset] (.toggleVisibility (.getColumn table id) true)))))\r\n\r\n(def help-modal {:title \"Help\"\r\n                 :throbber false\r\n                 :content [p \"Use , for OR. Use & for AND. Use - to exclude. Examples: AR,BR for Argentina or Brazil. >200&<300 for spreads between 200bps and 300bps. >0 to only see bonds in an index. -Sov to exclude sovereigns, -CN&-HK to exclude both countries.\"]})\r\n\r\n(defn mrt-ref->filtered-col-seq\r\n  \"Takes a table ref and a column. Returns a cljs seq of the viewable (filtered and sorted) column values\"\r\n  [ref col]\r\n  (js->clj (.map (.-rows (.getPrePaginationRowModel (aget ref \"current\"))) (fn [row] (aget (.-original ^js/Object row) col)))))\r\n\r\n(defn mrt-ref->filtered-rows-seq [ref]\r\n  (js->clj (.map (.-rows (.getPrePaginationRowModel (aget ref \"current\"))) (fn [row] (.-original ^js/Object row))) {:keywordize-keys true}))\r\n\r\n(defn base-props\r\n  \"note use of or as subsitute for (if value-is-not-nil value default). This is to make the basic table subset of fast table\"\r\n  [mdata mcolumns clj-option-map js-initial-state toolbar download-fn photo-id]\r\n  (merge {:data                         mdata\r\n          :columns                      mcolumns\r\n          :enableColumnActions          false\r\n          :initialState                 (or js-initial-state #js {\"density\" \"compact\" \"showColumnFilters\" true \"columnFilters\" #js [] \"pagination\" #js {}})\r\n          :displayColumnDefOptions      #js {\"mrt-row-expand\" #js {\"size\" 75 \"muiTableBodyCellProps\" #js {\"sx\" #js {\"backgroundColor\" \"inherit\"}}}}\r\n          :muiTableHeadCellProps        #js {\"sx\" #js {\"borderRight\" \"1px solid rgba(224,224,224,1)\"}} ; \"flex\" \"0 0 auto\"\r\n          :muiTableBodyProps            #js {};#js {\"sx\" #js {\"& tr:nth-of-type(odd)\" #js {\"backgroundColor\" \"#f5f5f5\"}}}\r\n          :muiTableBodyCellProps        #js {\"sx\" #js {\"borderRight\" \"1px solid rgba(224,224,224,1)\"}} ; \"flex\" \"0 0 auto\"\r\n          :renderToolbarInternalActions (fn [x] ($ (or toolbar mrt-table-toolbar) {:table (.-table x) :data mdata :download-fn (or download-fn (mrt-default-download-fn photo-id (js->clj mcolumns {:keywordize-keys true}))) :photo-id photo-id}))}\r\n         clj-option-map))\r\n\r\n;------------------------------------------------------TEMPLATES--------------------------------------------------------\r\n\r\n(defnc material-react-table-template\r\n  \"The magic is in useEffect which will communicate back and forth with reagent\r\n  Note you need to add extra key with a dummy value that changes every time you want full re-render!!!\r\n  \"\r\n  [{:keys [clj-data clj-columns clj-option-map js-initial-state external-state-reference initial-external-state toolbar download-fn photo-id]}]\r\n  (let [pinned-cols (clj->js (conj (mapv :accessorKey (:columns (first clj-columns))) \"mrt-row-expand\"))\r\n        [ffilter setFilter] (use-state (. initial-external-state -columnFilters))\r\n        [grouping setGrouping] (use-state (. initial-external-state -grouping))\r\n        [expanded setExpanded] (use-state (. initial-external-state -expanded))\r\n        mdata (use-memo [clj-data clj-option-map]\r\n                        (if (array? clj-data)\r\n                          (do (when (:enableGrouping clj-option-map) (.forEach clj-data #(aset % \"dummy\" \"\"))) clj-data)\r\n                          (clj->js (if (:enableGrouping clj-option-map) (map #(assoc % :dummy \"\") clj-data) clj-data))))\r\n        mcolumns (use-memo [clj-columns] (clj->js clj-columns))\r\n        x (use-effect\r\n            [ffilter grouping expanded]\r\n            ;(println \"DEBUG TABLE, DISABLE IN PROD!\" ffilter grouping expanded);TODO DEBUG TOGGLE\r\n            (let [target #js {\"columnFilters\" ffilter \"grouping\" grouping \"expanded\" expanded}]\r\n              (if (keyword? external-state-reference) (rf/dispatch [external-state-reference target]) (reset! external-state-reference target))))\r\n        props (merge\r\n                (base-props mdata mcolumns clj-option-map js-initial-state toolbar download-fn photo-id)\r\n                {:onGroupingChange      setGrouping\r\n                 :onColumnFiltersChange setFilter\r\n                 :onExpandedChange      setExpanded\r\n                 :state                 #js {\"columnFilters\" ffilter \"grouping\" grouping \"expanded\" expanded \"columnPinning\" #js {\"left\" pinned-cols \"right\" #js []}}\r\n                 })]\r\n    ($ \"div\" {:id photo-id} ($ MaterialReactTable {& props}))))\r\n\r\n(defnc material-react-table-template-fast\r\n  \"No external state hence a lot faster\r\n  Note you need to add extra key with a dummy value that changes every time you want full re-render!!!\"\r\n  [{:keys [clj-data clj-columns clj-option-map js-initial-state toolbar download-fn photo-id]}]\r\n  (let [pinned-cols (clj->js (conj (mapv :accessorKey (:columns (first clj-columns))) \"mrt-row-expand\"))\r\n        mdata (use-memo [clj-data clj-option-map]\r\n                        (if (array? clj-data)\r\n                          (do (when (:enableGrouping clj-option-map) (.forEach clj-data #(aset % \"dummy\" \"\"))) clj-data)\r\n                          (clj->js (if (:enableGrouping clj-option-map) (mapv #(assoc % :dummy \"\") clj-data) clj-data))))\r\n        mcolumns (use-memo [clj-columns] (clj->js clj-columns))\r\n        props (merge\r\n                (base-props mdata mcolumns clj-option-map js-initial-state toolbar download-fn photo-id)\r\n                (if (seq pinned-cols) {:state #js {\"columnPinning\" #js {\"left\" pinned-cols \"right\" #js []}}}))]\r\n    ($ \"div\" {:id photo-id} ($ MaterialReactTable {& props}))))\r\n\r\n(defnc material-react-table-template-basic\r\n  [argument-map]\r\n  ($ material-react-table-template-fast {& (update argument-map :clj-option-map #(merge {:enablePagination false :enableBottomToolbar false} %))}))"]}