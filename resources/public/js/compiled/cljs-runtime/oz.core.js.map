{"version":3,"sources":["oz/core.cljs"],"mappings":";;;;;;;;;;;;;AAeA,AAAA,AAACA;AACD,AAACC;AAED,AAAA,AAAgBC,AAAKC;AAArB,AACE,AAAMC,AAAWD;;AAGnB,AAAA,AAAeE,AACXC,AAAKC;AADT,AAEG,AAAMD;AAAN,AACE,AAAMA,AAAK,AAACE,AAAQF;AAApB,AAAA,AAAA,AAAA,AAAA,AACMG;AAEAC,AAAU,AAAGC,AAAeL;AAHlC,AAIE,AAAA,AAACJ;;AACD,AAACA,AAAIQ;;AACD,AAACE,AAAaL,AAAKD,AAAK,AAACE,AAAQC,AACjC,AAAO,AAGP;AAHYI;AAAL,AAEE,AAAGC,AAAyB,AAAQD,AAAKP;;AAC1C;AAAKS;AAAL,AACE,AAACb,AAAIa;;;;AAZvB;;;AAcH,AAAA,AAAMC,AAAaV,AAAKC;AAAxB,AACE,AAAMD;AAAN,AACE,AAAMA,AAAK,AAACE,AAAQF;AAApB,AAAA,AAAA,AAAA,AAAA,AACMG;AADN,AAGM,AAACG,AAAaL,AAAKD,AAAK,AAACE,AAAQC,AACjC,AAAO,AAGP;AAHYI;AAAL,AAEE,AAAGC,AAAqB,AAAQD,AAAKP;;AACtC;AAAKS;AAAL,AACE,AAACb,AAAIa;;;;AATvB;;;AAWF;;;AAAA,AAAME,AAEHX;AAFH,AAGE,AAAA,AAAA,AAAA,AAAA,AAACY,AAEsB,AAAKC;AAAL,AACE,AAACd,AAAiBC,AAAK,AAACc,AAAWD;AAH5D,AAIyB,AAAAE,AAAKF;AAAL,AAAA,AAAAG,AAAAD;AAAA,AAAAE,AAAAD,AAAA,AAAA,AAAWE;AAAX,AAAAD,AAAAD,AAAA,AAAA,AAAaG;AAAb,AACE,AAACpB,AAAiBoB,AAAS,AAACL,AAAWD;AALlE,AAMkB,AAAKb;AAAL,AAAA,AAAA;;;AAIpB;;;AAAA,AAAMoB,AAEHpB;AAFH,AAGE,AAAA,AAAA,AAAA,AAAA,AAACY,AAEsB,AAAKC;AAAL,AACE,AAACH,AAAYV,AAAK,AAACc,AAAWD;AAHvD,AAIyB,AAAAQ,AAAKR;AAAL,AAAA,AAAAS,AAAAD;AAAA,AAAAJ,AAAAK,AAAA,AAAA,AAAWJ;AAAX,AAAAD,AAAAK,AAAA,AAAA,AAAaH;AAAb,AACE,AAACT,AAAYS,AAAS,AAACL,AAAWD;AAL7D,AAMkB,AAAKb;AAAL,AAAA,AAAA;;;AAIpB,AAAA,AAAeuB,AAEZvB;AAFH,AAME,AAACwB,AACC,AAAKC;AAAL,AAAQ,AAAI,AAAAC,AAAK,AAACC,AAAMF;AAAZ,AAAA,AAAAC;AAAe,AAAAE,AAAqB,AAACE,AAAML;AAA5BI,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAAAD,AAAAC,AAAAD;;AAAfF;;;AAAJ,AACG,AAAAK,AAAM,AAACD,AAAML;AAAbM,AAAA,AAAA,AAAAA,AAAAC,AAAA,AAAAD,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAsBX;;;AAAtB;AAAsCT;;;;AAAtC,AAAA,AAAAsB,AAAA,AAAA,AAAAF;;;AACA,AAACG,AAAOC,AAAM,AAACC,AAAKX;;AACrBA;;AACVzB","names":["taoensso.timbre/set-level!","cljs.core/enable-console-print!","oz.core/log","a-thing","js/console","oz.core/render-vega-lite","spec","elem","cljs.core/clj->js","opts","vega-spec","js/vl","js/vegaEmbed","res","js/vegaTooltip","err","oz.core/render-vega","oz.core/vega-lite","reagent.core/create-class","this","reagent.core/dom-node","p__45003","vec__45004","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","_","new-spec","oz.core/vega","p__45007","vec__45008","oz.core/view-spec","clojure.walk/prewalk","x","and__4120__auto__","cljs.core/coll?","G__45014","fexpr__45013","cljs.core/first","G__45015","cljs.core/Keyword","js/Error","cljs.core.reduce.cljs$core$IFn$_invoke$arity$2","cljs.core/merge","cljs.core/rest"],"sourcesContent":["(ns ^:figwheel-always oz.core\n  (:require [reagent.core :as r]\n            [clojure.string :as str]\n            [cljs.core.async :as async  :refer (<! >! put! chan)]\n            [taoensso.encore :as encore :refer-macros (have have?)]\n            [taoensso.timbre :as log :refer-macros (tracef debugf infof warnf errorf)]\n            [taoensso.sente :as sente :refer (cb-success?)]\n            [taoensso.sente.packers.transit :as sente-transit]\n            [cljsjs.vega]\n            [cljsjs.vega-lite]\n            [cljsjs.vega-embed]\n            [cljsjs.vega-tooltip])\n  (:require-macros\n   [cljs.core.async.macros :as asyncm :refer (go go-loop)]))\n\n(log/set-level! :info)\n(enable-console-print!)\n\n(defn- ^:no-doc log [a-thing]\n  (.log js/console a-thing))\n\n\n(defn ^:no-doc render-vega-lite\n  ([spec elem]\n   (when spec\n     (let [spec (clj->js spec)\n           opts {:renderer \"canvas\"\n                 :mode \"vega-lite\"}\n           vega-spec (. js/vl (compile spec))]\n       (log \"Vega-lite translates to:\")\n       (log vega-spec)\n       (-> (js/vegaEmbed elem spec (clj->js opts))\n           (.then (fn [res]\n                    #_(log res)\n                    (. js/vegaTooltip (vegaLite (.-view res) spec))))\n           (.catch (fn [err]\n                     (log err))))))))\n\n(defn render-vega [spec elem]\n  (when spec\n    (let [spec (clj->js spec)\n          opts {:renderer \"canvas\"\n                :mode \"vega\"}]\n      (-> (js/vegaEmbed elem spec (clj->js opts))\n          (.then (fn [res]\n                   #_(log res)\n                   (. js/vegaTooltip (vega (.-view res) spec))))\n          (.catch (fn [err]\n                    (log err)))))))\n\n(defn vega-lite\n  \"Reagent component that renders vega-lite.\"\n  [spec]\n  (r/create-class\n   {:display-name \"vega-lite\"\n    :component-did-mount (fn [this]\n                           (render-vega-lite spec (r/dom-node this)))\n    :component-will-update (fn [this [_ new-spec]]\n                             (render-vega-lite new-spec (r/dom-node this)))\n    :reagent-render (fn [spec]\n                      [:div#vis])}))\n\n\n(defn vega\n  \"Reagent component that renders vega\"\n  [spec]\n  (r/create-class\n   {:display-name \"vega\"\n    :component-did-mount (fn [this]\n                           (render-vega spec (r/dom-node this)))\n    :component-will-update (fn [this [_ new-spec]]\n                             (render-vega new-spec (r/dom-node this)))\n    :reagent-render (fn [spec]\n                      [:div#vis])}))\n\n\n(defn ^:no-doc view-spec\n  ;; should handle sharing data with nodes that need it?\n  [spec]\n  ;; prewalk spec, rendering special hiccup tags like :vega and :vega-lite, and potentially other composites,\n  ;; rendering using the components above. Leave regular hiccup unchanged).\n  ;; TODO finish writing; already hooked in below so will break now\n  (clojure.walk/prewalk\n    (fn [x] (if (and (coll? x) (#{:vega :vega-lite} (first x)))\n              [(case (first x) :vega vega :vega-lite vega-lite)\n               (reduce merge (rest x))]\n              x))\n    spec))\n\n\n"]}