{"version":3,"sources":["kdlyticsgui/guitools.cljs"],"mappings":"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","names":["G__30279","props__29229__auto__","maybe-ref__29230__auto__","vec__30280","helix.core/extract-cljs-props","map__30283","cljs.core.nth","cljs.core/--destructure-map","cljs.core.get","goog/DEBUG","G__30292","kdlyticsgui.guitools/switch-helix","checked-atom","default-checked","vec__30284","checked","setChecked","helix.hooks/use-state","x","cljs.core/reset!","js/module$node_modules$$mui$material$node$index.Switch","e","G__30291","kdlyticsgui.guitools/mrt-right-element-box-generic","id","width","title-str","opts","children","show-element","reagent.core.atom","re-com.core/v-box","cljs.core.concat","re-com.core/h-box","cljs.core.into","re-com.core/title","re-com.core/gap","cljs.core/not","cljs.core/deref","kdlyticsgui.guitools/mrt-element-box-generic","cljs.core.conj","kdlyticsgui.guitools/element-box-generic","helix.core/get-react","obj30290","obj30294","cljs.core.mapv","i","re-com.core/md-circle-icon-button","cljs.core._EQ_","re_frame.core.subscribe","re-frame.core/dispatch","cljs.core.range","var_args","G__30296","kdlyticsgui.guitools/element-box","js/Error","download-table","on-click-action","G__30300","kdlyticsgui.guitools/portfolio-dropdown-selector","p1__30298#","re-frame-db-key","kdlyticsgui.guitools.portfolio_dropdown_selector","on-change-key-event","re-com.core/single-dropdown","cljs.core.map","p1__30297#","clojure.set/rename-keys","cljs.core/identity","re_frame.core.reg_event_db","p__30301","vec__30302","db","_","data","cljs.core.assoc","G__30306","kdlyticsgui.guitools/update-js-map","m","k","v","cljs.core/clj->js","cljs.core.js__GT_clj","k1","v1","k2","v2","p__30308","vec__30309","table","item","value","p1__30307#","cljs.core.update","cljs.core.keyword","p__30313","vec__30314","display-style","grouping","p1__30312#","kdlyticsgui.guitools.update_js_map","p__30318","vec__30319","grp","p1__30317#","kdlyticsgui.guitools/redesign-table!","tbl","table?","extra-pins","all-cols","p1__30322#","cljs.core.not_EQ_","c","sc","additional-cols","G__30287","helix.hooks/wrap-fx","G__30288","helix.hooks/raw-use-effect","cljs.core.remove","cljs.core/set","cljs.core/first","g","G__30324","fexpr__30323","cljs.core/rest","cljs.core.apply","cljs.core/concat","kdlyticsgui.guitools/left-nav-bar","choices","navigation-key","iter__5523__auto__","s__30326","cljs.core/LazySeq","temp__5804__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__5521__auto__","size__5522__auto__","cljs.core/count","b__30328","cljs.core/chunk-buffer","i__30327","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__30325","cljs.core/chunk-rest","cljs.core/cons","re-com.core/button","cljs.core/chunk-first"],"sourcesContent":["(ns kdlyticsgui.guitools\r\n  (:require\r\n    [re-com.core :refer [p p-span h-box v-box box gap line scroller border label title button close-button checkbox hyperlink-href slider horizontal-bar-tabs radio-button info-button\r\n                         single-dropdown hyperlink modal-panel alert-box throbber input-password selection-list md-circle-icon-button\r\n                         input-text input-textarea popover-anchor-wrapper popover-content-wrapper popover-tooltip datepicker-dropdown] :refer-macros [handler-fn]]\r\n    [re-frame.core :as rf]\r\n    [reagent.core :as r]\r\n    [kdlyticsgui.tools :as t]\r\n    [kdlyticsgui.static :as static]\r\n    [clojure.set :as cset]\r\n    [kdlyticsgui.mrttables :as mrt]\r\n    [helix.core :refer [$ defnc]]\r\n    [\"@mui/material\" :as mm :refer ( Switch)]\r\n    [helix.hooks :refer [use-state use-effect use-memo]]\r\n    ))\r\n\r\n\r\n\r\n(defnc switch-helix\r\n  [{:keys [checked-atom default-checked]}]\r\n  (let [[checked setChecked] (use-state default-checked)\r\n        x (use-effect [checked] (reset! checked-atom checked))]\r\n    ($ Switch {:size \"small\" :checked checked :onChange (fn [e] (setChecked (aget e \"target\" \"checked\")))})))\r\n\r\n\r\n(defn mrt-right-element-box-generic\r\n  [id width title-str opts children]\r\n  (let [show-element (r/atom true)]\r\n    (fn [id width title-str opts children]                  ;see https://github.com/reagent-project/reagent/blob/master/doc/CreatingReagentComponents.md need to repeat the arguments!\r\n      [v-box :class \"rightelement\" :gap \"0px\" :width width\r\n       :children (concat [[h-box :align :center :children (into [[title :label title-str :level :level1] [gap :size \"1\"]]\r\n                                                                (if (:show-hide opts) [($ switch-helix {:checked-atom show-element :default-checked (not (:hide-by-default opts))})]))]]\r\n                         (if @show-element children))])))\r\n\r\n(defn mrt-element-box-generic\r\n  [id width title-str opts children]\r\n  (let [show-element (r/atom true)]\r\n    (fn [id width title-str opts children]                  ;see https://github.com/reagent-project/reagent/blob/master/doc/CreatingReagentComponents.md need to repeat the arguments!\r\n      [:div {:id id}\r\n       [v-box :class \"element\" :align-self :center :justify :center :gap \"20px\" :width width\r\n        :children (concat [[h-box :gap \"10px\" :align :center\r\n                            :children (conj [[title :label title-str :level :level1] [gap :size \"1\"]]\r\n                                            ;(if (:show-hide opts) [($ switch-helix {:checked-atom show-element :default-checked (not (:hide-by-default opts))})])\r\n\r\n                                            )]]\r\n                          (if @show-element children))]])))\r\n\r\n\r\n(defn element-box-generic\r\n  \"opts will have either :download-table or :on-click-action, and can have target-id\r\n  \"\r\n  ;TODO DIV ID MAY OR MAY NOT BE THERE\r\n  ;NEED ABILITY TO ADD EXTRA TABLE DOWNLOAD (FULL OR VIEW)\r\n  [id width title-str opts children]\r\n  [:div {:id id}\r\n   [v-box :class \"element\" :align-self :center :justify :center :gap \"20px\" :width width\r\n    :children (concat [[h-box :gap \"10px\" :align :center\r\n                        :children (concat [[title :label title-str :level :level1]\r\n                                           [gap :size \"1\"]]\r\n                                          (if (:shortcuts opts)\r\n                                            (mapv (fn [i] [md-circle-icon-button :md-icon-name (str \"zmdi-collection-item-\" i) :tooltip (str \"Saved view \" i) :tooltip-position :above-center :class (if (= @(rf/subscribe [(:shortcuts opts)]) i) \"active\" \"default\") :on-click #(rf/dispatch [(:shortcuts opts) i])])\r\n                                                  (range 1 5)))\r\n                                          (if-not (:no-icons opts)\r\n                                            [\r\n                                             ;[md-circle-icon-button :md-icon-name \"zmdi-camera\" :tooltip \"Open image in new tab\" :tooltip-position :above-center :on-click (t/open-image-in-new-tab (if-let [tid (:target-id opts)] tid id))]\r\n                                             ;[md-circle-icon-button :md-icon-name \"zmdi-image\" :tooltip \"Save table as image\" :tooltip-position :above-center :on-click (t/save-image (if-let [tid (:target-id opts)] tid id))\r\n                                             ; ;(do (t/save-image (if-let [tid (:target-id opts)] tid \"scorecard-risk\")) (t/save-image (if-let [tid (:target-id opts)] tid \"scorecard-risk-pivot\")))\r\n                                             ; ]\r\n                                             ;[md-circle-icon-button :md-icon-name \"zmdi-download\" :tooltip \"Download table\" :tooltip-position :above-center :on-click (if-let [ocl (:on-click-action opts)] ocl #(t/csv-link (:download-table opts) (str id \"-\" (t/gdate->yyyyMMdd (cljs-time.core/today)))))]\r\n                                             ]))]]\r\n                      children)]])\r\n\r\n;(defn element-box-generic-new\r\n;  \"opts will have either :download-table-fn or :on-click-action, and can have target-id\r\n;  it can also have :cols and :shortcuts and :no-icons\"\r\n;  [id width title-str opts children]\r\n;  [:div {:id id}\r\n;   [v-box :class \"element\" :align-self :center :justify :center :gap \"20px\" :width width\r\n;    :children (concat [[h-box :gap \"10px\" :align :center\r\n;                        :children (concat [[title :label title-str :level :level1]\r\n;                                           [gap :size \"1\"]]\r\n;                                          (if (:shortcuts opts)\r\n;                                            (mapv (fn [i] [md-circle-icon-button :md-icon-name (str \"zmdi-collection-item-\" i) :tooltip (str \"Saved view \" i) :tooltip-position :above-center :class (if (= @(rf/subscribe [(:shortcuts opts)]) i) \"active\" \"default\") :on-click #(rf/dispatch [(:shortcuts opts) i])])\r\n;                                                  (range 1 5)))\r\n;                                          (if-not (:no-icons opts)\r\n;                                            [[md-circle-icon-button :md-icon-name \"zmdi-camera\" :tooltip \"Open image in new tab\" :tooltip-position :above-center :on-click (t/open-image-in-new-tab (if-let [tid (:target-id opts)] tid id))]\r\n;                                             [md-circle-icon-button :md-icon-name \"zmdi-image\" :tooltip \"Save table as image\" :tooltip-position :above-center :on-click (t/save-image (if-let [tid (:target-id opts)] tid id))]\r\n;                                             (if-let [ocl (:on-click-action opts)] [md-circle-icon-button :md-icon-name \"zmdi-filter-list\" :tooltip \"Download current view\" :tooltip-position :above-center :on-click ocl])\r\n;                                             (if-let [x (:download-table-fn opts)] [md-circle-icon-button :md-icon-name \"zmdi-download\" :tooltip \"Download table\" :tooltip-position :above-center :on-click (if-let [c (:cols opts)] #(t/csv-link (x) (str id \"-\" (t/gdate->yyyyMMdd (cljs-time.core/today))) c) #(t/csv-link (x) (str id \"-\" (t/gdate->yyyyMMdd (cljs-time.core/today)))))])]))]]\r\n;                      children)]])\r\n\r\n(defn element-box\r\n  ([id width title-str download-table children] (element-box-generic id width title-str {:download-table download-table} children))\r\n  ([id width title-str download-table on-click-action children] (element-box-generic id width title-str {:on-click-action on-click-action} children)))\r\n\r\n;(defn mrt-element-box\r\n;  ([id width title-str children] (mrt-element-box id width title-str  children))\r\n;  ([id width title-str on-click-action children] (mrt-element-box-generic id width title-str {:on-click-action on-click-action} children)))\r\n\r\n\r\n;(defn element-box-generic-with-cols\r\n;  \"opts will have either :download-table or :on-click-action, and can have target-id\"\r\n;  [id width title-str opts children cols]\r\n;  [:div {:id id}\r\n;   [v-box :class \"element\" :align-self :center :justify :center :gap \"20px\" :width width\r\n;    :children (concat [[h-box :gap \"10px\" :align :center\r\n;                        :children (concat [[title :label title-str :level :level1]\r\n;                                           [gap :size \"1\"]]\r\n;                                          (if (:shortcuts opts)\r\n;                                            (mapv (fn [i] [md-circle-icon-button :md-icon-name (str \"zmdi-collection-item-\" i) :class (if (= @(rf/subscribe [key]) i) \"active\" \"default\") :on-click #(rf/dispatch [key i])])\r\n;                                                  (range 1 5)))\r\n;                                          [[md-circle-icon-button :md-icon-name \"zmdi-camera\" :tooltip \"Open image in new tab\" :tooltip-position :above-center :on-click (t/open-image-in-new-tab (if-let [tid (:target-id opts)] tid id))]\r\n;                                           [md-circle-icon-button :md-icon-name \"zmdi-image\" :tooltip \"Save table as image\" :tooltip-position :above-center :on-click (t/save-image (if-let [tid (:target-id opts)] tid id))]\r\n;                                           [md-circle-icon-button :md-icon-name \"zmdi-download\" :tooltip \"Download table\" :tooltip-position :above-center :on-click (if-let [ocl (:on-click-action opts)] ocl #(t/csv-link (:download-table opts) (str id \"-\" (t/gdate->yyyyMMdd (cljs-time.core/today))) cols))]])]]\r\n;                      children)]])\r\n\r\n;(defn element-box-with-cols\r\n;  ([id width title-str download-table children cols] (element-box-generic-with-cols id width title-str {:download-table download-table} children cols))\r\n;  ([id width title-str download-table on-click-action children cols] (element-box-generic-with-cols id width title-str {:on-click-action on-click-action} children cols)))\r\n\r\n(defn portfolio-dropdown-selector\r\n  ([re-frame-db-key] (portfolio-dropdown-selector re-frame-db-key re-frame-db-key))\r\n  ([re-frame-db-key on-change-key-event]\r\n   [single-dropdown :width \"125px\" :filter-box? true :model (rf/subscribe [re-frame-db-key])\r\n    :choices (map (if @(rf/subscribe [:rot13]) #(clojure.set/rename-keys % {:labelrot13 :label}) identity) @(rf/subscribe [:portfolio-dropdown-map]))\r\n    :on-change #(rf/dispatch [on-change-key-event %])]))\r\n\r\n(rf/reg-event-db\r\n  :quant-model-new-bond/save-bond-response\r\n  (fn [db [_  data]]\r\n    (if (:success data)\r\n      (assoc db :quant-model/new-bond-entry nil :quant-model/new-bond-saved-message (:message data))\r\n      (assoc db :quant-model/new-bond-saved-message (:message data)))))\r\n\r\n(defn update-js-map\r\n  ([m k v]\r\n   (clj->js (assoc (js->clj m) k v)))\r\n  ([m k1 v1 k2 v2]\r\n   (clj->js (assoc (js->clj m) k1 v1 k2 v2))))\r\n\r\n(rf/reg-event-db\r\n  :update-table-js-state\r\n  (fn [db [_ table item value]]\r\n    (update db (keyword table \"mrt-table-state\") #(clj->js\r\n                                                    (if\r\n                                                      (= item \"columnFilters\")\r\n                                                      (assoc (js->clj %) item value)\r\n                                                      (assoc (js->clj %) item value \"expanded\" \"dummy:\"))))))\r\n\r\n(rf/reg-event-db\r\n  :tree-table-toggle-esg\r\n  (fn [db [_  display-style]]\r\n    (let [grouping (if (= display-style \"sector\") \"sector\" \"country\")]\r\n      (-> db\r\n          (assoc :esg/data-tree (not (= display-style \"no\")))\r\n          (update :esg/mrt-table-state #(if (= display-style \"no\") (update-js-map % \"grouping\" [] \"expanded\" {}) (update-js-map % \"grouping\" (js->clj [grouping]) \"expanded\" {})))\r\n          ))))\r\n\r\n(rf/reg-event-db\r\n  :tree-table-toggle-ta\r\n  (fn [db [_  grp]]\r\n    (-> db\r\n        ;(assoc :ta2022/main-table-pivot display-style)\r\n        (update :ta-trade-view/mrt-table-state #(if (= grp \"No\") (update-js-map % \"grouping\" [] \"expanded\" {}) (update-js-map % \"grouping\" (js->clj [\"dummy\"]) \"expanded\" {\"dummy:\" true})))\r\n        )))\r\n\r\n\r\n;(rf/reg-event-db\r\n;  :tree-table-toggle-ta-col\r\n;  (fn [db [_  view]]\r\n;    (let [view2 (if (= view \"Distances\") {\"country\" false}\r\n;                                       []\r\n;                                       )]\r\n;\r\n;      (-> db\r\n;          (update :ta-trade-view/mrt-table-state #(update-js-map % \"columnVisibility\" #js {\"Country\" false}))\r\n;          ))))\r\n\r\n\r\n\r\n;(defn tree-table-selector\r\n;  [table-keyword-string]\r\n;  [single-dropdown\r\n;   :width \"150px\"\r\n;   :model (rf/subscribe [(keyword table-keyword-string \"display-style\")])\r\n;   :choices static/tree-table-choices\r\n;   :on-change #(rf/dispatch [:tree-table-toggle table-keyword-string %])])\r\n\r\n(defn redesign-table!\r\n  [tbl table? grouping extra-pins]\r\n  (let [all-cols (js->clj (.map (.filter (.getAllColumns tbl) #(not= (.-id %) \"mrt-row-expand\")) (fn [c] (.map (.-columns c) (fn [sc] (.-id sc))))))\r\n        additional-cols (remove (set (concat grouping extra-pins)) (first all-cols))]\r\n    (.setGrouping tbl (if table? #js [] (clj->js grouping)))\r\n    (.setColumnPinning tbl (clj->js {:left (concat grouping extra-pins (if table? [] [\"mrt-row-expand\"])) :right []}))\r\n    (.setExpanded tbl #js {\"dummy:\" true})\r\n    (.setPagination tbl #js {\"pageSize\" (if table? 15 50)})\r\n    (.setSorting tbl (clj->js (mapv (fn [g] {\"id\" g \"desc\" false}) ((if table? identity rest) (concat grouping extra-pins))))) ;we do not need to sort by dummy\r\n    (.setColumnVisibility tbl (if table? #js {\"dummy\" false \"mrt-row-expand\" false} #js {\"dummy\" true \"mrt-row-expand\" true}))\r\n    (.setColumnOrder tbl (clj->js (concat grouping extra-pins (if table? [] [\"mrt-row-expand\"]) (apply concat (rest all-cols)) additional-cols)))))\r\n\r\n\r\n\r\n;(defn filtering-row\r\n;  \"key can be equal to :single-portfolio-risk/filter\"\r\n;  [key]\r\n;  (let [risk-filter (rf/subscribe [key])]\r\n;    [h-box :gap \"10px\" :align :center\r\n;     :children (into [] (for [i (range 1 4)]\r\n;                          ^{:key (str \"filtering\" i)}\r\n;                          [single-dropdown\r\n;                           :width \"125px\"\r\n;                           :model (r/cursor risk-filter [i])\r\n;                           :choices (if (.includes ^string (str key) \"attribution\") static/attribution-choice-map static/risk-choice-map)\r\n;                           :disabled? (and (= i 3) (some #{key} [:portfolio-history/filter :attribution-history/filter]))\r\n;                           :on-change #(rf/dispatch [:filtering-row-change key i %])]))]))\r\n;\r\n;(defn filtering-row-managed-table\r\n;  \"key can be equal to :single-portfolio-risk/filter\"\r\n;  [key table-ref]\r\n;  (let [risk-filter (rf/subscribe [key])]\r\n;    [h-box :gap \"10px\" :align :center\r\n;     :children (into [] (for [i (range 1 4)]\r\n;                          ^{:key (str \"filtering\" i)}\r\n;                          [single-dropdown\r\n;                           :width \"125px\"\r\n;                           :model (r/cursor risk-filter [i])\r\n;                           :choices (if (.includes ^string (str key) \"attribution\") static/attribution-choice-map static/risk-choice-map)\r\n;                           :disabled? (and (= i 3) (some #{key} [:portfolio-history/filter :attribution-history/filter]))\r\n;                           :on-change #(rf/dispatch [:filtering-row-change-managed key i % (.-current table-ref)])]))]))\r\n;\r\n;(defn tree-table-selector-managed-table\r\n;  [table-keyword-string table-ref]\r\n;  [single-dropdown\r\n;   :width \"150px\"\r\n;   :model (rf/subscribe [(keyword table-keyword-string \"display-style\")])\r\n;   :choices static/tree-table-choices\r\n;   :on-change #(rf/dispatch [:tree-table-toggle-managed table-keyword-string % (.-current table-ref)])])\r\n\r\n;(rf/reg-event-db\r\n;  :redesign-single-portfolio-table\r\n;  (fn [db [_ tbl]]\r\n;    (redesign-table! tbl\r\n;                     (= (db :single-portfolio-risk/display-style) \"Table\")\r\n;                     (conj (map :accessorKey (mapv mrt/risk-table-columns (distinct (remove #{\"None\"} (vals (db :single-portfolio-risk/filter)))))) \"dummy\")\r\n;                     [:NAME])\r\n;    db))\r\n\r\n\r\n(defn left-nav-bar\r\n  [choices navigation-key]\r\n  [v-box :gap \"20px\" :class \"leftnavbar\"\r\n   :children (into []\r\n                   (for [item choices]\r\n                     ^{:key item}\r\n                     [button\r\n                      :class (str \"btn btn-primary btn-block\" (if (= @(rf/subscribe [navigation-key]) (:code item)) \" active\"))\r\n                      :label (:name item)\r\n                      :on-click #(rf/dispatch [navigation-key (:code item)])]))])\r\n\r\n;(defn portfolio-group-selector\r\n;  \"Usage: [portfolio-group-selector :stresstest/selected-portfolios [:dummies]]\"\r\n;  [selected-portfolios-key excluded-groups-seq]\r\n;  (let [selected-portfolios (rf/subscribe [selected-portfolios-key])\r\n;        toggle-portfolios (fn [setseqp] (if (cset/subset? setseqp @selected-portfolios) (cset/difference @selected-portfolios setseqp) (cset/union @selected-portfolios setseqp)))\r\n;        groups (t/chainfilter {:id #(not (some #{%} excluded-groups-seq))} static/portfolio-alignment-groups)\r\n;        all-portfolios-set (set (mapcat :portfolios groups))\r\n;        all-portfolios-set-x-model  (set (mapcat :portfolios (t/chainfilter {:id #(not (some #{%} [:models :dummies]))} static/portfolio-alignment-groups)))\r\n;        all-emcd (disj (set (mapcat :portfolios (t/chainfilter {:id #(not (some #{%} [:models :dummies :hcd :blend :dm]))} static/portfolio-alignment-groups))) \"ITLXEMD4\")\r\n;        rot13? @(rf/subscribe [:rot13])]\r\n;    ;(println static/portfolio-alignment-groups)\r\n;    [h-box :gap \"5px\"\r\n;     :children (into [[title :label \"Portfolios:\" :level :level3]\r\n;                      [v-box :gap \"2px\" :children (remove nil? [(if-not (some #{:models} excluded-groups-seq) [button :style {:width \"100px\"} :label \"EMCD USD\" :on-click #(rf/dispatch [selected-portfolios-key all-emcd])])\r\n;                                                                [button :style {:width \"100px\"} :label \"All\" :on-click #(rf/dispatch [selected-portfolios-key all-portfolios-set])]\r\n;                                                                [button :style {:width \"100px\"} :label \"None\" :on-click #(rf/dispatch [selected-portfolios-key #{}])]])]]\r\n;                     (for [line groups]\r\n;                       (let [possible-portfolios (:portfolios line)]\r\n;                         ^{:key (first possible-portfolios)}                           ;this is so React doesn't get confused by the for loop\r\n;                         [v-box :gap \"2px\" :children\r\n;                          [[button :style {:width \"125px\"} :label ((if rot13? t/rot13 identity) (:label line)) :on-click #(rf/dispatch [selected-portfolios-key (toggle-portfolios (set possible-portfolios))])]\r\n;                           [selection-list :width \"125px\" :model selected-portfolios :choices (mapv (fn [p] {:id p :label ((if rot13? t/rot13 identity) p)}) possible-portfolios) :on-change #(rf/dispatch [selected-portfolios-key %])]]])))]))"]}