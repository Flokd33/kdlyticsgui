{"version":3,"sources":["kdlyticsgui/guitools.cljs"],"mappings":"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","names":["kdlyticsgui.guitools/element-box-generic","id","width","title-str","opts","children","re-com.core/v-box","cljs.core.concat","re-com.core/h-box","re-com.core/title","re-com.core/gap","cljs.core.mapv","i","re-com.core/md-circle-icon-button","cljs.core/deref","cljs.core._EQ_","re_frame.core.subscribe","re-frame.core/dispatch","cljs.core.range","cljs.core/not","temp__5802__auto__","ocl","kdlyticsgui.tools.csv_link","kdlyticsgui.tools/gdate->yyyyMMdd","cljs-time.core/today","kdlyticsgui.guitools/element-box-generic-new","x","c","var_args","G__32353","kdlyticsgui.guitools/element-box","js/Error","download-table","on-click-action","kdlyticsgui.guitools/element-box-generic-with-cols","cols","cljs.core/key","G__32355","kdlyticsgui.guitools/element-box-with-cols","G__32359","kdlyticsgui.guitools/portfolio-dropdown-selector","p1__32357#","re-frame-db-key","kdlyticsgui.guitools.portfolio_dropdown_selector","on-change-key-event","re-com.core/single-dropdown","cljs.core.map","p1__32356#","clojure.set/rename-keys","cljs.core/identity","re_frame.core.reg_event_db","p__32360","vec__32361","cljs.core.nth","db","_","data","cljs.core.assoc","p__32364","vec__32365","table-keyword-string","display-style","cljs.core.keyword"],"sourcesContent":["(ns kdlyticsgui.guitools\r\n  (:require\r\n    [re-com.core :refer [p p-span h-box v-box box gap line scroller border label title button close-button checkbox hyperlink-href slider horizontal-bar-tabs radio-button info-button\r\n                         single-dropdown hyperlink modal-panel alert-box throbber input-password selection-list md-circle-icon-button\r\n                         input-text input-textarea popover-anchor-wrapper popover-content-wrapper popover-tooltip datepicker-dropdown] :refer-macros [handler-fn]]\r\n    [re-frame.core :as rf]\r\n    [kdlyticsgui.tools :as t]\r\n    [reagent.core :as r]\r\n    [kdlyticsgui.static :as static]\r\n    [clojure.set :as cset]\r\n    ))\r\n\r\n\r\n\r\n\r\n\r\n(defn element-box-generic\r\n  \"opts will have either :download-table or :on-click-action, and can have target-id\r\n  \"\r\n  ;TODO DIV ID MAY OR MAY NOT BE THERE\r\n  ;NEED ABILITY TO ADD EXTRA TABLE DOWNLOAD (FULL OR VIEW)\r\n  [id width title-str opts children]\r\n  [:div {:id id}\r\n   [v-box :class \"element\" :align-self :center :justify :center :gap \"20px\" :width width\r\n    :children (concat [[h-box :gap \"10px\" :align :center\r\n                        :children (concat [[title :label title-str :level :level1]\r\n                                           [gap :size \"1\"]]\r\n                                          (if (:shortcuts opts)\r\n                                            (mapv (fn [i] [md-circle-icon-button :md-icon-name (str \"zmdi-collection-item-\" i) :tooltip (str \"Saved view \" i) :tooltip-position :above-center :class (if (= @(rf/subscribe [(:shortcuts opts)]) i) \"active\" \"default\") :on-click #(rf/dispatch [(:shortcuts opts) i])])\r\n                                                  (range 1 5)))\r\n                                          (if-not (:no-icons opts)\r\n                                            [\r\n                                             ;[md-circle-icon-button :md-icon-name \"zmdi-camera\" :tooltip \"Open image in new tab\" :tooltip-position :above-center :on-click (t/open-image-in-new-tab (if-let [tid (:target-id opts)] tid id))]\r\n\r\n\r\n                                             ;[md-circle-icon-button :md-icon-name \"zmdi-image\" :tooltip \"Save table as image\" :tooltip-position :above-center :on-click (t/save-image (if-let [tid (:target-id opts)] tid id))]\r\n                                             [md-circle-icon-button :md-icon-name \"zmdi-download\" :tooltip \"Download table\" :tooltip-position :above-center :on-click (if-let [ocl (:on-click-action opts)] ocl #(t/csv-link (:download-table opts) (str id \"-\" (t/gdate->yyyyMMdd (cljs-time.core/today)))))]]))]]\r\n                      children)]])\r\n\r\n(defn element-box-generic-new\r\n  \"opts will have either :download-table-fn or :on-click-action, and can have target-id\r\n  it can also have :cols and :shortcuts and :no-icons\"\r\n  [id width title-str opts children]\r\n  [:div {:id id}\r\n   [v-box :class \"element\" :align-self :center :justify :center :gap \"20px\" :width width\r\n    :children (concat [[h-box :gap \"10px\" :align :center\r\n                        :children (concat [[title :label title-str :level :level1]\r\n                                           [gap :size \"1\"]]\r\n                                          (if (:shortcuts opts)\r\n                                            (mapv (fn [i] [md-circle-icon-button :md-icon-name (str \"zmdi-collection-item-\" i) :tooltip (str \"Saved view \" i) :tooltip-position :above-center :class (if (= @(rf/subscribe [(:shortcuts opts)]) i) \"active\" \"default\") :on-click #(rf/dispatch [(:shortcuts opts) i])])\r\n                                                  (range 1 5)))\r\n                                          (if-not (:no-icons opts)\r\n                                            [\r\n                                             ;[md-circle-icon-button :md-icon-name \"zmdi-camera\" :tooltip \"Open image in new tab\" :tooltip-position :above-center :on-click (t/open-image-in-new-tab (if-let [tid (:target-id opts)] tid id))]\r\n                                             ;[md-circle-icon-button :md-icon-name \"zmdi-image\" :tooltip \"Save table as image\" :tooltip-position :above-center :on-click (t/save-image (if-let [tid (:target-id opts)] tid id))]\r\n                                             (if-let [ocl (:on-click-action opts)] [md-circle-icon-button :md-icon-name \"zmdi-filter-list\" :tooltip \"Download current view\" :tooltip-position :above-center :on-click ocl])\r\n                                             (if-let [x (:download-table-fn opts)] [md-circle-icon-button :md-icon-name \"zmdi-download\" :tooltip \"Download table\" :tooltip-position :above-center :on-click (if-let [c (:cols opts)] #(t/csv-link (x) (str id \"-\" (t/gdate->yyyyMMdd (cljs-time.core/today))) c) #(t/csv-link (x) (str id \"-\" (t/gdate->yyyyMMdd (cljs-time.core/today)))))])]))]]\r\n                      children)]])\r\n\r\n(defn element-box\r\n  ([id width title-str download-table children] (element-box-generic id width title-str {:download-table download-table} children))\r\n  ([id width title-str download-table on-click-action children] (element-box-generic id width title-str {:on-click-action on-click-action} children)))\r\n\r\n(defn element-box-generic-with-cols\r\n  \"opts will have either :download-table or :on-click-action, and can have target-id\"\r\n  [id width title-str opts children cols]\r\n  [:div {:id id}\r\n   [v-box :class \"element\" :align-self :center :justify :center :gap \"20px\" :width width\r\n    :children (concat [[h-box :gap \"10px\" :align :center\r\n                        :children (concat [[title :label title-str :level :level1]\r\n                                           [gap :size \"1\"]]\r\n                                          (if (:shortcuts opts)\r\n                                            (mapv (fn [i] [md-circle-icon-button :md-icon-name (str \"zmdi-collection-item-\" i) :class (if (= @(rf/subscribe [key]) i) \"active\" \"default\") :on-click #(rf/dispatch [key i])])\r\n                                                  (range 1 5)))\r\n                                          [\r\n                                           ;[md-circle-icon-button :md-icon-name \"zmdi-camera\" :tooltip \"Open image in new tab\" :tooltip-position :above-center :on-click (t/open-image-in-new-tab (if-let [tid (:target-id opts)] tid id))]\r\n                                           ;[md-circle-icon-button :md-icon-name \"zmdi-image\" :tooltip \"Save table as image\" :tooltip-position :above-center :on-click (t/save-image (if-let [tid (:target-id opts)] tid id))]\r\n                                           [md-circle-icon-button :md-icon-name \"zmdi-download\" :tooltip \"Download table\" :tooltip-position :above-center :on-click (if-let [ocl (:on-click-action opts)] ocl #(t/csv-link (:download-table opts) (str id \"-\" (t/gdate->yyyyMMdd (cljs-time.core/today))) cols))]])]]\r\n                      children)]])\r\n\r\n(defn element-box-with-cols\r\n  ([id width title-str download-table children cols] (element-box-generic-with-cols id width title-str {:download-table download-table} children cols))\r\n  ([id width title-str download-table on-click-action children cols] (element-box-generic-with-cols id width title-str {:on-click-action on-click-action} children cols)))\r\n\r\n(defn portfolio-dropdown-selector\r\n  ([re-frame-db-key] (portfolio-dropdown-selector re-frame-db-key re-frame-db-key))\r\n  ([re-frame-db-key on-change-key-event]\r\n   [single-dropdown :width \"125px\" :filter-box? true :model (rf/subscribe [re-frame-db-key]) :choices (map (if @(rf/subscribe [:rot13]) #(clojure.set/rename-keys % {:labelrot13 :label}) identity) @(rf/subscribe [:portfolio-dropdown-map])) :on-change #(rf/dispatch [on-change-key-event %])]))\r\n\r\n(rf/reg-event-db\r\n  :quant-model-new-bond/save-bond-response\r\n  (fn [db [_  data]]\r\n    (if (:success data)\r\n      (assoc db :quant-model/new-bond-entry nil :quant-model/new-bond-saved-message (:message data))\r\n      (assoc db :quant-model/new-bond-saved-message (:message data)))))\r\n\r\n(rf/reg-event-db\r\n  :tree-table-toggle\r\n  (fn [db [_  table-keyword-string display-style]]\r\n    (assoc db\r\n      (keyword table-keyword-string \"display-style\") display-style\r\n      (keyword table-keyword-string \"hide-zero-holdings\") (= display-style \"Table\"))))\r\n\r\n;(defn tree-table-selector\r\n;  [table-keyword-string]\r\n;  [single-dropdown\r\n;   :width \"125px\"\r\n;   :model (rf/subscribe [(keyword table-keyword-string \"display-style\")])\r\n;   :choices static/tree-table-choices\r\n;   :on-change #(rf/dispatch [:tree-table-toggle table-keyword-string %])])\r\n\r\n;(rf/reg-event-db\r\n;  :filtering-row-change\r\n;  (fn [db [_ risk-filter-key risk-filter-nb value]]\r\n;    (-> db\r\n;        (assoc-in [risk-filter-key risk-filter-nb] value)\r\n;        (assoc :portfolio-history/data nil))))\r\n;\r\n;(defn filtering-row [key]\r\n;  (let [risk-filter (rf/subscribe [key])]\r\n;    [h-box :gap \"10px\" :align :center\r\n;     :children (into [] (for [i (range 1 4)]\r\n;                          ^{:key (str \"filtering\" i)}\r\n;                          [single-dropdown\r\n;                           :width \"125px\"\r\n;                           :model (r/cursor risk-filter [i])\r\n;                           :choices (if (.includes ^string (str key) \"attribution\") static/attribution-choice-map static/risk-choice-map)\r\n;                           :disabled? (and (= i 3) (some #{key} [:portfolio-history/filter :attribution-history/filter]))\r\n;                           :on-change #(rf/dispatch [:filtering-row-change key i %])]))]))\r\n;\r\n;\r\n;\r\n;(defn portfolio-group-selector\r\n;  \"Usage: [portfolio-group-selector :stresstest/selected-portfolios [:dummies]]\"\r\n;  [selected-portfolios-key excluded-groups-seq]\r\n;  (let [selected-portfolios (rf/subscribe [selected-portfolios-key])\r\n;        toggle-portfolios (fn [setseqp] (if (cset/subset? setseqp @selected-portfolios) (cset/difference @selected-portfolios setseqp) (cset/union @selected-portfolios setseqp)))\r\n;        groups (t/chainfilter {:id #(not (some #{%} excluded-groups-seq))} static/portfolio-alignment-groups)\r\n;        all-portfolios-set (set (apply concat (map :portfolios groups)))\r\n;        rot13? @(rf/subscribe [:rot13])]\r\n;    [h-box :gap \"5px\"\r\n;     :children (into [[title :label \"Portfolios:\" :level :level3]\r\n;                      [v-box :gap \"2px\" :children [[button :style {:width \"75px\"} :label \"All\" :on-click #(rf/dispatch [selected-portfolios-key all-portfolios-set])]\r\n;                                                   [button :style {:width \"75px\"} :label \"None\" :on-click #(rf/dispatch [selected-portfolios-key #{}])]]]]\r\n;                     (for [line groups]\r\n;                       (let [possible-portfolios (:portfolios line)]\r\n;                         ^{:key (first possible-portfolios)}                           ;this is so React doesn't get confused by the for loop\r\n;                         [v-box :gap \"2px\" :children\r\n;                          [[button :style {:width \"125px\"} :label ((if rot13? t/rot13 identity) (:label line)) :on-click #(rf/dispatch [selected-portfolios-key (toggle-portfolios (set possible-portfolios))])]\r\n;                           [selection-list :width \"125px\" :model selected-portfolios :choices (mapv (fn [p] {:id p :label ((if rot13? t/rot13 identity) p)}) possible-portfolios) :on-change #(rf/dispatch [selected-portfolios-key %])]]]))\r\n;\r\n;                     )\r\n;\r\n;     ]))\r\n"]}