{
"version":3,
"file":"module$node_modules$vega_regression$build$vega_regression.js",
"lineCount":9,
"mappings":"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",
"sources":["node_modules/vega-regression/build/vega-regression.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$vega_regression$build$vega_regression\"] = function(global,require,module,exports) {\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('vega-statistics'), require('vega-dataflow'), require('vega-util')) :\n  typeof define === 'function' && define.amd ? define(['exports', 'vega-statistics', 'vega-dataflow', 'vega-util'], factory) :\n  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.vega = {}, global.vega, global.vega, global.vega));\n})(this, (function (exports, vegaStatistics, vegaDataflow, vegaUtil) { 'use strict';\n\n  function partition (data, groupby) {\n    var groups = [],\n      get = function (f) {\n        return f(t);\n      },\n      map,\n      i,\n      n,\n      t,\n      k,\n      g;\n\n    // partition data points into stack groups\n    if (groupby == null) {\n      groups.push(data);\n    } else {\n      for (map = {}, i = 0, n = data.length; i < n; ++i) {\n        t = data[i];\n        k = groupby.map(get);\n        g = map[k];\n        if (!g) {\n          map[k] = g = [];\n          g.dims = k;\n          groups.push(g);\n        }\n        g.push(t);\n      }\n    }\n    return groups;\n  }\n\n  /**\n   * Compute locally-weighted regression fits for one or more data groups.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(object): *} params.x - An accessor for the predictor data field.\n   * @param {function(object): *} params.y - An accessor for the predicted data field.\n   * @param {Array<function(object): *>} [params.groupby] - An array of accessors to groupby.\n   * @param {number} [params.bandwidth=0.3] - The loess bandwidth.\n   */\n  function Loess(params) {\n    vegaDataflow.Transform.call(this, null, params);\n  }\n  Loess.Definition = {\n    'type': 'Loess',\n    'metadata': {\n      'generates': true\n    },\n    'params': [{\n      'name': 'x',\n      'type': 'field',\n      'required': true\n    }, {\n      'name': 'y',\n      'type': 'field',\n      'required': true\n    }, {\n      'name': 'groupby',\n      'type': 'field',\n      'array': true\n    }, {\n      'name': 'bandwidth',\n      'type': 'number',\n      'default': 0.3\n    }, {\n      'name': 'as',\n      'type': 'string',\n      'array': true\n    }]\n  };\n  vegaUtil.inherits(Loess, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      const out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS);\n      if (!this.value || pulse.changed() || _.modified()) {\n        const source = pulse.materialize(pulse.SOURCE).source,\n          groups = partition(source, _.groupby),\n          names = (_.groupby || []).map(vegaUtil.accessorName),\n          m = names.length,\n          as = _.as || [vegaUtil.accessorName(_.x), vegaUtil.accessorName(_.y)],\n          values = [];\n        groups.forEach(g => {\n          vegaStatistics.regressionLoess(g, _.x, _.y, _.bandwidth || 0.3).forEach(p => {\n            const t = {};\n            for (let i = 0; i < m; ++i) {\n              t[names[i]] = g.dims[i];\n            }\n            t[as[0]] = p[0];\n            t[as[1]] = p[1];\n            values.push(vegaDataflow.ingest(t));\n          });\n        });\n        if (this.value) out.rem = this.value;\n        this.value = out.add = out.source = values;\n      }\n      return out;\n    }\n  });\n\n  const Methods = {\n    constant: vegaStatistics.regressionConstant,\n    linear: vegaStatistics.regressionLinear,\n    log: vegaStatistics.regressionLog,\n    exp: vegaStatistics.regressionExp,\n    pow: vegaStatistics.regressionPow,\n    quad: vegaStatistics.regressionQuad,\n    poly: vegaStatistics.regressionPoly\n  };\n  const degreesOfFreedom = (method, order) => method === 'poly' ? order : method === 'quad' ? 2 : 1;\n\n  /**\n   * Compute regression fits for one or more data groups.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(object): *} params.x - An accessor for the predictor data field.\n   * @param {function(object): *} params.y - An accessor for the predicted data field.\n   * @param {string} [params.method='linear'] - The regression method to apply.\n   * @param {Array<function(object): *>} [params.groupby] - An array of accessors to groupby.\n   * @param {Array<number>} [params.extent] - The domain extent over which to plot the regression line.\n   * @param {number} [params.order=3] - The polynomial order. Only applies to the 'poly' method.\n   */\n  function Regression(params) {\n    vegaDataflow.Transform.call(this, null, params);\n  }\n  Regression.Definition = {\n    'type': 'Regression',\n    'metadata': {\n      'generates': true\n    },\n    'params': [{\n      'name': 'x',\n      'type': 'field',\n      'required': true\n    }, {\n      'name': 'y',\n      'type': 'field',\n      'required': true\n    }, {\n      'name': 'groupby',\n      'type': 'field',\n      'array': true\n    }, {\n      'name': 'method',\n      'type': 'string',\n      'default': 'linear',\n      'values': Object.keys(Methods)\n    }, {\n      'name': 'order',\n      'type': 'number',\n      'default': 3\n    }, {\n      'name': 'extent',\n      'type': 'number',\n      'array': true,\n      'length': 2\n    }, {\n      'name': 'params',\n      'type': 'boolean',\n      'default': false\n    }, {\n      'name': 'as',\n      'type': 'string',\n      'array': true\n    }]\n  };\n  vegaUtil.inherits(Regression, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      const out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS);\n      if (!this.value || pulse.changed() || _.modified()) {\n        const source = pulse.materialize(pulse.SOURCE).source,\n          groups = partition(source, _.groupby),\n          names = (_.groupby || []).map(vegaUtil.accessorName),\n          method = _.method || 'linear',\n          order = _.order == null ? 3 : _.order,\n          dof = degreesOfFreedom(method, order),\n          as = _.as || [vegaUtil.accessorName(_.x), vegaUtil.accessorName(_.y)],\n          fit = Methods[method],\n          values = [];\n        let domain = _.extent;\n        if (!vegaUtil.hasOwnProperty(Methods, method)) {\n          vegaUtil.error('Invalid regression method: ' + method);\n        }\n        if (domain != null) {\n          if (method === 'log' && domain[0] <= 0) {\n            pulse.dataflow.warn('Ignoring extent with values <= 0 for log regression.');\n            domain = null;\n          }\n        }\n        groups.forEach(g => {\n          const n = g.length;\n          if (n <= dof) {\n            pulse.dataflow.warn('Skipping regression with more parameters than data points.');\n            return;\n          }\n          const model = fit(g, _.x, _.y, order);\n          if (_.params) {\n            // if parameter vectors requested return those\n            values.push(vegaDataflow.ingest({\n              keys: g.dims,\n              coef: model.coef,\n              rSquared: model.rSquared\n            }));\n            return;\n          }\n          const dom = domain || vegaUtil.extent(g, _.x),\n            add = p => {\n              const t = {};\n              for (let i = 0; i < names.length; ++i) {\n                t[names[i]] = g.dims[i];\n              }\n              t[as[0]] = p[0];\n              t[as[1]] = p[1];\n              values.push(vegaDataflow.ingest(t));\n            };\n          if (method === 'linear' || method === 'constant') {\n            // for linear or constant regression we only need the end points\n            dom.forEach(x => add([x, model.predict(x)]));\n          } else {\n            // otherwise return trend line sample points\n            vegaStatistics.sampleCurve(model.predict, dom, 25, 200).forEach(add);\n          }\n        });\n        if (this.value) out.rem = this.value;\n        this.value = out.add = out.source = values;\n      }\n      return out;\n    }\n  });\n\n  exports.loess = Loess;\n  exports.regression = Regression;\n\n}));\n\n};"],
"names":["shadow$provide","global","require","module","exports","factory","define","amd","globalThis","self","vega","vegaStatistics","vegaDataflow","vegaUtil","partition","data","groupby","groups","get","f","t","n","push","map","i","length","k","g","dims","Loess","params","Transform","call","Regression","Definition","inherits","transform","_","pulse","out","fork","NO_SOURCE","NO_FIELDS","value","changed","modified","source","materialize","SOURCE","names","accessorName","m","as","x","y","values","forEach","regressionLoess","bandwidth","p","ingest","rem","add","Methods","constant","regressionConstant","linear","regressionLinear","log","regressionLog","exp","regressionExp","pow","regressionPow","quad","regressionQuad","poly","regressionPoly","Object","keys","method","order","dof","fit","domain","extent","hasOwnProperty","error","dataflow","warn","model","coef","rSquared","dom","predict","sampleCurve","loess","regression"]
}
