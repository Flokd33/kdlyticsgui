{
"version":3,
"file":"module$node_modules$$tanstack$table_core$build$lib$features$Grouping.js",
"lineCount":9,
"mappings":"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",
"sources":["node_modules/@tanstack/table-core/build/lib/features/Grouping.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$tanstack$table_core$build$lib$features$Grouping\"] = function(global,require,module,exports) {\n/**\n * table-core\n *\n * Copyright (c) TanStack\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar aggregationFns = require('../aggregationFns.js');\nvar utils = require('../utils.js');\n\n//\n\nconst Grouping = {\n  getDefaultColumnDef: () => {\n    return {\n      aggregatedCell: props => {\n        var _toString, _props$getValue;\n        return (_toString = (_props$getValue = props.getValue()) == null ? void 0 : _props$getValue.toString == null ? void 0 : _props$getValue.toString()) != null ? _toString : null;\n      },\n      aggregationFn: 'auto'\n    };\n  },\n  getInitialState: state => {\n    return {\n      grouping: [],\n      ...state\n    };\n  },\n  getDefaultOptions: table => {\n    return {\n      onGroupingChange: utils.makeStateUpdater('grouping', table),\n      groupedColumnMode: 'reorder'\n    };\n  },\n  createColumn: (column, table) => {\n    return {\n      toggleGrouping: () => {\n        table.setGrouping(old => {\n          // Find any existing grouping for this column\n          if (old != null && old.includes(column.id)) {\n            return old.filter(d => d !== column.id);\n          }\n          return [...(old != null ? old : []), column.id];\n        });\n      },\n      getCanGroup: () => {\n        var _ref, _ref2, _ref3, _column$columnDef$ena;\n        return (_ref = (_ref2 = (_ref3 = (_column$columnDef$ena = column.columnDef.enableGrouping) != null ? _column$columnDef$ena : true) != null ? _ref3 : table.options.enableGrouping) != null ? _ref2 : true) != null ? _ref : !!column.accessorFn;\n      },\n      getIsGrouped: () => {\n        var _table$getState$group;\n        return (_table$getState$group = table.getState().grouping) == null ? void 0 : _table$getState$group.includes(column.id);\n      },\n      getGroupedIndex: () => {\n        var _table$getState$group2;\n        return (_table$getState$group2 = table.getState().grouping) == null ? void 0 : _table$getState$group2.indexOf(column.id);\n      },\n      getToggleGroupingHandler: () => {\n        const canGroup = column.getCanGroup();\n        return () => {\n          if (!canGroup) return;\n          column.toggleGrouping();\n        };\n      },\n      getAutoAggregationFn: () => {\n        const firstRow = table.getCoreRowModel().flatRows[0];\n        const value = firstRow == null ? void 0 : firstRow.getValue(column.id);\n        if (typeof value === 'number') {\n          return aggregationFns.aggregationFns.sum;\n        }\n        if (Object.prototype.toString.call(value) === '[object Date]') {\n          return aggregationFns.aggregationFns.extent;\n        }\n      },\n      getAggregationFn: () => {\n        var _table$options$aggreg, _table$options$aggreg2;\n        if (!column) {\n          throw new Error();\n        }\n        return utils.isFunction(column.columnDef.aggregationFn) ? column.columnDef.aggregationFn : column.columnDef.aggregationFn === 'auto' ? column.getAutoAggregationFn() : (_table$options$aggreg = (_table$options$aggreg2 = table.options.aggregationFns) == null ? void 0 : _table$options$aggreg2[column.columnDef.aggregationFn]) != null ? _table$options$aggreg : aggregationFns.aggregationFns[column.columnDef.aggregationFn];\n      }\n    };\n  },\n  createTable: table => {\n    return {\n      setGrouping: updater => table.options.onGroupingChange == null ? void 0 : table.options.onGroupingChange(updater),\n      resetGrouping: defaultState => {\n        var _table$initialState$g, _table$initialState;\n        table.setGrouping(defaultState ? [] : (_table$initialState$g = (_table$initialState = table.initialState) == null ? void 0 : _table$initialState.grouping) != null ? _table$initialState$g : []);\n      },\n      getPreGroupedRowModel: () => table.getFilteredRowModel(),\n      getGroupedRowModel: () => {\n        if (!table._getGroupedRowModel && table.options.getGroupedRowModel) {\n          table._getGroupedRowModel = table.options.getGroupedRowModel(table);\n        }\n        if (table.options.manualGrouping || !table._getGroupedRowModel) {\n          return table.getPreGroupedRowModel();\n        }\n        return table._getGroupedRowModel();\n      }\n    };\n  },\n  createRow: (row, table) => {\n    return {\n      getIsGrouped: () => !!row.groupingColumnId,\n      getGroupingValue: columnId => {\n        if (row._groupingValuesCache.hasOwnProperty(columnId)) {\n          return row._groupingValuesCache[columnId];\n        }\n        const column = table.getColumn(columnId);\n        if (!(column != null && column.columnDef.getGroupingValue)) {\n          return row.getValue(columnId);\n        }\n        row._groupingValuesCache[columnId] = column.columnDef.getGroupingValue(row.original);\n        return row._groupingValuesCache[columnId];\n      },\n      _groupingValuesCache: {}\n    };\n  },\n  createCell: (cell, column, row, table) => {\n    return {\n      getIsGrouped: () => column.getIsGrouped() && column.id === row.groupingColumnId,\n      getIsPlaceholder: () => !cell.getIsGrouped() && column.getIsGrouped(),\n      getIsAggregated: () => {\n        var _row$subRows;\n        return !cell.getIsGrouped() && !cell.getIsPlaceholder() && !!((_row$subRows = row.subRows) != null && _row$subRows.length);\n      }\n    };\n  }\n};\nfunction orderColumns(leafColumns, grouping, groupedColumnMode) {\n  if (!(grouping != null && grouping.length) || !groupedColumnMode) {\n    return leafColumns;\n  }\n  const nonGroupingColumns = leafColumns.filter(col => !grouping.includes(col.id));\n  if (groupedColumnMode === 'remove') {\n    return nonGroupingColumns;\n  }\n  const groupingColumns = grouping.map(g => leafColumns.find(col => col.id === g)).filter(Boolean);\n  return [...groupingColumns, ...nonGroupingColumns];\n}\n\nexports.Grouping = Grouping;\nexports.orderColumns = orderColumns;\n//# sourceMappingURL=Grouping.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","aggregationFns","utils","Grouping","getDefaultColumnDef","aggregatedCell","props","_toString","_props$getValue","getValue","toString","aggregationFn","getInitialState","state","grouping","getDefaultOptions","table","onGroupingChange","makeStateUpdater","groupedColumnMode","createColumn","column","toggleGrouping","setGrouping","old","includes","id","filter","d","getCanGroup","_ref","_ref2","_ref3","_column$columnDef$ena","columnDef","enableGrouping","options","accessorFn","getIsGrouped","_table$getState$group","getState","getGroupedIndex","_table$getState$group2","indexOf","getToggleGroupingHandler","canGroup","getAutoAggregationFn","firstRow","getCoreRowModel","flatRows","sum","prototype","call","extent","getAggregationFn","_table$options$aggreg","_table$options$aggreg2","Error","isFunction","createTable","updater","resetGrouping","defaultState","_table$initialState$g","_table$initialState","initialState","getPreGroupedRowModel","getFilteredRowModel","getGroupedRowModel","_getGroupedRowModel","manualGrouping","createRow","row","groupingColumnId","getGroupingValue","columnId","_groupingValuesCache","hasOwnProperty","getColumn","original","createCell","cell","getIsPlaceholder","getIsAggregated","_row$subRows","subRows","length","orderColumns","leafColumns","nonGroupingColumns","col","map","g","find","groupingColumns","Boolean"]
}
