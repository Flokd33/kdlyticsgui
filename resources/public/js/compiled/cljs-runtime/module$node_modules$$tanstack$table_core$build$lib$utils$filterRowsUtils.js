shadow$provide.module$node_modules$$tanstack$table_core$build$lib$utils$filterRowsUtils=function(global,require,module,exports){function filterRowModelFromLeafs(rowsToFilter,filterRow,table){var _table$options$maxLea;const newFilteredRowsById={},maxDepth=null!=(_table$options$maxLea=table.options.maxLeafRowFilterDepth)?_table$options$maxLea:100,recurseFilterRows=function(rowsToFilter,depth){void 0===depth&&(depth=0);const rows=[];for(let i=0;i<rowsToFilter.length;i++){var _row$subRows;let row$1=rowsToFilter[i];
const newRow=row.createRow(table,row$1.id,row$1.original,row$1.index,row$1.depth,void 0,row$1.parentId);newRow.columnFilters=row$1.columnFilters;if(null!=(_row$subRows=row$1.subRows)&&_row$subRows.length&&depth<maxDepth)if(newRow.subRows=recurseFilterRows(row$1.subRows,depth+1),row$1=newRow,filterRow(row$1)&&!newRow.subRows.length)rows.push(row$1),newFilteredRowsById[row$1.id]=row$1,newFilteredRowsById[i]=row$1;else{if(filterRow(row$1)||newRow.subRows.length)rows.push(row$1),newFilteredRowsById[row$1.id]=
row$1,newFilteredRowsById[i]=row$1}else row$1=newRow,filterRow(row$1)&&(rows.push(row$1),newFilteredRowsById[row$1.id]=row$1,newFilteredRowsById[i]=row$1)}return rows};return{rows:recurseFilterRows(rowsToFilter),flatRows:[],rowsById:newFilteredRowsById}}function filterRowModelFromRoot(rowsToFilter$jscomp$0,filterRow,table){var _table$options$maxLea2;const newFilteredFlatRows=[],newFilteredRowsById={},maxDepth=null!=(_table$options$maxLea2=table.options.maxLeafRowFilterDepth)?_table$options$maxLea2:
100,recurseFilterRows=function(rowsToFilter,depth){void 0===depth&&(depth=0);const rows=[];for(let i=0;i<rowsToFilter.length;i++){let row$1=rowsToFilter[i];if(filterRow(row$1)){var _row$subRows2;if(null!=(_row$subRows2=row$1.subRows)&&_row$subRows2.length&&depth<maxDepth){const newRow=row.createRow(table,row$1.id,row$1.original,row$1.index,row$1.depth,void 0,row$1.parentId);newRow.subRows=recurseFilterRows(row$1.subRows,depth+1);row$1=newRow}rows.push(row$1);newFilteredFlatRows.push(row$1);newFilteredRowsById[row$1.id]=
row$1}}return rows};return{rows:recurseFilterRows(rowsToFilter$jscomp$0),flatRows:newFilteredFlatRows,rowsById:newFilteredRowsById}}Object.defineProperty(exports,"__esModule",{value:!0});var row=require("module$node_modules$$tanstack$table_core$build$lib$core$row");exports.filterRowModelFromLeafs=filterRowModelFromLeafs;exports.filterRowModelFromRoot=filterRowModelFromRoot;exports.filterRows=function(rows,filterRowImpl,table){return table.options.filterFromLeafRows?filterRowModelFromLeafs(rows,filterRowImpl,
table):filterRowModelFromRoot(rows,filterRowImpl,table)}}
//# sourceMappingURL=module$node_modules$$tanstack$table_core$build$lib$utils$filterRowsUtils.js.map
