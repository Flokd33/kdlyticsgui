{"version":3,"sources":["taoensso/sente/packers/transit.cljc"],"mappings":"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","names":["taoensso.sente.packers.transit/get-transit-writer-fn","taoensso.encore/memoize_","fmt","opts","writer","cognitect.transit.writer.cljs$core$IFn$_invoke$arity$2","x","cognitect.transit/write","taoensso.sente.packers.transit/get-transit-reader-fn","reader","cognitect.transit.reader.cljs$core$IFn$_invoke$arity$2","s","cognitect.transit/read","cljs.core/PROTOCOL_SENTINEL","this__4374__auto__","writer__4375__auto__","opt__4376__auto__","cljs.core/-write","taoensso.sente.packers.transit/TransitPacker","taoensso.sente.packers.transit/->TransitPacker","transit-fmt","writer-opts","reader-opts","_","fexpr__58596","fexpr__58597","var_args","G__58599","taoensso.sente.packers.transit/get-transit-packer","js/Error","taoensso.sente.packers.transit.get_transit_packer.cljs$core$IFn$_invoke$arity$3","e","fexpr__58606","cljs.core/contains?","G__58607","taoensso.truss.impl/set*","taoensso.truss.impl/-dummy-error","e58604","taoensso.truss.impl/-invar-violation!","e58610","e58613","cljs.core/map?"],"sourcesContent":["(ns taoensso.sente.packers.transit\n  \"Alpha - subject to change!\n  Optional Transit-format[1] IPacker implementation for use with Sente.\n  [1] https://github.com/cognitect/transit-format.\"\n  {:author \"Peter Taoussanis, @ckarlsen84\"}\n\n  #?(:clj\n     (:require\n      [clojure.string :as str]\n      [taoensso.encore :as enc :refer (have have! have?)]\n      [taoensso.timbre :as timbre]\n      [cognitect.transit :as transit]\n      [taoensso.sente.interfaces :as interfaces :refer (pack unpack)]))\n\n  #?(:clj\n     (:import [java.io ByteArrayInputStream ByteArrayOutputStream]))\n\n  #?(:cljs\n     (:require\n      [clojure.string :as str]\n      [taoensso.encore :as enc :refer-macros (have have! have?)]\n      [cognitect.transit :as transit]\n      [taoensso.sente.interfaces :as interfaces :refer (pack unpack)])))\n\n#?(:clj\n   (defn- get-charset [transit-fmt]\n     ;; :msgpack appears to need ISO-8859-1 to retain binary data correctly when\n     ;; string-encoded, all other (non-binary) formats can get UTF-8:\n     (if (enc/kw-identical? transit-fmt :msgpack) \"ISO-8859-1\" \"UTF-8\")))\n\n#?(:clj\n   (def ^:private cache-read-handlers\n     \"reader-opts -> reader-opts with cached read handler map\"\n     (let [cache (enc/memoize_ (fn [m] (transit/read-handler-map m)))]\n       (fn [reader-opts]\n         (if-let [m (:handlers reader-opts)]\n           (assoc reader-opts :handlers (cache m))\n           reader-opts)))))\n\n#?(:clj\n   (def ^:private cache-write-handlers\n     \"writer-opts -> writer-opts with cached write handler map\"\n     (let [cache (enc/memoize_ (fn [m] (transit/write-handler-map m)))]\n       (fn [writer-opts]\n         (if-let [m (:handlers writer-opts)]\n           (assoc writer-opts :handlers (cache m))\n           writer-opts)))))\n\n#?(:clj\n   (def ^:private transit-writer-fn-proxy\n     (enc/thread-local-proxy\n       (fn [fmt opts]\n         (let [^String charset (get-charset fmt)\n               opts (cache-write-handlers opts)\n               ^ByteArrayOutputStream baos (ByteArrayOutputStream. 64)\n               writer (transit/writer baos fmt opts)]\n           (fn [x]\n             (transit/write writer x)\n             (let [result (.toString baos charset)]\n               (.reset baos)\n               result)))))))\n\n(def ^:private get-transit-writer-fn\n  \"Returns thread-safe (fn [x-to-write])\"\n  #?(:cljs\n     (enc/memoize_\n       (fn [fmt opts]\n         (let [writer (transit/writer fmt opts)]\n           (fn [x] (transit/write writer x)))))\n     :clj\n     (fn [fmt opts]\n       (let [thread-local-transit-writer-fn (.get ^ThreadLocal transit-writer-fn-proxy)]\n         (thread-local-transit-writer-fn fmt opts)))))\n\n(def ^:private get-transit-reader-fn\n  \"Returns thread-safe (fn [str-to-read])\"\n  #?(:cljs\n     (enc/memoize_\n       (fn [fmt opts]\n         (let [reader (transit/reader fmt opts)]\n           (fn [s] (transit/read reader s)))))\n     :clj\n     (fn [fmt opts]\n       (let [^String charset (get-charset fmt)\n             opts (cache-read-handlers opts)]\n         (fn [s]\n           (let [ba (.getBytes ^String s ^String charset)\n                 ^ByteArrayInputStream bais (ByteArrayInputStream. ba)\n                 reader (transit/reader bais fmt opts)]\n             (transit/read reader)))))))\n\n(deftype TransitPacker [transit-fmt writer-opts reader-opts]\n  taoensso.sente.interfaces/IPacker\n  (pack   [_ x] ((get-transit-writer-fn transit-fmt writer-opts) x))\n  (unpack [_ s] ((get-transit-reader-fn transit-fmt reader-opts) s)))\n\n(defn get-transit-packer \"Returns a new TransitPacker\"\n  ([           ] (get-transit-packer :json       {} {}))\n  ([transit-fmt] (get-transit-packer transit-fmt {} {}))\n  ([transit-fmt writer-opts reader-opts]\n   ;; No transit-cljs support for msgpack atm\n   (have? [:el #{:json #_:msgpack}] transit-fmt)\n   (have? map? writer-opts reader-opts)\n   (TransitPacker. transit-fmt writer-opts reader-opts)))\n\n(comment\n  (def tp (get-transit-packer))\n  (enc/qb 10000\n    (unpack tp (pack tp [:chsk/ws-ping \"foo\"]))\n    (enc/read-edn (enc/pr-edn [:chsk/ws-ping \"foo\"]))))\n"]}