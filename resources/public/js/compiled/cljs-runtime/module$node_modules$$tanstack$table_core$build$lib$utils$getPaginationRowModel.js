shadow$provide.module$node_modules$$tanstack$table_core$build$lib$utils$getPaginationRowModel=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});var utils=require("module$node_modules$$tanstack$table_core$build$lib$utils"),getExpandedRowModel=require("module$node_modules$$tanstack$table_core$build$lib$utils$getExpandedRowModel");exports.getPaginationRowModel=function(opts){return table=>utils.memo(()=>[table.getState().pagination,table.getPrePaginationRowModel(),
table.options.paginateExpandedRows?void 0:table.getState().expanded],(pagination,rowModel)=>{if(!rowModel.rows.length)return rowModel;const {pageSize,pageIndex}=pagination;let {rows,flatRows,rowsById}=rowModel;pagination=pageSize*pageIndex;rows=rows.slice(pagination,pagination+pageSize);let paginatedRowModel;paginatedRowModel=table.options.paginateExpandedRows?{rows,flatRows,rowsById}:getExpandedRowModel.expandRows({rows,flatRows,rowsById});paginatedRowModel.flatRows=[];const handleRow=row=>{paginatedRowModel.flatRows.push(row);
row.subRows.length&&row.subRows.forEach(handleRow)};paginatedRowModel.rows.forEach(handleRow);return paginatedRowModel},{key:"getPaginationRowModel",debug:()=>{var _table$options$debugA;return null!=(_table$options$debugA=table.options.debugAll)?_table$options$debugA:table.options.debugTable}})}}
//# sourceMappingURL=module$node_modules$$tanstack$table_core$build$lib$utils$getPaginationRowModel.js.map
