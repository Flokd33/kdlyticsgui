{
"version":3,
"file":"module$node_modules$fbjs$lib$emptyFunction.js",
"lineCount":1,
"mappings":"AAAAA,cAAA,2CAAA,CAA+D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAYvGC,QAASA,kBAAiB,CAACC,GAAD,CAAM,CAC9B,MAAO,SAAS,EAAG,CACjB,MAAOA,IADU,CADW,CAW5BC,MAAAA,CAAgBA,QAAsB,EAAG,EAE7CA,OAAAC,YAAA,CAA4BH,iBAC5BE,OAAAE,iBAAA,CAAiCJ,iBAAA,CAAkB,CAAA,CAAlB,CACjCE,OAAAG,gBAAA,CAAgCL,iBAAA,CAAkB,CAAA,CAAlB,CAChCE,OAAAI,gBAAA,CAAgCN,iBAAA,CAAkB,IAAlB,CAChCE,OAAAK,gBAAA,CAAgCC,QAAS,EAAG,CAC1C,MAAO,KADmC,CAG5CN,OAAAO,oBAAA,CAAoCC,QAAS,CAACT,GAAD,CAAM,CACjD,MAAOA,IAD0C,CAInDH,OAAAC,QAAA,CAAiBG,MApCsF;",
"sources":["node_modules/fbjs/lib/emptyFunction.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$fbjs$lib$emptyFunction\"] = function(global,require,module,exports) {\n\"use strict\";\r\n\r\n/**\r\n * Copyright (c) 2013-present, Facebook, Inc.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * \r\n */\r\n\r\nfunction makeEmptyFunction(arg) {\r\n  return function () {\r\n    return arg;\r\n  };\r\n}\r\n\r\n/**\r\n * This function accepts and discards inputs; it has no side effects. This is\r\n * primarily useful idiomatically for overridable function endpoints which\r\n * always need to be callable, since JS lacks a null-call idiom ala Cocoa.\r\n */\r\nvar emptyFunction = function emptyFunction() {};\r\n\r\nemptyFunction.thatReturns = makeEmptyFunction;\r\nemptyFunction.thatReturnsFalse = makeEmptyFunction(false);\r\nemptyFunction.thatReturnsTrue = makeEmptyFunction(true);\r\nemptyFunction.thatReturnsNull = makeEmptyFunction(null);\r\nemptyFunction.thatReturnsThis = function () {\r\n  return this;\r\n};\r\nemptyFunction.thatReturnsArgument = function (arg) {\r\n  return arg;\r\n};\r\n\r\nmodule.exports = emptyFunction;\n};"],
"names":["shadow$provide","global","require","module","exports","makeEmptyFunction","arg","emptyFunction","thatReturns","thatReturnsFalse","thatReturnsTrue","thatReturnsNull","thatReturnsThis","emptyFunction.thatReturnsThis","thatReturnsArgument","emptyFunction.thatReturnsArgument"]
}
