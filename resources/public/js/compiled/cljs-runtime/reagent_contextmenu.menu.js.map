{"version":3,"sources":["reagent_contextmenu/menu.cljs"],"mappings":"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","names":["js/reagent-contextmenu","js/reagent-contextmenu.menu","js/reagent-contextmenu.menu.default-menu-atom","reagent-contextmenu.menu/default-menu-atom","reagent.core.atom","cljs.core.prn","reagent-contextmenu.menu/show-context!","menu-atom","actions","x","y","cljs.core.swap_BANG_","cljs.core/assoc","reagent-contextmenu.menu/hide-context!","reagent-contextmenu.menu/reposition!","offsets-a","dom-node","map__40347","cljs.core/deref","cljs.core/--destructure-map","cljs.core.get","vec__40348","cljs.core.nth","top","left","bcr","js/window.innerWidth","js/window.innerHeight","new-left","new-top","cljs.core.map","cljs.core/-","reagent-contextmenu.menu/inner-submenu","actions-coll","s-menus-a","hide-context!","cljs.core.atom","offsets","reagent.core.create_class","map__40380","margin-top","margin-left","cljs.core.not_EQ_","this","cljs.core/reset!","reagent-contextmenu.menu/actions-to-components","reagent-contextmenu.menu/submenu-component","showing-submenus-atom","id","name","show?","reagent.core/cursor","p1__40381#","cljs.core/not","p1__40386#","reagent-contextmenu.menu/action-component","action-fn","p__40387","vec__40392","reagent-contextmenu.menu/action-or-submenu","item","vec__40395","fn-or-sub","submenu","cljs.core/coll?","clear-sub-menus!","iter__5523__auto__","s__40402","cljs.core/LazySeq","temp__5804__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__5521__auto__","size__5522__auto__","cljs.core/count","b__40404","cljs.core/chunk-buffer","i__40403","vec__40405","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__40401","cljs.core/chunk-rest","vec__40408","cljs.core/first","cljs.core/cons","cljs.core/rest","cljs.core.map_indexed","cljs.core/vector","cljs.core/Keyword","reagent-contextmenu.menu/inner-context-menu","map__40412","map__40413","display","esc-handler!","evt","cljs.core._EQ_","scroll!","dy","p1__40411#","cljs.core/update-in","or__5045__auto__","var_args","G__40415","reagent-contextmenu.menu/context-menu","js/Error","reagent_contextmenu.menu.context_menu","e","G__40420","reagent-contextmenu.menu/context!","name-fn-coll","reagent_contextmenu.menu.context_BANG_","cljs.core/chunk-first"],"sourcesContent":["(ns reagent-contextmenu.menu\n  (:require [reagent.core :as r]\n            [goog.dom :as dom]\n            [goog.events :as events])\n  (:import [goog.events EventType]))\n\n;;; Make sure to create the context-menu element somewhere in the dom.\n;;; Recommended: at the start of the document.\n\n\n\n(defonce default-menu-atom (r/atom {:actions [[\"Action\" #(prn \"hello\")]]\n                                    :left 0\n                                    :top 0\n                                    :display nil}))\n\n\n(defn- show-context! [menu-atom actions x y]\n  (swap! menu-atom assoc\n         :actions actions\n         :left (- x 10)  ;; we want the menu to appear slightly under the mouse\n         :top (- y 10)\n         :display \"block\"))\n\n(defn- hide-context! [menu-atom]\n  (swap! menu-atom assoc :display nil))\n\n\n;;;; container to be included into the document\n\n(declare actions-to-components)\n\n(defn- reposition!\n  \"Make sure the dom-node is within the viewport. Update the\n  `offsets-a' with the necessary :top and :left.\"\n  [offsets-a dom-node]\n  (let [{:keys [top left]} @offsets-a\n        bcr (.getBoundingClientRect dom-node)\n        x (- (.-right bcr) js/window.innerWidth)\n        y (- (.-bottom bcr) js/window.innerHeight)\n        [new-left new-top] (map - [left top] [(if (pos? x) x 0)\n                                              (if (pos? y) y 0)])]\n    (swap! offsets-a assoc :margin-left new-left :margin-top new-top)))\n\n\n(defn- inner-submenu [actions-coll s-menus-a hide-context!]\n  (let [dom-node (atom nil)\n        offsets (r/atom {:margin-top 0 :margin-left 0})]\n    (r/create-class\n     {:component-did-mount #(reposition! offsets @dom-node)\n      :reagent-render\n      (fn []\n        (let [{:keys [margin-top margin-left]} @offsets]\n          [:ul.dropdown-menu.context-menu           \n           {:class (when (not= 0 margin-left) \"open-left\")\n            :style {:display :block\n                    :margin-top margin-top\n                    :margin-left margin-left}\n            :ref (fn [this] (reset! dom-node this))}\n           (actions-to-components actions-coll s-menus-a hide-context!)]))})))\n\n(defn- submenu-component [showing-submenus-atom id name actions-coll hide-context!]\n  (let [show? (r/cursor showing-submenus-atom [id])\n        s-menus-a (r/cursor showing-submenus-atom [:sub id])]\n    (r/create-class\n     {:component-did-mount (fn [])\n      :reagent-render\n      (fn []\n        [:li {:class \"context-submenu\"}\n         [:a {:style {:cursor \"pointer\"}\n              :class (when @show? \"selected\")\n              :on-mouse-over #(reset! showing-submenus-atom {id true})\n              :on-click #(do (.stopPropagation %)\n                             (swap! show? not))}\n          name]\n         (if @show?\n           [inner-submenu actions-coll s-menus-a hide-context!])])})))\n\n(defn- action-component [name action-fn hide-context!]\n  [:a {:on-click #(do (.stopPropagation %)\n                      (hide-context!) \n                      (action-fn %))\n       :style {:cursor :pointer}} name])\n\n(defn- action-or-submenu [[id item] showing-submenus-atom hide-context!]\n  (let [[name fn-or-sub] item\n        submenu (when (coll? fn-or-sub) fn-or-sub)\n        clear-sub-menus! #(reset! showing-submenus-atom nil)]\n    (cond submenu [submenu-component showing-submenus-atom id name submenu hide-context!]\n          fn-or-sub [:li {:on-mouse-enter clear-sub-menus!}\n                     [action-component name fn-or-sub hide-context!]]\n          :else [:li {:class :disabled\n                      :on-mouse-enter clear-sub-menus!}\n                 [:a name]])))\n\n\n(defn- actions-to-components [actions-coll showing-submenus-atom hide-context!]\n  (for [[id item] (map-indexed vector actions-coll)]\n    (let [clear-sub-menus! #(reset! showing-submenus-atom nil)]\n      (cond \n        (coll? item) ^{:key id} [action-or-submenu [id item] showing-submenus-atom hide-context!]\n        (keyword? item)\n        ^{:key id}[:li.divider {:on-mouse-enter clear-sub-menus!}]\n        \n        :else \n        ^{:key id}[:li.dropdown-header \n                   {:style {:cursor :default}\n                    :on-mouse-enter clear-sub-menus!}\n                   item]))))\n\n\n(defn- inner-context-menu\n  [menu-atom hide-context!]\n  (let [dom-node (atom nil)\n        showing-submenus-atom (r/atom {})\n        offsets (r/atom {:margin-top 0 :margin-left 0})]\n    (r/create-class\n     {:component-did-mount #(reposition! offsets @dom-node)\n      :reagent-render\n      (fn []\n        (let [{:keys [display actions left top]} @menu-atom\n              {:keys [margin-top margin-left]} @offsets\n              esc-handler! (fn [evt]\n                             (when (= (.-keyCode evt) 27) ;; `esc' key\n                               (.stopPropagation evt)\n                               (hide-context!)))\n              scroll! (fn [evt]\n                        (let [dy (.-deltaY evt)]\n                          (swap! menu-atom update-in [:top] #(- % dy))))]\n          [:div.context-menu-container\n           {:style {:position :fixed\n                    :left left\n                    :top top\n                    :margin-left margin-left\n                    :margin-top margin-top}\n            :class (when (not= 0 margin-left) \"open-left\")}\n           [:ul.dropdown-menu.context-menu\n            {:ref (fn [this]\n                    (reset! dom-node this)\n                    (when this\n                      (.focus this)))\n             :on-key-up esc-handler!\n             :tab-index -1\n             :role \"menu\"\n             :on-wheel scroll!\n             :style {:display (or display \"none\")\n                     :position :relative}}\n            (when actions\n              (actions-to-components actions showing-submenus-atom hide-context!))]]))})))\n\n\n;; main component for the user\n\n\n(defn context-menu\n  \"The context menu component. Will use a default (and global) state\n  ratom if none is provided.\"\n  ([] (context-menu default-menu-atom))\n  ([menu-atom]\n   ;; remove the context menu if we click out of it or press `esc' (like the normal context menu)  \n   (let [hide-context! #(hide-context! menu-atom)\n         display (get @menu-atom :display)]\n     [:div\n      (when display\n        [:div.context-menu-backdrop\n         {:on-context-menu (fn [e]\n                             (hide-context!)\n                             (.preventDefault e))\n          :on-click hide-context!\n          :style {:position :fixed\n                  :top 0\n                  :left 0\n                  :width \"100vw\"\n                  :height \"100vh\"}}\n         [inner-context-menu menu-atom hide-context!]])])))\n\n\n\n;;;;; Main function below\n\n;; Use with a :on-context-menu to activate on right-click\n\n(defn context!\n  \"Update the context menu with a collection of [name function] pairs.\n  When function is nil, consider the button as 'disabled' and do not\n  allow any click.  \n\n  When passed a keyword instead of [name function], a divider is\n  inserted.\n\n  If a string is passed, convert it into a header.\n\n  [\\\"Menu header\\\"\n   [my-fn #(+ 1 2)]\n   :divider\n   [my-other-fn #(prn (str 1 2 3))]]\"\n  ([evt name-fn-coll] (context! evt default-menu-atom name-fn-coll))\n  ([evt menu-atom name-fn-coll]\n   (show-context! menu-atom name-fn-coll \n                  (.-clientX evt)\n                  (.-clientY evt))\n   (.preventDefault evt)))\n"],"x_google_ignoreList":[0]}