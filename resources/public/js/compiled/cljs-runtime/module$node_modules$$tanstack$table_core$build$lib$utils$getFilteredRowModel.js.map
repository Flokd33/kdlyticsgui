{
"version":3,
"file":"module$node_modules$$tanstack$table_core$build$lib$utils$getFilteredRowModel.js",
"lineCount":7,
"mappings":"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",
"sources":["node_modules/@tanstack/table-core/build/lib/utils/getFilteredRowModel.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$tanstack$table_core$build$lib$utils$getFilteredRowModel\"] = function(global,require,module,exports) {\n/**\n * table-core\n *\n * Copyright (c) TanStack\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar utils = require('../utils.js');\nvar filterRowsUtils = require('./filterRowsUtils.js');\n\nfunction getFilteredRowModel() {\n  return table => utils.memo(() => [table.getPreFilteredRowModel(), table.getState().columnFilters, table.getState().globalFilter], (rowModel, columnFilters, globalFilter) => {\n    if (!rowModel.rows.length || !(columnFilters != null && columnFilters.length) && !globalFilter) {\n      for (let i = 0; i < rowModel.flatRows.length; i++) {\n        rowModel.flatRows[i].columnFilters = {};\n        rowModel.flatRows[i].columnFiltersMeta = {};\n      }\n      return rowModel;\n    }\n    const resolvedColumnFilters = [];\n    const resolvedGlobalFilters = [];\n    (columnFilters != null ? columnFilters : []).forEach(d => {\n      var _filterFn$resolveFilt;\n      const column = table.getColumn(d.id);\n      if (!column) {\n        return;\n      }\n      const filterFn = column.getFilterFn();\n      if (!filterFn) {\n        if (process.env.NODE_ENV !== 'production') {\n          console.warn(`Could not find a valid 'column.filterFn' for column with the ID: ${column.id}.`);\n        }\n        return;\n      }\n      resolvedColumnFilters.push({\n        id: d.id,\n        filterFn,\n        resolvedValue: (_filterFn$resolveFilt = filterFn.resolveFilterValue == null ? void 0 : filterFn.resolveFilterValue(d.value)) != null ? _filterFn$resolveFilt : d.value\n      });\n    });\n    const filterableIds = columnFilters.map(d => d.id);\n    const globalFilterFn = table.getGlobalFilterFn();\n    const globallyFilterableColumns = table.getAllLeafColumns().filter(column => column.getCanGlobalFilter());\n    if (globalFilter && globalFilterFn && globallyFilterableColumns.length) {\n      filterableIds.push('__global__');\n      globallyFilterableColumns.forEach(column => {\n        var _globalFilterFn$resol;\n        resolvedGlobalFilters.push({\n          id: column.id,\n          filterFn: globalFilterFn,\n          resolvedValue: (_globalFilterFn$resol = globalFilterFn.resolveFilterValue == null ? void 0 : globalFilterFn.resolveFilterValue(globalFilter)) != null ? _globalFilterFn$resol : globalFilter\n        });\n      });\n    }\n    let currentColumnFilter;\n    let currentGlobalFilter;\n\n    // Flag the prefiltered row model with each filter state\n    for (let j = 0; j < rowModel.flatRows.length; j++) {\n      const row = rowModel.flatRows[j];\n      row.columnFilters = {};\n      if (resolvedColumnFilters.length) {\n        for (let i = 0; i < resolvedColumnFilters.length; i++) {\n          currentColumnFilter = resolvedColumnFilters[i];\n          const id = currentColumnFilter.id;\n\n          // Tag the row with the column filter state\n          row.columnFilters[id] = currentColumnFilter.filterFn(row, id, currentColumnFilter.resolvedValue, filterMeta => {\n            row.columnFiltersMeta[id] = filterMeta;\n          });\n        }\n      }\n      if (resolvedGlobalFilters.length) {\n        for (let i = 0; i < resolvedGlobalFilters.length; i++) {\n          currentGlobalFilter = resolvedGlobalFilters[i];\n          const id = currentGlobalFilter.id;\n          // Tag the row with the first truthy global filter state\n          if (currentGlobalFilter.filterFn(row, id, currentGlobalFilter.resolvedValue, filterMeta => {\n            row.columnFiltersMeta[id] = filterMeta;\n          })) {\n            row.columnFilters.__global__ = true;\n            break;\n          }\n        }\n        if (row.columnFilters.__global__ !== true) {\n          row.columnFilters.__global__ = false;\n        }\n      }\n    }\n    const filterRowsImpl = row => {\n      // Horizontally filter rows through each column\n      for (let i = 0; i < filterableIds.length; i++) {\n        if (row.columnFilters[filterableIds[i]] === false) {\n          return false;\n        }\n      }\n      return true;\n    };\n\n    // Filter final rows using all of the active filters\n    return filterRowsUtils.filterRows(rowModel.rows, filterRowsImpl, table);\n  }, {\n    key: process.env.NODE_ENV === 'development' && 'getFilteredRowModel',\n    debug: () => {\n      var _table$options$debugA;\n      return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugTable;\n    },\n    onChange: () => {\n      table._autoResetPageIndex();\n    }\n  });\n}\n\nexports.getFilteredRowModel = getFilteredRowModel;\n//# sourceMappingURL=getFilteredRowModel.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","utils","filterRowsUtils","getFilteredRowModel","table","memo","getPreFilteredRowModel","getState","columnFilters","globalFilter","rowModel","rows","length","i","flatRows","columnFiltersMeta","resolvedColumnFilters","resolvedGlobalFilters","forEach","d","_filterFn$resolveFilt","column","getColumn","id","filterFn","getFilterFn","push","resolvedValue","resolveFilterValue","console","warn","filterableIds","map","globalFilterFn","getGlobalFilterFn","globallyFilterableColumns","getAllLeafColumns","filter","getCanGlobalFilter","_globalFilterFn$resol","j","row","currentColumnFilter","filterMeta","currentGlobalFilter","__global__","filterRows","filterRowsImpl","key","debug","_table$options$debugA","options","debugAll","debugTable","onChange","_autoResetPageIndex"]
}
