{"version":3,"sources":["jasminegui/portfolioreview.cljs"],"mappings":"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","names":["re_frame.core.reg_event_fx.cljs$core$IFn$_invoke$arity$2","p__63254","p__63257","map__63258","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","vec__63260","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","db","_","portfolio","jasminegui.static/server-address","p__63283","p__63284","map__63289","vec__63294","period","grouping","p__63319","p__63320","map__63328","vec__63329","p__63354","p__63355","map__63360","vec__63361","p__63389","p__63390","map__63395","vec__63396","jasminegui.portfolioreview/standard-box-width","jasminegui.portfolioreview/standard-box-height","jasminegui.portfolioreview/standard-box-width-nb","jasminegui.portfolioreview/standard-box-height-nb","jasminegui.portfolioreview/performance-colors","jasminegui.portfolioreview/grouped-horizontal-bars","data","title","individual-height","cljs.core/count","cljs.core.distinct.cljs$core$IFn$_invoke$arity$1","cljs.core.map.cljs$core$IFn$_invoke$arity$2","text-size","perf-sort","cljs.core/reverse","cljs.core.mapv.cljs$core$IFn$_invoke$arity$2","colors","cljs.core.take.cljs$core$IFn$_invoke$arity$2","scl","x__4214__auto__","y__4215__auto__","cljs.core/max","cljs.core/min","jasminegui.portfolioreview/simple-horizontal-bars","fmt","dc","cljs.core/first","jasminegui.portfolioreview/stacked-vertical-bars","groups","new-data","p1__63475#","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","cljs.core.println.cljs$core$IFn$_invoke$arity$variadic","jasminegui.portfolioreview/risk-breakdowns","jasminegui.portfolioreview/contribution-pages","cljs.core.into.cljs$core$IFn$_invoke$arity$2","iter__4529__auto__","s__63500","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","xs__6292__auto__","iterys__4525__auto__","s__63502","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","b__63504","cljs.core/chunk-buffer","i__63503","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__63501","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","fs__4526__auto__","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","iter__63499","p","k","cljs.core/second","jasminegui.portfolioreview/alpha-pages","s__63533","b__63535","i__63534","iter__63532","jasminegui.portfolioreview/top-bottom-pages","s__63560","s__63562","b__63564","i__63563","iter__63561","iter__63559","jasminegui.portfolioreview/jensen-pages","s__63612","b__63614","i__63613","iter__63611","jasminegui.portfolioreview/risk-pages","s__63630","s__63632","b__63634","i__63633","iter__63631","iter__63629","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","jasminegui.portfolioreview/pages","cljs.core.map_indexed.cljs$core$IFn$_invoke$arity$2","cljs.core/vector","cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic","jasminegui.portfolioreview/portfolio-review-navigation","cljs.core/keys","p1__63663#","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","p1__63664#","p1__63665#","p1__63666#","p1__63667#","p1__63668#","jasminegui.portfolioreview/maximum-page","jasminegui.portfolioreview/current-page","reagent.core.atom.cljs$core$IFn$_invoke$arity$1","jasminegui.portfolioreview/go-to-page","n","cljs.core/reset!","req","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","G__63678","re-frame.core/dispatch","cljs.core.replace.cljs$core$IFn$_invoke$arity$2","G__63679","jasminegui.portfolioreview/next-page!","cljs.core/deref","G__63688","re-frame.core/subscribe","jasminegui.portfolioreview/previous-page!","G__63692","jasminegui.portfolioreview/go-to-block!","x","p1__63696#","G__63704","jasminegui.portfolioreview/heading-box","re-com.core/h-box","re-com.core/title","jasminegui.portfolioreview/summary-text","G__63730","G__63731","positions","p1__63713#","G__63732","f","G__63737","G__63738","goog.string/format","g","h","re-com.core/box","re-com.core/v-box","cljs.core.reduce.cljs$core$IFn$_invoke$arity$2","cljs.core/+","re-com.core/gap","re-com.core/p","G__63763","G__63764","jasminegui.portfolioreview/contribution-or-alpha-chart","oz.core/vega-lite","jasminegui.portfolioreview/top-contributors","display","cljs.core.sort_by.cljs$core$IFn$_invoke$arity$2","p1__63780#","cljs.core.remove.cljs$core$IFn$_invoke$arity$2","or__4126__auto__","cljs.core/some","cljs.core.subs.cljs$core$IFn$_invoke$arity$3","G__63782","js/module$node_modules$react_table$lib$index.default","jasminegui.tables/case-insensitive-filter","jasminegui.tables/attribution-table-columns","jasminegui.portfolioreview/backtest-history","G__63785","G__63787","G__63789","dates","G__63790","G__63792","chart-period","G__63793","line","p1__63784#","jasminegui.static/var-charts-choice-map","days","G__63794","cljs.core/Keyword","js/Error","G__63795","G__63796","G__63797","G__63798","jasminegui.charting/backtest-chart","cljs.core/take-last","G__63802","G__63803","jasminegui.portfolioreview/risk-betas","G__63807","G__63811","idx","p1__63804#","sorted-data","p1__63805#","jasminegui.portfolioreview/risk-beta-over-time","jasminegui.portfolioreview/risk-weights","G__63827","p1__63812#","G__63829","G__63830","totals","G__63831","cljs.core.keyword.cljs$core$IFn$_invoke$arity$1","G__63832","grp","cljs.core/group-by","risks","chart-data","s__63834","vec__63839","s__63836","b__63838","i__63837","iter__63835","iter__63833","r","fexpr__63848","fexpr__63852","clean-data","G__63860","p1__63813#","top-countries","p1__63814#","G__63861","Math/abs","p1__63816#","p1__63818#","p1__63819#","clean-data-sorted","G__63862","p1__63821#","cljs.core.update.cljs$core$IFn$_invoke$arity$4","cljs.core/subs","jasminegui.portfolioreview/risk-deltas","G__63872","p1__63863#","G__63873","G__63874","G__63879","G__63880","s__63882","vec__63887","s__63884","b__63886","i__63885","iter__63883","iter__63881","G__63900","p1__63864#","p1__63865#","G__63902","p1__63866#","p1__63867#","p1__63868#","G__63903","p1__63869#","p1__63870#","p1__63871#","jasminegui.portfolioreview/risk","clojure.string/includes?","jasminegui.portfolioreview/active-home","active-tab","G__63915","js/window","G__63917","G__63922","G__63923","G__63924","jasminegui.portfolioreview/portfolio-change","G__63926","G__63927","jasminegui.portfolioreview/nav","G__63928","portfolio-map","s__63930","b__63932","i__63931","iter__63929","G__63933","G__63934","re-com.core/button","re-com.core/label","re-com.core/line","re-com.core/single-dropdown","s__63936","b__63938","i__63937","iter__63935","item","jasminegui.portfolioreview/view","cljs.core/chunk-first"],"sourcesContent":["(ns jasminegui.portfolioreview\r\n\r\n  (:require\r\n    [re-frame.core :as rf]\r\n    [reagent.core :as r]\r\n    [goog.string :as gstring]\r\n    [goog.string.format]\r\n    [re-com.core :refer [p p-span h-box v-box box gap line scroller border label title button close-button checkbox hyperlink-href slider horizontal-bar-tabs radio-button info-button\r\n                         single-dropdown hyperlink modal-panel alert-box throbber input-password selection-list md-circle-icon-button\r\n                         input-text input-textarea popover-anchor-wrapper popover-content-wrapper popover-tooltip datepicker-dropdown] :refer-macros [handler-fn]]\r\n    [re-com.box :refer [h-box-args-desc v-box-args-desc box-args-desc gap-args-desc line-args-desc scroller-args-desc border-args-desc flex-child-style]]\r\n    [re-com.util :refer [px]]\r\n    [\"react-table\" :as rt :default ReactTable]\r\n    [jasminegui.mount :as mount]\r\n    [jasminegui.static :as static]\r\n    [jasminegui.tools :as tools]\r\n    [jasminegui.tables :as tables]\r\n\r\n    [re-com.validate :refer [string-or-hiccup? alert-type? vector-of-maps?]]\r\n    [oz.core :as oz]\r\n    [jasminegui.charting :as charting])\r\n  (:import (goog.i18n NumberFormat)\r\n           (goog.i18n.NumberFormat Format))\r\n  )\r\n\r\n;;;;;;;;;;;;\r\n;; EVENTS ;;\r\n;;;;;;;;;;;;\r\n\r\n(rf/reg-event-fx\r\n  :get-portfolio-review-summary-data\r\n  (fn [{:keys [db]} [_ portfolio]]\r\n    {:http-get-dispatch {:url          (str static/server-address \"portfolio-review?query-type=summary&portfolio=\" portfolio) ;(srotr \"http://iamlfilive:3501/positions\")\r\n                         :dispatch-key [:portfolio-review/summary-data]\r\n                         :kwk          true}}))\r\n\r\n(rf/reg-event-fx\r\n  :get-portfolio-review-contribution-chart-data\r\n  (fn [{:keys [db]} [_ portfolio period grouping]]\r\n    {:http-get-dispatch {:url          (str static/server-address \"portfolio-review?query-type=contribution&portfolio=\" portfolio \"&period=\" period \"&grouping=\" grouping) ;(srotr \"http://iamlfilive:3501/positions\")\r\n                         :dispatch-key [:portfolio-review/contribution-chart-data]\r\n                         :kwk          true}}))\r\n\r\n(rf/reg-event-fx\r\n  :get-portfolio-review-alpha-chart-data\r\n  (fn [{:keys [db]} [_ portfolio grouping]]\r\n    {:http-get-dispatch {:url          (str static/server-address \"portfolio-review?query-type=alpha&portfolio=\" portfolio \"&grouping=\" grouping) ;(srotr \"http://iamlfilive:3501/positions\")\r\n                         :dispatch-key [:portfolio-review/alpha-chart-data]\r\n                         :kwk          true}}))\r\n\r\n(rf/reg-event-fx\r\n  :get-portfolio-review-jensen-chart-data\r\n  (fn [{:keys [db]} [_ portfolio grouping]]\r\n    {:http-get-dispatch {:url          (str static/server-address \"portfolio-review?query-type=jensen&portfolio=\" portfolio \"&grouping=\" grouping) ;(srotr \"http://iamlfilive:3501/positions\")\r\n                         :dispatch-key [:portfolio-review/jensen-chart-data]\r\n                         :kwk          true}}))\r\n\r\n(rf/reg-event-fx\r\n  :get-portfolio-review-marginal-beta-chart-data\r\n  (fn [{:keys [db]} [_ portfolio grouping]]\r\n    {:http-get-dispatch {:url          (str static/server-address \"portfolio-review?query-type=marginal-beta&portfolio=\" portfolio \"&grouping=\" grouping) ;(srotr \"http://iamlfilive:3501/positions\")\r\n                         :dispatch-key [:portfolio-review/marginal-beta-chart-data]\r\n                         :kwk          true}}))\r\n\r\n\r\n(def standard-box-width \"1600px\")\r\n(def standard-box-height \"1024px\")\r\n(def standard-box-width-nb 1600)\r\n(def standard-box-height-nb 1024)\r\n\r\n\r\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\r\n;;;VEGA-LITE CHART DEFINITIONS;;;\r\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\r\n\r\n(def performance-colors [\"#134848\" \"#009D80\" \"#FDAA94\" \"#74908D\" \"#591739\" \"#0D3232\" \"#026E62\" \"#C0746D\" \"#54666D\" \"#3C0E2E\"])\r\n\r\n(defn grouped-horizontal-bars [data title]\r\n  \"The data is of the form [{:group TXT :performance txt :value 0}]\"\r\n  (let [individual-height (if (> (count (distinct (map :group data))) 10) 20 60) ; (/ (+ standard-box-height-nb 400) (* 5 (count (distinct (map :group data)))))\r\n        text-size 16\r\n        perf-sort (reverse (distinct (mapv :performance data)))\r\n        colors (reverse (take (count (distinct (mapv :performance data))) performance-colors))\r\n        scl (/ (max (apply max (map :value data)) (- (apply min (map :value data)))) 40)]\r\n    {:$schema   \"https://vega.github.io/schema/vega-lite/v4.json\",\r\n     :data      {:values data},\r\n     :transform [{:calculate (str \"datum.value >= 0 ? datum.value + \" scl \" : datum.value - \" scl), :as \"valuetxt\"}],\r\n     :facet     {:row {:field \"group\", :type \"ordinal\", :sort (mapv :group data), :title \"\", :header {:labelAngle 0, :labelFontSize text-size, :labelAlign \"left\"}}},\r\n     :spec      {:layer\r\n                 [{:mark   \"bar\",\r\n                   :width  (- standard-box-width-nb 400),\r\n                   :height individual-height\r\n                   :encoding {:x     {:aggregate \"sum\", :field \"value\", :type \"quantitative\",\r\n                                      :axis {:title title, :titleFontSize text-size, :titleFontWeight \"normal\" :labelFontSize text-size, :gridColor {:condition {:test \"datum.value === 0\", :value \"black\"}}}},\r\n                              :y     {:field \"performance\", :type \"nominal\", :sort perf-sort, :axis {:title \"\", :labels false}},\r\n                              :color {:field \"performance\", :type \"nominal\", :scale {:range colors}, :legend {:title \"\", :labelFontSize text-size}}}}\r\n                  {:mark   {:type \"text\", :fontSize text-size},\r\n                   :width  (- standard-box-width-nb 400),\r\n                   :height individual-height\r\n                   :encoding {:x     {:aggregate \"sum\", :field \"valuetxt\", :type \"quantitative\", :axis {:title nil}},\r\n                              :y     {:field \"performance\", :type \"nominal\", :sort perf-sort, :axis {:title \"\", :labels false}},\r\n                              :color {:field \"performance\", :type \"nominal\", :scale {:range colors}, :legend nil},\r\n                              :text  {:field \"value\" :format \".0f\"}}}]},\r\n     :config    {:view {:stroke \"transparent\"}, :axis {:domainWidth 1}}})\r\n  )\r\n\r\n(defn simple-horizontal-bars [data title fmt dc]\r\n  \"The data is of the form [{:group TXT :value 0}]\"\r\n  (let [individual-height (if (> (count (distinct (map :group data))) 10) 20 60) ; (/ (+ standard-box-height-nb 400) (* 5 (count (distinct (map :group data)))))\r\n        text-size 16\r\n        scl (* dc (/ (max (apply max (map :value data)) (- (apply min (map :value data)))) 40))]\r\n    {:$schema   \"https://vega.github.io/schema/vega-lite/v4.json\",\r\n     :data      {:values data},\r\n     :transform [{:calculate (str \"datum.value >= 0 ? datum.value + \" scl \" : datum.value - \" scl), :as \"valuetxt\"}],\r\n     :facet     {:row {:field \"group\", :type \"ordinal\", :sort (mapv :group data), :title \"\", :header {:labelAngle 0, :labelFontSize text-size, :labelAlign \"left\"}}},\r\n     :spec      {:layer\r\n                 [{:mark     \"bar\",\r\n                   :width    (- (/ standard-box-width-nb 2) 250),\r\n                   :height   individual-height\r\n                   :encoding {:x     {:aggregate \"sum\", :field \"value\", :type \"quantitative\",\r\n                                      :axis      {:title title, :titleFontSize text-size, :titleFontWeight \"normal\" :labelFontSize text-size, :gridColor {:condition {:test \"datum.value === 0\", :value \"black\"}}}},\r\n                              :y     {:field \"performance\", :type \"nominal\", :axis {:title \"\", :labels false}},\r\n                              :color {:field \"performance\", :type \"nominal\", :scale {:range [(first performance-colors)]}, :legend nil}}}\r\n                  {:mark     {:type \"text\", :fontSize text-size},\r\n                   :width    (- (/ standard-box-width-nb 2) 250),\r\n                   :height   individual-height\r\n                   :encoding {:x     {:aggregate \"sum\", :field \"valuetxt\", :type \"quantitative\", :axis {:title nil}},\r\n                              :y     {:field \"performance\", :type \"nominal\", :axis {:title \"\", :labels false}},\r\n                              :color {:field \"performance\", :type \"nominal\", :scale {:range [(first performance-colors)]}, :legend nil},\r\n                              :text  {:field \"value\" :format fmt}}}]}\r\n     :config    {:view {:stroke \"transparent\"}, :axis {:domainWidth 1}}})\r\n    )\r\n\r\n(defn stacked-vertical-bars [data title]\r\n  (let [text-size 16\r\n        groups (distinct (mapv :group data))\r\n        colors (take (count (distinct (mapv :group data))) performance-colors)\r\n        new-data (mapv #(assoc %1 :order (.indexOf groups (:group %1))) data)\r\n        ]\r\n    (println new-data colors)\r\n    {:$schema \"https://vega.github.io/schema/vega-lite/v4.json\",\r\n     :data    {:values new-data},\r\n     :width   (- standard-box-width-nb 800),\r\n     :height  (- standard-box-height-nb 400),\r\n\r\n     :layer\r\n              [{:mark \"bar\",\r\n                :scale {:padding-left 60}\r\n                :encoding\r\n                      {:x     {:field \"performance\",\r\n                               :type \"nominal\",\r\n                               :axis {:title nil :labelFontSize text-size :labelAngle 0}\r\n                               :sort (distinct (mapv :performance data))\r\n                               :scale {:paddingInner 0.5}},\r\n                       :y     {:field \"value\", :type \"quantitative\", :axis {:title nil :labelFontSize text-size}},\r\n                       :order {:field \"order\", :type \"quantitative\"}\r\n                       :color\r\n                              {:field \"group\", :type \"nominal\", :scale {:domain (distinct (map :group new-data))\r\n                                                                        :range colors} :legend nil}}}\r\n               {:mark {:type \"text\" :fontSize text-size :color \"white\"},\r\n                :encoding\r\n                      {:x    {:field \"performance\", :type \"nominal\", :axis {:title nil}, :sort (distinct (mapv :performance data))},\r\n                       :y    {:field \"mid\", :type \"quantitative\"},\r\n                       :text {:field \"group\", :type \"nominal\"}}}]}))\r\n\r\n\r\n;;;;;;;;;;;;;;;;\r\n;;;NAVIGATION;;;\r\n;;;;;;;;;;;;;;;;\r\n\r\n(def risk-breakdowns\r\n  [[\"Region\" \"Region\"]\r\n   [\"Country\" \"Country\"]\r\n   [\"Sector\" \"Sector\"]\r\n   [\"Rating\" \"RatingGroup\"]\r\n   [\"Duration\" \"Duration Bucket\"]])\r\n\r\n(def contribution-pages\r\n  (into []\r\n        (for [p [[\"MTD\" \"mtd\"] [\"YTD\" \"ytd\"]] k risk-breakdowns]\r\n          {:title        (str (first p) \" Contribution by \" (first k))\r\n           :nav-request  :contribution\r\n           :data-request [:get-portfolio-review-contribution-chart-data \"portfolio\" (second p) (second k)]})))\r\n\r\n(def alpha-pages\r\n  (into []\r\n        (for [k risk-breakdowns]\r\n          {:title        (str \"Alpha by \" (first k))\r\n           :nav-request  :alpha\r\n           :data-request [:get-portfolio-review-alpha-chart-data \"portfolio\" (second k)]})))\r\n\r\n(def top-bottom-pages\r\n  (into []\r\n        (for [p [[\"MTD\" \"mtd\"] [\"YTD\" \"ytd\"]]\r\n              k [[\"top\" \"top\"] [\"bottom\" \"bottom\"]]]\r\n          {:title        (str (first p) \" \" (first k) \" contributors\")\r\n           :nav-request  :top-bottom\r\n           :data-request [:get-single-attribution \"portfolio\" (second p)]})))\r\n\r\n(def jensen-pages\r\n  (into []\r\n        (for [k risk-breakdowns]\r\n          {:title        (str \"Jensen by \" (first k))\r\n           :nav-request  :jensen\r\n           :data-request [:get-portfolio-review-jensen-chart-data \"portfolio\" (second k)]})))\r\n\r\n(def risk-pages\r\n  (into []\r\n        (for [k risk-breakdowns p [\"weights\" \"beta contribution\" \"deviation from index\"]]\r\n          {:title        (str \"Risk by \" (first k) \": \" p)\r\n           :nav-request  :risk\r\n           :grouping k\r\n           :subgrouping p\r\n           :data-request (if (= p \"beta contribution\") [:get-portfolio-review-marginal-beta-chart-data \"portfolio\" (second k)])})))\r\n\r\n\r\n(def pages (into {} (map-indexed\r\n                      vector\r\n                      (concat\r\n                        [{:title \"Summary\"                      :nav-request :summary         :data-request nil}]\r\n                         contribution-pages\r\n                         alpha-pages\r\n                         top-bottom-pages\r\n                         jensen-pages\r\n                        [{:title \"Three year daily backtest\"   :nav-request :backtest-history  :data-request nil}]\r\n                        risk-pages\r\n                        ))))\r\n\r\n(def portfolio-review-navigation\r\n  [{:code :summary          :name \"Summary\"           :page-start 0}\r\n   {:code :contribution     :name \"Contribution\"      :page-start (apply min (keys (filter #(= (:nav-request (second %)) :contribution) pages)))}\r\n   {:code :alpha            :name \"Alpha\"             :page-start (apply min (keys (filter #(= (:nav-request (second %)) :alpha) pages)))}\r\n   {:code :top-bottom       :name \"Top contributors\"  :page-start (apply min (keys (filter #(= (:nav-request (second %)) :top-bottom) pages)))}\r\n   {:code :jensen           :name \"Jensen\"            :page-start (apply min (keys (filter #(= (:nav-request (second %)) :jensen) pages)))}\r\n   {:code :backtest-history :name \"Backtest\"          :page-start (apply min (keys (filter #(= (:nav-request (second %)) :backtest-history) pages)))}\r\n   {:code :risk             :name \"Risk\"              :page-start (apply min (keys (filter #(= (:nav-request (second %)) :risk) pages)))}])\r\n\r\n(def maximum-page (count pages))\r\n(def current-page (r/atom 0))\r\n\r\n(defn go-to-page [n portfolio]\r\n  (reset! current-page n)\r\n  (when-let [req (get-in pages [n :data-request])]\r\n    (rf/dispatch (replace {\"portfolio\" portfolio} req)))\r\n  (rf/dispatch [:portfolio-review/active-tab (get-in pages [n :nav-request])]))\r\n\r\n(defn next-page! []\r\n  (when (< @current-page (dec maximum-page))\r\n    (go-to-page (inc @current-page) @(rf/subscribe [:portfolio-review/portfolio]))))\r\n\r\n(defn previous-page! []\r\n  (when (> @current-page 0)\r\n    (go-to-page (dec @current-page) @(rf/subscribe [:portfolio-review/portfolio]))))\r\n\r\n(defn go-to-block! [x]\r\n  (go-to-page (:page-start (first (filter #(= (:code %) x) portfolio-review-navigation)))\r\n              @(rf/subscribe [:portfolio-review/portfolio])))\r\n\r\n\r\n;;;;;;;;;;;;;;;;;;;;;;;\r\n;;;PAGE CONSTRUCTION;;;\r\n;;;;;;;;;;;;;;;;;;;;;;;\r\n\r\n(defn heading-box []\r\n  [h-box :gap \"20px\" :align :center :children [[:img {:width \"37px\" :height \"64px\" :src \"assets/91-logo-green.png\"}] [title :label (get-in pages [@current-page :title]) :level :level1]]])\r\n\r\n(defn summary-text []\r\n  (let [portfolio @(rf/subscribe [:portfolio-review/portfolio])\r\n        data @(rf/subscribe [:portfolio-review/summary-data])\r\n        positions (filter #(= (:portfolio %) portfolio) @(rf/subscribe [:positions]))\r\n        f (fn [x] (gstring/format \"%.0fbps\" (* 100 x)))\r\n        g (fn [x] (gstring/format \"%.2f\" x))\r\n        h (fn [x] (gstring/format \"%.1f\" x))]\r\n    [box :class \"subbody rightelement\" :width standard-box-width :height standard-box-height\r\n     :child\r\n     [v-box :gap \"40px\" :class \"element\" :width \"100%\" :height \"100%\"\r\n      :children\r\n      [[heading-box]\r\n       [title :level :level2 :label (str \"MTD, \" portfolio \" returned \" (f (get-in data [:mtd :portfolio])) \" vs \" (f (get-in data [:mtd :index])) \" for the index, \" (f (get-in data [:mtd :alpha])) \" of alpha.\")]\r\n       [title :level :level2 :label (str \"YTD, \" portfolio \" returned \" (f (get-in data [:ytd :portfolio])) \" vs \" (f (get-in data [:ytd :index])) \" for the index, \" (f (get-in data [:ytd :alpha])) \" of alpha.\")]\r\n       [title :level :level2 :label (str \"The portfolio yield is \" (g (* 100 (reduce + (map :contrib-yield positions)))) \"% vs \" (g (* 100 (reduce + (map :bm-contrib-yield positions)))) \"% for the index.\")]\r\n       [title :level :level2 :label (str \"Our duration is \" (h (reduce + (map :contrib-mdur positions))) \" vs \" (h (reduce + (map :bm-contrib-eir-duration positions))) \" for the index.\")]\r\n       [title :level :level2 :label (str \"We currently run a beta of \"\r\n                                         (g (get-in data [:beta :total]))\r\n                                         \"x with top contributors being \"\r\n                                         (get-in data [:beta :country-1])\r\n                                         \" (\"\r\n                                         (g (get-in data [:beta :value-1]))\r\n                                         \"x), \"\r\n                                         (get-in data [:beta :country-2])\r\n                                         \" (\"\r\n                                         (g (get-in data [:beta :value-2]))\r\n                                         \"x), and \"\r\n                                         (get-in data [:beta :country-3])\r\n                                         \" (\"\r\n                                         (g (get-in data [:beta :value-3]))\r\n                                         \"x).\")]\r\n       [gap :size \"1\"]\r\n       [p (str \"Performance data as of \" @(rf/subscribe [:attribution-date]) \". Risk data as of \" @(rf/subscribe [:qt-date]) \".\")]]]]))\r\n\r\n(defn contribution-or-alpha-chart [data]\r\n    [box :class \"subbody rightelement\" :width standard-box-width :height standard-box-height\r\n     :child\r\n     [v-box :gap \"40px\" :class \"element\" :width \"100%\" :height \"100%\"\r\n      :children\r\n      [[heading-box]\r\n       [oz/vega-lite (grouped-horizontal-bars data \"Basis points\")]\r\n       [gap :size \"1\"]\r\n       [box :width \"100%\" :align :end :child [p {:style {:text-align \"right\" :z-index 500}} \"UST categorized as cash\"]]\r\n       ]]])\r\n\r\n(defn top-contributors []\r\n  (let [display (sort-by :Total-Effect\r\n                         (remove #(or (some #{(:Sector %)} [\"Total\"])\r\n                                      (= (subs (:Security %) 0 16) \"Foreign Currency\")\r\n                                      (= (subs (:Security %) 4 22) \"Settlement Account\"))\r\n                                 @(rf/subscribe [:single-portfolio-attribution/clean-table])))]\r\n    [box :class \"subbody rightelement\" :width standard-box-width :height standard-box-height\r\n     :child\r\n     [v-box :gap \"10px\" :class \"element\" :width \"100%\" :height \"100%\"\r\n      :children\r\n      [[heading-box]                                        ; [title :label ttl :level :level1]\r\n       [box :width \"850px\"\r\n        :child\r\n        [:> ReactTable\r\n         {:data                (take 20 (if (= (subs (get-in pages [@current-page :title]) 4 7) \"top\") (reverse display) display))\r\n          :defaultFilterMethod tables/case-insensitive-filter\r\n          :columns             [{:Header \"Bond  \" :columns (mapv tables/attribution-table-columns [:security :country :sector])}\r\n                                {:Header \"Effect\" :columns (mapv tables/attribution-table-columns [:total-effect])}\r\n                                {:Header \"Contribution\" :columns (mapv tables/attribution-table-columns [:contribution :bm-contribution])}\r\n                                {:Header \"Weight\" :columns (mapv tables/attribution-table-columns [:xs-weight :weight :bm-weight])}]\r\n          :showPagination      false\r\n          :sortable            false\r\n          :filterable          false\r\n          :pageSize            20\r\n          :className           \"-striped -highlight\"}]]]]]))\r\n\r\n(defn backtest-history []\r\n  (rf/dispatch [:get-portfolio-var @(rf/subscribe [:portfolio-review/portfolio])])\r\n  (rf/dispatch [:var/chart-period :daily-3y])\r\n  (let [dates @(rf/subscribe [:var/dates])\r\n        data @(rf/subscribe [:var/data])\r\n        chart-period @(rf/subscribe [:var/chart-period])\r\n        line (first (filter #(= (:id %) chart-period) static/var-charts-choice-map))\r\n        days (case (line :frequency) :daily (* (line :period) 250) :weekly (* (line :period) 52) :monthly (* (line :period) 12))]\r\n    [box :class \"subbody rightelement\" :width standard-box-width :height standard-box-height\r\n     :child\r\n     [v-box :gap \"10px\" :class \"element\" :width \"100%\" :height \"100%\"\r\n      :children\r\n      [[heading-box]\r\n       [oz/vega-lite (charting/backtest-chart\r\n                       (take-last days (get-in dates [(line :frequency)]))\r\n                       (take-last days (get-in data [:portfolio-value (line :frequency)]))\r\n                       (- standard-box-width-nb 200) (- standard-box-height-nb 300))]]]]))\r\n\r\n\r\n(defn risk-betas []\r\n  (let [\r\n        data @(rf/subscribe [:portfolio-review/marginal-beta-chart-data])\r\n        portfolio @(rf/subscribe [:portfolio-review/portfolio])\r\n        idx (first (remove #(= portfolio %) (map :performance data)))\r\n        sorted-data data\r\n        groups (distinct (mapv :group data))\r\n        new-data (mapv #(assoc %1 :order (.indexOf groups (:group %1))) sorted-data)\r\n        ]\r\n    ;(println data sort-order sorted-data)\r\n    [box :class \"subbody rightelement\" :width standard-box-width :height standard-box-height\r\n     :child\r\n     [v-box :gap \"40px\" :class \"element\" :width \"100%\" :height \"100%\"\r\n      :children [[heading-box] [oz/vega-lite (stacked-vertical-bars new-data \"Beta contribution\")]]]]))\r\n\r\n(defn risk-beta-over-time [])\r\n\r\n\r\n(defn risk-weights []\r\n  (let [g (second (get-in pages [@current-page :grouping]))\r\n        grouping (case g\r\n                   \"Region\" :jpm-region\r\n                   \"Country\" :qt-risk-country-name\r\n                   \"Sector\" :qt-jpm-sector\r\n                   \"RatingGroup\" :rating-group\r\n                   \"Duration Bucket\" :qt-final-maturity-band)\r\n        data (filter #(= (:portfolio %) @(rf/subscribe [:portfolio-review/portfolio])) @(rf/subscribe [:positions]))\r\n        totals (get-in @(rf/subscribe [:total-positions]) [(keyword @(rf/subscribe [:portfolio-review/portfolio]))])\r\n        grp (group-by grouping data)\r\n        risks [[\"weight\" :weight] [\"mod duration\" :contrib-mdur] [\"duration x spread\" :duration-times-spread-weight] [\"beta\" :contrib-beta-1y-daily]]\r\n        chart-data (into [] (for [[k g] grp r risks] {:group k :performance (first r) :value (* 100 (/ (reduce + (map (second r) g)) ((second r) totals)))}))\r\n        clean-data (case g\r\n                     \"Region\" (remove #(some #{(:group %)} [\"Collateral\" \"Forwards\" \"Equities\"]) chart-data)\r\n                     \"Country\" (let [top-countries (map :group (take-last 8 (sort-by #(Math/abs (:value %)) (filter (fn [x] (= (:performance x) \"weight\")) chart-data))))]\r\n                                 (sort-by :group (filter #(some #{(:group %)} top-countries) chart-data)))\r\n                     \"RatingGroup\" (remove #(some #{(:group %)} [\"08 C\" \"08 CC\" \"08 D\" \"09 NM\"]) chart-data)\r\n                     \"Sector\" (remove #(some #{(:group %)} [\"Collateral\" \"Forwards\" \"Equities\" \"Cash\" \"Corporate\"]) chart-data)\r\n                     chart-data\r\n                     )\r\n        clean-data-sorted (case g\r\n                            \"RatingGroup\" (map #(update % :group subs 3) (sort-by :group (reverse (sort-by :performance clean-data))))\r\n                            \"Duration Bucket\" (sort-by (fn [x] (.indexOf [\"0 - 1 year\" \"1 - 3 years\" \"3 - 5 years\" \"5 - 7 years\" \"7 - 10 years\" \"10 - 20 years\" \"20 years +\"] (:group x))) (reverse (sort-by :performance clean-data)))\r\n                            (sort-by :group (reverse (sort-by :performance clean-data)))\r\n                            )\r\n\r\n\r\n        ]\r\n    ;    (println clean-data)\r\n    [box :class \"subbody rightelement\" :width standard-box-width :height standard-box-height\r\n     :child\r\n     [v-box :gap \"40px\" :class \"element\" :width \"100%\" :height \"100%\"\r\n      :children [[heading-box] [oz/vega-lite (grouped-horizontal-bars clean-data-sorted \"Share of total risk\")]]]]))\r\n\r\n(defn risk-deltas []\r\n  (let [g (second (get-in pages [@current-page :grouping]))\r\n        grouping (case g\r\n                   \"Region\" :jpm-region\r\n                   \"Country\" :qt-risk-country-name\r\n                   \"Sector\" :qt-jpm-sector\r\n                   \"RatingGroup\" :rating-group\r\n                   \"Duration Bucket\" :qt-final-maturity-band)\r\n        data (filter #(= (:portfolio %) @(rf/subscribe [:portfolio-review/portfolio])) @(rf/subscribe [:positions]))\r\n        totals (get-in @(rf/subscribe [:total-positions]) [(keyword @(rf/subscribe [:portfolio-review/portfolio]))])\r\n        grp (group-by grouping data)\r\n        risks [[\"weight\" :weight-delta] [\"mod duration\" :mdur-delta] ]\r\n        chart-data (into [] (for [[k g] grp r risks] {:group k :performance (first r) :value (* (if (= (first r) \"weight\") 100. 1.) (reduce + (map (second r) g)))}))\r\n        clean-data (case g\r\n                     \"Region\" (remove #(some #{(:group %)} [\"Collateral\" \"Forwards\" \"Equities\"]) chart-data)\r\n                     \"Country\" (let [top-countries (map :group (take-last 8 (sort-by #(Math/abs (:value %)) (filter (fn [x] (= (:performance x) \"weight\")) chart-data))))]\r\n                                 (sort-by :group (filter #(some #{(:group %)} top-countries) chart-data)))\r\n                     \"RatingGroup\" (remove #(some #{(:group %)} [\"08 C\" \"08 CC\" \"08 D\" \"09 NM\"]) chart-data)\r\n                     \"Sector\" (remove #(some #{(:group %)} [\"Collateral\" \"Forwards\" \"Equities\" \"Cash\" \"Corporate\"]) chart-data)\r\n                     chart-data\r\n                     )\r\n        clean-data-sorted (case g\r\n                            \"RatingGroup\" (map #(update % :group subs 3) (sort-by :group (reverse (sort-by :performance clean-data))))\r\n                            \"Duration Bucket\" (sort-by (fn [x] (.indexOf [\"0 - 1 year\" \"1 - 3 years\" \"3 - 5 years\" \"5 - 7 years\" \"7 - 10 years\" \"10 - 20 years\" \"20 years +\"] (:group x))) (reverse (sort-by :performance clean-data)))\r\n                            (sort-by :group (reverse (sort-by :performance clean-data)))\r\n                            )\r\n        ]\r\n    ;(println clean-data)\r\n    [box :class \"subbody rightelement\" :width standard-box-width :height standard-box-height\r\n     :child\r\n     [v-box :gap \"40px\" :class \"element\" :width \"100%\" :height \"100%\"\r\n      :children [[heading-box]\r\n                 [h-box :gap \"20px\"\r\n                  :children [[oz/vega-lite (simple-horizontal-bars (filter #(= (:performance %) \"weight\") clean-data-sorted) \"Weight vs index\" \".0f\" 1.5)]\r\n                             [oz/vega-lite (simple-horizontal-bars (filter #(= (:performance %) \"mod duration\") clean-data-sorted) \"Duration vs index\" \".1f\" 2.0)]]\r\n                  ]\r\n                 ]]]))\r\n\r\n\r\n(defn risk []\r\n  (cond\r\n    (clojure.string/includes? (get-in pages [@current-page :title]) \"weights\")    [risk-weights]\r\n    (clojure.string/includes? (get-in pages [@current-page :title]) \"beta\")       [risk-betas]\r\n    (clojure.string/includes? (get-in pages [@current-page :title]) \"deviation\")  [risk-deltas]\r\n    :else [p \"no data\"]))\r\n\r\n\r\n(defn active-home []\r\n  (let [active-tab @(rf/subscribe [:portfolio-review/active-tab])]\r\n    (.scrollTo js/window 0 0)                             ;on view change we go back to top\r\n    (case active-tab\r\n      :summary                       [summary-text]\r\n      :contribution                  [contribution-or-alpha-chart @(rf/subscribe [:portfolio-review/contribution-chart-data])]\r\n      :alpha                         [contribution-or-alpha-chart @(rf/subscribe [:portfolio-review/alpha-chart-data])] ;(sort-by :group (reverse (sort-by :performance @(rf/subscribe [:portfolio-review/alpha-chart-data]))))\r\n      :top-bottom                    [top-contributors]\r\n      :jensen                        [contribution-or-alpha-chart @(rf/subscribe [:portfolio-review/jensen-chart-data])]\r\n      :backtest-history              [backtest-history]\r\n      :risk                          [risk]\r\n      [:div.output \"nothing to display\"])))\r\n\r\n(defn portfolio-change [portfolio]\r\n  (rf/dispatch [:portfolio-review/portfolio portfolio])\r\n  (rf/dispatch [:get-portfolio-review-summary-data portfolio]))\r\n\r\n(defn nav []\r\n  (let [active-tab @(rf/subscribe [:portfolio-review/active-tab])\r\n        portfolio-map (into [] (for [p @(rf/subscribe [:portfolios])] {:id p :label p}))\r\n        portfolio @(rf/subscribe [:portfolio-review/portfolio])]\r\n    [h-box\r\n     :children [\r\n                [v-box\r\n                 :gap \"20px\"\r\n                 :class \"leftnavbar\"\r\n                 :children (into [\r\n                                  [h-box :children [[box    :child [button :style {:width \"90px\"} :class \"btn btn-primary btn-block\" :label \"Previous\" :on-click previous-page!]]\r\n                                                    [box :size \"1\" :align :center  :child [label :label (str (inc @current-page) \"/\" maximum-page) :style {:width \"70px\" :color \"white\" :text-align \"center\"}]]\r\n                                                    [box    :child [button :style {:width \"90px\"} :class \"btn btn-primary btn-block\" :label \"Next\"  :on-click next-page!]]]]\r\n                                  [line :color \"#CA3E47\" :class \"separatornavline\"]\r\n                                  [single-dropdown :width \"100%\" :model portfolio :choices portfolio-map :on-change portfolio-change]\r\n                                  [line :color \"#CA3E47\" :class \"separatornavline\"]]\r\n                                 (for [item portfolio-review-navigation]\r\n                                   [button\r\n                                    :class (str \"btn btn-primary btn-block\" (if (and (= active-tab (:code item))) \" active\"))\r\n                                    :label (:name item)\r\n                                    :on-click #(go-to-block! (:code item)) ;#(rf/dispatch [:portfolio-review/active-tab (:code item)])\r\n\r\n                                    ]))]\r\n                ]]))\r\n\r\n(defn view []\r\n  [h-box :gap \"10px\"\r\n   ;:style {:overflow \"hidden\"}\r\n   :padding \"0px\"\r\n   :children [[nav] [active-home]]])\r\n"]}