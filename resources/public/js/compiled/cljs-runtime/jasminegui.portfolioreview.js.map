{"version":3,"sources":["jasminegui/portfolioreview.cljs"],"mappings":"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","names":["re_frame.core.reg_event_fx.cljs$core$IFn$_invoke$arity$2","p__58113","p__58114","map__58125","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","vec__58127","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","db","_","portfolio","jasminegui.static/server-address","p__58138","p__58139","map__58140","vec__58144","period","grouping","p__58152","p__58153","map__58154","vec__58155","p__58166","p__58167","map__58170","vec__58171","p__58187","p__58188","map__58190","vec__58191","p__58202","p__58203","map__58207","vec__58208","countries","p__58216","p__58217","map__58222","vec__58227","jasminegui.portfolioreview/standard-box-width","jasminegui.portfolioreview/standard-box-height","jasminegui.portfolioreview/standard-box-width-nb","jasminegui.portfolioreview/standard-box-height-nb","jasminegui.portfolioreview/performance-colors","jasminegui.portfolioreview/chart-text-size","jasminegui.portfolioreview/grouped-horizontal-bars","data","title","individual-height","cljs.core/count","cljs.core.distinct.cljs$core$IFn$_invoke$arity$1","cljs.core.map.cljs$core$IFn$_invoke$arity$2","perf-sort","cljs.core/reverse","cljs.core.mapv.cljs$core$IFn$_invoke$arity$2","colors","cljs.core.take.cljs$core$IFn$_invoke$arity$2","scl","x__4214__auto__","y__4215__auto__","cljs.core/max","cljs.core/min","jasminegui.portfolioreview/simple-horizontal-bars","fmt","dc","cljs.core/first","jasminegui.portfolioreview/stacked-vertical-bars","groups","new-data","p1__58257#","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","jasminegui.portfolioreview/area-chart","nb-countries","ordered-countries","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","p1__58270#","cljs.core.remove.cljs$core$IFn$_invoke$arity$2","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core.sort_by.cljs$core$IFn$_invoke$arity$2","cljs.core/take-last","p1__58271#","jasminegui.portfolioreview/grouped-vertical-bars","jasminegui.portfolioreview/vertical-waterfall","line","p1__58296#","cljs.core.update.cljs$core$IFn$_invoke$arity$3","G__58307","Math/round","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","cljs.core/second","cljs.core.nth.cljs$core$IFn$_invoke$arity$2","jasminegui.portfolioreview/risk-breakdowns","jasminegui.portfolioreview/contribution-pages","cljs.core.into.cljs$core$IFn$_invoke$arity$2","iter__4529__auto__","s__58321","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","xs__6292__auto__","iterys__4525__auto__","s__58323","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","b__58325","cljs.core/chunk-buffer","i__58324","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__58322","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","fs__4526__auto__","iter__58320","p","k","jasminegui.portfolioreview/alpha-pages","s__58342","b__58344","i__58343","iter__58341","jasminegui.portfolioreview/top-bottom-pages","s__58359","s__58361","b__58363","i__58362","iter__58360","iter__58358","jasminegui.portfolioreview/jensen-pages","s__58377","b__58379","i__58378","iter__58376","jasminegui.portfolioreview/end-page","jasminegui.portfolioreview/risk-pages","s__58382","s__58384","b__58386","i__58385","iter__58383","iter__58381","jasminegui.portfolioreview/pages","cljs.core.map_indexed.cljs$core$IFn$_invoke$arity$2","cljs.core/vector","cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic","jasminegui.portfolioreview/portfolio-review-navigation","cljs.core/keys","p1__58404#","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","p1__58405#","p1__58406#","p1__58407#","p1__58408#","p1__58409#","jasminegui.portfolioreview/maximum-page","jasminegui.portfolioreview/current-page","reagent.core.atom.cljs$core$IFn$_invoke$arity$1","jasminegui.portfolioreview/go-to-page","n","cljs.core/reset!","req","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","G__58413","re-frame.core/dispatch","cljs.core.replace.cljs$core$IFn$_invoke$arity$2","G__58414","jasminegui.portfolioreview/next-page!","cljs.core/deref","G__58416","re-frame.core/subscribe","jasminegui.portfolioreview/previous-page!","G__58421","jasminegui.portfolioreview/go-to-block!","x","p1__58423#","G__58425","jasminegui.portfolioreview/heading-box","re-com.core/h-box","re-com.core/title","jasminegui.portfolioreview/portfolio-review-box-template","children","re-com.core/box","re-com.core/v-box","jasminegui.portfolioreview/end","jasminegui.portfolioreview/summary-text","G__58439","G__58440","positions","p1__58433#","G__58441","f","G__58442","G__58443","goog.string/format","g","h","cljs.core.reduce.cljs$core$IFn$_invoke$arity$2","cljs.core/+","re-com.core/gap","re-com.core/p","G__58456","G__58457","jasminegui.portfolioreview/ytd-performance","G__58466","monthmap","total-alpha","G__58468","gamma","p1__58459#","oz.core/vega-lite","cljs.core.juxt.cljs$core$IFn$_invoke$arity$2","p1__58460#","fexpr__58476","G__58478","p1__58462#","p1__58463#","G__58483","cljs.core.subs.cljs$core$IFn$_invoke$arity$3","p1__58464#","jasminegui.portfolioreview/contribution-or-alpha-chart","G__58484","jasminegui.portfolioreview/historical-beta","G__58488","jasminegui.portfolioreview/top-contributors","display","p1__58489#","or__4126__auto__","cljs.core/some","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","G__58495","js/module$node_modules$react_table$lib$index.default","jasminegui.tables/case-insensitive-filter","jasminegui.tables/attribution-table-columns","jasminegui.portfolioreview/backtest-history","G__58499","G__58500","G__58501","dates","G__58504","G__58510","chart-period","G__58511","p1__58497#","jasminegui.static/var-charts-choice-map","days","G__58512","cljs.core/Keyword","js/Error","G__58513","G__58514","G__58516","G__58517","jasminegui.charting/backtest-chart","G__58518","G__58519","jasminegui.portfolioreview/risk-betas","G__58526","p1__58521#","jasminegui.portfolioreview/risk-weights","G__58538","p1__58531#","G__58542","G__58543","totals","G__58545","cljs.core.keyword.cljs$core$IFn$_invoke$arity$1","G__58547","grp","cljs.core/group-by","risks","chart-data","s__58549","vec__58557","s__58551","b__58553","i__58552","iter__58550","iter__58548","r","fexpr__58562","fexpr__58566","clean-data","G__58568","p1__58532#","top-countries","p1__58533#","G__58573","Math/abs","p1__58534#","p1__58535#","p1__58536#","clean-data-sorted","G__58574","p1__58537#","cljs.core.update.cljs$core$IFn$_invoke$arity$4","cljs.core/subs","jasminegui.portfolioreview/risk-deltas","G__58594","p1__58580#","G__58597","G__58599","G__58600","G__58602","s__58606","vec__58612","s__58608","b__58610","i__58609","iter__58607","iter__58605","G__58623","p1__58583#","p1__58584#","G__58626","p1__58586#","p1__58587#","p1__58588#","G__58631","p1__58589#","p1__58590#","p1__58591#","jasminegui.portfolioreview/risk","clojure.string/includes?","jasminegui.portfolioreview/active-home","active-tab","G__58638","js/window","G__58640","G__58641","G__58642","G__58643","jasminegui.portfolioreview/portfolio-change","G__58647","G__58648","jasminegui.portfolioreview/nav","G__58656","portfolio-map","s__58659","b__58661","i__58660","iter__58658","G__58666","G__58667","re-com.core/button","re-com.core/label","re-com.core/line","re-com.core/single-dropdown","s__58673","b__58675","i__58674","iter__58672","item","jasminegui.portfolioreview/view","cljs.core/chunk-first"],"sourcesContent":["(ns jasminegui.portfolioreview\r\n\r\n  (:require\r\n    [re-frame.core :as rf]\r\n    [reagent.core :as r]\r\n    [goog.string :as gstring]\r\n    [goog.string.format]\r\n    [re-com.core :refer [p p-span h-box v-box box gap line scroller border label title button close-button checkbox hyperlink-href slider horizontal-bar-tabs radio-button info-button\r\n                         single-dropdown hyperlink modal-panel alert-box throbber input-password selection-list md-circle-icon-button\r\n                         input-text input-textarea popover-anchor-wrapper popover-content-wrapper popover-tooltip datepicker-dropdown] :refer-macros [handler-fn]]\r\n    [re-com.box :refer [h-box-args-desc v-box-args-desc box-args-desc gap-args-desc line-args-desc scroller-args-desc border-args-desc flex-child-style]]\r\n    [re-com.util :refer [px]]\r\n    [\"react-table\" :as rt :default ReactTable]\r\n    [jasminegui.mount :as mount]\r\n    [jasminegui.static :as static]\r\n    [jasminegui.tools :as tools]\r\n    [jasminegui.tables :as tables]\r\n\r\n    [re-com.validate :refer [string-or-hiccup? alert-type? vector-of-maps?]]\r\n    [oz.core :as oz]\r\n    [jasminegui.charting :as charting])\r\n  (:import (goog.i18n NumberFormat)\r\n           (goog.i18n.NumberFormat Format))\r\n  )\r\n\r\n;;;;;;;;;;;;\r\n;; EVENTS ;;\r\n;;;;;;;;;;;;\r\n\r\n(rf/reg-event-fx\r\n  :get-portfolio-review-summary-data\r\n  (fn [{:keys [db]} [_ portfolio]]\r\n    {:http-get-dispatch {:url          (str static/server-address \"portfolio-review?query-type=summary&portfolio=\" portfolio)\r\n                         :dispatch-key [:portfolio-review/summary-data]\r\n                         :kwk          true}}))\r\n\r\n(rf/reg-event-fx\r\n  :get-portfolio-review-contribution-chart-data\r\n  (fn [{:keys [db]} [_ portfolio period grouping]]\r\n    {:http-get-dispatch {:url          (str static/server-address \"portfolio-review?query-type=contribution&portfolio=\" portfolio \"&period=\" period \"&grouping=\" grouping)\r\n                         :dispatch-key [:portfolio-review/contribution-chart-data]\r\n                         :kwk          true}}))\r\n\r\n(rf/reg-event-fx\r\n  :get-portfolio-review-alpha-chart-data\r\n  (fn [{:keys [db]} [_ portfolio grouping]]\r\n    {:http-get-dispatch {:url          (str static/server-address \"portfolio-review?query-type=alpha&portfolio=\" portfolio \"&grouping=\" grouping)\r\n                         :dispatch-key [:portfolio-review/alpha-chart-data]\r\n                         :kwk          true}}))\r\n\r\n(rf/reg-event-fx\r\n  :get-portfolio-review-jensen-chart-data\r\n  (fn [{:keys [db]} [_ portfolio grouping]]\r\n    {:http-get-dispatch {:url          (str static/server-address \"portfolio-review?query-type=jensen&portfolio=\" portfolio \"&grouping=\" grouping)\r\n                         :dispatch-key [:portfolio-review/jensen-chart-data]\r\n                         :kwk          true}}))\r\n\r\n(rf/reg-event-fx\r\n  :get-portfolio-review-marginal-beta-chart-data\r\n  (fn [{:keys [db]} [_ portfolio grouping]]\r\n    {:http-get-dispatch {:url          (str static/server-address \"portfolio-review?query-type=marginal-beta&portfolio=\" portfolio \"&grouping=\" grouping)\r\n                         :dispatch-key [:portfolio-review/marginal-beta-chart-data]\r\n                         :kwk          true}}))\r\n\r\n(rf/reg-event-fx\r\n  :get-portfolio-review-historical-beta-chart-data\r\n  (fn [{:keys [db]} [_ portfolio countries]]\r\n    {:http-get-dispatch {:url          (str static/server-address \"portfolio-review?query-type=historical-beta&portfolio=\" portfolio \"&countries=\" countries)\r\n                         :dispatch-key [:portfolio-review/historical-beta-chart-data]\r\n                         :kwk          true}}))\r\n\r\n(rf/reg-event-fx\r\n  :get-portfolio-review-historical-performance-chart-data\r\n  (fn [{:keys [db]} [_ portfolio]]\r\n    {:http-get-dispatch {:url          (str static/server-address \"attribution?query-type=history&portfolio=\" portfolio)\r\n                         :dispatch-key [:portfolio-review/historical-performance-chart-data]\r\n                         :kwk          true}}))\r\n\r\n(def standard-box-width \"1600px\")\r\n(def standard-box-height \"1024px\")\r\n(def standard-box-width-nb 1600)\r\n(def standard-box-height-nb 1024)\r\n\r\n\r\n\r\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\r\n;;;VEGA-LITE CHART DEFINITIONS;;;\r\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\r\n\r\n(def performance-colors [\"#134848\" \"#009D80\" \"#FDAA94\" \"#74908D\" \"#591739\" \"#0D3232\" \"#026E62\" \"#C0746D\" \"#54666D\" \"#3C0E2E\"])\r\n(def chart-text-size 16)\r\n\r\n(defn grouped-horizontal-bars [data title]\r\n  \"The data is of the form [{:group TXT :performance txt :value 0}]\"\r\n  (let [individual-height (if (> (count (distinct (map :group data))) 10) 20 60) ; (/ (+ standard-box-height-nb 400) (* 5 (count (distinct (map :group data)))))\r\n        perf-sort (reverse (distinct (mapv :performance data)))\r\n        colors (reverse (take (count (distinct (mapv :performance data))) performance-colors))\r\n        scl (/ (max (apply max (map :value data)) (- (apply min (map :value data)))) 40)]\r\n    {:$schema   \"https://vega.github.io/schema/vega-lite/v4.json\",\r\n     :data      {:values data},\r\n     :transform [{:calculate (str \"datum.value >= 0 ? datum.value + \" scl \" : datum.value - \" scl), :as \"valuetxt\"}],\r\n     :facet     {:row {:field \"group\", :type \"ordinal\", :sort (mapv :group data), :title \"\", :header {:labelAngle 0, :labelFontSize chart-text-size, :labelAlign \"left\"}}},\r\n     :spec      {:layer\r\n                 [{:mark   \"bar\",\r\n                   :width  (- standard-box-width-nb 400),\r\n                   :height individual-height\r\n                   :encoding {:x     {:aggregate \"sum\", :field \"value\", :type \"quantitative\",\r\n                                      :axis {:title title, :titleFontSize chart-text-size, :titleFontWeight \"normal\" :labelFontSize chart-text-size, :gridColor {:condition {:test \"datum.value === 0\", :value \"black\"}}}},\r\n                              :y     {:field \"performance\", :type \"nominal\", :sort perf-sort, :axis {:title \"\", :labels false}},\r\n                              :color {:field \"performance\", :type \"nominal\", :scale {:range colors}, :legend {:title \"\", :labelFontSize chart-text-size}}}}\r\n                  {:mark   {:type \"text\", :fontSize chart-text-size},\r\n                   :width  (- standard-box-width-nb 400),\r\n                   :height individual-height\r\n                   :encoding {:x     {:aggregate \"sum\", :field \"valuetxt\", :type \"quantitative\", :axis {:title nil}},\r\n                              :y     {:field \"performance\", :type \"nominal\", :sort perf-sort, :axis {:title \"\", :labels false}},\r\n                              :color {:field \"performance\", :type \"nominal\", :scale {:range colors}, :legend nil},\r\n                              :text  {:field \"value\" :format \".0f\"}}}]},\r\n     :config    {:view {:stroke \"transparent\"}, :axis {:domainWidth 1}}}))\r\n\r\n(defn simple-horizontal-bars [data title fmt dc]\r\n  \"The data is of the form [{:group TXT :value 0}]\"\r\n  (let [individual-height (if (> (count (distinct (map :group data))) 10) 20 60) ; (/ (+ standard-box-height-nb 400) (* 5 (count (distinct (map :group data)))))\r\n        scl (* dc (/ (max (apply max (map :value data)) (- (apply min (map :value data)))) 40))]\r\n    {:$schema   \"https://vega.github.io/schema/vega-lite/v4.json\",\r\n     :data      {:values data},\r\n     :transform [{:calculate (str \"datum.value >= 0 ? datum.value + \" scl \" : datum.value - \" scl), :as \"valuetxt\"}],\r\n     :facet     {:row {:field \"group\", :type \"ordinal\", :sort (mapv :group data), :title \"\", :header {:labelAngle 0, :labelFontSize chart-text-size, :labelAlign \"left\"}}},\r\n     :spec      {:layer\r\n                 [{:mark     \"bar\",\r\n                   :width    (- (/ standard-box-width-nb 2) 250),\r\n                   :height   individual-height\r\n                   :encoding {:x     {:aggregate \"sum\", :field \"value\", :type \"quantitative\",\r\n                                      :axis      {:title title, :titleFontSize chart-text-size, :titleFontWeight \"normal\" :labelFontSize chart-text-size, :gridColor {:condition {:test \"datum.value === 0\", :value \"black\"}}}},\r\n                              :y     {:field \"performance\", :type \"nominal\", :axis {:title \"\", :labels false}},\r\n                              :color {:field \"performance\", :type \"nominal\", :scale {:range [(first performance-colors)]}, :legend nil}}}\r\n                  {:mark     {:type \"text\", :fontSize chart-text-size},\r\n                   :width    (- (/ standard-box-width-nb 2) 250),\r\n                   :height   individual-height\r\n                   :encoding {:x     {:aggregate \"sum\", :field \"valuetxt\", :type \"quantitative\", :axis {:title nil}},\r\n                              :y     {:field \"performance\", :type \"nominal\", :axis {:title \"\", :labels false}},\r\n                              :color {:field \"performance\", :type \"nominal\", :scale {:range [(first performance-colors)]}, :legend nil},\r\n                              :text  {:field \"value\" :format fmt}}}]}\r\n     :config    {:view {:stroke \"transparent\"}, :axis {:domainWidth 1}}})\r\n    )\r\n\r\n(defn stacked-vertical-bars [data title]\r\n  (let [groups (distinct (mapv :group data))\r\n        colors (take (count (distinct (mapv :group data))) performance-colors)\r\n        new-data (mapv #(assoc %1 :order (.indexOf groups (:group %1))) data)]\r\n    {:$schema \"https://vega.github.io/schema/vega-lite/v4.json\",\r\n     :data    {:values new-data},\r\n     :width   (- standard-box-width-nb 800),\r\n     :height  (- standard-box-height-nb 400),\r\n     :layer\r\n              [{:mark \"bar\",\r\n                :scale {:padding-left 60}\r\n                :encoding\r\n                      {:x     {:field \"performance\", :type \"nominal\",\r\n                               :axis {:title nil :labelFontSize chart-text-size :labelAngle 0}\r\n                               :sort (distinct (mapv :performance data))\r\n                               :scale {:paddingInner 0.5}},\r\n                       :y     {:field \"value\", :type \"quantitative\", :axis {:title nil :labelFontSize chart-text-size}},\r\n                       :order {:field \"order\", :type \"quantitative\"}\r\n                       :color\r\n                              {:field \"group\", :type \"nominal\", :scale {:domain (distinct (map :group new-data))\r\n                                                                        :range colors} :legend nil}}}\r\n               {:mark {:type \"text\" :fontSize chart-text-size :color \"white\"},\r\n                :encoding\r\n                      {:x    {:field \"performance\", :type \"nominal\", :axis {:title nil}, :sort (distinct (mapv :performance data))},\r\n                       :y    {:field \"mid\", :type \"quantitative\"},\r\n                       :text {:field \"group\", :type \"nominal\"}}}]}))\r\n\r\n(defn area-chart [data]\r\n  (let [nb-countries (count (distinct (map :country data)))\r\n        ordered-countries (reverse (conj (remove #(= % \"Rest\") (map :country (sort-by :value (take-last nb-countries data)))) \"Rest\"))\r\n        colors (take (count (distinct (mapv :country data))) performance-colors)\r\n        new-data (mapv #(assoc %1 :order (.indexOf ordered-countries (:country %1))) data)]\r\n    {:$schema \"https://vega.github.io/schema/vega-lite/v4.json\",\r\n     :data    {:values new-data :format {:parse {:date \"date:'%Y%m%d'\"}}},\r\n     :width   (- standard-box-width-nb 400),\r\n     :height  (- standard-box-height-nb 400),\r\n     :layer\r\n              [{:mark  \"area\",\r\n                :scale {:padding-left 60}\r\n                :encoding\r\n                       {:x     {:field \"date\", :type  \"temporal\",\r\n                                :axis  {:title nil :labelFontSize chart-text-size :labelAngle 0}},\r\n                        :y     {:field \"value\", :type \"quantitative\", :axis {:title nil :labelFontSize chart-text-size}},\r\n                        :order {:field \"order\", :type \"quantitative\"}\r\n                        :color {:field  \"country\", :type \"nominal\", :scale {:domain (reverse ordered-countries) :range (reverse colors)}\r\n                                :legend {:title nil :labelFontSize chart-text-size}}}}]}))\r\n\r\n(defn grouped-vertical-bars [data title]\r\n  \"The data is of the form [{:date dt :group TXT :value 0}]\"\r\n  (let [individual-height (if (> (count (distinct (map :group data))) 10) 20 60) ; (/ (+ standard-box-height-nb 400) (* 5 (count (distinct (map :group data)))))\r\n        colors (take (count (distinct (mapv :group data))) performance-colors)\r\n        scl (/ (max (apply max (map :value data)) (- (apply min (map :value data)))) 40)]\r\n    ;(println data)\r\n    {:$schema   \"https://vega.github.io/schema/vega-lite/v4.json\",\r\n     :data      {:values data :format {:parse {:date \"date:'%Y%m%d'\"}}},\r\n     :title     nil\r\n     :transform [{:calculate (str \"datum.value >= 0 ? datum.value + \" scl \" : datum.value - \" scl), :as \"valuetxt\"}],\r\n     :facet     {:column {:field \"date\", :type \"temporal\", :sort (mapv :group data), :title \"\", :header {:labelAngle 0, :labelFontSize chart-text-size, :labelAlign \"center\" :format \"%b\"}}},\r\n     :spec      {:layer\r\n                 [{:mark     \"bar\",\r\n                   :width    individual-height,\r\n                   :height   (- standard-box-height-nb 400)\r\n                   :encoding {:x     {:field \"group\", :type \"nominal\",\r\n                                      :sort  (distinct (mapv :group data))\r\n                                      :axis  {:title nil, :titleFontSize chart-text-size, :titleFontWeight \"normal\" :labels false :labelFontSize chart-text-size, :gridColor {:condition {:test \"datum.value === 0\", :value \"black\"}}}},\r\n                              :y     {:field \"value\", :type \"quantitative\", :axis {:title \"Contribution (%)\", :titleFontSize chart-text-size :labels true :labelFontSize chart-text-size}},\r\n                              :color {:field \"group\", :type \"nominal\", :scale {:range (reverse colors)}, :legend {:title \"\", :labelFontSize chart-text-size}}}}\r\n                  ;{:mark   {:type \"text\", :fontSize text-size},\r\n                  ; :width  individual-height,\r\n                  ; :height (- standard-box-height-nb 400)\r\n                  ; :encoding {:x     {:aggregate \"sum\", :field \"group\", :type \"quantitative\", :axis {:title nil}},\r\n                  ;            :y     {:field \"value\", :type \"quantitative\", :sort perf-sort, :axis {:title \"\", :labels false}},\r\n                  ;            :color {:field \"group\", :type \"nominal\", :scale {:range colors}, :legend nil},\r\n                  ;            :text  {:field \"value\" :format \".0f\"}}}\r\n\r\n                  ]},\r\n     :config    {:view {:stroke \"transparent\"}, :axis {:domainWidth 1}}}))\r\n\r\n(defn vertical-waterfall [data title]\r\n  \"The data is of the form [{:date dt :group TXT :value 0}]\"\r\n  (let [individual-height (if (> (count (distinct (map :group data))) 10) 20 60) ; (/ (+ standard-box-height-nb 400) (* 5 (count (distinct (map :group data)))))\r\n        new-data (map (fn [line] (update line :value #(Math/round (* 100. %))))\r\n                      (concat ;[{:date \"Begin\", :value 0}]\r\n                        data [{:date \"YTD\", :value 0}]))]\r\n    {:$schema\r\n             \"https://vega.github.io/schema/vega-lite/v4.json\",\r\n     :data {:values new-data},\r\n     :width 600,\r\n     :height (- standard-box-height-nb 400),\r\n     :title nil\r\n     :transform                                             ;\r\n             [{:window [{:op \"sum\", :field \"value\", :as \"sum\"}]}\r\n              {:window [{:op \"lead\", :field \"date\", :as \"lead\"}]}\r\n              {:calculate \"datum.lead === null ? datum.date : datum.lead\", :as \"lead\"}\r\n              {:calculate \"datum.date === 'YTD' ? 0 : datum.sum - datum.value\", :as \"previous_sum\"}\r\n              {:calculate \"datum.date === 'YTD' ? datum.sum : datum.value\", :as \"value\"}\r\n              {:calculate \"(datum.date !== 'Begin' && datum.date !== 'YTD' && datum.value > 0 ? '+' : '') + datum.value\", :as \"text_amount\"}\r\n              {:calculate \"(datum.sum + datum.previous_sum) / 2\", :as \"center\"}\r\n              {:calculate \"datum.sum < datum.previous_sum ? datum.sum : ''\", :as \"sum_dec\"}\r\n              {:calculate \"datum.sum > datum.previous_sum ? datum.sum : ''\", :as \"sum_inc\"}],\r\n     :encoding\r\n             {:x\r\n              {:field \"date\", :type \"ordinal\", :sort nil, :axis {:labelAngle 0, :title nil :labelFontSize chart-text-size}}},\r\n     :layer\r\n             [{:mark {:type \"bar\", :size 45},\r\n               :encoding\r\n                     {:y {:field \"previous_sum\", :type \"quantitative\", :title \"Effect (bps)\"\r\n                           :axis {:labelFontSize chart-text-size :titleFontSize chart-text-size} },\r\n                      :y2 {:field \"sum\"},\r\n                      :color\r\n                          {:condition\r\n                                  [{:test \"datum.date === 'Begin' || datum.date === 'YTD'\", :value (second performance-colors)}\r\n                                   {:test \"datum.sum < datum.previous_sum\", :value (nth performance-colors 4)}],\r\n                           :value (first performance-colors)}}}\r\n              {:mark\r\n               {:type \"rule\", :color \"#404040\", :opacity 1, :strokeWidth 2, :xOffset -22.5, :x2Offset 22.5},\r\n               :encoding {:x2 {:field \"lead\"}, :y {:field \"sum\", :type \"quantitative\"}}}\r\n              {:mark\r\n               {:type \"text\", :dy -4, :baseline \"bottom\"},\r\n               :encoding {:y {:field \"sum_inc\", :type \"quantitative\"}, :text {:field \"sum_inc\", :type \"nominal\" }}}\r\n              {:mark\r\n               {:type \"text\", :dy 4, :baseline \"top\"},\r\n               :encoding {:y {:field \"sum_dec\", :type \"quantitative\"}, :text {:field \"sum_dec\", :type \"nominal\" }}}\r\n              {:mark\r\n               {:type \"text\", :fontWeight \"bold\", :baseline \"middle\"},\r\n               :encoding\r\n               {:y {:field \"center\", :type \"quantitative\"}, :text {:field \"text_amount\", :type \"nominal\"  },\r\n                :color\r\n                   {:condition [{:test \"datum.date === 'Begin' || datum.date === 'YTD'\", :value \"white\"}],\r\n                    :value \"white\"}}}],\r\n     :config\r\n             {:text {:fontWeight \"bold\", :color \"#404040\"}}}))\r\n\r\n;;;;;;;;;;;;;;;;\r\n;;;NAVIGATION;;;\r\n;;;;;;;;;;;;;;;;\r\n\r\n(def risk-breakdowns\r\n  [[\"Region\" \"Region\"]\r\n   [\"Country\" \"Country\"]\r\n   [\"Sector\" \"Sector\"]\r\n   [\"Rating\" \"RatingGroup\"]\r\n   [\"Duration\" \"Duration Bucket\"]])\r\n\r\n(def contribution-pages\r\n  (into [{:title \"Year to date monthly performance\" :nav-request :ytd-performance :data-request [:get-portfolio-review-historical-performance-chart-data \"portfolio\"]}]\r\n        (for [p [[\"MTD\" \"mtd\"] [\"YTD\" \"ytd\"]] k risk-breakdowns]\r\n          {:title        (str (first p) \" Contribution by \" (first k))\r\n           :nav-request  :contribution\r\n           :data-request [:get-portfolio-review-contribution-chart-data \"portfolio\" (second p) (second k)]})))\r\n\r\n(def alpha-pages\r\n  (into []\r\n        (for [k risk-breakdowns]\r\n          {:title        (str \"Alpha by \" (first k))\r\n           :nav-request  :alpha\r\n           :data-request [:get-portfolio-review-alpha-chart-data \"portfolio\" (second k)]})))\r\n\r\n(def top-bottom-pages\r\n  (into []\r\n        (for [p [[\"MTD\" \"mtd\"] [\"YTD\" \"ytd\"]]\r\n              k [[\"top\" \"top\"] [\"bottom\" \"bottom\"]]]\r\n          {:title        (str (first p) \" \" (first k) \" contributors\")\r\n           :nav-request  :top-bottom\r\n           :data-request [:get-single-attribution \"portfolio\" (second p)]})))\r\n\r\n(def jensen-pages\r\n  (into []\r\n        (for [k risk-breakdowns]\r\n          {:title        (str \"Jensen by \" (first k))\r\n           :nav-request  :jensen\r\n           :data-request [:get-portfolio-review-jensen-chart-data \"portfolio\" (second k)]})))\r\n\r\n(def end-page {:title \"The End\" :nav-request :end :data-request nil})\r\n\r\n(def risk-pages\r\n  (conj\r\n    (into [{:title \"Beta evolution over time\" :nav-request :risk :data-request [:get-portfolio-review-historical-beta-chart-data \"portfolio\" [\"BR\", \"CN\", \"AR\", \"TR\", \"MX\"]]}]\r\n          (for [k risk-breakdowns p [\"weights\" \"beta contribution\" \"deviation from index\"]]\r\n            {:title        (str \"Risk by \" (first k) \": \" p)\r\n             :nav-request  :risk\r\n             :grouping     k\r\n             :subgrouping  p\r\n             :data-request (if (= p \"beta contribution\") [:get-portfolio-review-marginal-beta-chart-data \"portfolio\" (second k)])}))\r\n    end-page))\r\n\r\n\r\n(def pages (into {} (map-indexed\r\n                      vector\r\n                      (concat\r\n                        [{:title \"Summary\"                      :nav-request :summary         :data-request nil}]\r\n                         contribution-pages\r\n                         alpha-pages\r\n                         top-bottom-pages\r\n                         jensen-pages\r\n                        [{:title \"Three year daily backtest\"   :nav-request :backtest-history  :data-request nil}]\r\n                        risk-pages))))\r\n\r\n(def portfolio-review-navigation\r\n  [{:code :summary          :name \"Summary\"           :page-start 0}\r\n   {:code :contribution     :name \"Contribution\"      :page-start (apply min (keys (filter #(= (:nav-request (second %)) :contribution) pages)))}\r\n   {:code :alpha            :name \"Alpha\"             :page-start (apply min (keys (filter #(= (:nav-request (second %)) :alpha) pages)))}\r\n   {:code :top-bottom       :name \"Top contributors\"  :page-start (apply min (keys (filter #(= (:nav-request (second %)) :top-bottom) pages)))}\r\n   {:code :jensen           :name \"Jensen\"            :page-start (apply min (keys (filter #(= (:nav-request (second %)) :jensen) pages)))}\r\n   {:code :backtest-history :name \"Backtest\"          :page-start (apply min (keys (filter #(= (:nav-request (second %)) :backtest-history) pages)))}\r\n   {:code :risk             :name \"Risk\"              :page-start (apply min (keys (filter #(= (:nav-request (second %)) :risk) pages)))}])\r\n\r\n(def maximum-page (count pages))\r\n(def current-page (r/atom 0))\r\n\r\n(defn go-to-page [n portfolio]\r\n  (reset! current-page n)\r\n  (when-let [req (get-in pages [n :data-request])]\r\n    (rf/dispatch (replace {\"portfolio\" portfolio} req)))\r\n  (rf/dispatch [:portfolio-review/active-tab (get-in pages [n :nav-request])]))\r\n\r\n(defn next-page! []\r\n  (when (< @current-page (dec maximum-page))\r\n    (go-to-page (inc @current-page) @(rf/subscribe [:portfolio-review/portfolio]))))\r\n\r\n(defn previous-page! []\r\n  (when (> @current-page 0)\r\n    (go-to-page (dec @current-page) @(rf/subscribe [:portfolio-review/portfolio]))))\r\n\r\n(defn go-to-block! [x]\r\n  (go-to-page (:page-start (first (filter #(= (:code %) x) portfolio-review-navigation)))\r\n              @(rf/subscribe [:portfolio-review/portfolio])))\r\n\r\n\r\n;;;;;;;;;;;;;;;;;;;;;;;\r\n;;;PAGE CONSTRUCTION;;;\r\n;;;;;;;;;;;;;;;;;;;;;;;\r\n\r\n(defn heading-box []\r\n  [h-box :gap \"20px\" :align :center :children [[:img {:width \"37px\" :height \"64px\" :src \"assets/91-logo-green.png\"}] [title :label (get-in pages [@current-page :title]) :level :level1]]])\r\n\r\n(defn portfolio-review-box-template [children]\r\n  [box :class \"subbody rightelement\" :width standard-box-width :height standard-box-height\r\n   :child [v-box :gap \"40px\" :class \"element\" :width \"100%\" :height \"100%\" :children (concat [[heading-box]] children)]])\r\n\r\n(defn end []\r\n  (portfolio-review-box-template nil))\r\n\r\n(defn summary-text []\r\n  (let [portfolio @(rf/subscribe [:portfolio-review/portfolio])\r\n        data @(rf/subscribe [:portfolio-review/summary-data])\r\n        positions (filter #(= (:portfolio %) portfolio) @(rf/subscribe [:positions]))\r\n        f (fn [x] (gstring/format \"%.0fbps\" (* 100 x)))\r\n        g (fn [x] (gstring/format \"%.2f\" x))\r\n        h (fn [x] (gstring/format \"%.1f\" x))]\r\n    (portfolio-review-box-template [[title :level :level2 :label (str \"MTD, \" portfolio \" returned \" (f (get-in data [:mtd :portfolio])) \" vs \" (f (get-in data [:mtd :index])) \" for the index, \" (f (get-in data [:mtd :alpha])) \" of alpha.\")]\r\n                                    [title :level :level2 :label (str \"YTD, \" portfolio \" returned \" (f (get-in data [:ytd :portfolio])) \" vs \" (f (get-in data [:ytd :index])) \" for the index, \" (f (get-in data [:ytd :alpha])) \" of alpha.\")]\r\n                                    [title :level :level2 :label (str \"The portfolio yield is \" (g (* 100 (reduce + (map :contrib-yield positions)))) \"% vs \" (g (* 100 (reduce + (map :bm-contrib-yield positions)))) \"% for the index.\")]\r\n                                    [title :level :level2 :label (str \"Our duration is \" (h (reduce + (map :contrib-mdur positions))) \" vs \" (h (reduce + (map :bm-contrib-eir-duration positions))) \" for the index.\")]\r\n                                    [title :level :level2 :label (str \"We currently run a beta of \"\r\n                                                                      (g (get-in data [:beta :total]))\r\n                                                                      \"x with top contributors being \"\r\n                                                                      (get-in data [:beta :country-1])\r\n                                                                      \" (\"\r\n                                                                      (g (get-in data [:beta :value-1]))\r\n                                                                      \"x), \"\r\n                                                                      (get-in data [:beta :country-2])\r\n                                                                      \" (\"\r\n                                                                      (g (get-in data [:beta :value-2]))\r\n                                                                      \"x), and \"\r\n                                                                      (get-in data [:beta :country-3])\r\n                                                                      \" (\"\r\n                                                                      (g (get-in data [:beta :value-3]))\r\n                                                                      \"x).\")]\r\n                                    [gap :size \"1\"]\r\n                                    [p (str \"Performance data as of \" @(rf/subscribe [:attribution-date]) \". Risk data as of \" @(rf/subscribe [:qt-date]) \".\")]])))\r\n\r\n(defn ytd-performance []\r\n  (let [data @(rf/subscribe [:portfolio-review/historical-performance-chart-data])\r\n        monthmap {\"01\" \"Jan\" \"02\" \"Feb\" \"03\" \"Mar\" \"04\" \"Apr\" \"05\" \"May\" \"06\" \"Jun\"\r\n                  \"07\" \"Jul\" \"08\" \"Aug\" \"09\" \"Sep\" \"10\" \"Oct\" \"11\" \"Nov\" \"12\" \"Dec\"}\r\n        total-alpha (get-in @(rf/subscribe [:portfolio-review/summary-data]) [:ytd :alpha])\r\n        gamma (- total-alpha (reduce + (map :value (filter #(= (:group %) \"Total-Effect\") data))))]\r\n    (portfolio-review-box-template\r\n      [[h-box :gap \"20px\"\r\n        :children [[oz/vega-lite (grouped-vertical-bars\r\n                                   (sort-by (juxt :date (fn [x] (if (= (:group x) \"Index\") 2 1)))\r\n                                            (map (fn [line]\r\n                                                   (update line :group #({\"Fund-Contribution\"  @(rf/subscribe [:portfolio-review/portfolio])\r\n                                                                          \"Index-Contribution\" \"Index\"} %)))\r\n                                                 (remove #(= (:group %) \"Total-Effect\") data))) \"Basis points\")]\r\n                    [oz/vega-lite (vertical-waterfall\r\n                                    (concat\r\n                                      (map (fn [line] (update line :date #(monthmap (subs % 4 6))))\r\n                                           (filter #(= (:group %) \"Total-Effect\") data))\r\n                                      [{:date \"Gamma\" :group \"Total-Effect\" :value gamma}]) \"\")]]]])))\r\n\r\n(defn contribution-or-alpha-chart [data]\r\n  (portfolio-review-box-template\r\n    [[oz/vega-lite (grouped-horizontal-bars data \"Basis points\")]\r\n     [gap :size \"1\"]\r\n     [v-box :width \"100%\" :gap \"0px\" :align :end :children [[p {:style {:text-align \"right\" :z-index 500}} @(rf/subscribe [:attribution-date])]\r\n                                                 [p {:style {:text-align \"right\" :z-index 500}} \"UST categorized as cash\"]]]]))\r\n\r\n(defn historical-beta []\r\n  (portfolio-review-box-template [[oz/vega-lite (area-chart @(rf/subscribe [:portfolio-review/historical-beta-chart-data]))]]))\r\n\r\n(defn top-contributors []\r\n  (let [display (sort-by :Total-Effect\r\n                         (remove #(or (some #{(:Sector %)} [\"Total\"])\r\n                                      (and (= (:Sector %) \"Cash\") (some? (:Security %)) (not= \"T\" (subs (:Security %) 0 1))))\r\n                                 @(rf/subscribe [:single-portfolio-attribution/clean-table])))]\r\n    (portfolio-review-box-template\r\n      [[box :width \"850px\"\r\n        :child\r\n        [:> ReactTable\r\n         {:data                (take 20 (if (= (subs (get-in pages [@current-page :title]) 4 7) \"top\") (reverse display) display))\r\n          :defaultFilterMethod tables/case-insensitive-filter\r\n          :columns             [{:Header \"Bond  \" :columns (mapv tables/attribution-table-columns [:security :country :sector])}\r\n                                {:Header \"Effect\" :columns (mapv tables/attribution-table-columns [:total-effect])}\r\n                                {:Header \"Contribution\" :columns (mapv tables/attribution-table-columns [:contribution :bm-contribution])}\r\n                                {:Header \"Weight\" :columns (mapv tables/attribution-table-columns [:xs-weight :weight :bm-weight])}]\r\n          :showPagination      false\r\n          :sortable            false\r\n          :filterable          false\r\n          :pageSize            20\r\n          :className           \"-striped -highlight\"}]]])))\r\n\r\n(defn backtest-history []\r\n  (rf/dispatch [:get-portfolio-var @(rf/subscribe [:portfolio-review/portfolio])])\r\n  (rf/dispatch [:var/chart-period :daily-3y])\r\n  (let [dates @(rf/subscribe [:var/dates])\r\n        data @(rf/subscribe [:var/data])\r\n        chart-period @(rf/subscribe [:var/chart-period])\r\n        line (first (filter #(= (:id %) chart-period) static/var-charts-choice-map))\r\n        days (case (line :frequency) :daily (* (line :period) 250) :weekly (* (line :period) 52) :monthly (* (line :period) 12))]\r\n    (portfolio-review-box-template\r\n      [[oz/vega-lite (charting/backtest-chart\r\n                       (take-last days (get-in dates [(line :frequency)]))\r\n                       (take-last days (get-in data [:portfolio-value (line :frequency)]))\r\n                       (- standard-box-width-nb 200) (- standard-box-height-nb 400))]]) ))\r\n\r\n(defn risk-betas []\r\n  (let [data @(rf/subscribe [:portfolio-review/marginal-beta-chart-data])\r\n        groups (distinct (mapv :group data))\r\n        new-data (mapv #(assoc %1 :order (.indexOf groups (:group %1))) data)]\r\n    (portfolio-review-box-template [[oz/vega-lite (stacked-vertical-bars new-data \"Beta contribution\")]])))\r\n\r\n(defn risk-weights []\r\n  (let [g (second (get-in pages [@current-page :grouping]))\r\n        grouping (case g\r\n                   \"Region\" :jpm-region\r\n                   \"Country\" :qt-risk-country-name\r\n                   \"Sector\" :qt-jpm-sector\r\n                   \"RatingGroup\" :rating-group\r\n                   \"Duration Bucket\" :qt-final-maturity-band)\r\n        data (filter #(= (:portfolio %) @(rf/subscribe [:portfolio-review/portfolio])) @(rf/subscribe [:positions]))\r\n        totals (get-in @(rf/subscribe [:total-positions]) [(keyword @(rf/subscribe [:portfolio-review/portfolio]))])\r\n        grp (group-by grouping data)\r\n        risks [[\"weight\" :weight] [\"mod duration\" :contrib-mdur] [\"duration x spread\" :duration-times-spread-weight] [\"beta\" :contrib-beta-1y-daily]]\r\n        chart-data (into [] (for [[k g] grp r risks] {:group k :performance (first r) :value (* 100 (/ (reduce + (map (second r) g)) ((second r) totals)))}))\r\n        clean-data (case g\r\n                     \"Region\" (remove #(some #{(:group %)} [\"Collateral\" \"Forwards\" \"Equities\"]) chart-data)\r\n                     \"Country\" (let [top-countries (map :group (take-last 8 (sort-by #(Math/abs (:value %)) (filter (fn [x] (= (:performance x) \"weight\")) chart-data))))]\r\n                                 (sort-by :group (filter #(some #{(:group %)} top-countries) chart-data)))\r\n                     \"RatingGroup\" (remove #(some #{(:group %)} [\"08 C\" \"08 CC\" \"08 D\" \"09 NM\"]) chart-data)\r\n                     \"Sector\" (remove #(some #{(:group %)} [\"Collateral\" \"Forwards\" \"Equities\" \"Cash\" \"Corporate\"]) chart-data)\r\n                     chart-data\r\n                     )\r\n        clean-data-sorted (case g\r\n                            \"RatingGroup\" (map #(update % :group subs 3) (sort-by :group (reverse (sort-by :performance clean-data))))\r\n                            \"Duration Bucket\" (sort-by (fn [x] (.indexOf [\"0 - 1 year\" \"1 - 3 years\" \"3 - 5 years\" \"5 - 7 years\" \"7 - 10 years\" \"10 - 20 years\" \"20 years +\"] (:group x))) (reverse (sort-by :performance clean-data)))\r\n                            (sort-by :group (reverse (sort-by :performance clean-data)))\r\n                            )]\r\n    (portfolio-review-box-template [[oz/vega-lite (grouped-horizontal-bars clean-data-sorted \"Share of total risk\")]])))\r\n\r\n(defn risk-deltas []\r\n  (let [g (second (get-in pages [@current-page :grouping]))\r\n        grouping (case g\r\n                   \"Region\" :jpm-region\r\n                   \"Country\" :qt-risk-country-name\r\n                   \"Sector\" :qt-jpm-sector\r\n                   \"RatingGroup\" :rating-group\r\n                   \"Duration Bucket\" :qt-final-maturity-band)\r\n        data (filter #(= (:portfolio %) @(rf/subscribe [:portfolio-review/portfolio])) @(rf/subscribe [:positions]))\r\n        totals (get-in @(rf/subscribe [:total-positions]) [(keyword @(rf/subscribe [:portfolio-review/portfolio]))])\r\n        grp (group-by grouping data)\r\n        risks [[\"weight\" :weight-delta] [\"mod duration\" :mdur-delta] ]\r\n        chart-data (into [] (for [[k g] grp r risks] {:group k :performance (first r) :value (* (if (= (first r) \"weight\") 100. 1.) (reduce + (map (second r) g)))}))\r\n        clean-data (case g\r\n                     \"Region\" (remove #(some #{(:group %)} [\"Collateral\" \"Forwards\" \"Equities\"]) chart-data)\r\n                     \"Country\" (let [top-countries (map :group (take-last 8 (sort-by #(Math/abs (:value %)) (filter (fn [x] (= (:performance x) \"weight\")) chart-data))))]\r\n                                 (sort-by :group (filter #(some #{(:group %)} top-countries) chart-data)))\r\n                     \"RatingGroup\" (remove #(some #{(:group %)} [\"08 C\" \"08 CC\" \"08 D\" \"09 NM\"]) chart-data)\r\n                     \"Sector\" (remove #(some #{(:group %)} [\"Collateral\" \"Forwards\" \"Equities\" \"Cash\" \"Corporate\"]) chart-data)\r\n                     chart-data)\r\n        clean-data-sorted (case g\r\n                            \"RatingGroup\" (map #(update % :group subs 3) (sort-by :group (reverse (sort-by :performance clean-data))))\r\n                            \"Duration Bucket\" (sort-by (fn [x] (.indexOf [\"0 - 1 year\" \"1 - 3 years\" \"3 - 5 years\" \"5 - 7 years\" \"7 - 10 years\" \"10 - 20 years\" \"20 years +\"] (:group x))) (reverse (sort-by :performance clean-data)))\r\n                            (sort-by :group (reverse (sort-by :performance clean-data))))]\r\n    (portfolio-review-box-template\r\n      [[h-box :gap \"20px\"\r\n        :children [[oz/vega-lite (simple-horizontal-bars (filter #(= (:performance %) \"weight\") clean-data-sorted) \"Weight vs index\" \".0f\" 1.5)]\r\n                   [oz/vega-lite (simple-horizontal-bars (filter #(= (:performance %) \"mod duration\") clean-data-sorted) \"Duration vs index\" \".1f\" 2.0)]]]])))\r\n\r\n(defn risk []\r\n  (cond\r\n    (clojure.string/includes? (get-in pages [@current-page :title]) \"evolution\")  [historical-beta]\r\n    (clojure.string/includes? (get-in pages [@current-page :title]) \"weights\")    [risk-weights]\r\n    (clojure.string/includes? (get-in pages [@current-page :title]) \"beta\")       [risk-betas]\r\n    (clojure.string/includes? (get-in pages [@current-page :title]) \"deviation\")  [risk-deltas]\r\n    :else [p \"no data\"]))\r\n\r\n(defn active-home []\r\n  (let [active-tab @(rf/subscribe [:portfolio-review/active-tab])]\r\n    (.scrollTo js/window 0 0)                             ;on view change we go back to top\r\n    (case active-tab\r\n      :summary                       [summary-text]\r\n      :ytd-performance               [ytd-performance]\r\n      :contribution                  [contribution-or-alpha-chart @(rf/subscribe [:portfolio-review/contribution-chart-data])]\r\n      :alpha                         [contribution-or-alpha-chart @(rf/subscribe [:portfolio-review/alpha-chart-data])] ;(sort-by :group (reverse (sort-by :performance @(rf/subscribe [:portfolio-review/alpha-chart-data]))))\r\n      :top-bottom                    [top-contributors]\r\n      :jensen                        [contribution-or-alpha-chart @(rf/subscribe [:portfolio-review/jensen-chart-data])]\r\n      :backtest-history              [backtest-history]\r\n      :risk                          [risk]\r\n      :end                           [end]\r\n      [:div.output \"nothing to display\"])))\r\n\r\n(defn portfolio-change [portfolio]\r\n  (rf/dispatch [:portfolio-review/portfolio portfolio])\r\n  (rf/dispatch [:get-portfolio-review-summary-data portfolio]))\r\n\r\n(defn nav []\r\n  (let [active-tab @(rf/subscribe [:portfolio-review/active-tab])\r\n        portfolio-map (into [] (for [p @(rf/subscribe [:portfolios])] {:id p :label p}))\r\n        portfolio @(rf/subscribe [:portfolio-review/portfolio])]\r\n    [h-box\r\n     :children [[v-box\r\n                 :gap \"20px\"\r\n                 :class \"leftnavbar\"\r\n                 :children (into [\r\n                                  [h-box :children [[box    :child [button :style {:width \"90px\"} :class \"btn btn-primary btn-block\" :label \"Previous\" :on-click previous-page!]]\r\n                                                    [box :size \"1\" :align :center  :child [label :label (str (inc @current-page) \"/\" maximum-page) :style {:width \"70px\" :color \"white\" :text-align \"center\"}]]\r\n                                                    [box    :child [button :style {:width \"90px\"} :class \"btn btn-primary btn-block\" :label \"Next\"  :on-click next-page!]]]]\r\n                                  [line :color \"#CA3E47\" :class \"separatornavline\"]\r\n                                  [single-dropdown :width \"100%\" :model portfolio :choices portfolio-map :on-change portfolio-change]\r\n                                  [line :color \"#CA3E47\" :class \"separatornavline\"]]\r\n                                 (for [item portfolio-review-navigation]\r\n                                   [button\r\n                                    :class (str \"btn btn-primary btn-block\" (if (and (= active-tab (:code item))) \" active\"))\r\n                                    :label (:name item)\r\n                                    :on-click #(go-to-block! (:code item)) ;#(rf/dispatch [:portfolio-review/active-tab (:code item)])\r\n                                    ]))]]]))\r\n\r\n(defn view []\r\n  [h-box :gap \"10px\" :padding \"0px\" :children [[nav] [active-home]]])\r\n"]}