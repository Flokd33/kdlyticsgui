{
"version":3,
"file":"module$node_modules$$tanstack$table_core$build$lib$aggregationFns.js",
"lineCount":4,
"mappings":"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",
"sources":["node_modules/@tanstack/table-core/build/lib/aggregationFns.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$tanstack$table_core$build$lib$aggregationFns\"] = function(global,require,module,exports) {\n/**\n * table-core\n *\n * Copyright (c) TanStack\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar utils = require('./utils.js');\n\nconst sum = (columnId, _leafRows, childRows) => {\n  // It's faster to just add the aggregations together instead of\n  // process leaf nodes individually\n  return childRows.reduce((sum, next) => {\n    const nextValue = next.getValue(columnId);\n    return sum + (typeof nextValue === 'number' ? nextValue : 0);\n  }, 0);\n};\nconst min = (columnId, _leafRows, childRows) => {\n  let min;\n  childRows.forEach(row => {\n    const value = row.getValue(columnId);\n    if (value != null && (min > value || min === undefined && value >= value)) {\n      min = value;\n    }\n  });\n  return min;\n};\nconst max = (columnId, _leafRows, childRows) => {\n  let max;\n  childRows.forEach(row => {\n    const value = row.getValue(columnId);\n    if (value != null && (max < value || max === undefined && value >= value)) {\n      max = value;\n    }\n  });\n  return max;\n};\nconst extent = (columnId, _leafRows, childRows) => {\n  let min;\n  let max;\n  childRows.forEach(row => {\n    const value = row.getValue(columnId);\n    if (value != null) {\n      if (min === undefined) {\n        if (value >= value) min = max = value;\n      } else {\n        if (min > value) min = value;\n        if (max < value) max = value;\n      }\n    }\n  });\n  return [min, max];\n};\nconst mean = (columnId, leafRows) => {\n  let count = 0;\n  let sum = 0;\n  leafRows.forEach(row => {\n    let value = row.getValue(columnId);\n    if (value != null && (value = +value) >= value) {\n      ++count, sum += value;\n    }\n  });\n  if (count) return sum / count;\n  return;\n};\nconst median = (columnId, leafRows) => {\n  if (!leafRows.length) {\n    return;\n  }\n  const values = leafRows.map(row => row.getValue(columnId));\n  if (!utils.isNumberArray(values)) {\n    return;\n  }\n  if (values.length === 1) {\n    return values[0];\n  }\n  const mid = Math.floor(values.length / 2);\n  const nums = values.sort((a, b) => a - b);\n  return values.length % 2 !== 0 ? nums[mid] : (nums[mid - 1] + nums[mid]) / 2;\n};\nconst unique = (columnId, leafRows) => {\n  return Array.from(new Set(leafRows.map(d => d.getValue(columnId))).values());\n};\nconst uniqueCount = (columnId, leafRows) => {\n  return new Set(leafRows.map(d => d.getValue(columnId))).size;\n};\nconst count = (_columnId, leafRows) => {\n  return leafRows.length;\n};\nconst aggregationFns = {\n  sum,\n  min,\n  max,\n  extent,\n  mean,\n  median,\n  unique,\n  uniqueCount,\n  count\n};\n\nexports.aggregationFns = aggregationFns;\n//# sourceMappingURL=aggregationFns.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","utils","aggregationFns","sum","columnId","_leafRows","childRows","reduce","next","nextValue","getValue","min","forEach","row","undefined","max","extent","mean","leafRows","count","median","length","values","map","isNumberArray","mid","Math","floor","nums","sort","a","b","unique","Array","from","Set","d","uniqueCount","size","_columnId"]
}
