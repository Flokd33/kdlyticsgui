{
"version":3,
"file":"module$node_modules$$tanstack$table_core$build$lib$core$cell.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,CAAA,4DAAA,CAAiF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAazHC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAAEG,MAAO,CAAA,CAAT,CAA7C,CAEA,KAAIC,MAAQN,OAAA,CAAQ,0DAAR,CA+BZE,QAAQK,CAAAA,UAAR,CA7BAA,QAAmB,CAACC,cAAD,CAAQC,YAAR,CAAaC,eAAb,CAAqBC,QAArB,CAA+B,CAKhD,MAAMC,cAAO,CACXC,GAAK,GAAEJ,YAAII,CAAAA,EAAN,IAAYH,eAAOG,CAAAA,EAAnB,EADM,CAEXJ,IAAAA,YAFW,CAGXC,OAAAA,eAHW,CAIXI,SAAU,EAAAA,EAAML,YAAIK,CAAAA,QAAJ,CAAaH,QAAb,CAJL,CAKXI,YATqB,EAAAC,EAAM,CAC3B,IAAIC,cACJ;MAA6C,KAAtC,GAACA,cAAD,CAAkBL,aAAKE,CAAAA,QAAL,EAAlB,EAA6CG,cAA7C,CAA8DT,cAAMU,CAAAA,OAAQC,CAAAA,mBAFxD,CAIhB,CAMXC,WAAYd,KAAMe,CAAAA,IAAN,CAAW,EAAA,EAAM,CAACb,cAAD,CAAQE,eAAR,CAAgBD,YAAhB,CAAqBG,aAArB,CAAjB,CAA6C,CAACJ,KAAD,CAAQE,MAAR,CAAgBD,GAAhB,CAAqBG,IAArB,CAAA,EAA+B,EACtFJ,KADsF,CAEtFE,MAFsF,CAGtFD,GAHsF,CAIhFG,IAJgF,CAKtFE,SAAUF,IAAKE,CAAAA,QALuE,CAMtFC,YAAaH,IAAKG,CAAAA,WANoE,EAA5E,CAOR,CACFO,IAA+C,iBAD7C,CAEFC,MAAO,EAAAA,EAAMf,cAAMU,CAAAA,OAAQM,CAAAA,QAFzB,CAPQ,CAND,CAkBbhB,eAAMiB,CAAAA,SAAUC,CAAAA,OAAhB,CAAwBC,OAAA,EAAW,CACjCxB,MAAOyB,CAAAA,MAAP,CAAchB,aAAd,CAA0C,IAAtB,EAAAe,OAAQpB,CAAAA,UAAR,CAA6B,IAAK,EAAlC,CAAsCoB,OAAQpB,CAAAA,UAAR,CAAmBK,aAAnB;AAAyBF,eAAzB,CAAiCD,YAAjC,CAAsCD,cAAtC,CAA1D,CADiC,CAAnC,CAEG,EAFH,CAGA,OAAOI,cA1ByC,CAjBuE;",
"sources":["node_modules/@tanstack/table-core/build/lib/core/cell.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$tanstack$table_core$build$lib$core$cell\"] = function(global,require,module,exports) {\n/**\n * table-core\n *\n * Copyright (c) TanStack\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar utils = require('../utils.js');\n\nfunction createCell(table, row, column, columnId) {\n  const getRenderValue = () => {\n    var _cell$getValue;\n    return (_cell$getValue = cell.getValue()) != null ? _cell$getValue : table.options.renderFallbackValue;\n  };\n  const cell = {\n    id: `${row.id}_${column.id}`,\n    row,\n    column,\n    getValue: () => row.getValue(columnId),\n    renderValue: getRenderValue,\n    getContext: utils.memo(() => [table, column, row, cell], (table, column, row, cell) => ({\n      table,\n      column,\n      row,\n      cell: cell,\n      getValue: cell.getValue,\n      renderValue: cell.renderValue\n    }), {\n      key: process.env.NODE_ENV === 'development' && 'cell.getContext',\n      debug: () => table.options.debugAll\n    })\n  };\n  table._features.forEach(feature => {\n    Object.assign(cell, feature.createCell == null ? void 0 : feature.createCell(cell, column, row, table));\n  }, {});\n  return cell;\n}\n\nexports.createCell = createCell;\n//# sourceMappingURL=cell.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","utils","createCell","table","row","column","columnId","cell","id","getValue","renderValue","getRenderValue","_cell$getValue","options","renderFallbackValue","getContext","memo","key","debug","debugAll","_features","forEach","feature","assign"]
}
