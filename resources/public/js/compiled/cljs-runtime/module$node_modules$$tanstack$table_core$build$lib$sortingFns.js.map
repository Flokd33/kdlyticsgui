{
"version":3,
"file":"module$node_modules$$tanstack$table_core$build$lib$sortingFns.js",
"lineCount":4,
"mappings":"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",
"sources":["node_modules/@tanstack/table-core/build/lib/sortingFns.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$tanstack$table_core$build$lib$sortingFns\"] = function(global,require,module,exports) {\n/**\n * table-core\n *\n * Copyright (c) TanStack\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nconst reSplitAlphaNumeric = /([0-9]+)/gm;\nconst alphanumeric = (rowA, rowB, columnId) => {\n  return compareAlphanumeric(toString(rowA.getValue(columnId)).toLowerCase(), toString(rowB.getValue(columnId)).toLowerCase());\n};\nconst alphanumericCaseSensitive = (rowA, rowB, columnId) => {\n  return compareAlphanumeric(toString(rowA.getValue(columnId)), toString(rowB.getValue(columnId)));\n};\n\n// The text filter is more basic (less numeric support)\n// but is much faster\nconst text = (rowA, rowB, columnId) => {\n  return compareBasic(toString(rowA.getValue(columnId)).toLowerCase(), toString(rowB.getValue(columnId)).toLowerCase());\n};\n\n// The text filter is more basic (less numeric support)\n// but is much faster\nconst textCaseSensitive = (rowA, rowB, columnId) => {\n  return compareBasic(toString(rowA.getValue(columnId)), toString(rowB.getValue(columnId)));\n};\nconst datetime = (rowA, rowB, columnId) => {\n  const a = rowA.getValue(columnId);\n  const b = rowB.getValue(columnId);\n\n  // Can handle nullish values\n  // Use > and < because == (and ===) doesn't work with\n  // Date objects (would require calling getTime()).\n  return a > b ? 1 : a < b ? -1 : 0;\n};\nconst basic = (rowA, rowB, columnId) => {\n  return compareBasic(rowA.getValue(columnId), rowB.getValue(columnId));\n};\n\n// Utils\n\nfunction compareBasic(a, b) {\n  return a === b ? 0 : a > b ? 1 : -1;\n}\nfunction toString(a) {\n  if (typeof a === 'number') {\n    if (isNaN(a) || a === Infinity || a === -Infinity) {\n      return '';\n    }\n    return String(a);\n  }\n  if (typeof a === 'string') {\n    return a;\n  }\n  return '';\n}\n\n// Mixed sorting is slow, but very inclusive of many edge cases.\n// It handles numbers, mixed alphanumeric combinations, and even\n// null, undefined, and Infinity\nfunction compareAlphanumeric(aStr, bStr) {\n  // Split on number groups, but keep the delimiter\n  // Then remove falsey split values\n  const a = aStr.split(reSplitAlphaNumeric).filter(Boolean);\n  const b = bStr.split(reSplitAlphaNumeric).filter(Boolean);\n\n  // While\n  while (a.length && b.length) {\n    const aa = a.shift();\n    const bb = b.shift();\n    const an = parseInt(aa, 10);\n    const bn = parseInt(bb, 10);\n    const combo = [an, bn].sort();\n\n    // Both are string\n    if (isNaN(combo[0])) {\n      if (aa > bb) {\n        return 1;\n      }\n      if (bb > aa) {\n        return -1;\n      }\n      continue;\n    }\n\n    // One is a string, one is a number\n    if (isNaN(combo[1])) {\n      return isNaN(an) ? -1 : 1;\n    }\n\n    // Both are numbers\n    if (an > bn) {\n      return 1;\n    }\n    if (bn > an) {\n      return -1;\n    }\n  }\n  return a.length - b.length;\n}\n\n// Exports\n\nconst sortingFns = {\n  alphanumeric,\n  alphanumericCaseSensitive,\n  text,\n  textCaseSensitive,\n  datetime,\n  basic\n};\n\nexports.reSplitAlphaNumeric = reSplitAlphaNumeric;\nexports.sortingFns = sortingFns;\n//# sourceMappingURL=sortingFns.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","compareBasic","a","b","toString","isNaN","Infinity","String","compareAlphanumeric","aStr","bStr","split","reSplitAlphaNumeric","filter","Boolean","length","aa","shift","bb","an","parseInt","bn","combo","sort","Object","defineProperty","value","sortingFns","alphanumeric","rowA","rowB","columnId","getValue","toLowerCase","alphanumericCaseSensitive","text","textCaseSensitive","datetime","basic"]
}
