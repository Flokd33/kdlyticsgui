{
"version":3,
"file":"module$node_modules$base64_js$index.js",
"lineCount":5,
"mappings":"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",
"sources":["node_modules/base64-js/index.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$base64_js$index\"] = function(global,require,module,exports) {\n'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nconst lookup = []\nconst revLookup = []\nconst Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nconst code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (let i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  const len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  let validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  const placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  const lens = getLens(b64)\n  const validLen = lens[0]\n  const placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  let tmp\n  const lens = getLens(b64)\n  const validLen = lens[0]\n  const placeHoldersLen = lens[1]\n\n  const arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  let curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  const len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  let i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  let tmp\n  const output = []\n  for (let i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  let tmp\n  const len = uint8.length\n  const extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  const parts = []\n  const maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (let i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n\n};"],
"names":["shadow$provide","global","require","module","exports","getLens","b64","len","length","Error","validLen","indexOf","placeHoldersLen","byteLength","lens","toByteArray","arr","Arr","curByte","i","tmp","revLookup","charCodeAt","fromByteArray","uint8","extraBytes","parts","len2","maxChunkLength","push","output","start","end","lookup","join","Uint8Array","Array","code"]
}
