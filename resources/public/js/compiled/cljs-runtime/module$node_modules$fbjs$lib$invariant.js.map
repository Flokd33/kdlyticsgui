{
"version":3,
"file":"module$node_modules$fbjs$lib$invariant.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,uCAAA,CAA2D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAsBnG,IAAIC,eAAiBA,QAAuB,CAACC,MAAD,CAAS,EAGnDD,eAAA,CAAiBA,QAAuB,CAACC,MAAD,CAAS,CAC/C,GAAeC,IAAAA,EAAf,GAAID,MAAJ,CACE,KAAUE,MAAJ,CAAU,8CAAV,CAAN,CAF6C,CA4BnDL,OAAAC,QAAA,CArBAK,QAAkB,CAACC,SAAD,CAAYJ,MAAZ,CAAoBK,CAApB,CAAuBC,CAAvB,CAA0BC,CAA1B,CAA6BC,CAA7B,CAAgCC,CAAhC,CAAmCC,CAAnC,CAAsC,CACtDX,cAAA,CAAeC,MAAf,CAEA,IAAI,CAACI,SAAL,CAAgB,CAEd,GAAeH,IAAAA,EAAf,GAAID,MAAJ,CACEW,SAAA,CAAYT,KAAJ,CAAU,+HAAV,CADV;IAEO,CACL,IAAIU,KAAO,CAACP,CAAD,CAAIC,CAAJ,CAAOC,CAAP,CAAUC,CAAV,CAAaC,CAAb,CAAgBC,CAAhB,CAAX,CACIG,SAAW,CACfF,UAAA,CAAYT,KAAJ,CAAUF,MAAAc,QAAA,CAAe,KAAf,CAAsB,QAAS,EAAG,CAClD,MAAOF,KAAA,CAAKC,QAAA,EAAL,CAD2C,CAAlC,CAAV,CAGRF,UAAAI,KAAA,CAAa,qBANR,CASPJ,SAAAK,YAAA,CAAoB,CACpB,MAAML,UAAN,CAdc,CAHsC,CAhC2C;",
"sources":["node_modules/fbjs/lib/invariant.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$fbjs$lib$invariant\"] = function(global,require,module,exports) {\n/**\r\n * Copyright (c) 2013-present, Facebook, Inc.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n */\r\n\r\n'use strict';\r\n\r\n/**\r\n * Use invariant() to assert state which your program assumes to be true.\r\n *\r\n * Provide sprintf-style format (only %s is supported) and arguments\r\n * to provide information about what broke and what you were\r\n * expecting.\r\n *\r\n * The invariant message will be stripped in production, but the invariant\r\n * will remain to ensure logic does not differ in production.\r\n */\r\n\r\nvar validateFormat = function validateFormat(format) {};\r\n\r\nif (process.env.NODE_ENV !== 'production') {\r\n  validateFormat = function validateFormat(format) {\r\n    if (format === undefined) {\r\n      throw new Error('invariant requires an error message argument');\r\n    }\r\n  };\r\n}\r\n\r\nfunction invariant(condition, format, a, b, c, d, e, f) {\r\n  validateFormat(format);\r\n\r\n  if (!condition) {\r\n    var error;\r\n    if (format === undefined) {\r\n      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');\r\n    } else {\r\n      var args = [a, b, c, d, e, f];\r\n      var argIndex = 0;\r\n      error = new Error(format.replace(/%s/g, function () {\r\n        return args[argIndex++];\r\n      }));\r\n      error.name = 'Invariant Violation';\r\n    }\r\n\r\n    error.framesToPop = 1; // we don't care about invariant's own frame\r\n    throw error;\r\n  }\r\n}\r\n\r\nmodule.exports = invariant;\n};"],
"names":["shadow$provide","global","require","module","exports","validateFormat","format","undefined","Error","invariant","condition","a","b","c","d","e","f","error","args","argIndex","replace","name","framesToPop"]
}
