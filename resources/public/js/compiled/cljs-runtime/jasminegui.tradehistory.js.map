{"version":3,"sources":["jasminegui/tradehistory.cljs"],"mappings":"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","names":["jasminegui.tradehistory/subs10","this","reagent.core/as-element","temp__5733__auto__","x","cljs.core.subs.cljs$core$IFn$_invoke$arity$3","jasminegui.tradehistory/nfh","jasminegui.tables/nf","jasminegui.tradehistory/facet-trade-history-chart","cljs.core/deref","data","G__72675","re-frame.core/subscribe","ymin","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/min","cljs.core.remove.cljs$core$IFn$_invoke$arity$2","cljs.core/nil?","cljs.core.map.cljs$core$IFn$_invoke$arity$2","ymax","cljs.core/max","re_frame.core.reg_event_db.cljs$core$IFn$_invoke$arity$2","p__72678","vec__72680","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","db","_","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","G__72693","G__72694","re-frame.core/reg-sub","portfolio","G__72695","name","G__72696","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","cljs.core.comp.cljs$core$IFn$_invoke$arity$2","cljs.core/some?","G__72699","trade-data","cljs.core/reverse","p1__72687#","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","G__72707","cljs.core.keyword.cljs$core$IFn$_invoke$arity$1","buys","cljs.core.into.cljs$core$IFn$_invoke$arity$2","iter__4529__auto__","s__72709","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","cljs.core/count","b__72711","cljs.core/chunk-buffer","i__72710","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__72708","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","line","cljs.core/pos?","clojure.string/replace","sells","s__72736","b__72738","i__72737","iter__72735","cljs.core/neg?","all-data","cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic","bydate","cljs.core.sort_by.cljs$core$IFn$_invoke$arity$2","cljs.core.partial.cljs$core$IFn$_invoke$arity$2","cljs.core/apply","cljs.core/merge","cljs.core/vals","cljs.core/group-by","pos-line","p1__72688#","G__72753","nav","fund-nav","rbydate","p1__72689#","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","rwchange","p1__72690#","p2__72691#","cljs.core.map.cljs$core$IFn$_invoke$arity$3","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","cljs.core.drop_last.cljs$core$IFn$_invoke$arity$1","cljs.core.reductions.cljs$core$IFn$_invoke$arity$2","cljs.core/+","final","p1__72692#","cljs.core.update.cljs$core$IFn$_invoke$arity$4","cljs.core/*","jasminegui.tradehistory/modal-single-bond-trade-history","modal-data","G__72758","G__72759","show-modal","G__72760","display","p1__72756#","G__72761","re-com.core/modal-panel","G__72762","re-frame.core/dispatch","re-com.core/v-box","re-com.core/h-box","re-com.core/title","G__72764","re-com.core/md-circle-icon-button","jasminegui.tools.csv_link.cljs$core$IFn$_invoke$arity$2","G__72765","re-com.core/box","re-com.core/throbber","js/module$node_modules$react_table$lib$index.default","jasminegui.tables/round2","oz.core/vega-lite","jasminegui.tradehistory/modal-single-bond-flat-trade-history","G__72773","G__72775","bond-name","G__72776","p1__72768#","cljs.core/some","G__72780","jasminegui.tools.csv_link.cljs$core$IFn$_invoke$arity$3","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","cljs.core/keyword","G__72782","G__72784","s__72787","b__72789","i__72788","iter__72786","p","G__72799","cljs.core/chunk-first"],"sourcesContent":["(ns jasminegui.tradehistory\r\n  (:require\r\n    ; [oz.core :as oz]\r\n    [re-frame.core :as rf]\r\n    [reagent.core :as r]\r\n    [goog.string :as gstring]\r\n    [goog.string.format]\r\n    [re-com.core :refer [p p-span h-box v-box box gap line scroller border label title button close-button checkbox hyperlink-href slider horizontal-bar-tabs radio-button info-button\r\n                         single-dropdown hyperlink modal-panel alert-box throbber input-password selection-list md-circle-icon-button\r\n                         input-text input-textarea popover-anchor-wrapper popover-content-wrapper popover-tooltip datepicker-dropdown] :refer-macros [handler-fn]]\r\n    [re-com.box :refer [h-box-args-desc v-box-args-desc box-args-desc gap-args-desc line-args-desc scroller-args-desc border-args-desc flex-child-style]]\r\n    [re-com.util :refer [px]]\r\n    [jasminegui.mount :as mount]\r\n    [jasminegui.static :as static]\r\n    [\"react-table\" :as rt :default ReactTable]\r\n    [re-com.validate :refer [string-or-hiccup? alert-type? vector-of-maps?]]\r\n    [jasminegui.tables :as tables]\r\n    [jasminegui.tools :as tools]\r\n    [oz.core :as oz])\r\n  )\r\n\r\n\r\n\r\n(defn subs10 [this]\r\n  (r/as-element\r\n    (if-let [x (aget this \"value\")]\r\n      [:div  (subs x 0 10)]\r\n      \"-\")))\r\n\r\n(defn nfh [this]\r\n  (r/as-element\r\n    (if-let [x (aget this \"value\")]\r\n      [:div  (tables/nf x)]\r\n      \"\")))\r\n\r\n\r\n(defn facet-trade-history-chart []\r\n  (let [data @(rf/subscribe [:single-bond-trade-history/chart-data])\r\n        ymin (* 0.99 (apply min (remove nil? (map :price data))))\r\n        ymax (* 1.01 (apply max (remove nil? (map :price data))))]\r\n    {:$schema \"https://vega.github.io/schema/vega-lite/v4.json\",\r\n     :title   nil                                           ;(str @(rf/subscribe [:single-bond-trade-history/bond]) \" trading history\")\r\n     :data    {:values data :format {:parse {:date \"date:'%Y%m%d'\" :price \"quantitative\" :buy \"quantitative\" :sell \"quantitative\"}}}\r\n     :vconcat [{:layer\r\n                [{:mark     \"line\",\r\n                  :width 600\r\n                  :height 400\r\n                  :encoding {:x {:field \"date\" :type \"temporal\" :axis {:format \"%b-%y\", :labelFontSize 10 :title nil}}\r\n                             :y {:field \"price\" :type \"quantitative\" :scale {:domain [ymin ymax]} :axis {:title \"Price\"}}\r\n                             }}\r\n                 {:mark     {:type \"point\", :shape \"triangle-up\", :color \"green\"}\r\n                  :encoding {:x {:field \"date\" :type \"temporal\" :axis {:format \"%b-%y\", :labelFontSize 10 :title nil}}\r\n                             :y {:field \"buy\" :type \"quantitative\" :scale {:domain [ymin ymax]} :axis {:title nil}}}}\r\n                 {:mark     {:type \"point\", :shape \"triangle-down\", :color \"red\"}\r\n                  :encoding {:x {:field \"date\" :type \"temporal\" :axis {:format \"%b-%y\", :labelFontSize 10 :title nil}}\r\n                             :y {:field \"sell\" :type \"quantitative\" :scale {:domain [ymin ymax]} :axis {:title nil}}}}\r\n\r\n                 ]}\r\n               {:mark     \"line\",\r\n                :height   200\r\n                :width    600\r\n                :encoding {:x {:field \"date\" :type \"temporal\" :axis {:format \"%b-%y\", :labelFontSize 10 :title nil}}\r\n                           :y {:field \"nav\" :type \"quantitative\" :scale {:domain [0 (int (inc (apply max (remove nil? (map :nav data)))))]} :axis {:title \"NAV %\"}}\r\n                           }}\r\n               ]}))\r\n\r\n(rf/reg-event-db\r\n  :single-bond-trade-history/close-modal\r\n  (fn [db [_]]\r\n    (assoc db :single-bond-trade-history/bond nil\r\n              :single-bond-trade-history/data []\r\n              :single-bond-trade-history/flat-data []\r\n              :single-bond-trade-history/show-modal false\r\n              :single-bond-trade-history/show-flat-modal false)))\r\n\r\n(rf/reg-sub\r\n  :single-bond-trade-history/chart-data\r\n  (fn [db]\r\n    (let [portfolio (db :single-portfolio-risk/portfolio)\r\n          name (db :bond-price-history/name)\r\n          data (filter (comp some? :price) (db :bond-price-history/price))\r\n          trade-data (reverse (remove #(= (:TransactionTypeName %) \"Coupon Payment\") (get-in (db :single-bond-trade-history/data) [(keyword portfolio)])))\r\n          buys (into [] (for [line (filter (comp pos? :Quantity) trade-data)] {:date (clojure.string/replace (subs (:TradeDate line) 0 10) \"-\" \"\") :buy (:PriceLcl line) :value (* 0.01 (:PriceLcl line) (:Quantity line))}))\r\n          sells (into [] (for [line (filter (comp neg? :Quantity) trade-data)] {:date (clojure.string/replace (subs (:TradeDate line) 0 10) \"-\" \"\") :sell  (:PriceLcl line) :value (* 0.01 (:PriceLcl line) (:Quantity line))}))\r\n          all-data (concat data buys sells)\r\n          bydate (sort-by :date (map (partial apply merge) (vals (group-by :date all-data))))\r\n          pos-line (first (filter #(and (= (:NAME %) name) (= (:portfolio %) portfolio)) (db :positions)))\r\n          nav (:weight pos-line)\r\n          fund-nav (/ (:local-value pos-line) nav)\r\n          rbydate (map #(assoc % :trade-nav (if-let [x (:value %)] (/ x fund-nav) 0.0)) (reverse bydate))\r\n          rwchange (reverse (map #(assoc %1 :nav (- nav %2)) rbydate (conj (drop-last (reductions + (map :trade-nav rbydate))) 0))) ;here we put a zero *at the beginning*\r\n          final (map #(update % :nav * 100) rwchange)]\r\n      final)))\r\n\r\n(defn modal-single-bond-trade-history []\r\n  (let [\r\n        modal-data (get-in @(rf/subscribe [:single-bond-trade-history/data]) [(keyword @(rf/subscribe [:single-portfolio-risk/portfolio]))])\r\n        show-modal @(rf/subscribe [:single-bond-trade-history/show-modal])\r\n        display (reverse (remove #(= (:TransactionTypeName %) \"Coupon Payment\") modal-data))]\r\n    @(rf/subscribe [:single-bond-trade-history/chart-data])\r\n\r\n    (if show-modal\r\n\r\n      [modal-panel\r\n       :wrap-nicely? true\r\n       :backdrop-on-click #(rf/dispatch [:single-bond-trade-history/close-modal])\r\n       :child\r\n       [v-box :gap \"10px\"\r\n        :children [\r\n                   [h-box :gap \"20px\" :align :center\r\n                    :children [\r\n                               [title :label (str @(rf/subscribe [:single-bond-trade-history/bond]) \" trades since 2019-01-01\") :level :level2]\r\n                               [md-circle-icon-button :md-icon-name \"zmdi-download\" :on-click #(tools/csv-link display \"trade-history\")]]]\r\n                   (if @(rf/subscribe [:single-bond-trade-history/show-throbber])\r\n                     [box :align :center :child [throbber :size :large]]\r\n                     [h-box :gap \"20px\" :children [\r\n                                                   [v-box :children [[:> ReactTable\r\n                                                                      {:data           display\r\n                                                                       :columns        [{:Header \"Date\" :accessor \"TradeDate\" :width 100 :Cell subs10}\r\n                                                                                        {:Header \"Type\" :accessor \"TransactionTypeName\" :width 100}\r\n                                                                                        {:Header \"Notional\" :accessor \"Quantity\" :width 100 :style {:textAlign \"right\"} :Cell nfh}\r\n                                                                                        {:Header \"Price\" :accessor \"PriceLcl\" :width 100 :style {:textAlign \"right\"} :Cell tables/round2}\r\n                                                                                        {:Header \"Counterparty\" :accessor \"counterparty_code\" :width 100}\r\n                                                                                        ]\r\n                                                                       :showPagination false\r\n                                                                       :pageSize       (count display)\r\n                                                                       :className      \"-striped -highlight\"}]]]\r\n                                                   [oz/vega-lite (facet-trade-history-chart)]]])]]])))\r\n\r\n;(tools/download-object-as-csv (clj->js (tools/vector-of-maps->csv data)) (str filename \".csv\"))\r\n;[title :label \"Download:\" :level :level3]\r\n;[md-circle-icon-button :md-icon-name \"zmdi-download\" :on-click #(csv-link @(rf/subscribe [:single-portfolio-risk/table]) @portfolio)]]))]]]]]\r\n\r\n(defn modal-single-bond-flat-trade-history []\r\n  (let [\r\n        modal-data @(rf/subscribe [:single-bond-trade-history/flat-data])\r\n        show-modal @(rf/subscribe [:single-bond-trade-history/show-flat-modal])\r\n        bond-name @(rf/subscribe [:single-bond-trade-history/bond])\r\n        display (reverse (sort-by :date (remove #(some #{(:trade %)} [\"Coupon Payment\" \"Scrip Transfer\"]) modal-data)))]\r\n    ;(println modal-data)\r\n    (if show-modal\r\n\r\n      [modal-panel\r\n       :wrap-nicely? true\r\n       :backdrop-on-click #(rf/dispatch [:single-bond-trade-history/close-modal])\r\n       :child\r\n       [v-box :gap \"20px\"\r\n        :children [[h-box :gap \"20px\" :align :center\r\n                    :children [[title :label (str bond-name \" trades since 2019-01-01\") :level :level2]\r\n                               [md-circle-icon-button :md-icon-name \"zmdi-download\" :on-click #(tools/csv-link display (str bond-name \"-trade-history\") (concat [:date :trade :price] (map keyword @(rf/subscribe [:portfolios]))))]]]\r\n                               (if @(rf/subscribe [:single-bond-trade-history/show-throbber])\r\n                                 [box :align :center :child [throbber :size :large]]\r\n                                 [:> ReactTable\r\n                                  {:data           display\r\n                                   :columns        [{:Header \"Date\" :accessor \"date\" :width 100}\r\n                                                    {:Header \"Type\" :accessor \"trade\" :width 75}\r\n                                                    {:Header \"Price\" :accessor \"price\" :width 70 :style {:textAlign \"right\"} :Cell tables/round2}\r\n                                                    {:Header \"Portfolio\" :columns (into []\r\n                                                                                        (for [p @(rf/subscribe [:portfolios])]\r\n                                                                                          {:Header p :accessor p :width 90 :style {:textAlign \"right\"} :Cell nfh}))}\r\n                                                    ]\r\n                                   :showPagination false\r\n                                   :pageSize       (count display)\r\n                                   :className      \"-striped -highlight\"}])]]])))"]}